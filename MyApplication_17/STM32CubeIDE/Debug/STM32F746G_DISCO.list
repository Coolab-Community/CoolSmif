
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000259ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005ab8  08025b7c  08025b7c  00035b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b634  0802b634  004ee124  2**0
                  CONTENTS
  4 .ARM          00000008  0802b634  0802b634  0003b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b63c  0802b63c  004ee124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802b63c  0802b63c  0003b63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0802b650  0802b650  0003b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0802b658  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c1b4  2000011c  0802b774  0004011c  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  2000c2d0  0802b774  0004c2d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  004ee124  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00488a34  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 000155d0  90488a34  90488a34  004d8a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000120  9049e004  9049e004  004ee004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00072c6f  00000000  00000000  004ee154  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00011149  00000000  00000000  00560dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004770  00000000  00000000  00571f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004080  00000000  00000000  00576680  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00039859  00000000  00000000  0057a700  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00046b28  00000000  00000000  005b3f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00115d5a  00000000  00000000  005faa81  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  007107db  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000131c8  00000000  00000000  007108d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stab         000000cc  00000000  00000000  00723aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  00723b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000011c 	.word	0x2000011c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025b64 	.word	0x08025b64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000120 	.word	0x20000120
 800020c:	08025b64 	.word	0x08025b64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Uart_Task>:
uint32_t count=0;
uint16_t newLine=0;
__IO ITStatus UartReady = RESET;

void Uart_Task (const void * argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	int i;

	// usart mail queue
	mail = osMailCreate(osMailQ(mail), NULL);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4869      	ldr	r0, [pc, #420]	; (8000760 <Uart_Task+0x1b0>)
 80005bc:	f010 fd8e 	bl	80110dc <osMailCreate>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b68      	ldr	r3, [pc, #416]	; (8000764 <Uart_Task+0x1b4>)
 80005c4:	601a      	str	r2, [r3, #0]
	mptr = osMailAlloc(mail, osWaitForever);	// Allocate memory
 80005c6:	4b67      	ldr	r3, [pc, #412]	; (8000764 <Uart_Task+0x1b4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f04f 31ff 	mov.w	r1, #4294967295
 80005ce:	4618      	mov	r0, r3
 80005d0:	f010 fddc 	bl	801118c <osMailAlloc>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <Uart_Task+0x1b8>)
 80005d8:	601a      	str	r2, [r3, #0]
	osMailPut(mail, mptr);
 80005da:	4b62      	ldr	r3, [pc, #392]	; (8000764 <Uart_Task+0x1b4>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b62      	ldr	r3, [pc, #392]	; (8000768 <Uart_Task+0x1b8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f010 fde7 	bl	80111b8 <osMailPut>

	while(1)
	{

		if(UartReady == SET)
 80005ea:	4b60      	ldr	r3, [pc, #384]	; (800076c <Uart_Task+0x1bc>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1fa      	bne.n	80005ea <Uart_Task+0x3a>
		{
			if(xrecvdData[0] == '\r')
 80005f4:	4b5e      	ldr	r3, [pc, #376]	; (8000770 <Uart_Task+0x1c0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b0d      	cmp	r3, #13
 80005fa:	f040 8093 	bne.w	8000724 <Uart_Task+0x174>
			{
				mptr = osMailAlloc(mail, osWaitForever);       // Allocate memory
 80005fe:	4b59      	ldr	r3, [pc, #356]	; (8000764 <Uart_Task+0x1b4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f04f 31ff 	mov.w	r1, #4294967295
 8000606:	4618      	mov	r0, r3
 8000608:	f010 fdc0 	bl	801118c <osMailAlloc>
 800060c:	4602      	mov	r2, r0
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <Uart_Task+0x1b8>)
 8000610:	601a      	str	r2, [r3, #0]
				mptr->data[count++]= '\n';
 8000612:	4b55      	ldr	r3, [pc, #340]	; (8000768 <Uart_Task+0x1b8>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b57      	ldr	r3, [pc, #348]	; (8000774 <Uart_Task+0x1c4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c59      	adds	r1, r3, #1
 800061c:	4855      	ldr	r0, [pc, #340]	; (8000774 <Uart_Task+0x1c4>)
 800061e:	6001      	str	r1, [r0, #0]
 8000620:	4413      	add	r3, r2
 8000622:	220a      	movs	r2, #10
 8000624:	721a      	strb	r2, [r3, #8]
				osMailPut(mail, mptr);
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <Uart_Task+0x1b4>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <Uart_Task+0x1b8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	4610      	mov	r0, r2
 8000632:	f010 fdc1 	bl	80111b8 <osMailPut>
				newLine++;
 8000636:	4b50      	ldr	r3, [pc, #320]	; (8000778 <Uart_Task+0x1c8>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <Uart_Task+0x1c8>)
 8000640:	801a      	strh	r2, [r3, #0]
				tempData[0] = mptr->data[count-18];
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <Uart_Task+0x1b8>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <Uart_Task+0x1c4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3b12      	subs	r3, #18
 800064c:	4413      	add	r3, r2
 800064e:	7a1a      	ldrb	r2, [r3, #8]
 8000650:	4b4a      	ldr	r3, [pc, #296]	; (800077c <Uart_Task+0x1cc>)
 8000652:	701a      	strb	r2, [r3, #0]
				tempData[1] = mptr->data[count-19];
 8000654:	4b44      	ldr	r3, [pc, #272]	; (8000768 <Uart_Task+0x1b8>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <Uart_Task+0x1c4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b13      	subs	r3, #19
 800065e:	4413      	add	r3, r2
 8000660:	7a1a      	ldrb	r2, [r3, #8]
 8000662:	4b46      	ldr	r3, [pc, #280]	; (800077c <Uart_Task+0x1cc>)
 8000664:	705a      	strb	r2, [r3, #1]
				tempData[2] = mptr->data[count-20];
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <Uart_Task+0x1b8>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b42      	ldr	r3, [pc, #264]	; (8000774 <Uart_Task+0x1c4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3b14      	subs	r3, #20
 8000670:	4413      	add	r3, r2
 8000672:	7a1a      	ldrb	r2, [r3, #8]
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <Uart_Task+0x1cc>)
 8000676:	709a      	strb	r2, [r3, #2]

				for(i=0; i<3; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	e04e      	b.n	800071c <Uart_Task+0x16c>
				{
					if(tempData[i] == '\n')
 800067e:	4a3f      	ldr	r2, [pc, #252]	; (800077c <Uart_Task+0x1cc>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b0a      	cmp	r3, #10
 8000688:	d145      	bne.n	8000716 <Uart_Task+0x166>
					{
						switch (i)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00e      	beq.n	80006ae <Uart_Task+0xfe>
 8000690:	2b02      	cmp	r3, #2
 8000692:	d01f      	beq.n	80006d4 <Uart_Task+0x124>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d000      	beq.n	800069a <Uart_Task+0xea>
						    	storeData[1] = mptr->data[count-8];
						    	storeData[2] = mptr->data[count-7];
						    	//HAL_UART_Transmit(&huart1, (uint8_t *)storeData, 3, HAL_MAX_DELAY);
						        break;
						      default:
						    break;
 8000698:	e038      	b.n	800070c <Uart_Task+0x15c>
								storeData[0] = mptr->data[count-7];
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <Uart_Task+0x1b8>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b35      	ldr	r3, [pc, #212]	; (8000774 <Uart_Task+0x1c4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b07      	subs	r3, #7
 80006a4:	4413      	add	r3, r2
 80006a6:	7a1a      	ldrb	r2, [r3, #8]
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <Uart_Task+0x1d0>)
 80006aa:	701a      	strb	r2, [r3, #0]
						        break;
 80006ac:	e02e      	b.n	800070c <Uart_Task+0x15c>
						    	storeData[0] = mptr->data[count-8];
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <Uart_Task+0x1b8>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <Uart_Task+0x1c4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3b08      	subs	r3, #8
 80006b8:	4413      	add	r3, r2
 80006ba:	7a1a      	ldrb	r2, [r3, #8]
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <Uart_Task+0x1d0>)
 80006be:	701a      	strb	r2, [r3, #0]
						    	storeData[1] = mptr->data[count-7];
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <Uart_Task+0x1b8>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <Uart_Task+0x1c4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3b07      	subs	r3, #7
 80006ca:	4413      	add	r3, r2
 80006cc:	7a1a      	ldrb	r2, [r3, #8]
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <Uart_Task+0x1d0>)
 80006d0:	705a      	strb	r2, [r3, #1]
						        break;
 80006d2:	e01b      	b.n	800070c <Uart_Task+0x15c>
						    	storeData[0] = mptr->data[count-9];
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <Uart_Task+0x1b8>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <Uart_Task+0x1c4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3b09      	subs	r3, #9
 80006de:	4413      	add	r3, r2
 80006e0:	7a1a      	ldrb	r2, [r3, #8]
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <Uart_Task+0x1d0>)
 80006e4:	701a      	strb	r2, [r3, #0]
						    	storeData[1] = mptr->data[count-8];
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <Uart_Task+0x1b8>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <Uart_Task+0x1c4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3b08      	subs	r3, #8
 80006f0:	4413      	add	r3, r2
 80006f2:	7a1a      	ldrb	r2, [r3, #8]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <Uart_Task+0x1d0>)
 80006f6:	705a      	strb	r2, [r3, #1]
						    	storeData[2] = mptr->data[count-7];
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <Uart_Task+0x1b8>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <Uart_Task+0x1c4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3b07      	subs	r3, #7
 8000702:	4413      	add	r3, r2
 8000704:	7a1a      	ldrb	r2, [r3, #8]
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <Uart_Task+0x1d0>)
 8000708:	709a      	strb	r2, [r3, #2]
						        break;
 800070a:	bf00      	nop
						}
						tempData[i] = 'n';
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <Uart_Task+0x1cc>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	226e      	movs	r2, #110	; 0x6e
 8000714:	701a      	strb	r2, [r3, #0]
				for(i=0; i<3; i++)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b02      	cmp	r3, #2
 8000720:	ddad      	ble.n	800067e <Uart_Task+0xce>
 8000722:	e00b      	b.n	800073c <Uart_Task+0x18c>
					}
				}
			}
			else
			{
				mptr->data[count++] = xrecvdData[0];
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <Uart_Task+0x1b8>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <Uart_Task+0x1c4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1c59      	adds	r1, r3, #1
 800072e:	4811      	ldr	r0, [pc, #68]	; (8000774 <Uart_Task+0x1c4>)
 8000730:	6001      	str	r1, [r0, #0]
 8000732:	490f      	ldr	r1, [pc, #60]	; (8000770 <Uart_Task+0x1c0>)
 8000734:	7809      	ldrb	r1, [r1, #0]
 8000736:	4413      	add	r3, r2
 8000738:	460a      	mov	r2, r1
 800073a:	721a      	strb	r2, [r3, #8]
			}
			//here add managment of array size if count > XX the error code string can be cut
			if (newLine == 5)
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <Uart_Task+0x1c8>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	2b05      	cmp	r3, #5
 8000742:	d109      	bne.n	8000758 <Uart_Task+0x1a8>
			{
				mptr->data[0]= '\n';
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <Uart_Task+0x1b8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	220a      	movs	r2, #10
 800074a:	721a      	strb	r2, [r3, #8]
				count = 1;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <Uart_Task+0x1c4>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
				newLine = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <Uart_Task+0x1c8>)
 8000754:	2200      	movs	r2, #0
 8000756:	801a      	strh	r2, [r3, #0]
			}
			UartReady = RESET;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <Uart_Task+0x1bc>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
		if(UartReady == SET)
 800075e:	e744      	b.n	80005ea <Uart_Task+0x3a>
 8000760:	08026598 	.word	0x08026598
 8000764:	2000bdc4 	.word	0x2000bdc4
 8000768:	2000bdc8 	.word	0x2000bdc8
 800076c:	2000013e 	.word	0x2000013e
 8000770:	2000be68 	.word	0x2000be68
 8000774:	20000138 	.word	0x20000138
 8000778:	2000013c 	.word	0x2000013c
 800077c:	2000bdcc 	.word	0x2000bdcc
 8000780:	2000bdbc 	.word	0x2000bdbc

08000784 <HAL_UART_RxCpltCallback>:
		}
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
		UartReady = SET;
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <HAL_UART_RxCpltCallback+0x1c>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	2000013e 	.word	0x2000013e

080007a4 <I2C_Task>:
/* Buffer used for reception */
uint8_t aRxBuffer[RXBUFFERSIZE];


void I2C_Task (const void * argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	{

		/* The board receives the message and sends it back */

		  /*##-2- Put I2C peripheral in reception process ###########################*/
		  if(HAL_I2C_Slave_Receive_DMA(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80007ac:	2296      	movs	r2, #150	; 0x96
 80007ae:	4911      	ldr	r1, [pc, #68]	; (80007f4 <I2C_Task+0x50>)
 80007b0:	4811      	ldr	r0, [pc, #68]	; (80007f8 <I2C_Task+0x54>)
 80007b2:	f00b f9b1 	bl	800bb18 <HAL_I2C_Slave_Receive_DMA>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <I2C_Task+0x1c>
		  {
		    /* Transfer error in reception process */
		    Error_Handler();
 80007bc:	f001 f804 	bl	80017c8 <Error_Handler>
		  }

		  /*##-3- Wait for the end of the transfer ###################################*/
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80007c0:	bf00      	nop
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <I2C_Task+0x54>)
 80007c4:	f00b fd0e 	bl	800c1e4 <HAL_I2C_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b20      	cmp	r3, #32
 80007cc:	d1f9      	bne.n	80007c2 <I2C_Task+0x1e>
		  {
		  }

		  /*##-4- Start the transmission process #####################################*/
		  if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, (uint8_t*)storeData, 3)!= HAL_OK)
 80007ce:	2203      	movs	r2, #3
 80007d0:	490a      	ldr	r1, [pc, #40]	; (80007fc <I2C_Task+0x58>)
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <I2C_Task+0x54>)
 80007d4:	f00b f8ea 	bl	800b9ac <HAL_I2C_Slave_Transmit_DMA>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <I2C_Task+0x3e>
		  //if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 80007de:	f000 fff3 	bl	80017c8 <Error_Handler>
		  }


		  /*##-5- Wait for the end of the transfer ###################################*/
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80007e2:	bf00      	nop
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <I2C_Task+0x54>)
 80007e6:	f00b fcfd 	bl	800c1e4 <HAL_I2C_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d1f9      	bne.n	80007e4 <I2C_Task+0x40>
		  if(HAL_I2C_Slave_Receive_DMA(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80007f0:	e7dc      	b.n	80007ac <I2C_Task+0x8>
 80007f2:	bf00      	nop
 80007f4:	2000bdd0 	.word	0x2000bdd0
 80007f8:	2000bf18 	.word	0x2000bf18
 80007fc:	2000bdbc 	.word	0x2000bdbc

08000800 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800083c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <SCB_EnableICache+0x3c>)
 8000842:	2200      	movs	r2, #0
 8000844:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <SCB_EnableICache+0x3c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <SCB_EnableICache+0x3c>)
 8000856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800085c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <SCB_EnableDCache+0x7c>)
 800087c:	2200      	movs	r2, #0
 800087e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000882:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <SCB_EnableDCache+0x7c>)
 8000888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800088c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	0b5b      	lsrs	r3, r3, #13
 8000892:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000896:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008a0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	015a      	lsls	r2, r3, #5
 80008a6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008b0:	490f      	ldr	r1, [pc, #60]	; (80008f0 <SCB_EnableDCache+0x7c>)
 80008b2:	4313      	orrs	r3, r2
 80008b4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ef      	bne.n	80008a2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	60fa      	str	r2, [r7, #12]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1e5      	bne.n	8000898 <SCB_EnableDCache+0x24>
 80008cc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <SCB_EnableDCache+0x7c>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <SCB_EnableDCache+0x7c>)
 80008d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008da:	6153      	str	r3, [r2, #20]
 80008dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	b090      	sub	sp, #64	; 0x40
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008fa:	f000 ff0b 	bl	8001714 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80008fe:	f7ff ff99 	bl	8000834 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000902:	f7ff ffb7 	bl	8000874 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f009 f987 	bl	8009c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f85f 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fba1 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000912:	f000 fab9 	bl	8000e88 <MX_DMA_Init>
  MX_CRC_Init();
 8000916:	f000 f8fd 	bl	8000b14 <MX_CRC_Init>
  MX_QUADSPI_Init();
 800091a:	f000 fa51 	bl	8000dc0 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 800091e:	f000 f91b 	bl	8000b58 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000922:	f000 faeb 	bl	8000efc <MX_FMC_Init>
  MX_LTDC_Init();
 8000926:	f000 f9c9 	bl	8000cbc <MX_LTDC_Init>
  MX_I2C3_Init();
 800092a:	f000 f987 	bl	8000c3c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800092e:	f000 fa7b 	bl	8000e28 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000932:	f000 f943 	bl	8000bbc <MX_I2C1_Init>
  MX_TouchGFX_Init();
 8000936:	f001 fc6d 	bl	8002214 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)xrecvdData, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	491b      	ldr	r1, [pc, #108]	; (80009ac <main+0xb8>)
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <main+0xbc>)
 8000940:	f00f fc32 	bl	80101a8 <HAL_UART_Receive_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTaskHand */
  osThreadDef(defaultTaskHand, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <main+0xc0>)
 8000946:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800094a:	461d      	mov	r5, r3
 800094c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	6023      	str	r3, [r4, #0]
  defaultTaskHandHandle = osThreadCreate(osThread(defaultTaskHand), NULL);
 8000954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f010 fa81 	bl	8010e62 <osThreadCreate>
 8000960:	4602      	mov	r2, r0
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <main+0xc4>)
 8000964:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Task2, Uart_Task, osPriorityNormal, 0,400);  //Uart Management : Send mailQ to the Model.cpp with array of values
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <main+0xc8>)
 8000968:	f107 0418 	add.w	r4, r7, #24
 800096c:	461d      	mov	r5, r3
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	6023      	str	r3, [r4, #0]
  myTask2 = osThreadCreate(osThread(Task2), NULL);
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f010 fa70 	bl	8010e62 <osThreadCreate>
 8000982:	4602      	mov	r2, r0
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <main+0xcc>)
 8000986:	601a      	str	r2, [r3, #0]

  osThreadDef(TaskI2C, I2C_Task, osPriorityNormal, 0,400);  //I2C Management : Receive mailQ from MyTask.c
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <main+0xd0>)
 800098a:	1d3c      	adds	r4, r7, #4
 800098c:	461d      	mov	r5, r3
 800098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	6023      	str	r3, [r4, #0]
  myTaskI2C = osThreadCreate(osThread(TaskI2C), NULL);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f010 fa61 	bl	8010e62 <osThreadCreate>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <main+0xd4>)
 80009a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009a6:	f010 fa55 	bl	8010e54 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <main+0xb6>
 80009ac:	2000be68 	.word	0x2000be68
 80009b0:	2000c094 	.word	0x2000c094
 80009b4:	08025b8c 	.word	0x08025b8c
 80009b8:	2000bf88 	.word	0x2000bf88
 80009bc:	08025ba8 	.word	0x08025ba8
 80009c0:	2000c1b8 	.word	0x2000c1b8
 80009c4:	08025bc4 	.word	0x08025bc4
 80009c8:	2000c114 	.word	0x2000c114

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0b4      	sub	sp, #208	; 0xd0
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009d6:	2230      	movs	r2, #48	; 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f024 f8ed 	bl	8024bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2284      	movs	r2, #132	; 0x84
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f024 f8de 	bl	8024bba <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <SystemClock_Config+0x13c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a41      	ldr	r2, [pc, #260]	; (8000b08 <SystemClock_Config+0x13c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <SystemClock_Config+0x13c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <SystemClock_Config+0x140>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <SystemClock_Config+0x140>)
 8000a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <SystemClock_Config+0x140>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a4a:	2319      	movs	r3, #25
 8000a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000a50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a5e:	2309      	movs	r3, #9
 8000a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f00d ff7b 	bl	800e964 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a74:	f000 fea8 	bl	80017c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a78:	f00d f9c8 	bl	800de0c <HAL_PWREx_EnableOverDrive>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a82:	f000 fea1 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000aa8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000aac:	2106      	movs	r1, #6
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00e f9c8 	bl	800ee44 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aba:	f000 fe85 	bl	80017c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <SystemClock_Config+0x144>)
 8000ac0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000ac2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ac6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000ac8:	2305      	movs	r3, #5
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00e fba8 	bl	800f244 <HAL_RCCEx_PeriphCLKConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000afa:	f000 fe65 	bl	80017c8 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	37d0      	adds	r7, #208	; 0xd0
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	00014048 	.word	0x00014048

08000b14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <MX_CRC_Init+0x40>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_CRC_Init+0x3c>)
 8000b3e:	f009 fa53 	bl	8009fe8 <HAL_CRC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b48:	f000 fe3e 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000bf64 	.word	0x2000bf64
 8000b54:	40023000 	.word	0x40023000

08000b58 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <MX_DMA2D_Init+0x60>)
 8000b60:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000b8e:	f009 ff87 	bl	800aaa0 <HAL_DMA2D_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000b98:	f000 fe16 	bl	80017c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_DMA2D_Init+0x5c>)
 8000ba0:	f00a fa48 	bl	800b034 <HAL_DMA2D_ConfigLayer>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000baa:	f000 fe0d 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000c178 	.word	0x2000c178
 8000bb8:	4002b000 	.word	0x4002b000

08000bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_I2C1_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <MX_I2C1_Init+0x7c>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0x30F;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bce:	f240 320f 	movw	r2, #783	; 0x30f
 8000bd2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bfa:	f00a fe17 	bl	800b82c <HAL_I2C_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 fde0 	bl	80017c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000c0c:	f00c fccf 	bl	800d5ae <HAL_I2CEx_ConfigAnalogFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c16:	f000 fdd7 	bl	80017c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000c1e:	f00c fd11 	bl	800d644 <HAL_I2CEx_ConfigDigitalFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c28:	f000 fdce 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000bf18 	.word	0x2000bf18
 8000c34:	40005400 	.word	0x40005400
 8000c38:	00c0eaff 	.word	0x00c0eaff

08000c3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <MX_I2C3_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <MX_I2C3_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c78:	f00a fdd8 	bl	800b82c <HAL_I2C_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 fda1 	bl	80017c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c8a:	f00c fc90 	bl	800d5ae <HAL_I2CEx_ConfigAnalogFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 fd98 	bl	80017c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_I2C3_Init+0x74>)
 8000c9c:	f00c fcd2 	bl	800d644 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 fd8f 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000be6c 	.word	0x2000be6c
 8000cb4:	40005c00 	.word	0x40005c00
 8000cb8:	00c0eaff 	.word	0x00c0eaff

08000cbc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2234      	movs	r2, #52	; 0x34
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f023 ff76 	bl	8024bba <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <MX_LTDC_Init+0x100>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cd4:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ce0:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000cec:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000cf4:	2209      	movs	r2, #9
 8000cf6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000cfa:	2235      	movs	r2, #53	; 0x35
 8000cfc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d00:	220b      	movs	r2, #11
 8000d02:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d06:	f240 2215 	movw	r2, #533	; 0x215
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d0e:	f240 121b 	movw	r2, #283	; 0x11b
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d16:	f240 2235 	movw	r2, #565	; 0x235
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d1e:	f240 121d 	movw	r2, #285	; 0x11d
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d3c:	481e      	ldr	r0, [pc, #120]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d3e:	f00c fccd 	bl	800d6dc <HAL_LTDC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d48:	f000 fd3e 	bl	80017c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000d50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d54:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000d5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d5e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d64:	23ff      	movs	r3, #255	; 0xff
 8000d66:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d70:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d76:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000d7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000da2:	f00c fe23 	bl	800d9ec <HAL_LTDC_ConfigLayer>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000dac:	f000 fd0c 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3738      	adds	r7, #56	; 0x38
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000bf8c 	.word	0x2000bf8c
 8000dbc:	40016800 	.word	0x40016800

08000dc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <MX_QUADSPI_Init+0x64>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dde:	2218      	movs	r2, #24
 8000de0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000de4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000de8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <MX_QUADSPI_Init+0x60>)
 8000dfe:	f00d f855 	bl	800deac <HAL_QSPI_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000e08:	f000 fcde 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  BSP_QSPI_Init();
 8000e0c:	f008 fa74 	bl	80092f8 <BSP_QSPI_Init>

  BSP_QSPI_MemoryMappedMode();
 8000e10:	f008 faca 	bl	80093a8 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000e14:	205c      	movs	r0, #92	; 0x5c
 8000e16:	f009 f861 	bl	8009edc <HAL_NVIC_DisableIRQ>

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000c1f0 	.word	0x2000c1f0
 8000e24:	a0001000 	.word	0xa0001000

08000e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_USART1_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART1_UART_Init+0x58>)
 8000e6c:	f00f f8bc 	bl	800ffe8 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 fca7 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000c094 	.word	0x2000c094
 8000e84:	40011000 	.word	0x40011000

08000e88 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_DMA_Init+0x70>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <MX_DMA_Init+0x70>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_DMA_Init+0x70>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_DMA_Init+0x70>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_DMA_Init+0x70>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_DMA_Init+0x70>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	200b      	movs	r0, #11
 8000ec4:	f008 ffe0 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f008 fff9 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f008 ffd8 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ed8:	2011      	movs	r0, #17
 8000eda:	f008 fff1 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	203a      	movs	r0, #58	; 0x3a
 8000ee4:	f008 ffd0 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ee8:	203a      	movs	r0, #58	; 0x3a
 8000eea:	f008 ffe9 	bl	8009ec0 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f14:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f16:	4a4d      	ldr	r2, [pc, #308]	; (800104c <MX_FMC_Init+0x150>)
 8000f18:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f1a:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f26:	4b48      	ldr	r3, [pc, #288]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f2c:	4b46      	ldr	r3, [pc, #280]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f32:	4b45      	ldr	r3, [pc, #276]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f3a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f3e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f40:	4b41      	ldr	r3, [pc, #260]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f46:	4b40      	ldr	r3, [pc, #256]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f60:	2307      	movs	r3, #7
 8000f62:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4832      	ldr	r0, [pc, #200]	; (8001048 <MX_FMC_Init+0x14c>)
 8000f7e:	f00e fd4f 	bl	800fa20 <HAL_SDRAM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f88:	f000 fc1e 	bl	80017c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
    __IO uint32_t tmpmrd = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_FMC_Init+0x154>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <MX_FMC_Init+0x154>)
 8000f98:	2210      	movs	r2, #16
 8000f9a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_FMC_Init+0x154>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_FMC_Init+0x154>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fac:	4928      	ldr	r1, [pc, #160]	; (8001050 <MX_FMC_Init+0x154>)
 8000fae:	4826      	ldr	r0, [pc, #152]	; (8001048 <MX_FMC_Init+0x14c>)
 8000fb0:	f00e fd6a 	bl	800fa88 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f008 fe6b 	bl	8009c90 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <MX_FMC_Init+0x154>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_FMC_Init+0x154>)
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_FMC_Init+0x154>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_FMC_Init+0x154>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	491e      	ldr	r1, [pc, #120]	; (8001050 <MX_FMC_Init+0x154>)
 8000fd8:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_FMC_Init+0x14c>)
 8000fda:	f00e fd55 	bl	800fa88 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_FMC_Init+0x154>)
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_FMC_Init+0x154>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_FMC_Init+0x154>)
 8000fec:	2208      	movs	r2, #8
 8000fee:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_FMC_Init+0x154>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	4915      	ldr	r1, [pc, #84]	; (8001050 <MX_FMC_Init+0x154>)
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <MX_FMC_Init+0x14c>)
 8000ffe:	f00e fd43 	bl	800fa88 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001002:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001006:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_FMC_Init+0x154>)
 800100a:	2204      	movs	r2, #4
 800100c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_FMC_Init+0x154>)
 8001010:	2210      	movs	r2, #16
 8001012:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_FMC_Init+0x154>)
 8001016:	2201      	movs	r2, #1
 8001018:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <MX_FMC_Init+0x154>)
 800101e:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001024:	490a      	ldr	r1, [pc, #40]	; (8001050 <MX_FMC_Init+0x154>)
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <MX_FMC_Init+0x14c>)
 8001028:	f00e fd2e 	bl	800fa88 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800102c:	f240 712b 	movw	r1, #1835	; 0x72b
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_FMC_Init+0x14c>)
 8001032:	f00e fd54 	bl	800fade <HAL_SDRAM_ProgramRefreshRate>
    
    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001036:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800103a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800103e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000c1bc 	.word	0x2000c1bc
 800104c:	a0000140 	.word	0xa0000140
 8001050:	20000140 	.word	0x20000140

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	; 0x40
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106a:	4bae      	ldr	r3, [pc, #696]	; (8001324 <MX_GPIO_Init+0x2d0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4aad      	ldr	r2, [pc, #692]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4bab      	ldr	r3, [pc, #684]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001082:	4ba8      	ldr	r3, [pc, #672]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4aa7      	ldr	r2, [pc, #668]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4ba5      	ldr	r3, [pc, #660]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4ba2      	ldr	r3, [pc, #648]	; (8001324 <MX_GPIO_Init+0x2d0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4aa1      	ldr	r2, [pc, #644]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b9f      	ldr	r3, [pc, #636]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b9c      	ldr	r3, [pc, #624]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a9b      	ldr	r2, [pc, #620]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b99      	ldr	r3, [pc, #612]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b96      	ldr	r3, [pc, #600]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a95      	ldr	r2, [pc, #596]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b93      	ldr	r3, [pc, #588]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b90      	ldr	r3, [pc, #576]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a8f      	ldr	r2, [pc, #572]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b8d      	ldr	r3, [pc, #564]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010fa:	4b8a      	ldr	r3, [pc, #552]	; (8001324 <MX_GPIO_Init+0x2d0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a89      	ldr	r2, [pc, #548]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b87      	ldr	r3, [pc, #540]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001112:	4b84      	ldr	r3, [pc, #528]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a83      	ldr	r2, [pc, #524]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b81      	ldr	r3, [pc, #516]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800112a:	4b7e      	ldr	r3, [pc, #504]	; (8001324 <MX_GPIO_Init+0x2d0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a7d      	ldr	r2, [pc, #500]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001142:	4b78      	ldr	r3, [pc, #480]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a77      	ldr	r2, [pc, #476]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b75      	ldr	r3, [pc, #468]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	4b72      	ldr	r3, [pc, #456]	; (8001324 <MX_GPIO_Init+0x2d0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a71      	ldr	r2, [pc, #452]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <MX_GPIO_Init+0x2d0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2120      	movs	r1, #32
 8001176:	486c      	ldr	r0, [pc, #432]	; (8001328 <MX_GPIO_Init+0x2d4>)
 8001178:	f00a fb3e 	bl	800b7f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	210c      	movs	r1, #12
 8001180:	486a      	ldr	r0, [pc, #424]	; (800132c <MX_GPIO_Init+0x2d8>)
 8001182:	f00a fb39 	bl	800b7f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2108      	movs	r1, #8
 800118a:	4869      	ldr	r0, [pc, #420]	; (8001330 <MX_GPIO_Init+0x2dc>)
 800118c:	f00a fb34 	bl	800b7f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001196:	4865      	ldr	r0, [pc, #404]	; (800132c <MX_GPIO_Init+0x2d8>)
 8001198:	f00a fb2e 	bl	800b7f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	4864      	ldr	r0, [pc, #400]	; (8001334 <MX_GPIO_Init+0x2e0>)
 80011a4:	f00a fb28 	bl	800b7f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	21c8      	movs	r1, #200	; 0xc8
 80011ac:	4862      	ldr	r0, [pc, #392]	; (8001338 <MX_GPIO_Init+0x2e4>)
 80011ae:	f00a fb23 	bl	800b7f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80011b2:	2308      	movs	r3, #8
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	485d      	ldr	r0, [pc, #372]	; (800133c <MX_GPIO_Init+0x2e8>)
 80011c6:	f00a f863 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80011ca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011dc:	230b      	movs	r3, #11
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4854      	ldr	r0, [pc, #336]	; (8001338 <MX_GPIO_Init+0x2e4>)
 80011e8:	f00a f852 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80011ec:	f643 4323 	movw	r3, #15395	; 0x3c23
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011fe:	230a      	movs	r3, #10
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	4619      	mov	r1, r3
 8001208:	484d      	ldr	r0, [pc, #308]	; (8001340 <MX_GPIO_Init+0x2ec>)
 800120a:	f00a f841 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800120e:	2310      	movs	r3, #16
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800121e:	2302      	movs	r3, #2
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	4845      	ldr	r0, [pc, #276]	; (8001340 <MX_GPIO_Init+0x2ec>)
 800122a:	f00a f831 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800123e:	2308      	movs	r3, #8
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <MX_GPIO_Init+0x2d4>)
 800124a:	f00a f821 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800124e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001260:	230c      	movs	r3, #12
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4836      	ldr	r0, [pc, #216]	; (8001344 <MX_GPIO_Init+0x2f0>)
 800126c:	f00a f810 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001282:	2301      	movs	r3, #1
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128a:	4619      	mov	r1, r3
 800128c:	482e      	ldr	r0, [pc, #184]	; (8001348 <MX_GPIO_Init+0x2f4>)
 800128e:	f009 ffff 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001292:	2360      	movs	r3, #96	; 0x60
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012a2:	230d      	movs	r3, #13
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4823      	ldr	r0, [pc, #140]	; (800133c <MX_GPIO_Init+0x2e8>)
 80012ae:	f009 ffef 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <MX_GPIO_Init+0x2f8>)
 80012c8:	f009 ffe2 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0x2fc>)
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	4619      	mov	r1, r3
 80012de:	4812      	ldr	r0, [pc, #72]	; (8001328 <MX_GPIO_Init+0x2d4>)
 80012e0:	f009 ffd6 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80012e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f6:	230a      	movs	r3, #10
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fe:	4619      	mov	r1, r3
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_GPIO_Init+0x2f4>)
 8001302:	f009 ffc5 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001306:	23f0      	movs	r3, #240	; 0xf0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001316:	230a      	movs	r3, #10
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800131a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131e:	4619      	mov	r1, r3
 8001320:	e018      	b.n	8001354 <MX_GPIO_Init+0x300>
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40022000 	.word	0x40022000
 8001330:	40022800 	.word	0x40022800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40021800 	.word	0x40021800
 800133c:	40021000 	.word	0x40021000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020000 	.word	0x40020000
 800134c:	40022400 	.word	0x40022400
 8001350:	10120000 	.word	0x10120000
 8001354:	48bb      	ldr	r0, [pc, #748]	; (8001644 <MX_GPIO_Init+0x5f0>)
 8001356:	f009 ff9b 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800136c:	230a      	movs	r3, #10
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	48b4      	ldr	r0, [pc, #720]	; (8001648 <MX_GPIO_Init+0x5f4>)
 8001378:	f009 ff8a 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800137c:	2320      	movs	r3, #32
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001390:	4619      	mov	r1, r3
 8001392:	48ae      	ldr	r0, [pc, #696]	; (800164c <MX_GPIO_Init+0x5f8>)
 8001394:	f009 ff7c 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001398:	2308      	movs	r3, #8
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013a8:	230d      	movs	r3, #13
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b0:	4619      	mov	r1, r3
 80013b2:	48a6      	ldr	r0, [pc, #664]	; (800164c <MX_GPIO_Init+0x5f8>)
 80013b4:	f009 ff6c 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80013b8:	f241 030c 	movw	r3, #4108	; 0x100c
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ce:	4619      	mov	r1, r3
 80013d0:	489c      	ldr	r0, [pc, #624]	; (8001644 <MX_GPIO_Init+0x5f0>)
 80013d2:	f009 ff5d 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4899      	ldr	r0, [pc, #612]	; (8001650 <MX_GPIO_Init+0x5fc>)
 80013ec:	f009 ff50 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013f0:	2308      	movs	r3, #8
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001404:	4619      	mov	r1, r3
 8001406:	4893      	ldr	r0, [pc, #588]	; (8001654 <MX_GPIO_Init+0x600>)
 8001408:	f009 ff42 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800140c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800141e:	230d      	movs	r3, #13
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001426:	4619      	mov	r1, r3
 8001428:	4887      	ldr	r0, [pc, #540]	; (8001648 <MX_GPIO_Init+0x5f4>)
 800142a:	f009 ff31 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800142e:	2310      	movs	r3, #16
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	4882      	ldr	r0, [pc, #520]	; (800164c <MX_GPIO_Init+0x5f8>)
 8001442:	f009 ff25 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001446:	2304      	movs	r3, #4
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001456:	230c      	movs	r3, #12
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145e:	4619      	mov	r1, r3
 8001460:	487a      	ldr	r0, [pc, #488]	; (800164c <MX_GPIO_Init+0x5f8>)
 8001462:	f009 ff15 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001466:	f248 0304 	movw	r3, #32772	; 0x8004
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001478:	4619      	mov	r1, r3
 800147a:	4877      	ldr	r0, [pc, #476]	; (8001658 <MX_GPIO_Init+0x604>)
 800147c:	f009 ff08 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001480:	2302      	movs	r3, #2
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	4619      	mov	r1, r3
 800149a:	486a      	ldr	r0, [pc, #424]	; (8001644 <MX_GPIO_Init+0x5f0>)
 800149c:	f009 fef8 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4867      	ldr	r0, [pc, #412]	; (8001658 <MX_GPIO_Init+0x604>)
 80014ba:	f009 fee9 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80014be:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014d0:	230d      	movs	r3, #13
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d8:	4619      	mov	r1, r3
 80014da:	485f      	ldr	r0, [pc, #380]	; (8001658 <MX_GPIO_Init+0x604>)
 80014dc:	f009 fed8 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014f0:	2302      	movs	r3, #2
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	4852      	ldr	r0, [pc, #328]	; (8001644 <MX_GPIO_Init+0x5f0>)
 80014fc:	f009 fec8 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001512:	2301      	movs	r3, #1
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	4619      	mov	r1, r3
 800151c:	484f      	ldr	r0, [pc, #316]	; (800165c <MX_GPIO_Init+0x608>)
 800151e:	f009 feb7 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001528:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <MX_GPIO_Init+0x60c>)
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001534:	4619      	mov	r1, r3
 8001536:	4843      	ldr	r0, [pc, #268]	; (8001644 <MX_GPIO_Init+0x5f0>)
 8001538:	f009 feaa 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800154c:	2308      	movs	r3, #8
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	483e      	ldr	r0, [pc, #248]	; (8001650 <MX_GPIO_Init+0x5fc>)
 8001558:	f009 fe9a 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800155c:	2310      	movs	r3, #16
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800156c:	230a      	movs	r3, #10
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001574:	4619      	mov	r1, r3
 8001576:	4838      	ldr	r0, [pc, #224]	; (8001658 <MX_GPIO_Init+0x604>)
 8001578:	f009 fe8a 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800157c:	23c8      	movs	r3, #200	; 0xc8
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001590:	4619      	mov	r1, r3
 8001592:	482d      	ldr	r0, [pc, #180]	; (8001648 <MX_GPIO_Init+0x5f4>)
 8001594:	f009 fe7c 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001598:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	482d      	ldr	r0, [pc, #180]	; (8001664 <MX_GPIO_Init+0x610>)
 80015ae:	f009 fe6f 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80015b2:	2305      	movs	r3, #5
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015c2:	230a      	movs	r3, #10
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4820      	ldr	r0, [pc, #128]	; (8001650 <MX_GPIO_Init+0x5fc>)
 80015ce:	f009 fe5f 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015d2:	2332      	movs	r3, #50	; 0x32
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e2:	230b      	movs	r3, #11
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ea:	4619      	mov	r1, r3
 80015ec:	4818      	ldr	r0, [pc, #96]	; (8001650 <MX_GPIO_Init+0x5fc>)
 80015ee:	f009 fe4f 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80015f2:	2304      	movs	r3, #4
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_GPIO_Init+0x5f4>)
 8001606:	f009 fe43 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800160a:	2386      	movs	r3, #134	; 0x86
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161a:	230b      	movs	r3, #11
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001622:	4619      	mov	r1, r3
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_GPIO_Init+0x608>)
 8001626:	f009 fe33 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162e:	2303      	movs	r3, #3
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_GPIO_Init+0x608>)
 800163e:	f009 fe27 	bl	800b290 <HAL_GPIO_Init>
 8001642:	e011      	b.n	8001668 <MX_GPIO_Init+0x614>
 8001644:	40022000 	.word	0x40022000
 8001648:	40021800 	.word	0x40021800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40020800 	.word	0x40020800
 8001654:	40022800 	.word	0x40022800
 8001658:	40021c00 	.word	0x40021c00
 800165c:	40020000 	.word	0x40020000
 8001660:	10120000 	.word	0x10120000
 8001664:	40021400 	.word	0x40021400

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001668:	2350      	movs	r3, #80	; 0x50
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001678:	230d      	movs	r3, #13
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001680:	4619      	mov	r1, r3
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <MX_GPIO_Init+0x6a0>)
 8001684:	f009 fe04 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001688:	2328      	movs	r3, #40	; 0x28
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001698:	230a      	movs	r3, #10
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a0:	4619      	mov	r1, r3
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_GPIO_Init+0x6a0>)
 80016a4:	f009 fdf4 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80016b8:	2309      	movs	r3, #9
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_GPIO_Init+0x6a4>)
 80016c4:	f009 fde4 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80016c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016da:	2305      	movs	r3, #5
 80016dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_GPIO_Init+0x6a8>)
 80016e6:	f009 fdd3 	bl	800b290 <HAL_GPIO_Init>

}
 80016ea:	bf00      	nop
 80016ec:	3740      	adds	r7, #64	; 0x40
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40021c00 	.word	0x40021c00
 80016fc:	40020400 	.word	0x40020400

08001700 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001708:	f000 fd8a 	bl	8002220 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f00f fbcf 	bl	8010eb0 <osDelay>
 8001712:	e7fb      	b.n	800170c <StartDefaultTask+0xc>

08001714 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800171a:	463b      	mov	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001726:	f008 fbe7 	bl	8009ef8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800172e:	2300      	movs	r3, #0
 8001730:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001732:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001736:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001738:	231b      	movs	r3, #27
 800173a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800173c:	2300      	movs	r3, #0
 800173e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001740:	2300      	movs	r3, #0
 8001742:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001744:	2303      	movs	r3, #3
 8001746:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001758:	463b      	mov	r3, r7
 800175a:	4618      	mov	r0, r3
 800175c:	f008 fc00 	bl	8009f60 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001760:	2301      	movs	r3, #1
 8001762:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001764:	2301      	movs	r3, #1
 8001766:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001768:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800176c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800176e:	2317      	movs	r3, #23
 8001770:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001772:	2300      	movs	r3, #0
 8001774:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001776:	2300      	movs	r3, #0
 8001778:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800177a:	2303      	movs	r3, #3
 800177c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800178e:	463b      	mov	r3, r7
 8001790:	4618      	mov	r0, r3
 8001792:	f008 fbe5 	bl	8009f60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001796:	2004      	movs	r0, #4
 8001798:	f008 fbc4 	bl	8009f24 <HAL_MPU_Enable>

}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b6:	f008 fa4b 	bl	8009c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40001000 	.word	0x40001000

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart1, (uint8_t *)"Error", 5, HAL_MAX_DELAY);
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	2205      	movs	r2, #5
 80017d2:	4903      	ldr	r1, [pc, #12]	; (80017e0 <Error_Handler+0x18>)
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <Error_Handler+0x1c>)
 80017d6:	f00e fc55 	bl	8010084 <HAL_UART_Transmit>
  /* USER CODE END Error_Handler_Debug */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08025bd8 	.word	0x08025bd8
 80017e4:	2000c094 	.word	0x2000c094

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_MspInit+0x4c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f008 fb2f 	bl	8009e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_CRC_MspInit+0x38>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10b      	bne.n	8001862 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_CRC_MspInit+0x3c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_CRC_MspInit+0x3c>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_CRC_MspInit+0x3c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023000 	.word	0x40023000
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_DMA2D_MspInit+0x44>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d113      	bne.n	80018b2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_DMA2D_MspInit+0x48>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <HAL_DMA2D_MspInit+0x48>)
 8001890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_DMA2D_MspInit+0x48>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2105      	movs	r1, #5
 80018a6:	205a      	movs	r0, #90	; 0x5a
 80018a8:	f008 faee 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80018ac:	205a      	movs	r0, #90	; 0x5a
 80018ae:	f008 fb07 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	4002b000 	.word	0x4002b000
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_DMA2D_MspDeInit+0x2c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d108      	bne.n	80018e8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_DMA2D_MspDeInit+0x30>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_DMA2D_MspDeInit+0x30>)
 80018dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80018e2:	205a      	movs	r0, #90	; 0x5a
 80018e4:	f008 fafa 	bl	8009edc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	4002b000 	.word	0x4002b000
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a61      	ldr	r2, [pc, #388]	; (8001a9c <HAL_I2C_MspInit+0x1a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	f040 808e 	bne.w	8001a38 <HAL_I2C_MspInit+0x140>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a5f      	ldr	r2, [pc, #380]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	6313      	str	r3, [r2, #48]	; 0x30
 8001928:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193a:	2312      	movs	r3, #18
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001946:	2304      	movs	r3, #4
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4854      	ldr	r0, [pc, #336]	; (8001aa4 <HAL_I2C_MspInit+0x1ac>)
 8001952:	f009 fc9d 	bl	800b290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001956:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800196e:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_I2C_MspInit+0x1b4>)
 8001972:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 8001976:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 800198a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019ae:	483e      	ldr	r0, [pc, #248]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 80019b0:	f008 fc04 	bl	800a1bc <HAL_DMA_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 80019ba:	f7ff ff05 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 80019c2:	639a      	str	r2, [r3, #56]	; 0x38
 80019c4:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <HAL_I2C_MspInit+0x1b0>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019cc:	4a39      	ldr	r2, [pc, #228]	; (8001ab4 <HAL_I2C_MspInit+0x1bc>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a0a:	4829      	ldr	r0, [pc, #164]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 8001a0c:	f008 fbd6 	bl	800a1bc <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_MspInit+0x122>
    {
      Error_Handler();
 8001a16:	f7ff fed7 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_I2C_MspInit+0x1b8>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2105      	movs	r1, #5
 8001a2a:	201f      	movs	r0, #31
 8001a2c:	f008 fa2c 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a30:	201f      	movs	r0, #31
 8001a32:	f008 fa45 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a36:	e02d      	b.n	8001a94 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_I2C_MspInit+0x1c0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d128      	bne.n	8001a94 <HAL_I2C_MspInit+0x19c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a5a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <HAL_I2C_MspInit+0x1c4>)
 8001a78:	f009 fc0a 	bl	800b290 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001a82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_I2C_MspInit+0x1a8>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	2000beb8 	.word	0x2000beb8
 8001aac:	400260a0 	.word	0x400260a0
 8001ab0:	2000c118 	.word	0x2000c118
 8001ab4:	40026010 	.word	0x40026010
 8001ab8:	40005c00 	.word	0x40005c00
 8001abc:	40021c00 	.word	0x40021c00

08001ac0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_I2C_MspDeInit+0x6c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d118      	bne.n	8001b04 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_I2C_MspDeInit+0x70>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_I2C_MspDeInit+0x70>)
 8001ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001ade:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <HAL_I2C_MspDeInit+0x74>)
 8001ae4:	f009 fd7e 	bl	800b5e4 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	4618      	mov	r0, r3
 8001aee:	f008 fc13 	bl	800a318 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f008 fc0e 	bl	800a318 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001afc:	201f      	movs	r0, #31
 8001afe:	f008 f9ed 	bl	8009edc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001b02:	e00f      	b.n	8001b24 <HAL_I2C_MspDeInit+0x64>
  else if(hi2c->Instance==I2C3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_I2C_MspDeInit+0x78>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10a      	bne.n	8001b24 <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_I2C_MspDeInit+0x70>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_I2C_MspDeInit+0x70>)
 8001b14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001b1a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <HAL_I2C_MspDeInit+0x7c>)
 8001b20:	f009 fd60 	bl	800b5e4 <HAL_GPIO_DeInit>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40005c00 	.word	0x40005c00
 8001b3c:	40021c00 	.word	0x40021c00

08001b40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a55      	ldr	r2, [pc, #340]	; (8001cb4 <HAL_LTDC_MspInit+0x174>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 80a3 	bne.w	8001caa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b64:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b70:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a4d      	ldr	r2, [pc, #308]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a41      	ldr	r2, [pc, #260]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a35      	ldr	r2, [pc, #212]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_LTDC_MspInit+0x178>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c04:	230e      	movs	r3, #14
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	482b      	ldr	r0, [pc, #172]	; (8001cbc <HAL_LTDC_MspInit+0x17c>)
 8001c10:	f009 fb3e 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8001c14:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c26:	230e      	movs	r3, #14
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4823      	ldr	r0, [pc, #140]	; (8001cc0 <HAL_LTDC_MspInit+0x180>)
 8001c32:	f009 fb2d 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8001c36:	23f7      	movs	r3, #247	; 0xf7
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c46:	230e      	movs	r3, #14
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <HAL_LTDC_MspInit+0x184>)
 8001c52:	f009 fb1d 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c68:	2309      	movs	r3, #9
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <HAL_LTDC_MspInit+0x188>)
 8001c74:	f009 fb0c 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001c78:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c8a:	230e      	movs	r3, #14
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <HAL_LTDC_MspInit+0x18c>)
 8001c96:	f009 fafb 	bl	800b290 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	2058      	movs	r0, #88	; 0x58
 8001ca0:	f008 f8f2 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ca4:	2058      	movs	r0, #88	; 0x58
 8001ca6:	f008 f90b 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3738      	adds	r7, #56	; 0x38
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40016800 	.word	0x40016800
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40022400 	.word	0x40022400
 8001cc4:	40022800 	.word	0x40022800
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_QSPI_MspInit+0x10c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d170      	bne.n	8001dd4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6393      	str	r3, [r2, #56]	; 0x38
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d0a:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d10:	f043 0310 	orr.w	r3, r3, #16
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_QSPI_MspInit+0x110>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001d52:	2304      	movs	r3, #4
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d62:	2309      	movs	r3, #9
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481d      	ldr	r0, [pc, #116]	; (8001de4 <HAL_QSPI_MspInit+0x114>)
 8001d6e:	f009 fa8f 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001d72:	2340      	movs	r3, #64	; 0x40
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d82:	230a      	movs	r3, #10
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4816      	ldr	r0, [pc, #88]	; (8001de8 <HAL_QSPI_MspInit+0x118>)
 8001d8e:	f009 fa7f 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d92:	2304      	movs	r3, #4
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001da2:	2309      	movs	r3, #9
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	480e      	ldr	r0, [pc, #56]	; (8001de8 <HAL_QSPI_MspInit+0x118>)
 8001dae:	f009 fa6f 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001db2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dc4:	2309      	movs	r3, #9
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <HAL_QSPI_MspInit+0x11c>)
 8001dd0:	f009 fa5e 	bl	800b290 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	a0001000 	.word	0xa0001000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020c00 	.word	0x40020c00

08001df0 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_QSPI_MspDeInit+0x40>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d112      	bne.n	8001e28 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_QSPI_MspDeInit+0x44>)
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_QSPI_MspDeInit+0x44>)
 8001e08:	f023 0302 	bic.w	r3, r3, #2
 8001e0c:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8001e0e:	2104      	movs	r1, #4
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <HAL_QSPI_MspDeInit+0x48>)
 8001e12:	f009 fbe7 	bl	800b5e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 8001e16:	2144      	movs	r1, #68	; 0x44
 8001e18:	4808      	ldr	r0, [pc, #32]	; (8001e3c <HAL_QSPI_MspDeInit+0x4c>)
 8001e1a:	f009 fbe3 	bl	800b5e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 8001e1e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <HAL_QSPI_MspDeInit+0x50>)
 8001e24:	f009 fbde 	bl	800b5e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	a0001000 	.word	0xa0001000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020c00 	.word	0x40020c00

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <HAL_UART_MspInit+0x114>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d173      	bne.n	8001f4e <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a3c      	ldr	r2, [pc, #240]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a36      	ldr	r2, [pc, #216]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_UART_MspInit+0x118>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4825      	ldr	r0, [pc, #148]	; (8001f60 <HAL_UART_MspInit+0x11c>)
 8001eca:	f009 f9e1 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481e      	ldr	r0, [pc, #120]	; (8001f64 <HAL_UART_MspInit+0x120>)
 8001eec:	f009 f9d0 	bl	800b290 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_UART_MspInit+0x128>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001ef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f34:	f008 f942 	bl	800a1bc <HAL_DMA_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001f3e:	f7ff fc43 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f46:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_UART_MspInit+0x124>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020000 	.word	0x40020000
 8001f68:	2000c034 	.word	0x2000c034
 8001f6c:	40026440 	.word	0x40026440

08001f70 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_FMC_MspInit+0x100>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d16d      	bne.n	8002068 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_FMC_MspInit+0x100>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_FMC_MspInit+0x104>)
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_FMC_MspInit+0x104>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_FMC_MspInit+0x104>)
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001faa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001fae:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	482c      	ldr	r0, [pc, #176]	; (8002078 <HAL_FMC_MspInit+0x108>)
 8001fc6:	f009 f963 	bl	800b290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8001fca:	f248 1333 	movw	r3, #33075	; 0x8133
 8001fce:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4825      	ldr	r0, [pc, #148]	; (800207c <HAL_FMC_MspInit+0x10c>)
 8001fe6:	f009 f953 	bl	800b290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001fea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001fee:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	481e      	ldr	r0, [pc, #120]	; (8002080 <HAL_FMC_MspInit+0x110>)
 8002006:	f009 f943 	bl	800b290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800200a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800200e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800201c:	230c      	movs	r3, #12
 800201e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <HAL_FMC_MspInit+0x114>)
 8002026:	f009 f933 	bl	800b290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800202a:	2328      	movs	r3, #40	; 0x28
 800202c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800203a:	230c      	movs	r3, #12
 800203c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4811      	ldr	r0, [pc, #68]	; (8002088 <HAL_FMC_MspInit+0x118>)
 8002044:	f009 f924 	bl	800b290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002048:	2308      	movs	r3, #8
 800204a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002058:	230c      	movs	r3, #12
 800205a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <HAL_FMC_MspInit+0x11c>)
 8002062:	f009 f915 	bl	800b290 <HAL_GPIO_Init>
 8002066:	e000      	b.n	800206a <HAL_FMC_MspInit+0xfa>
    return;
 8002068:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000150 	.word	0x20000150
 8002074:	40023800 	.word	0x40023800
 8002078:	40021000 	.word	0x40021000
 800207c:	40021800 	.word	0x40021800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021400 	.word	0x40021400
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40020800 	.word	0x40020800

08002090 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002098:	f7ff ff6a 	bl	8001f70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	2036      	movs	r0, #54	; 0x36
 80020ba:	f007 fee5 	bl	8009e88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020be:	2036      	movs	r0, #54	; 0x36
 80020c0:	f007 fefe 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_InitTick+0xa0>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_InitTick+0xa0>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6413      	str	r3, [r2, #64]	; 0x40
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_InitTick+0xa0>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020dc:	f107 0210 	add.w	r2, r7, #16
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00d f87a 	bl	800f1e0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020ec:	f00d f850 	bl	800f190 <HAL_RCC_GetPCLK1Freq>
 80020f0:	4603      	mov	r3, r0
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_InitTick+0xa4>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	3b01      	subs	r3, #1
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_InitTick+0xa8>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_InitTick+0xac>)
 8002108:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_InitTick+0xa8>)
 800210c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002110:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_InitTick+0xa8>)
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_InitTick+0xa8>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_InitTick+0xa8>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_InitTick+0xa8>)
 8002126:	f00d fcfa 	bl	800fb1e <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002130:	4806      	ldr	r0, [pc, #24]	; (800214c <HAL_InitTick+0xa8>)
 8002132:	f00d fd29 	bl	800fb88 <HAL_TIM_Base_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	431bde83 	.word	0x431bde83
 800214c:	2000c23c 	.word	0x2000c23c
 8002150:	40001000 	.word	0x40001000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA1_Stream0_IRQHandler+0x10>)
 800218e:	f008 fa13 	bl	800a5b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000c118 	.word	0x2000c118

0800219c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <DMA1_Stream6_IRQHandler+0x10>)
 80021a2:	f008 fa09 	bl	800a5b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000beb8 	.word	0x2000beb8

080021b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <I2C1_EV_IRQHandler+0x10>)
 80021b6:	f009 ff93 	bl	800c0e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000bf18 	.word	0x2000bf18

080021c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM6_DAC_IRQHandler+0x10>)
 80021ca:	f00d fd07 	bl	800fbdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000c23c 	.word	0x2000c23c

080021d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA2_Stream2_IRQHandler+0x10>)
 80021de:	f008 f9eb 	bl	800a5b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000c034 	.word	0x2000c034

080021ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <LTDC_IRQHandler+0x10>)
 80021f2:	f00b fb43 	bl	800d87c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000bf8c 	.word	0x2000bf8c

08002200 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA2D_IRQHandler+0x10>)
 8002206:	f008 fe04 	bl	800ae12 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000c178 	.word	0x2000c178

08002214 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8002218:	f001 fd96 	bl	8003d48 <touchgfx_init>
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8002224:	f001 fdba 	bl	8003d9c <touchgfx_taskEntry>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    {
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]
    }
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	080265c4 	.word	0x080265c4

0800224c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    }
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe9 	bl	800222c <_ZN8touchgfx15TouchControllerD1Ev>
 800225a:	2104      	movs	r1, #4
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f022 fbfe 	bl	8024a5e <_ZdlPvj>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <_ZN20STM32TouchController4initEv+0x20>)
 8002276:	4a06      	ldr	r2, [pc, #24]	; (8002290 <_ZN20STM32TouchController4initEv+0x24>)
 8002278:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <_ZN20STM32TouchController4initEv+0x20>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2070      	movs	r0, #112	; 0x70
 8002282:	4798      	blx	r3
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000154 	.word	0x20000154
 8002290:	20000030 	.word	0x20000030

08002294 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
    /* Checking if the screen has been touched */

    if (tsDriver)
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2070      	movs	r0, #112	; 0x70
 80022b0:	4798      	blx	r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	2070      	movs	r0, #112	; 0x70
 80022ce:	4798      	blx	r3
            return true;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000154 	.word	0x20000154

080022e4 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f009 fb2b 	bl	800b94c <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af04      	add	r7, sp, #16
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	4608      	mov	r0, r1
 8002308:	4611      	mov	r1, r2
 800230a:	461a      	mov	r2, r3
 800230c:	4603      	mov	r3, r0
 800230e:	72fb      	strb	r3, [r7, #11]
 8002310:	460b      	mov	r3, r1
 8002312:	813b      	strh	r3, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	b299      	uxth	r1, r3
 8002320:	88f8      	ldrh	r0, [r7, #6]
 8002322:	893a      	ldrh	r2, [r7, #8]
 8002324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002328:	9302      	str	r3, [sp, #8]
 800232a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4603      	mov	r3, r0
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f009 fdb9 	bl	800beac <HAL_I2C_Mem_Read>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	4619      	mov	r1, r3
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff ffcb 	bl	80022e4 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af04      	add	r7, sp, #16
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	72fb      	strb	r3, [r7, #11]
 800236a:	460b      	mov	r3, r1
 800236c:	813b      	strh	r3, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	b299      	uxth	r1, r3
 800237a:	88f8      	ldrh	r0, [r7, #6]
 800237c:	893a      	ldrh	r2, [r7, #8]
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	9302      	str	r3, [sp, #8]
 8002384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4603      	mov	r3, r0
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f009 fc78 	bl	800bc84 <HAL_I2C_Mem_Write>
 8002394:	4603      	mov	r3, r0
 8002396:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	4619      	mov	r1, r3
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff ff9e 	bl	80022e4 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
 80023be:	460b      	mov	r3, r1
 80023c0:	71bb      	strb	r3, [r7, #6]
 80023c2:	4613      	mov	r3, r2
 80023c4:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 80023c6:	79bb      	ldrb	r3, [r7, #6]
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	79f9      	ldrb	r1, [r7, #7]
 80023cc:	2301      	movs	r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	1d7b      	adds	r3, r7, #5
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2301      	movs	r3, #1
 80023d6:	4803      	ldr	r0, [pc, #12]	; (80023e4 <TS_IO_Write+0x30>)
 80023d8:	f7ff ffbe 	bl	8002358 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000be6c 	.word	0x2000be6c

080023e8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4603      	mov	r3, r0
 80023f0:	460a      	mov	r2, r1
 80023f2:	71fb      	strb	r3, [r7, #7]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80023fc:	79bb      	ldrb	r3, [r7, #6]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	79f9      	ldrb	r1, [r7, #7]
 8002402:	2301      	movs	r3, #1
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	f107 030f 	add.w	r3, r7, #15
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2301      	movs	r3, #1
 800240e:	4804      	ldr	r0, [pc, #16]	; (8002420 <TS_IO_Read+0x38>)
 8002410:	f7ff ff75 	bl	80022fe <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000be6c 	.word	0x2000be6c

08002424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fef9 	bl	800222c <_ZN8touchgfx15TouchControllerD1Ev>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	080265ac 	.word	0x080265ac

08002448 <_ZN20STM32TouchControllerD0Ev>:
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffe7 	bl	8002424 <_ZN20STM32TouchControllerD1Ev>
 8002456:	2104      	movs	r1, #4
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f022 fb00 	bl	8024a5e <_ZdlPvj>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]

}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]

}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]

}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_ZN8touchgfx3HALD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~HAL()
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    {
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
    }
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	08027fb8 	.word	0x08027fb8

080024cc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    }
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffe9 	bl	80024ac <_ZN8touchgfx3HALD1Ev>
 80024da:	2178      	movs	r1, #120	; 0x78
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f022 fabe 	bl	8024a5e <_ZdlPvj>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     *
     * @param orientation The desired display orientation.
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	e002      	b.n	800253c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000bafc 	.word	0x2000bafc

0800254c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4610      	mov	r0, r2
 8002562:	4798      	blx	r3
 8002564:	4603      	mov	r3, r0
    }
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f013 f860 	bl	801563c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3390      	adds	r3, #144	; 0x90
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
    }
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
    {
        return false;
 800259a:	2300      	movs	r3, #0
    }
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	460b      	mov	r3, r1
 80025b8:	80fb      	strh	r3, [r7, #6]
 80025ba:	4613      	mov	r3, r2
 80025bc:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80025be:	f7ff ffa9 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 80025c2:	4602      	mov	r2, r0
 80025c4:	6813      	ldr	r3, [r2, #0]
 80025c6:	3328      	adds	r3, #40	; 0x28
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4610      	mov	r0, r2
 80025cc:	4798      	blx	r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80025d2:	8b7b      	ldrh	r3, [r7, #26]
 80025d4:	4a3d      	ldr	r2, [pc, #244]	; (80026cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80025d6:	8812      	ldrh	r2, [r2, #0]
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80025ea:	797b      	ldrb	r3, [r7, #5]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4413      	add	r3, r2
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80025fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	3b01      	subs	r3, #1
 8002614:	2b1f      	cmp	r3, #31
 8002616:	d84d      	bhi.n	80026b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8002618:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	080026a1 	.word	0x080026a1
 8002624:	080026a1 	.word	0x080026a1
 8002628:	080026b5 	.word	0x080026b5
 800262c:	080026a1 	.word	0x080026a1
 8002630:	080026b5 	.word	0x080026b5
 8002634:	080026b5 	.word	0x080026b5
 8002638:	080026b5 	.word	0x080026b5
 800263c:	080026a1 	.word	0x080026a1
 8002640:	080026b5 	.word	0x080026b5
 8002644:	080026b5 	.word	0x080026b5
 8002648:	080026b5 	.word	0x080026b5
 800264c:	080026b5 	.word	0x080026b5
 8002650:	080026b5 	.word	0x080026b5
 8002654:	080026b5 	.word	0x080026b5
 8002658:	080026b5 	.word	0x080026b5
 800265c:	080026a1 	.word	0x080026a1
 8002660:	080026b5 	.word	0x080026b5
 8002664:	080026b5 	.word	0x080026b5
 8002668:	080026b5 	.word	0x080026b5
 800266c:	080026b5 	.word	0x080026b5
 8002670:	080026b5 	.word	0x080026b5
 8002674:	080026b5 	.word	0x080026b5
 8002678:	080026b5 	.word	0x080026b5
 800267c:	080026a1 	.word	0x080026a1
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080026b5 	.word	0x080026b5
 8002688:	080026b5 	.word	0x080026b5
 800268c:	080026b5 	.word	0x080026b5
 8002690:	080026b5 	.word	0x080026b5
 8002694:	080026b5 	.word	0x080026b5
 8002698:	080026b5 	.word	0x080026b5
 800269c:	080026a1 	.word	0x080026a1
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3374      	adds	r3, #116	; 0x74
 80026a6:	681c      	ldr	r4, [r3, #0]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	47a0      	blx	r4
            break;
 80026b2:	e006      	b.n	80026c2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80026b8:	f240 3125 	movw	r1, #805	; 0x325
 80026bc:	4806      	ldr	r0, [pc, #24]	; (80026d8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80026be:	f022 f9f9 	bl	8024ab4 <__assert_func>
            break;
        }
    }
 80026c2:	bf00      	nop
 80026c4:	372c      	adds	r7, #44	; 0x2c
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000baf8 	.word	0x2000baf8
 80026d0:	08025be0 	.word	0x08025be0
 80026d4:	080266d8 	.word	0x080266d8
 80026d8:	08025c00 	.word	0x08025c00

080026dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80026f4:	f240 3137 	movw	r1, #823	; 0x337
 80026f8:	4811      	ldr	r0, [pc, #68]	; (8002740 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80026fa:	f022 f9db 	bl	8024ab4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800271e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800272e:	701a      	strb	r2, [r3, #0]
    }
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	08025c48 	.word	0x08025c48
 800273c:	08026688 	.word	0x08026688
 8002740:	08025c00 	.word	0x08025c00
 8002744:	2000bafa 	.word	0x2000bafa
 8002748:	2000bafb 	.word	0x2000bafb

0800274c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	887a      	ldrh	r2, [r7, #2]
 8002766:	4610      	mov	r0, r2
 8002768:	4798      	blx	r3
        }
    }
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3318      	adds	r3, #24
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4610      	mov	r0, r2
 80027a2:	4798      	blx	r3
 80027a4:	4603      	mov	r3, r0
    }
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d017      	beq.n	80027f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d12a      	bne.n	8002826 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80027d2:	881a      	ldrh	r2, [r3, #0]
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80027d6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80027da:	881a      	ldrh	r2, [r3, #0]
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80027de:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80027e6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80027ee:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80027f6:	e016      	b.n	8002826 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002806:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800280e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002812:	881a      	ldrh	r2, [r3, #0]
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002816:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800281e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
    }
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2000baf4 	.word	0x2000baf4
 8002838:	2000baf0 	.word	0x2000baf0
 800283c:	2000baf6 	.word	0x2000baf6
 8002840:	2000baf2 	.word	0x2000baf2
 8002844:	2000baf8 	.word	0x2000baf8

08002848 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	f012 f975 	bl	8014b42 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	4a05      	ldr	r2, [pc, #20]	; (8002880 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fe1b 	bl	80024ac <_ZN8touchgfx3HALD1Ev>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	080269d0 	.word	0x080269d0

08002884 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffe7 	bl	8002860 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002892:	2178      	movs	r1, #120	; 0x78
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f022 f8e2 	bl	8024a5e <_ZdlPvj>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ffca 	bl	8002848 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <SCB_CleanInvalidateDCache+0x84>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80028ca:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <SCB_CleanInvalidateDCache+0x84>)
 80028d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d4:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0b5b      	lsrs	r3, r3, #13
 80028da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028de:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80028f2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80028f8:	4911      	ldr	r1, [pc, #68]	; (8002940 <SCB_CleanInvalidateDCache+0x84>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d000      	beq.n	8002916 <SCB_CleanInvalidateDCache+0x5a>
      do {
 8002914:	e7e9      	b.n	80028ea <SCB_CleanInvalidateDCache+0x2e>
    } while(sets-- != 0U);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d000      	beq.n	800292c <SCB_CleanInvalidateDCache+0x70>
    do {
 800292a:	e7d9      	b.n	80028e0 <SCB_CleanInvalidateDCache+0x24>
 800292c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002930:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fd40 	bl	80043d4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fdb6 	bl	80044d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fdb5 	bl	80044f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6839      	ldr	r1, [r7, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fdbd 	bl	8004520 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
 80029a6:	f7ff ff89 	bl	80028bc <SCB_CleanInvalidateDCache>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fd31 	bl	8004424 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 fd35 	bl	8004444 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 fd37 	bl	8004460 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 fd39 	bl	800447c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <_ZN11TouchGFXHALD1Ev+0x20>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff1b 	bl	8002860 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	080265dc 	.word	0x080265dc

08002a38 <_ZN11TouchGFXHALD0Ev>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffe7 	bl	8002a14 <_ZN11TouchGFXHALD1Ev>
 8002a46:	2178      	movs	r1, #120	; 0x78
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f022 f808 	bl	8024a5e <_ZdlPvj>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2001      	movs	r0, #1
 8002a62:	f00f f99d 	bl	8011da0 <xQueueGenericCreate>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f00f f9e9 	bl	8011e54 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2101      	movs	r1, #1
 8002a86:	2001      	movs	r0, #1
 8002a88:	f00f f98a 	bl	8011da0 <xQueueGenericCreate>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000158 	.word	0x20000158
 8002a9c:	2000015c 	.word	0x2000015c

08002aa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	4618      	mov	r0, r3
 8002aae:	f00f fce3 	bl	8012478 <xQueueSemaphoreTake>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000158 	.word	0x20000158

08002abc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f00f f9c3 	bl	8011e54 <xQueueGenericSend>
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000158 	.word	0x20000158

08002ad8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00f fcc8 	bl	8012478 <xQueueSemaphoreTake>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000158 	.word	0x20000158

08002af0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1d3a      	adds	r2, r7, #4
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00f fb44 	bl	8012190 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8002b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	f3bf 8f6f 	isb	sy
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000158 	.word	0x20000158
 8002b2c:	e000ed04 	.word	0xe000ed04

08002b30 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
    if (vsync_q)
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d013      	beq.n	8002b66 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	1d3a      	adds	r2, r7, #4
 8002b48:	2300      	movs	r3, #0
 8002b4a:	490a      	ldr	r1, [pc, #40]	; (8002b74 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8002b4c:	f00f fa84 	bl	8012058 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8002b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
    }
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000015c 	.word	0x2000015c
 8002b74:	20000004 	.word	0x20000004
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f00f fb93 	bl	80122b4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295
 8002b96:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00f fb8b 	bl	80122b4 <xQueueReceive>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000015c 	.word	0x2000015c
 8002ba8:	20000004 	.word	0x20000004

08002bac <__NVIC_EnableIRQ>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	db0d      	blt.n	8002bda <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <__NVIC_EnableIRQ+0x3c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_DisableIRQ>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db12      	blt.n	8002c24 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4909      	ldr	r1, [pc, #36]	; (8002c30 <__NVIC_DisableIRQ+0x44>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	3320      	adds	r3, #32
 8002c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c20:	f3bf 8f6f 	isb	sy
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <SCB_CleanInvalidateDCache>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <SCB_CleanInvalidateDCache+0x84>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c42:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <SCB_CleanInvalidateDCache+0x84>)
 8002c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0b5b      	lsrs	r3, r3, #13
 8002c52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c56:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c60:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002c6a:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c70:	4911      	ldr	r1, [pc, #68]	; (8002cb8 <SCB_CleanInvalidateDCache+0x84>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	60ba      	str	r2, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d000      	beq.n	8002c8e <SCB_CleanInvalidateDCache+0x5a>
      do {
 8002c8c:	e7e9      	b.n	8002c62 <SCB_CleanInvalidateDCache+0x2e>
    } while(sets-- != 0U);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	60fa      	str	r2, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d000      	beq.n	8002ca4 <SCB_CleanInvalidateDCache+0x70>
    do {
 8002ca2:	e7d9      	b.n	8002c58 <SCB_CleanInvalidateDCache+0x24>
 8002ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ca8:	f3bf 8f6f 	isb	sy
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_ZNK8touchgfx9colortype10getColor32Ev>:
     *
     * @see Color::getRedColor()
     * @see Color::getGreenColor()
     * @see Color::getBlueColor()
     */
    inline uint32_t getColor32() const
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
    }
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_ZNK8touchgfx9colortypecvtEv>:
     *        Cast that converts the given colortype to an uint16_t. Provided only for backward
     *        compatibility. Not recommended to use.
     *
     * @return The result of the operation.
     */
    operator uint16_t() const
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)color;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
    }
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    {
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
    }
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	08026784 	.word	0x08026784

08002d2c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    }
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ffe9 	bl	8002d0c <_ZN8touchgfx9DMA_QueueD1Ev>
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f021 fe8e 	bl	8024a5e <_ZdlPvj>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3344      	adds	r3, #68	; 0x44
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
    }
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8002d70:	2300      	movs	r3, #0
    }
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    {
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
    }
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	080283fc 	.word	0x080283fc

08002da0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    }
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffe9 	bl	8002d80 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002dae:	210c      	movs	r1, #12
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f021 fe54 	bl	8024a5e <_ZdlPvj>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002dca:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	721a      	strb	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	725a      	strb	r2, [r3, #9]
    {
    }
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	080283fc 	.word	0x080283fc

08002df4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
        return instance;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
    }
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	2000bafc 	.word	0x2000bafc

08002e0c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3314      	adds	r3, #20
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4610      	mov	r0, r2
 8002e24:	4798      	blx	r3
    }
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3328      	adds	r3, #40	; 0x28
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
    }
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	f023 0107 	bic.w	r1, r3, #7
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	ffffc000 	.word	0xffffc000

08002ea8 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN DMA2D_XferCpltCallback */
        // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
        // to flush the Dcache prior to letting DMA2D accessing it. That's done
        // using SCB_CleanInvalidateDCache().

        SCB_CleanInvalidateDCache();
 8002eb0:	f7ff fec0 	bl	8002c34 <SCB_CleanInvalidateDCache>
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8002eb4:	f7ff ff9e 	bl	8002df4 <_ZN8touchgfx3HAL11getInstanceEv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ffa6 	bl	8002e0c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    assert(0);
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <DMA2D_XferErrorCallback+0x14>)
 8002ed2:	4a03      	ldr	r2, [pc, #12]	; (8002ee0 <DMA2D_XferErrorCallback+0x18>)
 8002ed4:	213e      	movs	r1, #62	; 0x3e
 8002ed6:	4803      	ldr	r0, [pc, #12]	; (8002ee4 <DMA2D_XferErrorCallback+0x1c>)
 8002ed8:	f021 fdec 	bl	8024ab4 <__assert_func>
 8002edc:	08025c80 	.word	0x08025c80
 8002ee0:	080267a0 	.word	0x080267a0
 8002ee4:	08025c84 	.word	0x08025c84

08002ee8 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3318      	adds	r3, #24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fee1 	bl	8002cbc <_ZN8touchgfx9colortypeC1Ev>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	330c      	adds	r3, #12
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f7ff ff53 	bl	8002dc0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <_ZN10STM32F7DMAC1Ev+0x50>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f103 000c 	add.w	r0, r3, #12
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3320      	adds	r3, #32
 8002f2a:	2260      	movs	r2, #96	; 0x60
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f012 fcab 	bl	8015888 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3320      	adds	r3, #32
 8002f36:	245f      	movs	r4, #95	; 0x5f
 8002f38:	461d      	mov	r5, r3
 8002f3a:	2c00      	cmp	r4, #0
 8002f3c:	db05      	blt.n	8002f4a <_ZN10STM32F7DMAC1Ev+0x46>
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f7ff ffd2 	bl	8002ee8 <_ZN8touchgfx6BlitOpC1Ev>
 8002f44:	3520      	adds	r5, #32
 8002f46:	3c01      	subs	r4, #1
 8002f48:	e7f7      	b.n	8002f3a <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bdb0      	pop	{r4, r5, r7, pc}
 8002f54:	08026734 	.word	0x08026734

08002f58 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <_ZN10STM32F7DMAD1Ev+0x38>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8002f66:	480b      	ldr	r0, [pc, #44]	; (8002f94 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8002f68:	f007 fde4 	bl	800ab34 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002f6c:	205a      	movs	r0, #90	; 0x5a
 8002f6e:	f7ff fe3d 	bl	8002bec <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	330c      	adds	r3, #12
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 faa4 	bl	80034c4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fefe 	bl	8002d80 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	08026734 	.word	0x08026734
 8002f94:	2000c178 	.word	0x2000c178

08002f98 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
}
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ffd9 	bl	8002f58 <_ZN10STM32F7DMAD1Ev>
 8002fa6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f021 fd57 	bl	8024a5e <_ZdlPvj>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <_ZN10STM32F7DMA10initializeEv+0x30>)
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8002fc8:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8002fca:	4808      	ldr	r0, [pc, #32]	; (8002fec <_ZN10STM32F7DMA10initializeEv+0x30>)
 8002fcc:	f007 fd68 	bl	800aaa0 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <_ZN10STM32F7DMA10initializeEv+0x30>)
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8002fd4:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <_ZN10STM32F7DMA10initializeEv+0x30>)
 8002fd8:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8002fda:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8002fdc:	205a      	movs	r0, #90	; 0x5a
 8002fde:	f7ff fde5 	bl	8002bac <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000c178 	.word	0x2000c178
 8002ff0:	4002b000 	.word	0x4002b000
 8002ff4:	08002ea9 	.word	0x08002ea9
 8002ff8:	08002ec9 	.word	0x08002ec9

08002ffc <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8003004:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b08d      	sub	sp, #52	; 0x34
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800301e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800302c:	2b20      	cmp	r3, #32
 800302e:	d007      	beq.n	8003040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d003      	beq.n	8003040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d101      	bne.n	8003044 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8003044:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8003046:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d004      	beq.n	800305a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003058:	d101      	bne.n	800305e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800305e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8003060:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8003062:	f7ff fa57 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8003066:	4602      	mov	r2, r0
 8003068:	6813      	ldr	r3, [r2, #0]
 800306a:	3320      	adds	r3, #32
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4610      	mov	r0, r2
 8003070:	4798      	blx	r3
 8003072:	4603      	mov	r3, r0
 8003074:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d01d      	beq.n	80030ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d804      	bhi.n	800308c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8003082:	2b04      	cmp	r3, #4
 8003084:	d00e      	beq.n	80030a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8003086:	2b20      	cmp	r3, #32
 8003088:	d017      	beq.n	80030ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800308a:	e019      	b.n	80030c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800308c:	2b80      	cmp	r3, #128	; 0x80
 800308e:	d003      	beq.n	8003098 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d003      	beq.n	800309e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8003096:	e013      	b.n	80030c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8003098:	230a      	movs	r3, #10
 800309a:	623b      	str	r3, [r7, #32]
        break;
 800309c:	e01a      	b.n	80030d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800309e:	2309      	movs	r3, #9
 80030a0:	623b      	str	r3, [r7, #32]
        break;
 80030a2:	e017      	b.n	80030d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80030a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80030aa:	7f7b      	ldrb	r3, [r7, #29]
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d101      	bne.n	80030b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e000      	b.n	80030b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80030b4:	2301      	movs	r3, #1
 80030b6:	623b      	str	r3, [r7, #32]
        break;
 80030b8:	e00c      	b.n	80030d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
        break;
 80030be:	e009      	b.n	80030d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80030c4:	7f7b      	ldrb	r3, [r7, #29]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d101      	bne.n	80030ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e000      	b.n	80030d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
        break;
 80030d2:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80030d4:	4a77      	ldr	r2, [pc, #476]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80030da:	7f7b      	ldrb	r3, [r7, #29]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d101      	bne.n	80030e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e000      	b.n	80030e6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80030e8:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	8adb      	ldrh	r3, [r3, #22]
 80030ee:	461a      	mov	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	8a1b      	ldrh	r3, [r3, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80030fa:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80030fc:	7f7b      	ldrb	r3, [r7, #29]
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d101      	bne.n	8003106 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8003102:	2202      	movs	r2, #2
 8003104:	e000      	b.n	8003108 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8003106:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	8adb      	ldrh	r3, [r3, #22]
 800310c:	4619      	mov	r1, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	8a1b      	ldrh	r3, [r3, #16]
 8003112:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8003114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003116:	4867      	ldr	r0, [pc, #412]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003118:	f7ff fe98 	bl	8002e4c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800311c:	4a65      	ldr	r2, [pc, #404]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	8a9b      	ldrh	r3, [r3, #20]
 8003126:	461a      	mov	r2, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	8a1b      	ldrh	r3, [r3, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	461a      	mov	r2, r3
 8003130:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800313a:	7fbb      	ldrb	r3, [r7, #30]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8082 	beq.w	8003246 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7f1b      	ldrb	r3, [r3, #28]
 8003146:	2bff      	cmp	r3, #255	; 0xff
 8003148:	d008      	beq.n	800315c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800314a:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800314c:	2202      	movs	r2, #2
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	7f1b      	ldrb	r3, [r3, #28]
 8003154:	461a      	mov	r2, r3
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003158:	635a      	str	r2, [r3, #52]	; 0x34
 800315a:	e002      	b.n	8003162 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8003162:	7fbb      	ldrb	r3, [r7, #30]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d059      	beq.n	800321c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8003168:	7f7b      	ldrb	r3, [r7, #29]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d14a      	bne.n	8003204 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	3318      	adds	r3, #24
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fdbc 	bl	8002cf0 <_ZNK8touchgfx9colortypecvtEv>
 8003178:	4603      	mov	r3, r0
 800317a:	12db      	asrs	r3, r3, #11
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4613      	mov	r3, r2
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	4a4c      	ldr	r2, [pc, #304]	; (80032b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003188:	fb82 1203 	smull	r1, r2, r2, r3
 800318c:	441a      	add	r2, r3
 800318e:	1112      	asrs	r2, r2, #4
 8003190:	17db      	asrs	r3, r3, #31
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	3318      	adds	r3, #24
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fda8 	bl	8002cf0 <_ZNK8touchgfx9colortypecvtEv>
 80031a0:	4603      	mov	r3, r0
 80031a2:	115b      	asrs	r3, r3, #5
 80031a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a8:	4613      	mov	r3, r2
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	4a43      	ldr	r2, [pc, #268]	; (80032bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80031b0:	fb82 1203 	smull	r1, r2, r2, r3
 80031b4:	441a      	add	r2, r3
 80031b6:	1152      	asrs	r2, r2, #5
 80031b8:	17db      	asrs	r3, r3, #31
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fd94 	bl	8002cf0 <_ZNK8touchgfx9colortypecvtEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 021f 	and.w	r2, r3, #31
 80031ce:	4613      	mov	r3, r2
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80031d6:	fb82 1203 	smull	r1, r2, r2, r3
 80031da:	441a      	add	r2, r3
 80031dc:	1112      	asrs	r2, r2, #4
 80031de:	17db      	asrs	r3, r3, #31
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	7f1b      	ldrb	r3, [r3, #28]
 80031e8:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	061a      	lsls	r2, r3, #24
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	431a      	orrs	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003200:	6353      	str	r3, [r2, #52]	; 0x34
 8003202:	e00b      	b.n	800321c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	3318      	adds	r3, #24
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fd65 	bl	8002cd8 <_ZNK8touchgfx9colortype10getColor32Ev>
 800320e:	4602      	mov	r2, r0
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	7f1b      	ldrb	r3, [r3, #28]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4313      	orrs	r3, r2
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800321a:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	8adb      	ldrh	r3, [r3, #22]
 8003220:	461a      	mov	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	8a1b      	ldrh	r3, [r3, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	461a      	mov	r2, r3
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800322c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800322e:	7f7b      	ldrb	r3, [r7, #29]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d101      	bne.n	8003238 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8003234:	2302      	movs	r3, #2
 8003236:	e000      	b.n	800323a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8003238:	2301      	movs	r3, #1
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800323c:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800323e:	2100      	movs	r1, #0
 8003240:	481c      	ldr	r0, [pc, #112]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003242:	f007 fef7 	bl	800b034 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8003246:	2101      	movs	r1, #1
 8003248:	481a      	ldr	r0, [pc, #104]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800324a:	f007 fef3 	bl	800b034 <HAL_DMA2D_ConfigLayer>
    /* USER CODE BEGIN setupDataCopy cache invalidation */
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
 800324e:	f7ff fcf1 	bl	8002c34 <SCB_CleanInvalidateDCache>
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8003252:	7ffb      	ldrb	r3, [r7, #31]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24a>
 8003258:	7fbb      	ldrb	r3, [r7, #30]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d015      	beq.n	800328a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x276>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8003262:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8003268:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800326e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8003274:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	9200      	str	r2, [sp, #0]
 800327e:	4623      	mov	r3, r4
 8003280:	4602      	mov	r2, r0
 8003282:	480c      	ldr	r0, [pc, #48]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003284:	f007 fcf9 	bl	800ac7a <HAL_DMA2D_BlendingStart_IT>
 8003288:	e00f      	b.n	80032aa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800328e:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8003294:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800329a:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4603      	mov	r3, r0
 80032a4:	4803      	ldr	r0, [pc, #12]	; (80032b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80032a6:	f007 fcb5 	bl	800ac14 <HAL_DMA2D_Start_IT>
    }
}
 80032aa:	bf00      	nop
 80032ac:	372c      	adds	r7, #44	; 0x2c
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000c178 	.word	0x2000c178
 80032b8:	84210843 	.word	0x84210843
 80032bc:	82082083 	.word	0x82082083

080032c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b08d      	sub	sp, #52	; 0x34
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80032ca:	f7ff f923 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6813      	ldr	r3, [r2, #0]
 80032d2:	3320      	adds	r3, #32
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4610      	mov	r0, r2
 80032d8:	4798      	blx	r3
 80032da:	4603      	mov	r3, r0
 80032dc:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d101      	bne.n	80032e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e000      	b.n	80032ea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80032e8:	2301      	movs	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d149      	bne.n	800338a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	3318      	adds	r3, #24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fcf8 	bl	8002cf0 <_ZNK8touchgfx9colortypecvtEv>
 8003300:	4603      	mov	r3, r0
 8003302:	12db      	asrs	r3, r3, #11
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	4613      	mov	r3, r2
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	4a6a      	ldr	r2, [pc, #424]	; (80034b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8003310:	fb82 1203 	smull	r1, r2, r2, r3
 8003314:	441a      	add	r2, r3
 8003316:	1112      	asrs	r2, r2, #4
 8003318:	17db      	asrs	r3, r3, #31
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3318      	adds	r3, #24
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fce4 	bl	8002cf0 <_ZNK8touchgfx9colortypecvtEv>
 8003328:	4603      	mov	r3, r0
 800332a:	115b      	asrs	r3, r3, #5
 800332c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003330:	4613      	mov	r3, r2
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	4a61      	ldr	r2, [pc, #388]	; (80034bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8003338:	fb82 1203 	smull	r1, r2, r2, r3
 800333c:	441a      	add	r2, r3
 800333e:	1152      	asrs	r2, r2, #5
 8003340:	17db      	asrs	r3, r3, #31
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3318      	adds	r3, #24
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fcd0 	bl	8002cf0 <_ZNK8touchgfx9colortypecvtEv>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	4613      	mov	r3, r2
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 800335e:	fb82 1203 	smull	r1, r2, r2, r3
 8003362:	441a      	add	r2, r3
 8003364:	1112      	asrs	r2, r2, #4
 8003366:	17db      	asrs	r3, r3, #31
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7f1b      	ldrb	r3, [r3, #28]
 8003370:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	061a      	lsls	r2, r3, #24
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	4313      	orrs	r3, r2
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	e00b      	b.n	80033a2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	7f1b      	ldrb	r3, [r3, #28]
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	461c      	mov	r4, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	3318      	adds	r3, #24
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fc9e 	bl	8002cd8 <_ZNK8touchgfx9colortype10getColor32Ev>
 800339c:	4603      	mov	r3, r0
 800339e:	4323      	orrs	r3, r4
 80033a0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d103      	bne.n	80033b2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b0:	e003      	b.n	80033ba <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80033b2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80033ba:	4a41      	ldr	r2, [pc, #260]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80033c0:	7ffb      	ldrb	r3, [r7, #31]
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d101      	bne.n	80033ca <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e000      	b.n	80033cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4a3c      	ldr	r2, [pc, #240]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80033ce:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	8adb      	ldrh	r3, [r3, #22]
 80033d4:	461a      	mov	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	8a1b      	ldrh	r3, [r3, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80033e0:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d101      	bne.n	80033ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80033e8:	2202      	movs	r2, #2
 80033ea:	e000      	b.n	80033ee <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80033ec:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	8adb      	ldrh	r3, [r3, #22]
 80033f2:	4619      	mov	r1, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	8a1b      	ldrh	r3, [r3, #16]
 80033f8:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80033fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033fc:	4830      	ldr	r0, [pc, #192]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80033fe:	f7ff fd25 	bl	8002e4c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003408:	d11e      	bne.n	8003448 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800340a:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800340c:	2201      	movs	r2, #1
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8003410:	4a2b      	ldr	r2, [pc, #172]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8003418:	2209      	movs	r2, #9
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	8adb      	ldrh	r3, [r3, #22]
 8003420:	461a      	mov	r2, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	8a1b      	ldrh	r3, [r3, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800342c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b10      	cmp	r3, #16
 8003432:	d101      	bne.n	8003438 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8003434:	2302      	movs	r3, #2
 8003436:	e000      	b.n	800343a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8003438:	2301      	movs	r3, #1
 800343a:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800343c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800343e:	2100      	movs	r1, #0
 8003440:	481f      	ldr	r0, [pc, #124]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8003442:	f007 fdf7 	bl	800b034 <HAL_DMA2D_ConfigLayer>
 8003446:	e005      	b.n	8003454 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8003450:	2200      	movs	r2, #0
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8003454:	2101      	movs	r1, #1
 8003456:	481a      	ldr	r0, [pc, #104]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8003458:	f007 fdec 	bl	800b034 <HAL_DMA2D_ConfigLayer>
    /* USER CODE BEGIN setupDataFill cache invalidation */
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
 800345c:	f7ff fbea 	bl	8002c34 <SCB_CleanInvalidateDCache>
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003466:	d115      	bne.n	8003494 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d4>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800346c:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8003472:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8003478:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800347e:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	9200      	str	r2, [sp, #0]
 8003488:	4623      	mov	r3, r4
 800348a:	4602      	mov	r2, r0
 800348c:	480c      	ldr	r0, [pc, #48]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800348e:	f007 fbf4 	bl	800ac7a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8003492:	e00d      	b.n	80034b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f0>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800349e:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	460b      	mov	r3, r1
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	4805      	ldr	r0, [pc, #20]	; (80034c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80034ac:	f007 fbb2 	bl	800ac14 <HAL_DMA2D_Start_IT>
}
 80034b0:	bf00      	nop
 80034b2:	372c      	adds	r7, #44	; 0x2c
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	84210843 	.word	0x84210843
 80034bc:	82082083 	.word	0x82082083
 80034c0:	2000c178 	.word	0x2000c178

080034c4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fc19 	bl	8002d0c <_ZN8touchgfx9DMA_QueueD1Ev>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	0802844c 	.word	0x0802844c

080034e8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ffe7 	bl	80034c4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80034f6:	2114      	movs	r1, #20
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f021 fab0 	bl	8024a5e <_ZdlPvj>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	80da      	strh	r2, [r3, #6]
    }
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6013      	str	r3, [r2, #0]
    }
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	2000bb98 	.word	0x2000bb98

08003558 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
    {
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
    }
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	080269bc 	.word	0x080269bc

08003578 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
    }
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ffe9 	bl	8003558 <_ZN8touchgfx12FontProviderD1Ev>
 8003586:	2104      	movs	r1, #4
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f021 fa68 	bl	8024a5e <_ZdlPvj>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	611a      	str	r2, [r3, #16]
    {
    }
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	080269ac 	.word	0x080269ac

080035d8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    {
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
    }
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	080269ac 	.word	0x080269ac

080035f8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    }
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ffe9 	bl	80035d8 <_ZN8touchgfx7MVPHeapD1Ev>
 8003606:	2114      	movs	r1, #20
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f021 fa28 	bl	8024a5e <_ZdlPvj>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    {
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	601a      	str	r2, [r3, #0]
    }
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	08028e20 	.word	0x08028e20

08003638 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    }
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ffe9 	bl	8003618 <_ZN8touchgfx3LCDD1Ev>
 8003646:	2108      	movs	r1, #8
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f021 fa08 	bl	8024a5e <_ZdlPvj>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
    {
    }
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
    {
    }
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
    {
    }
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
    {
    }
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
    {
    }
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
    {
    }
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    {
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
    }
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	08026984 	.word	0x08026984

080036fc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
    }
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffe9 	bl	80036dc <_ZN8touchgfx15UIEventListenerD1Ev>
 800370a:	2104      	movs	r1, #4
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f021 f9a6 	bl	8024a5e <_ZdlPvj>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    {
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
    }
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	0802696c 	.word	0x0802696c

08003754 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
    }
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffe9 	bl	8003734 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003762:	2104      	movs	r1, #4
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f021 f97a 	bl	8024a5e <_ZdlPvj>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	805a      	strh	r2, [r3, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	809a      	strh	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	80da      	strh	r2, [r3, #6]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	811a      	strh	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	815a      	strh	r2, [r3, #10]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	819a      	strh	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	739a      	strb	r2, [r3, #14]
        {
        }
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ffd5 	bl	8003774 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	829a      	strh	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80037ee:	4a44      	ldr	r2, [pc, #272]	; (8003900 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	615a      	str	r2, [r3, #20]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	619a      	str	r2, [r3, #24]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	331c      	adds	r3, #28
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ffcc 	bl	80037ba <_ZN8touchgfx8GesturesC1Ev>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	64da      	str	r2, [r3, #76]	; 0x4c
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3350      	adds	r3, #80	; 0x50
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fe53 	bl	8003508 <_ZN8touchgfx4RectC1Ev>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	671a      	str	r2, [r3, #112]	; 0x70
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80038c0:	8b3b      	ldrh	r3, [r7, #24]
 80038c2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80038c4:	4a11      	ldr	r2, [pc, #68]	; (800390c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80038c6:	8bbb      	ldrh	r3, [r7, #28]
 80038c8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80038d6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80038da:	881a      	ldrh	r2, [r3, #0]
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80038de:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80038e0:	8b3a      	ldrh	r2, [r7, #24]
 80038e2:	8bbb      	ldrh	r3, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d301      	bcc.n	80038ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80038e8:	2200      	movs	r2, #0
 80038ea:	e000      	b.n	80038ee <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80038ec:	2201      	movs	r2, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	08027fb8 	.word	0x08027fb8
 8003904:	2000bafc 	.word	0x2000bafc
 8003908:	2000baf0 	.word	0x2000baf0
 800390c:	2000baf2 	.word	0x2000baf2
 8003910:	2000baf4 	.word	0x2000baf4
 8003914:	2000baf6 	.word	0x2000baf6
 8003918:	2000baf8 	.word	0x2000baf8

0800391c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	4a05      	ldr	r2, [pc, #20]	; (800393c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fed5 	bl	80036dc <_ZN8touchgfx15UIEventListenerD1Ev>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08028f24 	.word	0x08028f24

08003940 <_ZN8touchgfx11ApplicationD0Ev>:
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ffe7 	bl	800391c <_ZN8touchgfx11ApplicationD1Ev>
 800394e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f021 f883 	bl	8024a5e <_ZdlPvj>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	4a05      	ldr	r2, [pc, #20]	; (8003984 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ffd1 	bl	800391c <_ZN8touchgfx11ApplicationD1Ev>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	08026930 	.word	0x08026930

08003988 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ffe7 	bl	8003964 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003996:	f44f 719c 	mov.w	r1, #312	; 0x138
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f021 f85f 	bl	8024a5e <_ZdlPvj>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f804 	bl	80039c0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00f      	beq.n	80039f2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4610      	mov	r0, r2
 80039e6:	4798      	blx	r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fadd 	bl	8003ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff91 	bl	8003964 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	080268dc 	.word	0x080268dc

08003a50 <_ZN23FrontendApplicationBaseD0Ev>:
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ffe1 	bl	8003a20 <_ZN23FrontendApplicationBaseD1Ev>
 8003a5e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f020 fffb 	bl	8024a5e <_ZdlPvj>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <_ZN19FrontendApplicationD1Ev+0x20>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ffcb 	bl	8003a20 <_ZN23FrontendApplicationBaseD1Ev>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	080268a0 	.word	0x080268a0

08003a98 <_ZN19FrontendApplicationD0Ev>:
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffe7 	bl	8003a74 <_ZN19FrontendApplicationD1Ev>
 8003aa6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f020 ffd7 	bl	8024a5e <_ZdlPvj>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 fd7d 	bl	80085c8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f014 fcb5 	bl	8018440 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen3ScreenNoTransition();
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 ff52 	bl	8005994 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	f7ff fd41 	bl	8003598 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003b16:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]
    {

    }
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	0802688c 	.word	0x0802688c

08003b2c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__tcf_0+0xc>)
 8003b32:	f000 f9db 	bl	8003eec <_ZN12FrontendHeapD1Ev>
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000160 	.word	0x20000160

08003b3c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d108      	bne.n	8003b5e <_ZN12FrontendHeap11getInstanceEv+0x22>
 8003b4c:	4806      	ldr	r0, [pc, #24]	; (8003b68 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8003b4e:	f000 f831 	bl	8003bb4 <_ZN12FrontendHeapC1Ev>
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8003b5a:	f020 ffc9 	bl	8024af0 <atexit>
        return instance;
 8003b5e:	4b02      	ldr	r3, [pc, #8]	; (8003b68 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20002c08 	.word	0x20002c08
 8003b68:	20000160 	.word	0x20000160
 8003b6c:	08003b2d 	.word	0x08003b2d

08003b70 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fd29 	bl	80035d8 <_ZN8touchgfx7MVPHeapD1Ev>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	0802688c 	.word	0x0802688c

08003b94 <_ZN16FrontendHeapBaseD0Ev>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ffe7 	bl	8003b70 <_ZN16FrontendHeapBaseD1Ev>
 8003ba2:	2114      	movs	r1, #20
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f020 ff5a 	bl	8024a5e <_ZdlPvj>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f103 0414 	add.w	r4, r3, #20
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f642 029c 	movw	r2, #10396	; 0x289c
 8003bd0:	441a      	add	r2, r3
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8003bd8:	440b      	add	r3, r1
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	462a      	mov	r2, r5
 8003be0:	4621      	mov	r1, r4
 8003be2:	f7ff ff89 	bl	8003af8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003be6:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <_ZN12FrontendHeapC1Ev+0x98>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f8dd 	bl	8003db0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	332c      	adds	r3, #44	; 0x2c
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f90c 	bl	8003e18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	f642 039c 	movw	r3, #10396	; 0x289c
 8003c06:	4413      	add	r3, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f93b 	bl	8003e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8003c14:	4413      	add	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	f502 5128 	add.w	r1, r2, #10752	; 0x2a00
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fca4 	bl	800856c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 fcb4 	bl	8008598 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8003c38:	4413      	add	r3, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7ff ff4f 	bl	8003ade <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	080267dc 	.word	0x080267dc

08003c50 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
    {
 8003c58:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fcd9 	bl	8003618 <_ZN8touchgfx3LCDD1Ev>
    }
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	0802af5c 	.word	0x0802af5c

08003c74 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    }
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ffe7 	bl	8003c50 <_ZN8touchgfx8LCD24bppD1Ev>
 8003c82:	2158      	movs	r1, #88	; 0x58
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f020 feea 	bl	8024a5e <_ZdlPvj>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	8bbb      	ldrh	r3, [r7, #28]
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	8b3b      	ldrh	r3, [r7, #24]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	f7ff fd95 	bl	80037e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003cb6:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]
    }
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	080269d0 	.word	0x080269d0

08003ccc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	8bbb      	ldrh	r3, [r7, #28]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	8b3b      	ldrh	r3, [r7, #24]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	f7ff ffd3 	bl	8003c94 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]
    }
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	080265dc 	.word	0x080265dc

08003d04 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	080265c4 	.word	0x080265c4

08003d24 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffe8 	bl	8003d04 <_ZN8touchgfx15TouchControllerC1Ev>
 8003d34:	4a03      	ldr	r2, [pc, #12]	; (8003d44 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	080265ac 	.word	0x080265ac

08003d48 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003d4e:	f000 fc57 	bl	8004600 <_ZN14BitmapDatabase11getInstanceEv>
 8003d52:	4604      	mov	r4, r0
 8003d54:	f000 fc5e 	bl	8004614 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	2200      	movs	r2, #0
 8003d64:	4620      	mov	r0, r4
 8003d66:	f017 f93f 	bl	801afe8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8003d6a:	4809      	ldr	r0, [pc, #36]	; (8003d90 <touchgfx_init+0x48>)
 8003d6c:	f7ff fbe4 	bl	8003538 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f004 fad3 	bl	800831c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8003d76:	4807      	ldr	r0, [pc, #28]	; (8003d94 <touchgfx_init+0x4c>)
 8003d78:	f017 f884 	bl	801ae84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8003d7c:	f7ff fede 	bl	8003b3c <_ZN12FrontendHeap11getInstanceEv>
 8003d80:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8003d82:	4805      	ldr	r0, [pc, #20]	; (8003d98 <touchgfx_init+0x50>)
 8003d84:	f7fe fdde 	bl	8002944 <_ZN11TouchGFXHAL10initializeEv>
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd90      	pop	{r4, r7, pc}
 8003d90:	20003888 	.word	0x20003888
 8003d94:	20000008 	.word	0x20000008
 8003d98:	2000388c 	.word	0x2000388c

08003d9c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <touchgfx_taskEntry+0x10>)
 8003da2:	f010 fefe 	bl	8014ba2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000388c 	.word	0x2000388c

08003db0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f00f fe7c 	bl	8013ab8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003dc0:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
    {
    }
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	08026858 	.word	0x08026858

08003dd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    {
    }
 8003ddc:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f00f fe65 	bl	8013ab4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	08026858 	.word	0x08026858

08003df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    }
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ffe7 	bl	8003dd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003e06:	2118      	movs	r1, #24
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f020 fe28 	bl	8024a5e <_ZdlPvj>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f00f fe48 	bl	8013ab8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003e28:	4a03      	ldr	r2, [pc, #12]	; (8003e38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	601a      	str	r2, [r3, #0]
    }
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	08026824 	.word	0x08026824

08003e3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    }
 8003e44:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f00f fe31 	bl	8013ab4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	08026824 	.word	0x08026824

08003e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    }
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe7 	bl	8003e3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003e6e:	f642 0170 	movw	r1, #10352	; 0x2870
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f020 fdf3 	bl	8024a5e <_ZdlPvj>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00f fe12 	bl	8013ab8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003e94:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
    }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	080267f0 	.word	0x080267f0

08003ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    }
 8003eb0:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f00f fdfb 	bl	8013ab4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	080267f0 	.word	0x080267f0

08003ecc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
    }
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffe7 	bl	8003ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003eda:	2114      	movs	r1, #20
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f020 fdbe 	bl	8024a5e <_ZdlPvj>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <_ZN12FrontendHeapD1Ev+0x50>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8003f00:	4413      	add	r3, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fdb6 	bl	8003a74 <_ZN19FrontendApplicationD1Ev>
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	f642 039c 	movw	r3, #10396	; 0x289c
 8003f0e:	4413      	add	r3, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ffc9 	bl	8003ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	332c      	adds	r3, #44	; 0x2c
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff8e 	bl	8003e3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3314      	adds	r3, #20
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff55 	bl	8003dd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe1f 	bl	8003b70 <_ZN16FrontendHeapBaseD1Ev>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	080267dc 	.word	0x080267dc

08003f40 <_ZN12FrontendHeapD0Ev>:
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ffcf 	bl	8003eec <_ZN12FrontendHeapD1Ev>
 8003f4e:	f642 21a8 	movw	r1, #10920	; 0x2aa8
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f020 fd83 	bl	8024a5e <_ZdlPvj>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <_Z41__static_initialization_and_destruction_0ii>:
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d119      	bne.n	8003fa8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d114      	bne.n	8003fa8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003f7e:	4818      	ldr	r0, [pc, #96]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003f80:	f7ff fed0 	bl	8003d24 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8003f84:	4817      	ldr	r0, [pc, #92]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003f86:	f7fe ffbd 	bl	8002f04 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8003f8a:	4817      	ldr	r0, [pc, #92]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003f8c:	f019 fa52 	bl	801d434 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003f90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003fa0:	4910      	ldr	r1, [pc, #64]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003fa2:	4812      	ldr	r0, [pc, #72]	; (8003fec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003fa4:	f7ff fe92 	bl	8003ccc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d113      	bne.n	8003fd6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10e      	bne.n	8003fd6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003fb8:	480c      	ldr	r0, [pc, #48]	; (8003fec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003fba:	f7fe fd2b 	bl	8002a14 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003fbe:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003fc0:	f000 f83a 	bl	8004038 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003fc4:	4808      	ldr	r0, [pc, #32]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003fc6:	f7ff fe43 	bl	8003c50 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8003fca:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003fcc:	f7fe ffc4 	bl	8002f58 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8003fd0:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003fd2:	f7fe fa27 	bl	8002424 <_ZN20STM32TouchControllerD1Ev>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20002c0c 	.word	0x20002c0c
 8003fe4:	20002c10 	.word	0x20002c10
 8003fe8:	20003830 	.word	0x20003830
 8003fec:	2000388c 	.word	0x2000388c
 8003ff0:	20000008 	.word	0x20000008

08003ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	4a05      	ldr	r2, [pc, #20]	; (8004014 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fb95 	bl	8003734 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08026918 	.word	0x08026918

08004018 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffe7 	bl	8003ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004026:	2110      	movs	r1, #16
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f020 fd18 	bl	8024a5e <_ZdlPvj>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	4a05      	ldr	r2, [pc, #20]	; (8004058 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fa85 	bl	8003558 <_ZN8touchgfx12FontProviderD1Ev>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	08026a84 	.word	0x08026a84

0800405c <_ZN23ApplicationFontProviderD0Ev>:
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffe7 	bl	8004038 <_ZN23ApplicationFontProviderD1Ev>
 800406a:	2104      	movs	r1, #4
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f020 fcf6 	bl	8024a5e <_ZdlPvj>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004084:	2301      	movs	r3, #1
    }
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800409a:	230c      	movs	r3, #12
    }
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80040b4:	887a      	ldrh	r2, [r7, #2]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	3308      	adds	r3, #8
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
    }
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80040dc:	887a      	ldrh	r2, [r7, #2]
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3308      	adds	r3, #8
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
    }
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004100:	2301      	movs	r3, #1
    }
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004116:	f642 0368 	movw	r3, #10344	; 0x2868
    }
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	f642 0268 	movw	r2, #10344	; 0x2868
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	3308      	adds	r3, #8
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
    }
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	f642 0268 	movw	r2, #10344	; 0x2868
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	3308      	adds	r3, #8
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4413      	add	r3, r2
    }
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800417e:	2301      	movs	r3, #1
    }
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004194:	2310      	movs	r3, #16
    }
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3308      	adds	r3, #8
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
    }
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	3308      	adds	r3, #8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
    }
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68d2      	ldr	r2, [r2, #12]
 80041f6:	1052      	asrs	r2, r2, #1
 80041f8:	1899      	adds	r1, r3, r2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	e00a      	b.n	8004222 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68d2      	ldr	r2, [r2, #12]
 8004214:	1052      	asrs	r2, r2, #1
 8004216:	4413      	add	r3, r2
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	4413      	add	r3, r2
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4608      	mov	r0, r1
 8004224:	4798      	blx	r3
    }
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8004256:	2300      	movs	r3, #0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8004260:	2300      	movs	r3, #0
    }
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <_GLOBAL__sub_I_touchgfx_init>:
 800426e:	b580      	push	{r7, lr}
 8004270:	af00      	add	r7, sp, #0
 8004272:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004276:	2001      	movs	r0, #1
 8004278:	f7ff fe74 	bl	8003f64 <_Z41__static_initialization_and_destruction_0ii>
 800427c:	bd80      	pop	{r7, pc}

0800427e <_GLOBAL__sub_D_touchgfx_init>:
 800427e:	b580      	push	{r7, lr}
 8004280:	af00      	add	r7, sp, #0
 8004282:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004286:	2000      	movs	r0, #0
 8004288:	f7ff fe6c 	bl	8003f64 <_Z41__static_initialization_and_destruction_0ii>
 800428c:	bd80      	pop	{r7, pc}

0800428e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3318      	adds	r3, #24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
    }
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80042d8:	3301      	adds	r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <__NVIC_EnableIRQ>:
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db0d      	blt.n	800431e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <__NVIC_EnableIRQ+0x3c>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2001      	movs	r0, #1
 8004316:	fa00 f202 	lsl.w	r2, r0, r2
 800431a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000e100 	.word	0xe000e100

08004330 <__NVIC_DisableIRQ>:
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	2b00      	cmp	r3, #0
 8004340:	db12      	blt.n	8004368 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4909      	ldr	r1, [pc, #36]	; (8004374 <__NVIC_DisableIRQ+0x44>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	3320      	adds	r3, #32
 800435c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004364:	f3bf 8f6f 	isb	sy
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	e000e100 	.word	0xe000e100

08004378 <__NVIC_SetPriority>:
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	6039      	str	r1, [r7, #0]
 8004382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004388:	2b00      	cmp	r3, #0
 800438a:	db0c      	blt.n	80043a6 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <__NVIC_SetPriority+0x54>)
 8004392:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8004396:	4608      	mov	r0, r1
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	b2d9      	uxtb	r1, r3
 800439c:	1813      	adds	r3, r2, r0
 800439e:	460a      	mov	r2, r1
 80043a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043a4:	e00c      	b.n	80043c0 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4909      	ldr	r1, [pc, #36]	; (80043d0 <__NVIC_SetPriority+0x58>)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3b04      	subs	r3, #4
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	440b      	add	r3, r1
 80043be:	761a      	strb	r2, [r3, #24]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80043d4:	b5b0      	push	{r4, r5, r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	f010 fea4 	bl	801512c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 80043e4:	687d      	ldr	r5, [r7, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	334c      	adds	r3, #76	; 0x4c
 80043ec:	681c      	ldr	r4, [r3, #0]
 80043ee:	f014 f953 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4619      	mov	r1, r3
 80043f6:	4628      	mov	r0, r5
 80043f8:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA00, (void*)0);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3374      	adds	r3, #116	; 0x74
 8004402:	681c      	ldr	r4, [r3, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8004408:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800440c:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff49 	bl	80042aa <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bdb0      	pop	{r4, r5, r7, pc}
 8004420:	c005fa00 	.word	0xc005fa00

08004424 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800442c:	2109      	movs	r1, #9
 800442e:	205a      	movs	r0, #90	; 0x5a
 8004430:	f7ff ffa2 	bl	8004378 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004434:	2109      	movs	r1, #9
 8004436:	2058      	movs	r0, #88	; 0x58
 8004438:	f7ff ff9e 	bl	8004378 <__NVIC_SetPriority>
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800444c:	205a      	movs	r0, #90	; 0x5a
 800444e:	f7ff ff4f 	bl	80042f0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004452:	2058      	movs	r0, #88	; 0x58
 8004454:	f7ff ff4c 	bl	80042f0 <__NVIC_EnableIRQ>
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004468:	205a      	movs	r0, #90	; 0x5a
 800446a:	f7ff ff61 	bl	8004330 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800446e:	2058      	movs	r0, #88	; 0x58
 8004470:	f7ff ff5e 	bl	8004330 <__NVIC_DisableIRQ>
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004496:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80044aa:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80044b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6353      	str	r3, [r2, #52]	; 0x34
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40016800 	.word	0x40016800
 80044d0:	20003904 	.word	0x20003904
 80044d4:	20003906 	.word	0x20003906

080044d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40016884 	.word	0x40016884

080044f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80044fe:	4a06      	ldr	r2, [pc, #24]	; (8004518 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004506:	2201      	movs	r2, #1
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40016884 	.word	0x40016884
 800451c:	40016800 	.word	0x40016800

08004520 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f010 fb0d 	bl	8014b4e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <HAL_LTDC_LineEventCallback+0x74>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <HAL_LTDC_LineEventCallback+0x78>)
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	4293      	cmp	r3, r2
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d017      	beq.n	800458a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <HAL_LTDC_LineEventCallback+0x7c>)
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f009 fa81 	bl	800da68 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004566:	f7fe fc45 	bl	8002df4 <_ZN8touchgfx3HAL11getInstanceEv>
 800456a:	4603      	mov	r3, r0
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff feac 	bl	80042ca <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8004572:	f7fe fadd 	bl	8002b30 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004576:	f7fe fc3d 	bl	8002df4 <_ZN8touchgfx3HAL11getInstanceEv>
 800457a:	4603      	mov	r3, r0
 800457c:	4618      	mov	r0, r3
 800457e:	f011 f85d 	bl	801563c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004582:	2000      	movs	r0, #0
 8004584:	f7fd ff70 	bl	8002468 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8004588:	e00e      	b.n	80045a8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <HAL_LTDC_LineEventCallback+0x78>)
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f009 fa69 	bl	800da68 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004596:	2000      	movs	r0, #0
 8004598:	f7fd ff71 	bl	800247e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800459c:	f7fe fc2a 	bl	8002df4 <_ZN8touchgfx3HAL11getInstanceEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fe73 	bl	800428e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40016800 	.word	0x40016800
 80045b4:	20003904 	.word	0x20003904
 80045b8:	20003906 	.word	0x20003906

080045bc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d008      	beq.n	80045e0 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d00b      	beq.n	80045ea <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10e      	bne.n	80045f4 <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80045d6:	f003 ff19 	bl	800840c <_ZN17TypedTextDatabase8getFontsEv>
 80045da:	4603      	mov	r3, r0
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	e00a      	b.n	80045f6 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80045e0:	f003 ff14 	bl	800840c <_ZN17TypedTextDatabase8getFontsEv>
 80045e4:	4603      	mov	r3, r0
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	e005      	b.n	80045f6 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80045ea:	f003 ff0f 	bl	800840c <_ZN17TypedTextDatabase8getFontsEv>
 80045ee:	4603      	mov	r3, r0
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	e000      	b.n	80045f6 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 80045f4:	2300      	movs	r3, #0
    }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
    return bitmap_database;
 8004604:	4b02      	ldr	r3, [pc, #8]	; (8004610 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	08026a90 	.word	0x08026a90

08004614 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8004618:	2318      	movs	r3, #24
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	08029050 	.word	0x08029050

08004644 <_ZN8touchgfx4FontD0Ev>:
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ffe9 	bl	8004624 <_ZN8touchgfx4FontD1Ev>
 8004652:	2110      	movs	r1, #16
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f020 fa02 	bl	8024a5e <_ZdlPvj>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3308      	adds	r3, #8
 800467e:	681c      	ldr	r4, [r3, #0]
 8004680:	f107 030f 	add.w	r3, r7, #15
 8004684:	f107 0210 	add.w	r2, r7, #16
 8004688:	8879      	ldrh	r1, [r7, #2]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	47a0      	blx	r4
 800468e:	6178      	str	r0, [r7, #20]
        return glyph;
 8004690:	697b      	ldr	r3, [r7, #20]
    }
 8004692:	4618      	mov	r0, r3
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd90      	pop	{r4, r7, pc}

0800469a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	895b      	ldrh	r3, [r3, #10]
    }
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	899b      	ldrh	r3, [r3, #12]
    }
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	889b      	ldrh	r3, [r3, #4]
    }
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	889a      	ldrh	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	799b      	ldrb	r3, [r3, #6]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	b29b      	uxth	r3, r3
    }
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	79db      	ldrb	r3, [r3, #7]
 8004710:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8004714:	b2db      	uxtb	r3, r3
    }
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	79db      	ldrb	r3, [r3, #7]
 800472e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004732:	b2db      	uxtb	r3, r3
    }
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	4a05      	ldr	r2, [pc, #20]	; (8004760 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff67 	bl	8004624 <_ZN8touchgfx4FontD1Ev>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08029108 	.word	0x08029108

08004764 <_ZN8touchgfx9ConstFontD0Ev>:
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ffe7 	bl	8004740 <_ZN8touchgfx9ConstFontD1Ev>
 8004772:	2118      	movs	r1, #24
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f020 f972 	bl	8024a5e <_ZdlPvj>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ffd3 	bl	8004740 <_ZN8touchgfx9ConstFontD1Ev>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	080271e4 	.word	0x080271e4

080047a8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ffe7 	bl	8004784 <_ZN8touchgfx13GeneratedFontD1Ev>
 80047b6:	2124      	movs	r1, #36	; 0x24
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f020 f950 	bl	8024a5e <_ZdlPvj>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
        color = col;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	601a      	str	r2, [r3, #0]
    }
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	461a      	mov	r2, r3
 80047f4:	4603      	mov	r3, r0
 80047f6:	817b      	strh	r3, [r7, #10]
 80047f8:	460b      	mov	r3, r1
 80047fa:	813b      	strh	r3, [r7, #8]
 80047fc:	4613      	mov	r3, r2
 80047fe:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	897a      	ldrh	r2, [r7, #10]
 8004804:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	893a      	ldrh	r2, [r7, #8]
 800480a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8b3a      	ldrh	r2, [r7, #24]
 8004816:	80da      	strh	r2, [r3, #6]
    }
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	887a      	ldrh	r2, [r7, #2]
 8004836:	801a      	strh	r2, [r3, #0]
    {
    }
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af02      	add	r7, sp, #8
 800484e:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8004850:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	1d18      	adds	r0, r3, #4
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2300      	movs	r3, #0
 8004860:	2200      	movs	r2, #0
 8004862:	2100      	movs	r1, #0
 8004864:	f7ff ffbf 	bl	80047e6 <_ZN8touchgfx4RectC1Essss>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	330c      	adds	r3, #12
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fe4b 	bl	8003508 <_ZN8touchgfx4RectC1Ev>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	615a      	str	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	619a      	str	r2, [r3, #24]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	61da      	str	r2, [r3, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	080290a0 	.word	0x080290a0

080048a4 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	080290a0 	.word	0x080290a0

080048c4 <_ZN8touchgfx8DrawableD0Ev>:
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff ffe9 	bl	80048a4 <_ZN8touchgfx8DrawableD1Ev>
 80048d2:	2128      	movs	r1, #40	; 0x28
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f020 f8c2 	bl	8024a5e <_ZdlPvj>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	460b      	mov	r3, r1
 80048f8:	813b      	strh	r3, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3334      	adds	r3, #52	; 0x34
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800490a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	4798      	blx	r3
        setWidth(width);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3338      	adds	r3, #56	; 0x38
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800491e:	4611      	mov	r1, r2
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	4798      	blx	r3
        setHeight(height);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	333c      	adds	r3, #60	; 0x3c
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004930:	4611      	mov	r1, r2
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	4798      	blx	r3
    }
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	887a      	ldrh	r2, [r7, #2]
 800494e:	809a      	strh	r2, [r3, #4]
    }
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	887a      	ldrh	r2, [r7, #2]
 800496c:	80da      	strh	r2, [r3, #6]
    }
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]
 8004986:	4613      	mov	r3, r2
 8004988:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	332c      	adds	r3, #44	; 0x2c
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004996:	4611      	mov	r1, r2
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
        setY(y);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3330      	adds	r3, #48	; 0x30
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80049a8:	4611      	mov	r1, r2
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
    }
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	811a      	strh	r2, [r3, #8]
    }
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	887a      	ldrh	r2, [r7, #2]
 80049e4:	815a      	strh	r2, [r3, #10]
    }
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
 8004abc:	4613      	mov	r3, r2
 8004abe:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3354      	adds	r3, #84	; 0x54
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	8879      	ldrh	r1, [r7, #2]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	1a8a      	subs	r2, r1, r2
 8004ad4:	b292      	uxth	r2, r2
 8004ad6:	b210      	sxth	r0, r2
 8004ad8:	8839      	ldrh	r1, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	1a8a      	subs	r2, r1, r2
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	b212      	sxth	r2, r2
 8004ae8:	4601      	mov	r1, r0
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
    }
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b04:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b0c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b14:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff ffe1 	bl	8004af6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]
    }
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
        firstChild(0)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fe76 	bl	8004848 <_ZN8touchgfx8DrawableC1Ev>
 8004b5c:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08027d10 	.word	0x08027d10

08004b78 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fe8b 	bl	80048a4 <_ZN8touchgfx8DrawableD1Ev>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08027d10 	.word	0x08027d10

08004b9c <_ZN8touchgfx9ContainerD0Ev>:
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ffe7 	bl	8004b78 <_ZN8touchgfx9ContainerD1Ev>
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f01f ff56 	bl	8024a5e <_ZdlPvj>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fe3e 	bl	8004848 <_ZN8touchgfx8DrawableC1Ev>
 8004bcc:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08026da4 	.word	0x08026da4

08004be0 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fe57 	bl	80048a4 <_ZN8touchgfx8DrawableD1Ev>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	08026da4 	.word	0x08026da4

08004c04 <_ZN8touchgfx6WidgetD0Ev>:
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ffe7 	bl	8004be0 <_ZN8touchgfx6WidgetD1Ev>
 8004c12:	2128      	movs	r1, #40	; 0x28
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f01f ff22 	bl	8024a5e <_ZdlPvj>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	817b      	strh	r3, [r7, #10]
 8004c32:	4613      	mov	r3, r2
 8004c34:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ff1f 	bl	8004a7c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff25 	bl	8004a96 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
        }
    }
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ff9f 	bl	8004bbc <_ZN8touchgfx6WidgetC1Ev>
 8004c7e:	4a0b      	ldr	r2, [pc, #44]	; (8004cac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3326      	adds	r3, #38	; 0x26
 8004c88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fdca 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	22ff      	movs	r2, #255	; 0xff
 8004c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f011 feaf 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	08028c30 	.word	0x08028c30

08004cb0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
        /**
         * @fn Q5::Q5()
         *
         * @brief Default constructor.
         */
        Q5() : v(0) { }
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
        {
            return v;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
        }
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q10 format.
         *
         * @param i int pre-formattet in Q10 format.
         */
        explicit Q10(int i) : v(i) { }
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     *        Sets the alpha channel for the CanvasWidget.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     *        Gets the current alpha value.
     *
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f011 f889 	bl	8015e84 <_ZN8touchgfx15AbstractPainterD1Ev>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	08028670 	.word	0x08028670

08004d80 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ffe7 	bl	8004d5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8004d8e:	2114      	movs	r1, #20
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f01f fe64 	bl	8024a5e <_ZdlPvj>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <_ZN20CustomContainer1BaseD1Ev>:

class CustomContainer1Base : public touchgfx::Container
{
public:
    CustomContainer1Base();
    virtual ~CustomContainer1Base() {}
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <_ZN20CustomContainer1BaseD1Ev+0x40>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	33e4      	adds	r3, #228	; 0xe4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 facc 	bl	8005350 <_ZN8touchgfx13PainterRGB888D1Ev>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3358      	adds	r3, #88	; 0x58
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f953 	bl	8005068 <_ZN8touchgfx5ShapeILt4EED1Ev>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	332c      	adds	r3, #44	; 0x2c
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 faa0 	bl	800530c <_ZN8touchgfx5ImageD1Ev>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fed2 	bl	8004b78 <_ZN8touchgfx9ContainerD1Ev>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	08026c78 	.word	0x08026c78

08004de4 <_ZN20CustomContainer1BaseD0Ev>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ffd7 	bl	8004da0 <_ZN20CustomContainer1BaseD1Ev>
 8004df2:	21fc      	movs	r1, #252	; 0xfc
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f01f fe32 	bl	8024a5e <_ZdlPvj>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	71bb      	strb	r3, [r7, #6]
 8004e12:	4613      	mov	r3, r2
 8004e14:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8004e16:	f7fd ffed 	bl	8002df4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8004e22:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8004e24:	2138      	movs	r1, #56	; 0x38
 8004e26:	480b      	ldr	r0, [pc, #44]	; (8004e54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8004e28:	f01f fe44 	bl	8024ab4 <__assert_func>
 8004e2c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8004e2e:	f7fd fb71 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8004e32:	6803      	ldr	r3, [r0, #0]
 8004e34:	332c      	adds	r3, #44	; 0x2c
 8004e36:	681c      	ldr	r4, [r3, #0]
 8004e38:	797b      	ldrb	r3, [r7, #5]
 8004e3a:	79ba      	ldrb	r2, [r7, #6]
 8004e3c:	79f9      	ldrb	r1, [r7, #7]
 8004e3e:	47a0      	blx	r4
 8004e40:	4603      	mov	r3, r0
    }
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08025ce0 	.word	0x08025ce0
 8004e50:	08026e04 	.word	0x08026e04
 8004e54:	08025d24 	.word	0x08025d24

08004e58 <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * @tparam T      The type of the points used for the shape. Must be int or float.
 *
 * @see CanvasWidget
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f010 fd84 	bl	8015970 <_ZN8touchgfx13AbstractShapeC1Ev>
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	334c      	adds	r3, #76	; 0x4c
 8004e72:	2403      	movs	r4, #3
 8004e74:	461d      	mov	r5, r3
 8004e76:	2c00      	cmp	r4, #0
 8004e78:	db05      	blt.n	8004e86 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7ff ff18 	bl	8004cb0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8004e80:	3504      	adds	r5, #4
 8004e82:	3c01      	subs	r4, #1
 8004e84:	e7f7      	b.n	8004e76 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	335c      	adds	r3, #92	; 0x5c
 8004e8a:	2403      	movs	r4, #3
 8004e8c:	461d      	mov	r5, r3
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	db05      	blt.n	8004e9e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 8004e92:	4628      	mov	r0, r5
 8004e94:	f7ff ff0c 	bl	8004cb0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8004e98:	3504      	adds	r5, #4
 8004e9a:	3c01      	subs	r4, #1
 8004e9c:	e7f7      	b.n	8004e8e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	336c      	adds	r3, #108	; 0x6c
 8004ea2:	2403      	movs	r4, #3
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	2c00      	cmp	r4, #0
 8004ea8:	db05      	blt.n	8004eb6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7ff ff00 	bl	8004cb0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8004eb0:	3504      	adds	r5, #4
 8004eb2:	3c01      	subs	r4, #1
 8004eb4:	e7f7      	b.n	8004ea6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	337c      	adds	r3, #124	; 0x7c
 8004eba:	2403      	movs	r4, #3
 8004ebc:	461d      	mov	r5, r3
 8004ebe:	2c00      	cmp	r4, #0
 8004ec0:	db05      	blt.n	8004ece <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f7ff fef4 	bl	8004cb0 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8004ec8:	3504      	adds	r5, #4
 8004eca:	3c01      	subs	r4, #1
 8004ecc:	e7f7      	b.n	8004ebe <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed8:	08026d08 	.word	0x08026d08

08004edc <_ZN20CustomContainer1BaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/CustomContainer1Base.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>

CustomContainer1Base::CustomContainer1Base()
 8004edc:	b5b0      	push	{r4, r5, r7, lr}
 8004ede:	b090      	sub	sp, #64	; 0x40
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fe30 	bl	8004b4c <_ZN8touchgfx9ContainerC1Ev>
 8004eec:	4a55      	ldr	r2, [pc, #340]	; (8005044 <_ZN20CustomContainer1BaseC1Ev+0x168>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8004ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004efc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fc90 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8004f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff fead 	bl	8004c6c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3358      	adds	r3, #88	; 0x58
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff ff9e 	bl	8004e58 <_ZN8touchgfx5ShapeILt4EEC1Ev>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8004f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fc4d 	bl	80047c8 <_ZN8touchgfx9colortypeC1Em>
 8004f2e:	22ff      	movs	r2, #255	; 0xff
 8004f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f32:	4620      	mov	r0, r4
 8004f34:	f010 ff64 	bl	8015e00 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
{
    setWidth(168);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	21a8      	movs	r1, #168	; 0xa8
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fd3a 	bl	80049b6 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(67);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2143      	movs	r1, #67	; 0x43
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff fd44 	bl	80049d4 <_ZN8touchgfx8Drawable9setHeightEs>
    icon.setXY(6, 6);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	332c      	adds	r3, #44	; 0x2c
 8004f50:	2206      	movs	r2, #6
 8004f52:	2106      	movs	r1, #6
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fd10 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    icon.setBitmap(touchgfx::Bitmap(BITMAP_MINIDOWN_ID));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8004f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f64:	210d      	movs	r1, #13
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fc5d 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8004f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f70:	4619      	mov	r1, r3
 8004f72:	4620      	mov	r0, r4
 8004f74:	f011 fd44 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    shape1.setPosition(126, 23, 25, 25);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8004f7e:	2319      	movs	r3, #25
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2319      	movs	r3, #25
 8004f84:	2217      	movs	r2, #23
 8004f86:	217e      	movs	r1, #126	; 0x7e
 8004f88:	f7ff fcac 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setVisible(false);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3358      	adds	r3, #88	; 0x58
 8004f90:	2100      	movs	r1, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fd62 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
    shape1.setOrigin(0.000f, 0.000f);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3358      	adds	r3, #88	; 0x58
 8004f9c:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8005048 <_ZN20CustomContainer1BaseC1Ev+0x16c>
 8004fa0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8005048 <_ZN20CustomContainer1BaseC1Ev+0x16c>
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f881 	bl	80050ac <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(0.300f, 0.300f);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3358      	adds	r3, #88	; 0x58
 8004fae:	eddf 0a27 	vldr	s1, [pc, #156]	; 800504c <_ZN20CustomContainer1BaseC1Ev+0x170>
 8004fb2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800504c <_ZN20CustomContainer1BaseC1Ev+0x170>
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f8d8 	bl	800516c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.000f);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3358      	adds	r3, #88	; 0x58
 8004fc0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8005048 <_ZN20CustomContainer1BaseC1Ev+0x16c>
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f915 	bl	80051f4 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 255, 0));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	21ff      	movs	r1, #255	; 0xff
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7ff ff15 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f010 fef2 	bl	8015dca <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    shape1.setPainter(shape1Painter);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	33e4      	adds	r3, #228	; 0xe4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f010 ff4c 	bl	8015e90 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.000f, 0.000f }, { 80.000f, 40.000f }, { 40.000f, 80.000f }, { 0.000f, 40.000f } };
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <_ZN20CustomContainer1BaseC1Ev+0x174>)
 8004ffa:	f107 040c 	add.w	r4, r7, #12
 8004ffe:	461d      	mov	r5, r3
 8005000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005004:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3358      	adds	r3, #88	; 0x58
 8005010:	f107 020c 	add.w	r2, r7, #12
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f924 	bl	8005264 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(icon);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	332c      	adds	r3, #44	; 0x2c
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f00f fc4d 	bl	80148c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(shape1);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3358      	adds	r3, #88	; 0x58
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f00f fc46 	bl	80148c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	3738      	adds	r7, #56	; 0x38
 800503e:	46bd      	mov	sp, r7
 8005040:	bdb0      	pop	{r4, r5, r7, pc}
 8005042:	bf00      	nop
 8005044:	08026c78 	.word	0x08026c78
 8005048:	00000000 	.word	0x00000000
 800504c:	3e99999a 	.word	0x3e99999a
 8005050:	08025d68 	.word	0x08025d68

08005054 <_ZN20CustomContainer1Base10initializeEv>:

void CustomContainer1Base::initialize()
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_ZN8touchgfx5ShapeILt4EED1Ev>:
     *
     * @brief Virtual Destructor.
     *
     *        Virtual Destructor.
     */
    virtual ~Shape()
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
    {
    }
 8005070:	4a05      	ldr	r2, [pc, #20]	; (8005088 <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	f010 fc8f 	bl	801599c <_ZN8touchgfx13AbstractShapeD1Ev>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08026d08 	.word	0x08026d08

0800508c <_ZN8touchgfx5ShapeILt4EED0Ev>:
    virtual ~Shape()
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
    }
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ffe7 	bl	8005068 <_ZN8touchgfx5ShapeILt4EED1Ev>
 800509a:	218c      	movs	r1, #140	; 0x8c
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f01f fcde 	bl	8024a5e <_ZdlPvj>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @note The area containing the AbstractShape is not invalidated.
     *
     * @see moveOrigin()
     */
    template <typename T>
    void setOrigin(T x, T y)
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b08b      	sub	sp, #44	; 0x2c
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80050b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	623b      	str	r3, [r7, #32]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80050c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80050c4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005168 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 80050c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d0:	f107 031c 	add.w	r3, r7, #28
 80050d4:	ee17 1a90 	vmov	r1, s15
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fdf7 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80050de:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005168 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 80050ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f6:	f107 0318 	add.w	r3, r7, #24
 80050fa:	ee17 1a90 	vmov	r1, s15
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fde4 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8005104:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 8005106:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3330      	adds	r3, #48	; 0x30
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fdec 	bl	8004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8005112:	4604      	mov	r4, r0
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fde6 	bl	8004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800511e:	4603      	mov	r3, r0
 8005120:	429c      	cmp	r4, r3
 8005122:	d10f      	bne.n	8005144 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3334      	adds	r3, #52	; 0x34
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fdde 	bl	8004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800512e:	4604      	mov	r4, r0
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fdd8 	bl	8004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800513a:	4603      	mov	r3, r0
 800513c:	429c      	cmp	r4, r3
 800513e:	d101      	bne.n	8005144 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
        dy = dyNew;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	635a      	str	r2, [r3, #52]	; 0x34

        updateAbstractShapeCache();
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f010 fc2a 	bl	80159b0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 800515c:	e000      	b.n	8005160 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 800515e:	bf00      	nop
    }
 8005160:	372c      	adds	r7, #44	; 0x2c
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	bf00      	nop
 8005168:	42000000 	.word	0x42000000

0800516c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @note The area containing the AbstractShape is not invalidated.
     *
     * @see getScale, updateScale
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	ed87 0a02 	vstr	s0, [r7, #8]
 8005178:	edc7 0a01 	vstr	s1, [r7, #4]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8005180:	edd7 7a06 	vldr	s15, [r7, #24]
 8005184:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80051f0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8005188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800518c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051f0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8005190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	ee17 1a90 	vmov	r1, s15
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fdae 	bl	8004d02 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80051b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80051f0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80051ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051be:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80051f0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80051c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	ee17 1a90 	vmov	r1, s15
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fd95 	bl	8004d02 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
        updateAbstractShapeCache();
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f010 fbe5 	bl	80159b0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80051e6:	bf00      	nop
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	42000000 	.word	0x42000000

080051f4 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	ed87 0a00 	vstr	s0, [r7]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	617b      	str	r3, [r7, #20]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8005204:	edd7 7a05 	vldr	s15, [r7, #20]
 8005208:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005260 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 800520c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	ee17 1a90 	vmov	r1, s15
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fd55 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8005222:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 8005224:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3338      	adds	r3, #56	; 0x38
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fd5d 	bl	8004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8005230:	4604      	mov	r4, r0
 8005232:	f107 030c 	add.w	r3, r7, #12
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fd57 	bl	8004cea <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800523c:	4603      	mov	r3, r0
 800523e:	429c      	cmp	r4, r3
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
            updateAbstractShapeCache();
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f010 fbac 	bl	80159b0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	42000000 	.word	0x42000000

08005264 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 8005264:	b5b0      	push	{r4, r5, r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3378      	adds	r3, #120	; 0x78
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
 800527a:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	da38      	bge.n	80052fa <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	337c      	adds	r3, #124	; 0x7c
 800528e:	681c      	ldr	r4, [r3, #0]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	4413      	add	r3, r2
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	edd7 7a04 	vldr	s15, [r7, #16]
 80052a0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005308 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 80052a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	ee17 1a90 	vmov	r1, s15
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fd09 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	461d      	mov	r5, r3
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80052ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005308 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 80052d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	ee17 1a90 	vmov	r1, s15
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fcf2 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	462a      	mov	r2, r5
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e7c2      	b.n	8005280 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f010 fb58 	bl	80159b0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8005300:	bf00      	nop
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bdb0      	pop	{r4, r5, r7, pc}
 8005308:	42000000 	.word	0x42000000

0800530c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	4a05      	ldr	r2, [pc, #20]	; (800532c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fc5f 	bl	8004be0 <_ZN8touchgfx6WidgetD1Ev>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	08028c30 	.word	0x08028c30

08005330 <_ZN8touchgfx5ImageD0Ev>:
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ffe7 	bl	800530c <_ZN8touchgfx5ImageD1Ev>
 800533e:	212c      	movs	r1, #44	; 0x2c
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f01f fb8c 	bl	8024a5e <_ZdlPvj>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	4a05      	ldr	r2, [pc, #20]	; (8005370 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fcfb 	bl	8004d5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08028734 	.word	0x08028734

08005374 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ffe7 	bl	8005350 <_ZN8touchgfx13PainterRGB888D1Ev>
 8005382:	2118      	movs	r1, #24
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f01f fb6a 	bl	8024a5e <_ZdlPvj>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
     *
     *        Gets number points used to make up the shape.
     *
     * @return The number points.
     */
    virtual int getNumPoints() const
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 800539c:	2304      	movs	r3, #4
    }
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:
     *
     * @param i Zero-based index of the corner.
     * @param x The x coordinate in Q5 format.
     * @param y The y coordinate in Q5 format.
     */
    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db10      	blt.n	80053e0 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x36>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	dc0d      	bgt.n	80053e0 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x36>
        {
            xCorner[i] = x, yCorner[i] = y;
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3312      	adds	r3, #18
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	3316      	adds	r3, #22
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]
        }
    }
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The corner x coordinate.
     */
    virtual CWRUtil::Q5 getCornerX(int i) const
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	db09      	blt.n	8005410 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x24>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	dc06      	bgt.n	8005410 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x24>
        {
            return xCorner[i];
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	3312      	adds	r3, #18
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	e00b      	b.n	8005428 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3c>
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fc54 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8005424:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8005426:	bf00      	nop
    }
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The corner y coordinate.
     */
    virtual CWRUtil::Q5 getCornerY(int i) const
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	db09      	blt.n	8005454 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x24>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b03      	cmp	r3, #3
 8005444:	dc06      	bgt.n	8005454 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x24>
        {
            return yCorner[i];
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	3316      	adds	r3, #22
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	e00b      	b.n	800546c <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3c>
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	4611      	mov	r1, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fc32 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8005468:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 800546a:	bf00      	nop
    }
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:
     *
     * @param i Zero-based index of the corner.
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	db10      	blt.n	80054aa <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x36>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b03      	cmp	r3, #3
 800548c:	dc0d      	bgt.n	80054aa <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x36>
        {
            xCache[i] = x, yCache[i] = y;
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	331a      	adds	r3, #26
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	331e      	adds	r3, #30
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]
        }
    }
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The cached x coordinate.
     */
    virtual CWRUtil::Q5 getCacheX(int i) const
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	db09      	blt.n	80054da <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x24>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	dc06      	bgt.n	80054da <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x24>
        {
            return xCache[i];
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	331a      	adds	r3, #26
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	e00b      	b.n	80054f2 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3c>
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fbef 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80054ee:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80054f0:	bf00      	nop
    }
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:
     *
     * @param i Zero-based index of the corner.
     *
     * @return The cached y coordinate.
     */
    virtual CWRUtil::Q5 getCacheY(int i) const
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	db09      	blt.n	800551e <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x24>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b03      	cmp	r3, #3
 800550e:	dc06      	bgt.n	800551e <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x24>
        {
            return yCache[i];
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	331e      	adds	r3, #30
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	e00b      	b.n	8005536 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3c>
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fbcd 	bl	8004ccc <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8005532:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8005534:	bf00      	nop
    }
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <_ZNK8touchgfx9TypedText7getFontEv>:
    const Font* getFont() const
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
        assertValid();
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f82d 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800554e:	4b08      	ldr	r3, [pc, #32]	; (8005570 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	440b      	add	r3, r1
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	681b      	ldr	r3, [r3, #0]
    }
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	2000bb94 	.word	0x2000bb94
 8005574:	2000bb8c 	.word	0x2000bb8c

08005578 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
    TextDirection getTextDirection() const
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
        assertValid();
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f811 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005598:	b2db      	uxtb	r3, r3
    }
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	2000bb8c 	.word	0x2000bb8c

080055a8 <_ZNK8touchgfx9TypedText11assertValidEv>:

private:
    void assertValid() const
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 80055ba:	4a0c      	ldr	r2, [pc, #48]	; (80055ec <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80055bc:	21de      	movs	r1, #222	; 0xde
 80055be:	480c      	ldr	r0, [pc, #48]	; (80055f0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 80055c0:	f01f fa78 	bl	8024ab4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	881a      	ldrh	r2, [r3, #0]
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d305      	bcc.n	80055dc <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 80055d2:	4a06      	ldr	r2, [pc, #24]	; (80055ec <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80055d4:	21df      	movs	r1, #223	; 0xdf
 80055d6:	4806      	ldr	r0, [pc, #24]	; (80055f0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 80055d8:	f01f fa6c 	bl	8024ab4 <__assert_func>
    }
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	2000bb8c 	.word	0x2000bb8c
 80055e8:	08025d88 	.word	0x08025d88
 80055ec:	08026e60 	.word	0x08026e60
 80055f0:	08025dcc 	.word	0x08025dcc
 80055f4:	2000bb90 	.word	0x2000bb90
 80055f8:	08025e14 	.word	0x08025e14

080055fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800561c:	4a07      	ldr	r2, [pc, #28]	; (800563c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	721a      	strb	r2, [r3, #8]
    {
    }
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	08026eb8 	.word	0x08026eb8

08005640 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    {
 8005648:	4a04      	ldr	r2, [pc, #16]	; (800565c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
    }
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	08026eb8 	.word	0x08026eb8

08005660 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
    }
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ffe9 	bl	8005640 <_ZN8touchgfx10TransitionD1Ev>
 800566e:	210c      	movs	r1, #12
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f01f f9f4 	bl	8024a5e <_ZdlPvj>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	605a      	str	r2, [r3, #4]
    }
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f013 f842 	bl	801876c <_ZN8touchgfx11ApplicationC1Ev>
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a04      	ldr	r2, [pc, #16]	; (8005714 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8005702:	6013      	str	r3, [r2, #0]
    }
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	08026930 	.word	0x08026930
 8005714:	2000bb88 	.word	0x2000bb88

08005718 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8005724:	f012 ffb8 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8005728:	4603      	mov	r3, r0
 800572a:	4618      	mov	r0, r3
 800572c:	f013 f802 	bl	8018734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
    }
    if (*currentTrans)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4610      	mov	r0, r2
 8005760:	4798      	blx	r3
    }
    if (*currentScreen)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
    }
    if (*currentPresenter)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3304      	adds	r3, #4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4610      	mov	r0, r2
 8005794:	4798      	blx	r3
    }
    if (*currentScreen)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4610      	mov	r0, r2
 80057ac:	4798      	blx	r3
    }
    if (*currentPresenter)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
    }
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	4798      	blx	r3
    newPresenter->activate();
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68b8      	ldr	r0, [r7, #8]
 80057f0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f014 f8cf 	bl	8019998 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3310      	adds	r3, #16
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3

    Application::getInstance()->draw();
 8005806:	f012 ff47 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 800580a:	4602      	mov	r2, r0
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	3328      	adds	r3, #40	; 0x28
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4610      	mov	r0, r2
 8005814:	4798      	blx	r3
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
    }
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fee4 	bl	8005614 <_ZN8touchgfx10TransitionC1Ev>
 800584c:	4a03      	ldr	r2, [pc, #12]	; (800585c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	08026e98 	.word	0x08026e98

08005860 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	4a05      	ldr	r2, [pc, #20]	; (8005880 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fee5 	bl	8005640 <_ZN8touchgfx10TransitionD1Ev>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	08026e98 	.word	0x08026e98

08005884 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ffe7 	bl	8005860 <_ZN8touchgfx12NoTransitionD1Ev>
 8005892:	210c      	movs	r1, #12
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f01f f8e2 	bl	8024a5e <_ZdlPvj>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	721a      	strb	r2, [r3, #8]
    }
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	605a      	str	r2, [r3, #4]
    }
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fef4 	bl	80056d8 <_ZN8touchgfx14MVPApplicationC1Ev>
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 f92b 	bl	8005b58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005912:	f7fd fa6f 	bl	8002df4 <_ZN8touchgfx3HAL11getInstanceEv>
 8005916:	4602      	mov	r2, r0
 8005918:	6813      	ldr	r3, [r2, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2100      	movs	r1, #0
 8005920:	4610      	mov	r0, r2
 8005922:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8005924:	2000      	movs	r0, #0
 8005926:	f002 fcf9 	bl	800831c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800592a:	f7fc fdf3 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 800592e:	4603      	mov	r3, r0
 8005930:	4618      	mov	r0, r3
 8005932:	f018 fda2 	bl	801e47a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	080268dc 	.word	0x080268dc

08005944 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ffe9 	bl	8005944 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	3208      	adds	r2, #8
 8005982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005986:	e883 0003 	stmia.w	r3, {r0, r1}
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:
 */

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80059a2:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	f107 0008 	add.w	r0, r7, #8
 80059ae:	f107 0318 	add.w	r3, r7, #24
 80059b2:	cb0c      	ldmia	r3, {r2, r3}
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	f000 f8eb 	bl	8005b90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	4619      	mov	r1, r3
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7ff ffcb 	bl	800595c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80059c6:	f107 0308 	add.w	r3, r7, #8
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fb12 	bl	8003ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80059dc:	bf00      	nop
 80059de:	3724      	adds	r7, #36	; 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd90      	pop	{r4, r7, pc}
 80059e4:	080059e9 	.word	0x080059e9

080059e8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80059fc:	461a      	mov	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 8005a08:	4804      	ldr	r0, [pc, #16]	; (8005a1c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 8005a0a:	f000 f8e1 	bl	8005bd0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2000bb7c 	.word	0x2000bb7c
 8005a1c:	2000bb78 	.word	0x2000bb78

08005a20 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b089      	sub	sp, #36	; 0x24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8005a2e:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	f107 0008 	add.w	r0, r7, #8
 8005a3a:	f107 0318 	add.w	r3, r7, #24
 8005a3e:	cb0c      	ldmia	r3, {r2, r3}
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	f000 f8a5 	bl	8005b90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005a46:	f107 0308 	add.w	r3, r7, #8
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7ff ff85 	bl	800595c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe facc 	bl	8003ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8005a68:	bf00      	nop
 8005a6a:	3724      	adds	r7, #36	; 0x24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}
 8005a70:	08005a75 	.word	0x08005a75

08005a74 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 8005a94:	4804      	ldr	r0, [pc, #16]	; (8005aa8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 8005a96:	f000 f957 	bl	8005d48 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2000bb7c 	.word	0x2000bb7c
 8005aa8:	2000bb78 	.word	0x2000bb78

08005aac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	f107 0008 	add.w	r0, r7, #8
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	cb0c      	ldmia	r3, {r2, r3}
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	f000 f85f 	bl	8005b90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005ad2:	f107 0308 	add.w	r3, r7, #8
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f7ff ff3f 	bl	800595c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fa86 	bl	8003ff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8005af4:	bf00      	nop
 8005af6:	3724      	adds	r7, #36	; 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd90      	pop	{r4, r7, pc}
 8005afc:	08005b01 	.word	0x08005b01

08005b00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8005b20:	4804      	ldr	r0, [pc, #16]	; (8005b34 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8005b22:	f000 f9cb 	bl	8005ebc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	2000bb7c 	.word	0x2000bb7c
 8005b34:	2000bb78 	.word	0x2000bb78

08005b38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	0802696c 	.word	0x0802696c

08005b58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff ffe8 	bl	8005b38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005b68:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08026918 	.word	0x08026918

08005b90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ffc8 	bl	8005b38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005ba8:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	463a      	mov	r2, r7
 8005bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bbe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	08026918 	.word	0x08026918

08005bd0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3320      	adds	r3, #32
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	f642 0367 	movw	r3, #10343	; 0x2867
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d805      	bhi.n	8005c06 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8005bfa:	4b4e      	ldr	r3, [pc, #312]	; (8005d34 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005bfc:	4a4e      	ldr	r2, [pc, #312]	; (8005d38 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005bfe:	21c2      	movs	r1, #194	; 0xc2
 8005c00:	484e      	ldr	r0, [pc, #312]	; (8005d3c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8005c02:	f01e ff57 	bl	8024ab4 <__assert_func>
 8005c06:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3320      	adds	r3, #32
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4610      	mov	r0, r2
 8005c18:	4798      	blx	r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b0f      	cmp	r3, #15
 8005c1e:	d805      	bhi.n	8005c2c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8005c20:	4b47      	ldr	r3, [pc, #284]	; (8005d40 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8005c22:	4a45      	ldr	r2, [pc, #276]	; (8005d38 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005c24:	21c3      	movs	r1, #195	; 0xc3
 8005c26:	4845      	ldr	r0, [pc, #276]	; (8005d3c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8005c28:	f01e ff44 	bl	8024ab4 <__assert_func>
 8005c2c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3320      	adds	r3, #32
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b0b      	cmp	r3, #11
 8005c44:	d805      	bhi.n	8005c52 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8005c46:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8005c48:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005c4a:	21c4      	movs	r1, #196	; 0xc4
 8005c4c:	483b      	ldr	r0, [pc, #236]	; (8005d3c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8005c4e:	f01e ff31 	bl	8024ab4 <__assert_func>
 8005c52:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fd5d 	bl	8005718 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f9e3 	bl	8006030 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	200c      	movs	r0, #12
 8005c70:	f7ff fcc4 	bl	80055fc <_ZnwjPv>
 8005c74:	4604      	mov	r4, r0
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	d004      	beq.n	8005c84 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff fdde 	bl	800583c <_ZN8touchgfx12NoTransitionC1Ev>
 8005c80:	4623      	mov	r3, r4
 8005c82:	e000      	b.n	8005c86 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8005c84:	4623      	mov	r3, r4
 8005c86:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f9e1 	bl	8006056 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 8005c94:	4603      	mov	r3, r0
 8005c96:	4619      	mov	r1, r3
 8005c98:	f642 0068 	movw	r0, #10344	; 0x2868
 8005c9c:	f7ff fcae 	bl	80055fc <_ZnwjPv>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	d004      	beq.n	8005cb0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f003 f93a 	bl	8008f20 <_ZN11Screen3ViewC1Ev>
 8005cac:	4623      	mov	r3, r4
 8005cae:	e000      	b.n	8005cb2 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f9de 	bl	800607c <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	2010      	movs	r0, #16
 8005cc6:	f7ff fc99 	bl	80055fc <_ZnwjPv>
 8005cca:	4604      	mov	r4, r0
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d005      	beq.n	8005cdc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f003 f8a2 	bl	8008e1c <_ZN16Screen3PresenterC1ER11Screen3View>
 8005cd8:	4623      	mov	r3, r4
 8005cda:	e000      	b.n	8005cde <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8005cdc:	4623      	mov	r3, r4
 8005cde:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	e000      	b.n	8005d00 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4619      	mov	r1, r3
 8005d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d04:	f7ff fd8b 	bl	800581e <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fdd5 	bl	80058be <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f9c2 	bl	80060a2 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	6979      	ldr	r1, [r7, #20]
 8005d22:	69b8      	ldr	r0, [r7, #24]
 8005d24:	f7ff fd54 	bl	80057d0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3724      	adds	r7, #36	; 0x24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08025e68 	.word	0x08025e68
 8005d38:	08026ed0 	.word	0x08026ed0
 8005d3c:	08025ef8 	.word	0x08025ef8
 8005d40:	08025f40 	.word	0x08025f40
 8005d44:	08025fe4 	.word	0x08025fe4

08005d48 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3320      	adds	r3, #32
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8005d6e:	d205      	bcs.n	8005d7c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8005d70:	4b4d      	ldr	r3, [pc, #308]	; (8005ea8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8005d72:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005d74:	21c2      	movs	r1, #194	; 0xc2
 8005d76:	484e      	ldr	r0, [pc, #312]	; (8005eb0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005d78:	f01e fe9c 	bl	8024ab4 <__assert_func>
 8005d7c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3320      	adds	r3, #32
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d805      	bhi.n	8005da2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005d96:	4b47      	ldr	r3, [pc, #284]	; (8005eb4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8005d98:	4a44      	ldr	r2, [pc, #272]	; (8005eac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005d9a:	21c3      	movs	r1, #195	; 0xc3
 8005d9c:	4844      	ldr	r0, [pc, #272]	; (8005eb0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005d9e:	f01e fe89 	bl	8024ab4 <__assert_func>
 8005da2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3320      	adds	r3, #32
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4610      	mov	r0, r2
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b0b      	cmp	r3, #11
 8005dba:	d805      	bhi.n	8005dc8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005dbc:	4b3e      	ldr	r3, [pc, #248]	; (8005eb8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8005dbe:	4a3b      	ldr	r2, [pc, #236]	; (8005eac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005dc0:	21c4      	movs	r1, #196	; 0xc4
 8005dc2:	483b      	ldr	r0, [pc, #236]	; (8005eb0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005dc4:	f01e fe76 	bl	8024ab4 <__assert_func>
 8005dc8:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fca2 	bl	8005718 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f928 	bl	8006030 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4619      	mov	r1, r3
 8005de4:	200c      	movs	r0, #12
 8005de6:	f7ff fc09 	bl	80055fc <_ZnwjPv>
 8005dea:	4604      	mov	r4, r0
 8005dec:	2c00      	cmp	r4, #0
 8005dee:	d004      	beq.n	8005dfa <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff fd23 	bl	800583c <_ZN8touchgfx12NoTransitionC1Ev>
 8005df6:	4623      	mov	r3, r4
 8005df8:	e000      	b.n	8005dfc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f95a 	bl	80060be <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8005e12:	f7ff fbf3 	bl	80055fc <_ZnwjPv>
 8005e16:	4604      	mov	r4, r0
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d004      	beq.n	8005e26 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f002 fe59 	bl	8008ad4 <_ZN11Screen2ViewC1Ev>
 8005e22:	4623      	mov	r3, r4
 8005e24:	e000      	b.n	8005e28 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8005e26:	4623      	mov	r3, r4
 8005e28:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 f957 	bl	80060e4 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4619      	mov	r1, r3
 8005e3a:	2010      	movs	r0, #16
 8005e3c:	f7ff fbde 	bl	80055fc <_ZnwjPv>
 8005e40:	4604      	mov	r4, r0
 8005e42:	2c00      	cmp	r4, #0
 8005e44:	d005      	beq.n	8005e52 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f002 fdcf 	bl	80089ec <_ZN16Screen2PresenterC1ER11Screen2View>
 8005e4e:	4623      	mov	r3, r4
 8005e50:	e000      	b.n	8005e54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8005e52:	4623      	mov	r3, r4
 8005e54:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3304      	adds	r3, #4
 8005e72:	e000      	b.n	8005e76 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8005e74:	2300      	movs	r3, #0
 8005e76:	4619      	mov	r1, r3
 8005e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7a:	f7ff fcd0 	bl	800581e <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3304      	adds	r3, #4
 8005e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fd1a 	bl	80058be <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f93b 	bl	800610a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	6979      	ldr	r1, [r7, #20]
 8005e98:	69b8      	ldr	r0, [r7, #24]
 8005e9a:	f7ff fc99 	bl	80057d0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8005e9e:	697b      	ldr	r3, [r7, #20]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3724      	adds	r7, #36	; 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd90      	pop	{r4, r7, pc}
 8005ea8:	08025e68 	.word	0x08025e68
 8005eac:	08026fd4 	.word	0x08026fd4
 8005eb0:	08025ef8 	.word	0x08025ef8
 8005eb4:	08025f40 	.word	0x08025f40
 8005eb8:	08025fe4 	.word	0x08025fe4

08005ebc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3320      	adds	r3, #32
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	4603      	mov	r3, r0
 8005ede:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 8005ee2:	d205      	bcs.n	8005ef0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8005ee4:	4b4d      	ldr	r3, [pc, #308]	; (800601c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8005ee6:	4a4e      	ldr	r2, [pc, #312]	; (8006020 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005ee8:	21c2      	movs	r1, #194	; 0xc2
 8005eea:	484e      	ldr	r0, [pc, #312]	; (8006024 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005eec:	f01e fde2 	bl	8024ab4 <__assert_func>
 8005ef0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3320      	adds	r3, #32
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d805      	bhi.n	8005f16 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005f0a:	4b47      	ldr	r3, [pc, #284]	; (8006028 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8005f0c:	4a44      	ldr	r2, [pc, #272]	; (8006020 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005f0e:	21c3      	movs	r1, #195	; 0xc3
 8005f10:	4844      	ldr	r0, [pc, #272]	; (8006024 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005f12:	f01e fdcf 	bl	8024ab4 <__assert_func>
 8005f16:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3320      	adds	r3, #32
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4610      	mov	r0, r2
 8005f28:	4798      	blx	r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b0b      	cmp	r3, #11
 8005f2e:	d805      	bhi.n	8005f3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005f30:	4b3e      	ldr	r3, [pc, #248]	; (800602c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8005f32:	4a3b      	ldr	r2, [pc, #236]	; (8006020 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8005f34:	21c4      	movs	r1, #196	; 0xc4
 8005f36:	483b      	ldr	r0, [pc, #236]	; (8006024 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8005f38:	f01e fdbc 	bl	8024ab4 <__assert_func>
 8005f3c:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff fbe8 	bl	8005718 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 f86e 	bl	8006030 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4619      	mov	r1, r3
 8005f58:	200c      	movs	r0, #12
 8005f5a:	f7ff fb4f 	bl	80055fc <_ZnwjPv>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	d004      	beq.n	8005f6e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff fc69 	bl	800583c <_ZN8touchgfx12NoTransitionC1Ev>
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	e000      	b.n	8005f70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8005f6e:	4623      	mov	r3, r4
 8005f70:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f8d4 	bl	8006126 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4619      	mov	r1, r3
 8005f82:	f44f 7023 	mov.w	r0, #652	; 0x28c
 8005f86:	f7ff fb39 	bl	80055fc <_ZnwjPv>
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	d004      	beq.n	8005f9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8005f90:	4620      	mov	r0, r4
 8005f92:	f002 fca1 	bl	80088d8 <_ZN11Screen1ViewC1Ev>
 8005f96:	4623      	mov	r3, r4
 8005f98:	e000      	b.n	8005f9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 f8d1 	bl	800614c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005faa:	4603      	mov	r3, r0
 8005fac:	4619      	mov	r1, r3
 8005fae:	2010      	movs	r0, #16
 8005fb0:	f7ff fb24 	bl	80055fc <_ZnwjPv>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	2c00      	cmp	r4, #0
 8005fb8:	d005      	beq.n	8005fc6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8005fba:	69b9      	ldr	r1, [r7, #24]
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f002 fbfb 	bl	80087b8 <_ZN16Screen1PresenterC1ER11Screen1View>
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	e000      	b.n	8005fc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8005fc6:	4623      	mov	r3, r4
 8005fc8:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	e000      	b.n	8005fea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fee:	f7ff fc16 	bl	800581e <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fc60 	bl	80058be <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	6979      	ldr	r1, [r7, #20]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f8b5 	bl	8006172 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	69b8      	ldr	r0, [r7, #24]
 800600e:	f7ff fbdf 	bl	80057d0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3724      	adds	r7, #36	; 0x24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd90      	pop	{r4, r7, pc}
 800601c:	08025e68 	.word	0x08025e68
 8006020:	080270d8 	.word	0x080270d8
 8006024:	08025ef8 	.word	0x08025ef8
 8006028:	08025f40 	.word	0x08025f40
 800602c:	08025fe4 	.word	0x08025fe4

08006030 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	4611      	mov	r1, r2
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
 800604c:	4603      	mov	r3, r0
    }
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3324      	adds	r3, #36	; 0x24
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	887a      	ldrh	r2, [r7, #2]
 800606c:	4611      	mov	r1, r2
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
 8006072:	4603      	mov	r3, r0
    }
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3324      	adds	r3, #36	; 0x24
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	887a      	ldrh	r2, [r7, #2]
 8006092:	4611      	mov	r1, r2
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
    }
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	887a      	ldrh	r2, [r7, #2]
 80060d4:	4611      	mov	r1, r2
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
 80060da:	4603      	mov	r3, r0
    }
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3324      	adds	r3, #36	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	887a      	ldrh	r2, [r7, #2]
 80060fa:	4611      	mov	r1, r2
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
 8006100:	4603      	mov	r3, r0
    }
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3324      	adds	r3, #36	; 0x24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	4611      	mov	r1, r2
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
 8006142:	4603      	mov	r3, r0
    }
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3324      	adds	r3, #36	; 0x24
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	887a      	ldrh	r2, [r7, #2]
 8006162:	4611      	mov	r1, r2
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
 8006168:	4603      	mov	r3, r0
    }
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7b5b      	ldrb	r3, [r3, #13]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	b21b      	sxth	r3, r3
 800619e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	7adb      	ldrb	r3, [r3, #11]
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	b29b      	uxth	r3, r3
    }
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
    }
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af08      	add	r7, sp, #32
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	460b      	mov	r3, r1
 80061e4:	80fb      	strh	r3, [r7, #6]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	88b9      	ldrh	r1, [r7, #4]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061f2:	9306      	str	r3, [sp, #24]
 80061f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061f6:	9305      	str	r3, [sp, #20]
 80061f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	7f3b      	ldrb	r3, [r7, #28]
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	7e3b      	ldrb	r3, [r7, #24]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	460b      	mov	r3, r1
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	f012 ff97 	bl	8019148 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006224:	619a      	str	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	61da      	str	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006230:	621a      	str	r2, [r3, #32]
{
}
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	080271e4 	.word	0x080271e4

08006240 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	889b      	ldrh	r3, [r3, #4]
 8006254:	0adb      	lsrs	r3, r3, #11
 8006256:	b29b      	uxth	r3, r3
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4413      	add	r3, r2
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	460b      	mov	r3, r1
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7b1b      	ldrb	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800628e:	2300      	movs	r3, #0
 8006290:	e023      	b.n	80062da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff ff7b 	bl	800618e <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8006298:	4603      	mov	r3, r0
 800629a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800629c:	8abb      	ldrh	r3, [r7, #20]
 800629e:	82fb      	strh	r3, [r7, #22]
 80062a0:	8afa      	ldrh	r2, [r7, #22]
 80062a2:	8abb      	ldrh	r3, [r7, #20]
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	7b09      	ldrb	r1, [r1, #12]
 80062a8:	440b      	add	r3, r1
 80062aa:	429a      	cmp	r2, r3
 80062ac:	da14      	bge.n	80062d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	8afb      	ldrh	r3, [r7, #22]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	897a      	ldrh	r2, [r7, #10]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d107      	bne.n	80062d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	8afb      	ldrh	r3, [r7, #22]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80062ce:	e004      	b.n	80062da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80062d0:	8afb      	ldrh	r3, [r7, #22]
 80062d2:	3301      	adds	r3, #1
 80062d4:	82fb      	strh	r3, [r7, #22]
 80062d6:	e7e3      	b.n	80062a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	4a06      	ldr	r2, [pc, #24]	; (8006308 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fc3e 	bl	8004b78 <_ZN8touchgfx9ContainerD1Ev>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08029198 	.word	0x08029198

0800630c <_ZN8touchgfx6ScreenD0Ev>:
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ffe5 	bl	80062e4 <_ZN8touchgfx6ScreenD1Ev>
 800631a:	213c      	movs	r1, #60	; 0x3c
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f01e fb9e 	bl	8024a5e <_ZdlPvj>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
    {
    }
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
    {
    }
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3304      	adds	r3, #4
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f00e fa8d 	bl	80148c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    TiledImage(const Bitmap& bmp = Bitmap()) : Image(bmp), xOffset(0), yOffset(0)
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fc52 	bl	8004c6c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80063c8:	4a06      	ldr	r2, [pc, #24]	; (80063e4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    {
    }
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	080289c0 	.word	0x080289c0

080063e8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	807b      	strh	r3, [r7, #2]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	887a      	ldrh	r2, [r7, #2]
 80063f8:	801a      	strh	r2, [r3, #0]
    }
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006418:	4293      	cmp	r3, r2
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
    }
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
        assertValid();
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f8b5 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f001 ffbd 	bl	80083c8 <_ZNK8touchgfx5Texts7getTextEt>
 800644e:	4603      	mov	r3, r0
    }
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	2000bb98 	.word	0x2000bb98

0800645c <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fba8 	bl	8004bbc <_ZN8touchgfx6WidgetC1Ev>
 800646c:	4a13      	ldr	r2, [pc, #76]	; (80064bc <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3326      	adds	r3, #38	; 0x26
 8006476:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ffb4 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3328      	adds	r3, #40	; 0x28
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe f99e 	bl	80047c8 <_ZN8touchgfx9colortypeC1Em>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	08028944 	.word	0x08028944

080064c0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80064ca:	2300      	movs	r3, #0
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fe f986 	bl	80047e6 <_ZN8touchgfx4RectC1Essss>
    }
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80064fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800650a:	687e      	ldr	r6, [r7, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3330      	adds	r3, #48	; 0x30
 8006512:	681c      	ldr	r4, [r3, #0]
 8006514:	887d      	ldrh	r5, [r7, #2]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f845 	bl	80065a6 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800651c:	4603      	mov	r3, r0
 800651e:	81bb      	strh	r3, [r7, #12]
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff f80b 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 800652a:	4602      	mov	r2, r0
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	332c      	adds	r3, #44	; 0x2c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4610      	mov	r0, r2
 8006534:	4798      	blx	r3
 8006536:	4603      	mov	r3, r0
 8006538:	1aeb      	subs	r3, r5, r3
 800653a:	b29b      	uxth	r3, r3
 800653c:	b21b      	sxth	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	4630      	mov	r0, r6
 8006542:	47a0      	blx	r4
    }
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800654c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
 8006558:	4613      	mov	r3, r2
 800655a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	332c      	adds	r3, #44	; 0x2c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800656a:	4610      	mov	r0, r2
 800656c:	4798      	blx	r3
        setBaselineY(baselineY);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3360      	adds	r3, #96	; 0x60
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f9b7 2000 	ldrsh.w	r2, [r7]
 800657a:	4611      	mov	r1, r2
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
    }
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	887a      	ldrh	r2, [r7, #2]
 8006598:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	4a05      	ldr	r2, [pc, #20]	; (80065e0 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fb05 	bl	8004be0 <_ZN8touchgfx6WidgetD1Ev>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08028944 	.word	0x08028944

080065e4 <_ZN8touchgfx8TextAreaD0Ev>:
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff ffe7 	bl	80065c0 <_ZN8touchgfx8TextAreaD1Ev>
 80065f2:	2134      	movs	r1, #52	; 0x34
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f01e fa32 	bl	8024a5e <_ZdlPvj>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
        : TextArea()
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff ff24 	bl	800645c <_ZN8touchgfx8TextAreaC1Ev>
 8006614:	4a03      	ldr	r2, [pc, #12]	; (8006624 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
    {
    }
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	080272d0 	.word	0x080272d0

08006628 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	4a05      	ldr	r2, [pc, #20]	; (8006648 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff ffc1 	bl	80065c0 <_ZN8touchgfx8TextAreaD1Ev>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	080272d0 	.word	0x080272d0

0800664c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ffe7 	bl	8006628 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800665a:	2134      	movs	r1, #52	; 0x34
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f01e f9fe 	bl	8024a5e <_ZdlPvj>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ffc4 	bl	8006604 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800667c:	4a05      	ldr	r2, [pc, #20]	; (8006694 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	08028b4c 	.word	0x08028b4c

08006698 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fa7d 	bl	8004be0 <_ZN8touchgfx6WidgetD1Ev>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	080288d8 	.word	0x080288d8

080066f4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ffe7 	bl	80066d0 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006702:	2130      	movs	r1, #48	; 0x30
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f01e f9aa 	bl	8024a5e <_ZdlPvj>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	4a05      	ldr	r2, [pc, #20]	; (8006734 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ffd3 	bl	80066d0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	08028aa8 	.word	0x08028aa8

08006738 <_ZN8touchgfx6ButtonD0Ev>:
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff ffe7 	bl	8006714 <_ZN8touchgfx6ButtonD1Ev>
 8006746:	2134      	movs	r1, #52	; 0x34
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f01e f988 	bl	8024a5e <_ZdlPvj>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     *        Sets the text to display on the button. Texts with wildcards are not supported.
     *
     * @param t The text to display.
     */
    void setLabelText(TypedText t)
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	8039      	strh	r1, [r7, #0]
    {
        typedText = t;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	883a      	ldrh	r2, [r7, #0]
 8006766:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f834 	bl	80067d6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
     *
     * @param col               The color with which the text label should be drawn.
     * @param performInvalidate Optional parameter. If true, performs an instant invalidation of
     *                          the button.
     */
    void setLabelColor(colortype col, bool performInvalidate = false)
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	4613      	mov	r3, r2
 8006782:	71fb      	strb	r3, [r7, #7]
    {
        color = col;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
        {
            invalidate();
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4610      	mov	r0, r2
 800679c:	4798      	blx	r3
        }
    }
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
     * @param col               The color with which the text label should be drawn when the
     *                          button is pressed.
     * @param performInvalidate Optional parameter. If true, performs an instant invalidation of
     *                          the button.
     */
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	4613      	mov	r3, r2
 80067b2:	71fb      	strb	r3, [r7, #7]
    {
        colorPressed = col;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d006      	beq.n	80067ce <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
        {
            invalidate();
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
        }
    }
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     *        If the text changes due to a language change you may need to reposition the label
     *        text to stay horizontally centered.
     *
     * @note The method does not invalidate the button. This must be done manually.
     */
    void updateTextPosition()
 80067d6:	b590      	push	{r4, r7, lr}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3334      	adds	r3, #52	; 0x34
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fe10 	bl	8006408 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d02e      	beq.n	800684c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
        {
            const Font* f = typedText.getFont();
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3334      	adds	r3, #52	; 0x34
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fea4 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 80067f8:	60f8      	str	r0, [r7, #12]
            const Unicode::UnicodeChar* s = typedText.getText();
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3334      	adds	r3, #52	; 0x34
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fe16 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 8006804:	60b8      	str	r0, [r7, #8]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3328      	adds	r3, #40	; 0x28
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	4798      	blx	r3
 8006814:	4603      	mov	r3, r0
 8006816:	b2dc      	uxtb	r4, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3340      	adds	r3, #64	; 0x40
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	4798      	blx	r3
 8006826:	4603      	mov	r3, r0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	fb14 f303 	smulbb	r3, r4, r3
 800682e:	b2dc      	uxtb	r4, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3324      	adds	r3, #36	; 0x24
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	4798      	blx	r3
 800683e:	4603      	mov	r3, r0
 8006840:	4423      	add	r3, r4
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800684a:	e003      	b.n	8006854 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7e>
            textHeightIncludingSpacing = 0;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}

0800685c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	4a05      	ldr	r2, [pc, #20]	; (800687c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fd39 	bl	80062e4 <_ZN8touchgfx6ScreenD1Ev>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08027284 	.word	0x08027284

08006880 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ffe7 	bl	800685c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800688e:	2140      	movs	r1, #64	; 0x40
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f01e f8e4 	bl	8024a5e <_ZdlPvj>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <_ZN15Screen1ViewBaseD1Ev+0x60>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fa45 	bl	8006d44 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 faa5 	bl	8006e10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	33d4      	adds	r3, #212	; 0xd4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fa7e 	bl	8006dcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	33a4      	adds	r3, #164	; 0xa4
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fa57 	bl	8006d88 <_ZN8touchgfx10TiledImageD1Ev>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3370      	adds	r3, #112	; 0x70
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fe6e 	bl	80065c0 <_ZN8touchgfx8TextAreaD1Ev>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3340      	adds	r3, #64	; 0x40
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fa4d 	bl	8006d88 <_ZN8touchgfx10TiledImageD1Ev>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ffb3 	bl	800685c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	08027238 	.word	0x08027238

08006904 <_ZN15Screen1ViewBaseD0Ev>:
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ffc7 	bl	80068a0 <_ZN15Screen1ViewBaseD1Ev>
 8006912:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f01e f8a1 	bl	8024a5e <_ZdlPvj>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800692e:	f011 feb3 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8006932:	4603      	mov	r3, r0
    }
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b091      	sub	sp, #68	; 0x44
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f996 	bl	8006c78 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800694c:	4ab7      	ldr	r2, [pc, #732]	; (8006c2c <_ZN15Screen1ViewBaseC1Ev+0x2f0>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006958:	f107 0308 	add.w	r3, r7, #8
 800695c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006960:	4618      	mov	r0, r3
 8006962:	f7fd ff60 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8006966:	f107 0308 	add.w	r3, r7, #8
 800696a:	4619      	mov	r1, r3
 800696c:	4620      	mov	r0, r4
 800696e:	f7ff fd21 	bl	80063b4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3370      	adds	r3, #112	; 0x70
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fd70 	bl	800645c <_ZN8touchgfx8TextAreaC1Ev>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8006982:	f107 030c 	add.w	r3, r7, #12
 8006986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800698a:	4618      	mov	r0, r3
 800698c:	f7fd ff4b 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4619      	mov	r1, r3
 8006996:	4620      	mov	r0, r4
 8006998:	f7ff fd0c 	bl	80063b4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	33d4      	adds	r3, #212	; 0xd4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fe63 	bl	800666c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80069ac:	4618      	mov	r0, r3
 80069ae:	f010 f95b 	bl	8016c68 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 80069b8:	4b9d      	ldr	r3, [pc, #628]	; (8006c30 <_ZN15Screen1ViewBaseC1Ev+0x2f4>)
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	f107 0310 	add.w	r3, r7, #16
 80069c4:	cb0c      	ldmia	r3, {r2, r3}
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	f000 f97c 	bl	8006cc4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_OA_ID));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80069d2:	f107 0318 	add.w	r3, r7, #24
 80069d6:	2115      	movs	r1, #21
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fd ff24 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80069de:	f107 0318 	add.w	r3, r7, #24
 80069e2:	4619      	mov	r1, r3
 80069e4:	4620      	mov	r0, r4
 80069e6:	f00f fc90 	bl	801630a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80069f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80069fa:	2200      	movs	r2, #0
 80069fc:	2100      	movs	r1, #0
 80069fe:	f7fd ff71 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3340      	adds	r3, #64	; 0x40
 8006a06:	2200      	movs	r2, #0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f00f fc5c 	bl	80162c8 <_ZN8touchgfx10TiledImage9setOffsetEss>

    textArea1_1.setXY(170, 12);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3370      	adds	r3, #112	; 0x70
 8006a14:	220c      	movs	r2, #12
 8006a16:	21aa      	movs	r1, #170	; 0xaa
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd ffae 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8006a24:	2200      	movs	r2, #0
 8006a26:	2100      	movs	r1, #0
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f7fe f9eb 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4619      	mov	r1, r3
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff fd55 	bl	80064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1_1.setLinespacing(0);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3370      	adds	r3, #112	; 0x70
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fda2 	bl	8006588 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8006a4a:	f107 031c 	add.w	r3, r7, #28
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fcc9 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8006a56:	8bb9      	ldrh	r1, [r7, #28]
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f00f fc2b 	bl	80162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    tiledImage2.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8006a64:	f107 0320 	add.w	r3, r7, #32
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fd fedb 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8006a70:	f107 0320 	add.w	r3, r7, #32
 8006a74:	4619      	mov	r1, r3
 8006a76:	4620      	mov	r0, r4
 8006a78:	f00f fc47 	bl	801630a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage2.setPosition(29, 55, 432, 205);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8006a82:	23cd      	movs	r3, #205	; 0xcd
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8006a8a:	2237      	movs	r2, #55	; 0x37
 8006a8c:	211d      	movs	r1, #29
 8006a8e:	f7fd ff29 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage2.setOffset(0, 0);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	33a4      	adds	r3, #164	; 0xa4
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f00f fc14 	bl	80162c8 <_ZN8touchgfx10TiledImage9setOffsetEss>

    textArea2.setPosition(36, 59, 418, 195);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8006aa6:	23c3      	movs	r3, #195	; 0xc3
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 8006aae:	223b      	movs	r2, #59	; 0x3b
 8006ab0:	2124      	movs	r1, #36	; 0x24
 8006ab2:	f7fd ff17 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	21ff      	movs	r1, #255	; 0xff
 8006ac0:	20ff      	movs	r0, #255	; 0xff
 8006ac2:	f7fe f99f 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7ff fd09 	bl	80064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	33d4      	adds	r3, #212	; 0xd4
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fd56 	bl	8006588 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8006ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fc7d 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8006aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fc9c 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 8006af8:	4603      	mov	r3, r0
 8006afa:	4a4e      	ldr	r2, [pc, #312]	; (8006c34 <_ZN15Screen1ViewBaseC1Ev+0x2f8>)
 8006afc:	2196      	movs	r1, #150	; 0x96
 8006afe:	4620      	mov	r0, r4
 8006b00:	f014 f9b2 	bl	801ae68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea2.setWildcard(textArea2Buffer);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f7ff fdc0 	bl	8006698 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8006b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b22:	2101      	movs	r1, #1
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fc5f 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8006b2a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f00f fbc1 	bl	80162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonWithLabel1.setXY(401, 193);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006b38:	22c1      	movs	r2, #193	; 0xc1
 8006b3a:	f240 1191 	movw	r1, #401	; 0x191
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd ff1b 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8006b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fd fe68 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8006b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fd fe62 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8006b62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f00f fd77 	bl	8016660 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID19));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8006b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b7c:	210b      	movs	r1, #11
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fc32 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8006b84:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fde6 	bl	8006758 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8006b92:	22ff      	movs	r2, #255	; 0xff
 8006b94:	21ff      	movs	r1, #255	; 0xff
 8006b96:	20ff      	movs	r0, #255	; 0xff
 8006b98:	f7fe f934 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f7ff fde7 	bl	8006776 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	21ff      	movs	r1, #255	; 0xff
 8006bb2:	20ff      	movs	r0, #255	; 0xff
 8006bb4:	f7fe f926 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7ff fdf1 	bl	80067a6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1.setAction(buttonCallback);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	f7ff fd6e 	bl	80066b4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(tiledImage1);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3340      	adds	r3, #64	; 0x40
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7ff fbd7 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_1);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3370      	adds	r3, #112	; 0x70
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f7ff fbd0 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tiledImage2);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	33a4      	adds	r3, #164	; 0xa4
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f7ff fbc9 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	33d4      	adds	r3, #212	; 0xd4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7ff fbc2 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7ff fbba 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4618      	mov	r0, r3
 8006c24:	373c      	adds	r7, #60	; 0x3c
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	08027238 	.word	0x08027238
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	080261f0 	.word	0x080261f0

08006c38 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d106      	bne.n	8006c70 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff fe5f 	bl	8006926 <_ZN15Screen1ViewBase11applicationEv>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fe92 	bl	8005994 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f012 fd0e 	bl	80196a4 <_ZN8touchgfx6ScreenC1Ev>
 8006c88:	4a05      	ldr	r2, [pc, #20]	; (8006ca0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08027284 	.word	0x08027284

08006ca4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	080272b8 	.word	0x080272b8

08006cc4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4639      	mov	r1, r7
 8006cd0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff ffe4 	bl	8006ca4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8006cdc:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3308      	adds	r3, #8
 8006cec:	463a      	mov	r2, r7
 8006cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cf2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	0802726c 	.word	0x0802726c

08006d04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
    }
 8006d0c:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	080272b8 	.word	0x080272b8

08006d24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
    }
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ffe9 	bl	8006d04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006d32:	2104      	movs	r1, #4
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f01d fe92 	bl	8024a5e <_ZdlPvj>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	4a05      	ldr	r2, [pc, #20]	; (8006d64 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff ffd5 	bl	8006d04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	0802726c 	.word	0x0802726c

08006d68 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff ffe7 	bl	8006d44 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006d76:	2110      	movs	r1, #16
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f01d fe70 	bl	8024a5e <_ZdlPvj>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fab7 	bl	800530c <_ZN8touchgfx5ImageD1Ev>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	080289c0 	.word	0x080289c0

08006dac <_ZN8touchgfx10TiledImageD0Ev>:
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ffe7 	bl	8006d88 <_ZN8touchgfx10TiledImageD1Ev>
 8006dba:	2130      	movs	r1, #48	; 0x30
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f01d fe4e 	bl	8024a5e <_ZdlPvj>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	4a05      	ldr	r2, [pc, #20]	; (8006dec <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fc23 	bl	8006628 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	08028b4c 	.word	0x08028b4c

08006df0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff ffe7 	bl	8006dcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006dfe:	2138      	movs	r1, #56	; 0x38
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f01d fe2c 	bl	8024a5e <_ZdlPvj>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	4a05      	ldr	r2, [pc, #20]	; (8006e30 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fc77 	bl	8006714 <_ZN8touchgfx6ButtonD1Ev>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	08028c9c 	.word	0x08028c9c

08006e34 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ffe7 	bl	8006e10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8006e42:	2144      	movs	r1, #68	; 0x44
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f01d fe0a 	bl	8024a5e <_ZdlPvj>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68d2      	ldr	r2, [r2, #12]
 8006e66:	1052      	asrs	r2, r2, #1
 8006e68:	1898      	adds	r0, r3, r2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	e00a      	b.n	8006e92 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68d2      	ldr	r2, [r2, #12]
 8006e84:	1052      	asrs	r2, r2, #1
 8006e86:	4413      	add	r3, r2
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6892      	ldr	r2, [r2, #8]
 8006e8e:	4413      	add	r3, r2
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	4798      	blx	r3
    }
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d107      	bne.n	8006ec6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d001      	beq.n	8006ed0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006ed0:	2300      	movs	r3, #0
    }
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd fe66 	bl	8004bbc <_ZN8touchgfx6WidgetC1Ev>
 8006ef0:	4a0d      	ldr	r2, [pc, #52]	; (8006f28 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3328      	adds	r3, #40	; 0x28
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fd fc5f 	bl	80047c8 <_ZN8touchgfx9colortypeC1Em>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	332c      	adds	r3, #44	; 0x2c
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fd fc59 	bl	80047c8 <_ZN8touchgfx9colortypeC1Em>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	08028bc8 	.word	0x08028bc8

08006f2c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	4a05      	ldr	r2, [pc, #20]	; (8006f4c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd fe4f 	bl	8004be0 <_ZN8touchgfx6WidgetD1Ev>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	08028bc8 	.word	0x08028bc8

08006f50 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ffe7 	bl	8006f2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006f5e:	2134      	movs	r1, #52	; 0x34
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f01d fd7c 	bl	8024a5e <_ZdlPvj>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	4a05      	ldr	r2, [pc, #20]	; (8006fe8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff f983 	bl	80062e4 <_ZN8touchgfx6ScreenD1Ev>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	0802739c 	.word	0x0802739c

08006fec <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ffe7 	bl	8006fc8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8006ffa:	2140      	movs	r1, #64	; 0x40
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f01d fd2e 	bl	8024a5e <_ZdlPvj>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <_ZN15Screen2ViewBaseD1Ev+0x60>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fa27 	bl	8007474 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fecd 	bl	8006dcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	33d4      	adds	r3, #212	; 0xd4
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff feea 	bl	8006e10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	33a8      	adds	r3, #168	; 0xa8
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe f963 	bl	800530c <_ZN8touchgfx5ImageD1Ev>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3374      	adds	r3, #116	; 0x74
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fab8 	bl	80065c0 <_ZN8touchgfx8TextAreaD1Ev>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3340      	adds	r3, #64	; 0x40
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff ff69 	bl	8006f2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff ffb3 	bl	8006fc8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	0802734c 	.word	0x0802734c

08007070 <_ZN15Screen2ViewBaseD0Ev>:
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ffc7 	bl	800700c <_ZN15Screen2ViewBaseD1Ev>
 800707e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f01d fceb 	bl	8024a5e <_ZdlPvj>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <_ZN15Screen2ViewBase13Status_ButtonEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void Status_Button()
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2
    }
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <_ZN15Screen2ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80070ae:	f011 faf3 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 80070b2:	4603      	mov	r3, r0
    }
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen2ViewBase::Screen2ViewBase() :
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b08f      	sub	sp, #60	; 0x3c
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f99e 	bl	8007408 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 80070cc:	4ab8      	ldr	r2, [pc, #736]	; (80073b0 <_ZN15Screen2ViewBaseC1Ev+0x2f4>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3340      	adds	r3, #64	; 0x40
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff02 	bl	8006ee0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3374      	adds	r3, #116	; 0x74
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff f9bb 	bl	800645c <_ZN8touchgfx8TextAreaC1Ev>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80070ec:	f107 0308 	add.w	r3, r7, #8
 80070f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fd fb96 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80070fa:	f107 0308 	add.w	r3, r7, #8
 80070fe:	4619      	mov	r1, r3
 8007100:	4620      	mov	r0, r4
 8007102:	f7fd fdb3 	bl	8004c6c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	33d4      	adds	r3, #212	; 0xd4
 800710a:	4618      	mov	r0, r3
 800710c:	f00f fdac 	bl	8016c68 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff faa8 	bl	800666c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8007122:	4ba4      	ldr	r3, [pc, #656]	; (80073b4 <_ZN15Screen2ViewBaseC1Ev+0x2f8>)
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	f107 030c 	add.w	r3, r7, #12
 800712e:	cb0c      	ldmia	r3, {r2, r3}
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	f000 f97f 	bl	8007434 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    boxWithBorder1.setPosition(0, 0, 480, 273);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800713c:	f240 1311 	movw	r3, #273	; 0x111
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	f7fd fbcb 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007154:	22ff      	movs	r2, #255	; 0xff
 8007156:	21ff      	movs	r1, #255	; 0xff
 8007158:	20ff      	movs	r0, #255	; 0xff
 800715a:	f7fd fe53 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800715e:	4603      	mov	r3, r0
 8007160:	4619      	mov	r1, r3
 8007162:	4620      	mov	r0, r4
 8007164:	f7ff ff04 	bl	8006f70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800716e:	2200      	movs	r2, #0
 8007170:	2100      	movs	r1, #0
 8007172:	2000      	movs	r0, #0
 8007174:	f7fd fe46 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007178:	4603      	mov	r3, r0
 800717a:	4619      	mov	r1, r3
 800717c:	4620      	mov	r0, r4
 800717e:	f7ff ff05 	bl	8006f8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    boxWithBorder1.setBorderSize(5);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3340      	adds	r3, #64	; 0x40
 8007186:	2105      	movs	r1, #5
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ff0d 	bl	8006fa8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>

    textArea1.setPosition(10, 10, 456, 57);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8007194:	2339      	movs	r3, #57	; 0x39
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 800719c:	220a      	movs	r2, #10
 800719e:	210a      	movs	r1, #10
 80071a0:	f7fd fba0 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	2000      	movs	r0, #0
 80071b0:	f7fd fe28 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80071b4:	4603      	mov	r3, r0
 80071b6:	4619      	mov	r1, r3
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7ff f992 	bl	80064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3374      	adds	r3, #116	; 0x74
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff f9df 	bl	8006588 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80071d0:	f107 0314 	add.w	r3, r7, #20
 80071d4:	2106      	movs	r1, #6
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff f906 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 80071dc:	8ab9      	ldrh	r1, [r7, #20]
 80071de:	4620      	mov	r0, r4
 80071e0:	f00f f868 	bl	80162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CHECK1.setXY(0, 0);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	33a8      	adds	r3, #168	; 0xa8
 80071e8:	2200      	movs	r2, #0
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fd fbc4 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    CHECK1.setBitmap(touchgfx::Bitmap(BITMAP_DOWN_ID));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80071f8:	f107 0318 	add.w	r3, r7, #24
 80071fc:	2106      	movs	r1, #6
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd fb11 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007204:	f107 0318 	add.w	r3, r7, #24
 8007208:	4619      	mov	r1, r3
 800720a:	4620      	mov	r0, r4
 800720c:	f00f fbf8 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonWithLabel1.setXY(415, 204);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	33d4      	adds	r3, #212	; 0xd4
 8007214:	22cc      	movs	r2, #204	; 0xcc
 8007216:	f240 119f 	movw	r1, #415	; 0x19f
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd fbad 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8007226:	f107 031c 	add.w	r3, r7, #28
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f7fd fafa 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007232:	f107 0320 	add.w	r3, r7, #32
 8007236:	2102      	movs	r1, #2
 8007238:	4618      	mov	r0, r3
 800723a:	f7fd faf4 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 800723e:	f107 0220 	add.w	r2, r7, #32
 8007242:	f107 031c 	add.w	r3, r7, #28
 8007246:	4619      	mov	r1, r3
 8007248:	4620      	mov	r0, r4
 800724a:	f00f fa09 	bl	8016660 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID15));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8007254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007258:	2107      	movs	r1, #7
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff f8c4 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8007260:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fa78 	bl	8006758 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800726e:	22ff      	movs	r2, #255	; 0xff
 8007270:	21ff      	movs	r1, #255	; 0xff
 8007272:	20ff      	movs	r0, #255	; 0xff
 8007274:	f7fd fdc6 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007278:	4603      	mov	r3, r0
 800727a:	2200      	movs	r2, #0
 800727c:	4619      	mov	r1, r3
 800727e:	4620      	mov	r0, r4
 8007280:	f7ff fa79 	bl	8006776 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800728a:	22ff      	movs	r2, #255	; 0xff
 800728c:	21ff      	movs	r1, #255	; 0xff
 800728e:	20ff      	movs	r0, #255	; 0xff
 8007290:	f7fd fdb8 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007294:	4603      	mov	r3, r0
 8007296:	2200      	movs	r2, #0
 8007298:	4619      	mov	r1, r3
 800729a:	4620      	mov	r0, r4
 800729c:	f7ff fa83 	bl	80067a6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1.setAction(buttonCallback);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f7ff fa00 	bl	80066b4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea2.setXY(320, 223);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80072ba:	22df      	movs	r2, #223	; 0xdf
 80072bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fd fb5a 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setVisible(false);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fd fbc4 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 748c 	add.w	r4, r3, #280	; 0x118
 80072da:	2200      	movs	r2, #0
 80072dc:	2100      	movs	r1, #0
 80072de:	2000      	movs	r0, #0
 80072e0:	f7fd fd90 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80072e4:	4603      	mov	r3, r0
 80072e6:	4619      	mov	r1, r3
 80072e8:	4620      	mov	r0, r4
 80072ea:	f7ff f8fa 	bl	80064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff f946 	bl	8006588 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID17).getText());
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8007302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007306:	2109      	movs	r1, #9
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff f86d 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 800730e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff f88c 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 8007318:	4603      	mov	r3, r0
 800731a:	4a27      	ldr	r2, [pc, #156]	; (80073b8 <_ZN15Screen2ViewBaseC1Ev+0x2fc>)
 800731c:	210a      	movs	r1, #10
 800731e:	4620      	mov	r0, r4
 8007320:	f013 fda2 	bl	801ae68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea2.setWildcard(textArea2Buffer);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f7ff f9b0 	bl	8006698 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2.resizeToCurrentText();
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800733e:	4618      	mov	r0, r3
 8007340:	f00e ff8e 	bl	8016260 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800734a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800734e:	2108      	movs	r1, #8
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff f849 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8007356:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007358:	4620      	mov	r0, r4
 800735a:	f00e ffab 	bl	80162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(boxWithBorder1);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3340      	adds	r3, #64	; 0x40
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f7ff f814 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3374      	adds	r3, #116	; 0x74
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7ff f80d 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CHECK1);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	33a8      	adds	r3, #168	; 0xa8
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7ff f806 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	33d4      	adds	r3, #212	; 0xd4
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7fe ffff 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fe fff7 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	3734      	adds	r7, #52	; 0x34
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd90      	pop	{r4, r7, pc}
 80073b0:	0802734c 	.word	0x0802734c
 80073b4:	080073d1 	.word	0x080073d1
 80073b8:	0802635c 	.word	0x0802635c

080073bc <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]

}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	33d4      	adds	r3, #212	; 0xd4
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d10c      	bne.n	80073fe <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff fe5e 	bl	80070a6 <_ZN15Screen2ViewBase11applicationEv>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fad1 	bl	8005994 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>

        //Interaction2
        //When buttonWithLabel1 clicked call virtual function
        //Call Status_Button
        Status_Button();
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	332c      	adds	r3, #44	; 0x2c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
    }
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View() : presenter(0)
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4618      	mov	r0, r3
 8007414:	f012 f946 	bl	80196a4 <_ZN8touchgfx6ScreenC1Ev>
 8007418:	4a05      	ldr	r2, [pc, #20]	; (8007430 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	0802739c 	.word	0x0802739c

08007434 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4639      	mov	r1, r7
 8007440:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fc2c 	bl	8006ca4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800744c:	4a08      	ldr	r2, [pc, #32]	; (8007470 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3308      	adds	r3, #8
 800745c:	463a      	mov	r2, r7
 800745e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007462:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	08027384 	.word	0x08027384

08007474 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	4a05      	ldr	r2, [pc, #20]	; (8007494 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fc3d 	bl	8006d04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	08027384 	.word	0x08027384

08007498 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff ffe7 	bl	8007474 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80074a6:	2110      	movs	r1, #16
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f01d fad8 	bl	8024a5e <_ZdlPvj>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68d2      	ldr	r2, [r2, #12]
 80074ca:	1052      	asrs	r2, r2, #1
 80074cc:	1898      	adds	r0, r3, r2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	e00a      	b.n	80074f6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	68d2      	ldr	r2, [r2, #12]
 80074e8:	1052      	asrs	r2, r2, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6892      	ldr	r2, [r2, #8]
 80074f2:	4413      	add	r3, r2
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	4798      	blx	r3
    }
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d010      	beq.n	8007534 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800752a:	2300      	movs	r3, #0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8007534:	2300      	movs	r3, #0
    }
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
	...

08007544 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destuctor.
     */
    virtual ~DrawableListItemsInterface()
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    {
 800754c:	4a04      	ldr	r2, [pc, #16]	; (8007560 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	601a      	str	r2, [r3, #0]
    }
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	080274a0 	.word	0x080274a0

08007564 <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
    }
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ffe9 	bl	8007544 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 8007572:	2104      	movs	r1, #4
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f01d fa72 	bl	8024a5e <_ZdlPvj>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <_ZN8touchgfx12DrawableListD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DrawableList()
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
    {
 800758c:	4a05      	ldr	r2, [pc, #20]	; (80075a4 <_ZN8touchgfx12DrawableListD1Ev+0x20>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	f7fd faef 	bl	8004b78 <_ZN8touchgfx9ContainerD1Ev>
    }
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	080279f8 	.word	0x080279f8

080075a8 <_ZN8touchgfx12DrawableListD0Ev>:
    virtual ~DrawableList()
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    }
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ffe7 	bl	8007584 <_ZN8touchgfx12DrawableListD1Ev>
 80075b6:	214c      	movs	r1, #76	; 0x4c
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f01d fa50 	bl	8024a5e <_ZdlPvj>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <_ZN8touchgfx10ScrollBaseD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ScrollBase()
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
    {
 80075d0:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <_ZN8touchgfx10ScrollBaseD1Ev+0x2c>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	332c      	adds	r3, #44	; 0x2c
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff ffd2 	bl	8007584 <_ZN8touchgfx12DrawableListD1Ev>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd fac8 	bl	8004b78 <_ZN8touchgfx9ContainerD1Ev>
    }
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	08027b78 	.word	0x08027b78

080075f8 <_ZN8touchgfx10ScrollBaseD0Ev>:
    virtual ~ScrollBase()
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
    }
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff ffe1 	bl	80075c8 <_ZN8touchgfx10ScrollBaseD1Ev>
 8007606:	21bc      	movs	r1, #188	; 0xbc
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f01d fa28 	bl	8024a5e <_ZdlPvj>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <_ZN8touchgfx10ScrollBase10initializeEv>:
     *
     * @brief Initializes the contents of all drawables.
     *
     *        Initializes the contents of all drawables.
     */
    virtual void initialize()
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	332c      	adds	r3, #44	; 0x2c
 8007624:	4618      	mov	r0, r3
 8007626:	f00c fbec 	bl	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <_ZN8touchgfx10ScrollListD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ScrollList()
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
    {
 800763c:	4a05      	ldr	r2, [pc, #20]	; (8007654 <_ZN8touchgfx10ScrollListD1Ev+0x20>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff ffbf 	bl	80075c8 <_ZN8touchgfx10ScrollBaseD1Ev>
    }
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	08027aa4 	.word	0x08027aa4

08007658 <_ZN8touchgfx10ScrollListD0Ev>:
    virtual ~ScrollList()
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
    }
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ffe7 	bl	8007634 <_ZN8touchgfx10ScrollListD1Ev>
 8007666:	21c4      	movs	r1, #196	; 0xc4
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f01d f9f8 	bl	8024a5e <_ZdlPvj>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	4a05      	ldr	r2, [pc, #20]	; (8007698 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe fe2b 	bl	80062e4 <_ZN8touchgfx6ScreenD1Ev>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	0802746c 	.word	0x0802746c

0800769c <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ffe7 	bl	8007678 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 80076aa:	2140      	movs	r1, #64	; 0x40
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f01d f9d6 	bl	8024a5e <_ZdlPvj>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <_ZN15Screen3ViewBaseD1Ev+0x88>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fc41 	bl	8007f58 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fc5d 	bl	8007f9c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe ff69 	bl	80065c0 <_ZN8touchgfx8TextAreaD1Ev>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff fb8b 	bl	8006e10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff fb63 	bl	8006dcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff fb7f 	bl	8006e10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fb03 	bl	8007d24 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3370      	adds	r3, #112	; 0x70
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff ff86 	bl	8007634 <_ZN8touchgfx10ScrollListD1Ev>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3340      	adds	r3, #64	; 0x40
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fb2b 	bl	8006d88 <_ZN8touchgfx10TiledImageD1Ev>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff ff9f 	bl	8007678 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	080273d0 	.word	0x080273d0

08007748 <_ZN15Screen3ViewBaseD0Ev>:
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ffb3 	bl	80076bc <_ZN15Screen3ViewBaseD1Ev>
 8007756:	f642 0158 	movw	r1, #10328	; 0x2858
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f01d f97f 	bl	8024a5e <_ZdlPvj>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <_ZN15Screen3ViewBase21scrollList1UpdateItemER16CustomContainer1s>:
    virtual void setupScreen();

    virtual void scrollList1UpdateItem(CustomContainer1& item, int16_t itemIndex)
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in Screen3
    }
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <_ZN15Screen3ViewBase18SelectWheel_ButtonEv>:

    /*
     * Virtual Action Handlers
     */
    virtual void SelectWheel_Button()
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen3
    }
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <_ZN15Screen3ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80077a0:	f010 ff7a 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 80077a4:	4603      	mov	r3, r0
    }
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <_ZN15Screen3ViewBaseC1Ev>:
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen3ViewBase::Screen3ViewBase() :
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b095      	sub	sp, #84	; 0x54
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler),
    updateItemCallback(this, &Screen3ViewBase::updateItemCallbackHandler)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fae8 	bl	8007d90 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 80077c0:	4adc      	ldr	r2, [pc, #880]	; (8007b34 <_ZN15Screen3ViewBaseC1Ev+0x384>)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fd f826 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80077da:	f107 030c 	add.w	r3, r7, #12
 80077de:	4619      	mov	r1, r3
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7fe fde7 	bl	80063b4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3370      	adds	r3, #112	; 0x70
 80077ea:	4618      	mov	r0, r3
 80077ec:	f00c fd6c 	bl	80142c8 <_ZN8touchgfx10ScrollListC1Ev>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 faf0 	bl	8007ddc <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEC1Ev>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8007802:	4618      	mov	r0, r3
 8007804:	f00f fa30 	bl	8016c68 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe ff2c 	bl	800666c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 800781a:	4618      	mov	r0, r3
 800781c:	f00f fa24 	bl	8016c68 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fe18 	bl	800645c <_ZN8touchgfx8TextAreaC1Ev>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f603 4018 	addw	r0, r3, #3096	; 0xc18
 8007832:	4bc1      	ldr	r3, [pc, #772]	; (8007b38 <_ZN15Screen3ViewBaseC1Ev+0x388>)
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	f107 0310 	add.w	r3, r7, #16
 800783e:	cb0c      	ldmia	r3, {r2, r3}
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	f000 fae9 	bl	8007e18 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f603 4028 	addw	r0, r3, #3112	; 0xc28
 800784c:	4bbb      	ldr	r3, [pc, #748]	; (8007b3c <_ZN15Screen3ViewBaseC1Ev+0x38c>)
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	f107 0318 	add.w	r3, r7, #24
 8007858:	cb0c      	ldmia	r3, {r2, r3}
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	f000 fb0c 	bl	8007e78 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8007866:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800786a:	4618      	mov	r0, r3
 800786c:	f00f fa24 	bl	8016cb8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    tiledImage3.setBitmap(touchgfx::Bitmap(BITMAP_OA_ID));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007876:	f107 0320 	add.w	r3, r7, #32
 800787a:	2115      	movs	r1, #21
 800787c:	4618      	mov	r0, r3
 800787e:	f7fc ffd2 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007882:	f107 0320 	add.w	r3, r7, #32
 8007886:	4619      	mov	r1, r3
 8007888:	4620      	mov	r0, r4
 800788a:	f00e fd3e 	bl	801630a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage3.setPosition(0, 0, 480, 272);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007894:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800789e:	2200      	movs	r2, #0
 80078a0:	2100      	movs	r1, #0
 80078a2:	f7fd f81f 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage3.setOffset(0, 0);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3340      	adds	r3, #64	; 0x40
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f00e fd0a 	bl	80162c8 <_ZN8touchgfx10TiledImage9setOffsetEss>

    scrollList1.setPosition(3, 55, 168, 550);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80078ba:	f240 2326 	movw	r3, #550	; 0x226
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	23a8      	movs	r3, #168	; 0xa8
 80078c2:	2237      	movs	r2, #55	; 0x37
 80078c4:	2103      	movs	r1, #3
 80078c6:	f7fd f80d 	bl	80048e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollList1.setHorizontal(false);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3370      	adds	r3, #112	; 0x70
 80078ce:	2100      	movs	r1, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	f00c fef0 	bl	80146b6 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    scrollList1.setCircular(false);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3370      	adds	r3, #112	; 0x70
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f00c ff43 	bl	8014768 <_ZN8touchgfx10ScrollBase11setCircularEb>
    scrollList1.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3370      	adds	r3, #112	; 0x70
 80078e6:	4996      	ldr	r1, [pc, #600]	; (8007b40 <_ZN15Screen3ViewBaseC1Ev+0x390>)
 80078e8:	4618      	mov	r0, r3
 80078ea:	f00c fe31 	bl	8014550 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    scrollList1.setSwipeAcceleration(10);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3370      	adds	r3, #112	; 0x70
 80078f2:	210a      	movs	r1, #10
 80078f4:	4618      	mov	r0, r3
 80078f6:	f00c fe2e 	bl	8014556 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    scrollList1.setDragAcceleration(10);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3370      	adds	r3, #112	; 0x70
 80078fe:	210a      	movs	r1, #10
 8007900:	4618      	mov	r0, r3
 8007902:	f00c fe2b 	bl	801455c <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    scrollList1.setNumberOfItems(10);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3370      	adds	r3, #112	; 0x70
 800790a:	210a      	movs	r1, #10
 800790c:	4618      	mov	r0, r3
 800790e:	f00c fd70 	bl	80143f2 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    scrollList1.setPadding(0, 0);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3370      	adds	r3, #112	; 0x70
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f00c fce6 	bl	80142ec <_ZN8touchgfx10ScrollList10setPaddingEss>
    scrollList1.setSnapping(false);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3370      	adds	r3, #112	; 0x70
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f00c fcf8 	bl	801431c <_ZN8touchgfx10ScrollList11setSnappingEb>
    scrollList1.setDrawableSize(67, 0);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3370      	adds	r3, #112	; 0x70
 8007930:	2200      	movs	r2, #0
 8007932:	2143      	movs	r1, #67	; 0x43
 8007934:	4618      	mov	r0, r3
 8007936:	f00c fe04 	bl	8014542 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    scrollList1.setDrawables(scrollList1ListItems, updateItemCallback);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 800794c:	461a      	mov	r2, r3
 800794e:	f00c fbe4 	bl	801411a <_ZN8touchgfx10ScrollList12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>

    buttonWithLabel1.setXY(419, 209);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8007958:	22d1      	movs	r2, #209	; 0xd1
 800795a:	f240 11a3 	movw	r1, #419	; 0x1a3
 800795e:	4618      	mov	r0, r3
 8007960:	f7fd f80b 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 800796a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800796e:	2101      	movs	r1, #1
 8007970:	4618      	mov	r0, r3
 8007972:	f7fc ff58 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800797a:	2102      	movs	r1, #2
 800797c:	4618      	mov	r0, r3
 800797e:	f7fc ff52 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800798a:	4619      	mov	r1, r3
 800798c:	4620      	mov	r0, r4
 800798e:	f00e fe67 	bl	8016660 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID11));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 8007998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800799c:	2103      	movs	r1, #3
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fd22 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 80079a4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7fe fed6 	bl	8006758 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 80079b2:	22ff      	movs	r2, #255	; 0xff
 80079b4:	21ff      	movs	r1, #255	; 0xff
 80079b6:	20ff      	movs	r0, #255	; 0xff
 80079b8:	f7fd fa24 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80079bc:	4603      	mov	r3, r0
 80079be:	2200      	movs	r2, #0
 80079c0:	4619      	mov	r1, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7fe fed7 	bl	8006776 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 80079ce:	22ff      	movs	r2, #255	; 0xff
 80079d0:	21ff      	movs	r1, #255	; 0xff
 80079d2:	20ff      	movs	r0, #255	; 0xff
 80079d4:	f7fd fa16 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80079d8:	4603      	mov	r3, r0
 80079da:	2200      	movs	r2, #0
 80079dc:	4619      	mov	r1, r3
 80079de:	4620      	mov	r0, r4
 80079e0:	f7fe fee1 	bl	80067a6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1.setAction(buttonCallback);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f503 6231 	add.w	r2, r3, #2832	; 0xb10
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7fe fe5e 	bl	80066b4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(300, 239);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 80079fe:	22ef      	movs	r2, #239	; 0xef
 8007a00:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fc ffb8 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setVisible(false);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd f822 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f603 3454 	addw	r4, r3, #2900	; 0xb54
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2100      	movs	r1, #0
 8007a22:	2000      	movs	r0, #0
 8007a24:	f7fd f9ee 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f7fe fd58 	bl	80064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fda4 	bl	8006588 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f603 4404 	addw	r4, r3, #3076	; 0xc04
 8007a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a4a:	2105      	movs	r1, #5
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fccb 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8007a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fcea 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4a39      	ldr	r2, [pc, #228]	; (8007b44 <_ZN15Screen3ViewBaseC1Ev+0x394>)
 8007a60:	210a      	movs	r1, #10
 8007a62:	4620      	mov	r0, r4
 8007a64:	f013 fa00 	bl	801ae68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.setWildcard(textArea1Buffer);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f603 3254 	addw	r2, r3, #2900	; 0xb54
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8007a74:	4619      	mov	r1, r3
 8007a76:	4610      	mov	r0, r2
 8007a78:	f7fe fe0e 	bl	8006698 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.resizeToCurrentText();
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8007a82:	4618      	mov	r0, r3
 8007a84:	f00e fbec 	bl	8016260 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f603 3454 	addw	r4, r3, #2900	; 0xb54
 8007a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a92:	2104      	movs	r1, #4
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe fca7 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8007a9a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f00e fc09 	bl	80162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonWithLabel2.setXY(419, 50);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8007aa8:	2232      	movs	r2, #50	; 0x32
 8007aaa:	f240 11a3 	movw	r1, #419	; 0x1a3
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fc ff63 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8007aba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fc feb0 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007ac6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007aca:	2102      	movs	r1, #2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc feaa 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8007ad2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ada:	4619      	mov	r1, r3
 8007adc:	4620      	mov	r0, r4
 8007ade:	f00e fdbf 	bl	8016660 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID18));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8007ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007aec:	210a      	movs	r1, #10
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fc7a 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8007af4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7fe fe2d 	bl	8006758 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	21ff      	movs	r1, #255	; 0xff
 8007b08:	20ff      	movs	r0, #255	; 0xff
 8007b0a:	f7fd f97b 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2200      	movs	r2, #0
 8007b12:	4619      	mov	r1, r3
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7fe fe2e 	bl	8006776 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	21ff      	movs	r1, #255	; 0xff
 8007b24:	20ff      	movs	r0, #255	; 0xff
 8007b26:	f7fd f96d 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4620      	mov	r0, r4
 8007b32:	e009      	b.n	8007b48 <_ZN15Screen3ViewBaseC1Ev+0x398>
 8007b34:	080273d0 	.word	0x080273d0
 8007b38:	08007c7d 	.word	0x08007c7d
 8007b3c:	08007cd1 	.word	0x08007cd1
 8007b40:	08019a2d 	.word	0x08019a2d
 8007b44:	080264c8 	.word	0x080264c8
 8007b48:	f7fe fe2d 	bl	80067a6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel2.setAction(buttonCallback);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f603 328c 	addw	r2, r3, #2956	; 0xb8c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f7fe fdaa 	bl	80066b4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea2.setXY(170, 12);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007b66:	220c      	movs	r2, #12
 8007b68:	21aa      	movs	r1, #170	; 0xaa
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fc ff05 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 643d 	add.w	r4, r3, #3024	; 0xbd0
 8007b76:	2200      	movs	r2, #0
 8007b78:	2100      	movs	r1, #0
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f7fd f942 	bl	8004e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4619      	mov	r1, r3
 8007b84:	4620      	mov	r0, r4
 8007b86:	f7fe fcac 	bl	80064e2 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fcf8 	bl	8006588 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f503 643d 	add.w	r4, r3, #3024	; 0xbd0
 8007b9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ba2:	210c      	movs	r1, #12
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fc1f 	bl	80063e8 <_ZN8touchgfx9TypedTextC1Et>
 8007baa:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f00e fb80 	bl	80162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(tiledImage3);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3340      	adds	r3, #64	; 0x40
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7fe fbe9 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollList1);
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3370      	adds	r3, #112	; 0x70
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f7fe fbe2 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f7fe fbda 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fbd2 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f7fe fbca 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f7fe fbc2 	bl	8006394 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4618      	mov	r0, r3
 8007c14:	374c      	adds	r7, #76	; 0x4c
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}
 8007c1a:	bf00      	nop

08007c1c <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
    scrollList1.initialize();
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3370      	adds	r3, #112	; 0x70
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff fcf5 	bl	8007618 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < scrollList1ListItems.getNumberOfDrawables(); i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f93d 	bl	8007eb8 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE20getNumberOfDrawablesEv>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	461a      	mov	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	bfb4      	ite	lt
 8007c48:	2301      	movlt	r3, #1
 8007c4a:	2300      	movge	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d010      	beq.n	8007c74 <_ZN15Screen3ViewBase11setupScreenEv+0x58>
    {
        scrollList1ListItems[i].initialize();
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8007c58:	68f9      	ldr	r1, [r7, #12]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f938 	bl	8007ed0 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6813      	ldr	r3, [r2, #0]
 8007c64:	3384      	adds	r3, #132	; 0x84
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
    for (int i = 0; i < scrollList1ListItems.getNumberOfDrawables(); i++)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e7de      	b.n	8007c32 <_ZN15Screen3ViewBase11setupScreenEv+0x16>
    }
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d10d      	bne.n	8007cae <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
    {
        //Select
        //When buttonWithLabel1 clicked call virtual function
        //Call SelectWheel_Button
        SelectWheel_Button();
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3330      	adds	r3, #48	; 0x30
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3

        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff fd7a 	bl	8007798 <_ZN15Screen3ViewBase11applicationEv>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd feba 	bl	8005a20 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        //Interaction2
        //When buttonWithLabel2 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}
 8007cac:	e00c      	b.n	8007cc8 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c>
    else if (&src == &buttonWithLabel2)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d106      	bne.n	8007cc8 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c>
        application().gotoScreen1ScreenNoTransition();
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7ff fd6c 	bl	8007798 <_ZN15Screen3ViewBase11applicationEv>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fd fef2 	bl	8005aac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <_ZN15Screen3ViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void Screen3ViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	460b      	mov	r3, r1
 8007ce0:	80fb      	strh	r3, [r7, #6]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80bb      	strh	r3, [r7, #4]
    if (items == &scrollList1ListItems)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d114      	bne.n	8007d1c <_ZN15Screen3ViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	68b8      	ldr	r0, [r7, #8]
 8007d02:	4798      	blx	r3
 8007d04:	6178      	str	r0, [r7, #20]
        CustomContainer1* cc = (CustomContainer1*)d;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	613b      	str	r3, [r7, #16]
        scrollList1UpdateItem(*cc, itemIndex);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	332c      	adds	r3, #44	; 0x2c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007d16:	6939      	ldr	r1, [r7, #16]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	4798      	blx	r3
    }
}
 8007d1c:	bf00      	nop
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev>:
    virtual ~DrawableListItems()
 8007d24:	b590      	push	{r4, r7, lr}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
    }
 8007d2c:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev+0x44>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3304      	adds	r3, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00d      	beq.n	8007d56 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev+0x32>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	f603 14d8 	addw	r4, r3, #2520	; 0x9d8
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3304      	adds	r3, #4
 8007d46:	429c      	cmp	r4, r3
 8007d48:	d005      	beq.n	8007d56 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev+0x32>
 8007d4a:	3cfc      	subs	r4, #252	; 0xfc
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4620      	mov	r0, r4
 8007d52:	4798      	blx	r3
 8007d54:	e7f5      	b.n	8007d42 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev+0x1e>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fbf3 	bl	8007544 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd90      	pop	{r4, r7, pc}
 8007d68:	08027454 	.word	0x08027454

08007d6c <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED0Ev>:
    virtual ~DrawableListItems()
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
    }
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff ffd5 	bl	8007d24 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EED1Ev>
 8007d7a:	f640 11dc 	movw	r1, #2524	; 0x9dc
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f01c fe6d 	bl	8024a5e <_ZdlPvj>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View() : presenter(0)
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f011 fc82 	bl	80196a4 <_ZN8touchgfx6ScreenC1Ev>
 8007da0:	4a05      	ldr	r2, [pc, #20]	; (8007db8 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	0802746c 	.word	0x0802746c

08007dbc <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	4a04      	ldr	r2, [pc, #16]	; (8007dd8 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	080274a0 	.word	0x080274a0

08007ddc <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEC1Ev>:
    DrawableListItems()
 8007ddc:	b5b0      	push	{r4, r5, r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
        : DrawableListItemsInterface()
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ffe8 	bl	8007dbc <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 8007dec:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEC1Ev+0x38>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	2409      	movs	r4, #9
 8007df8:	461d      	mov	r5, r3
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	db05      	blt.n	8007e0a <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEC1Ev+0x2e>
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 fb5a 	bl	80084b8 <_ZN16CustomContainer1C1Ev>
 8007e04:	35fc      	adds	r5, #252	; 0xfc
 8007e06:	3c01      	subs	r4, #1
 8007e08:	e7f7      	b.n	8007dfa <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEC1Ev+0x1e>
    }
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bdb0      	pop	{r4, r5, r7, pc}
 8007e14:	08027454 	.word	0x08027454

08007e18 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4639      	mov	r1, r7
 8007e24:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe ff3a 	bl	8006ca4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007e30:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	463a      	mov	r2, r7
 8007e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e46:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	0802743c 	.word	0x0802743c

08007e58 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	4a04      	ldr	r2, [pc, #16]	; (8007e74 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	08027424 	.word	0x08027424

08007e78 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4639      	mov	r1, r7
 8007e84:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff ffe4 	bl	8007e58 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 8007e90:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	605a      	str	r2, [r3, #4]
        this->pmemfun_3 = pmemfun_3;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	463a      	mov	r2, r7
 8007ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ea6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	0802740c 	.word	0x0802740c

08007eb8 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE20getNumberOfDrawablesEv>:
    virtual int16_t getNumberOfDrawables()
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
        return SIZE;
 8007ec0:	230a      	movs	r3, #10
    }
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi>:
    TYPE& operator[](int index)
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db02      	blt.n	8007ee6 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi+0x16>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	dd05      	ble.n	8007ef2 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi+0x22>
 8007ee6:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi+0x3c>)
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi+0x40>)
 8007eea:	2198      	movs	r1, #152	; 0x98
 8007eec:	4809      	ldr	r0, [pc, #36]	; (8007f14 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EEixEi+0x44>)
 8007eee:	f01c fde1 	bl	8024ab4 <__assert_func>
        return element[index];
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	019b      	lsls	r3, r3, #6
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	3304      	adds	r3, #4
    }
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	080264cc 	.word	0x080264cc
 8007f10:	08027548 	.word	0x08027548
 8007f14:	080264e8 	.word	0x080264e8

08007f18 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    }
 8007f20:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	08027424 	.word	0x08027424

08007f38 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
    }
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ffe9 	bl	8007f18 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8007f46:	2104      	movs	r1, #4
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f01c fd88 	bl	8024a5e <_ZdlPvj>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	4a05      	ldr	r2, [pc, #20]	; (8007f78 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff ffd5 	bl	8007f18 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	0802740c 	.word	0x0802740c

08007f7c <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ffe7 	bl	8007f58 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 8007f8a:	2110      	movs	r1, #16
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f01c fd66 	bl	8024a5e <_ZdlPvj>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	4a05      	ldr	r2, [pc, #20]	; (8007fbc <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fea9 	bl	8006d04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	0802743c 	.word	0x0802743c

08007fc0 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ffe7 	bl	8007f9c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007fce:	2110      	movs	r1, #16
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f01c fd44 	bl	8024a5e <_ZdlPvj>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4611      	mov	r1, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	460b      	mov	r3, r1
 8007ff0:	80fb      	strh	r3, [r7, #6]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun_3)(t1, t2, t3);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	68d2      	ldr	r2, [r2, #12]
 8007ffe:	1052      	asrs	r2, r2, #1
 8008000:	1898      	adds	r0, r3, r2
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689c      	ldr	r4, [r3, #8]
 8008012:	e00a      	b.n	800802a <_ZN8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	68d2      	ldr	r2, [r2, #12]
 800801c:	1052      	asrs	r2, r2, #1
 800801e:	4413      	add	r3, r2
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	6892      	ldr	r2, [r2, #8]
 8008026:	4413      	add	r3, r2
 8008028:	681c      	ldr	r4, [r3, #0]
 800802a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800802e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	47a0      	blx	r4
    }
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	bd90      	pop	{r4, r7, pc}

0800803e <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_3 != 0);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 8008066:	2300      	movs	r3, #0
 8008068:	2b01      	cmp	r3, #1
 800806a:	d001      	beq.n	8008070 <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <_ZNK8touchgfx8CallbackI15Screen3ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 8008070:	2300      	movs	r3, #0
    }
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68d2      	ldr	r2, [r2, #12]
 8008090:	1052      	asrs	r2, r2, #1
 8008092:	1898      	adds	r0, r3, r2
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	e00a      	b.n	80080bc <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	68d2      	ldr	r2, [r2, #12]
 80080ae:	1052      	asrs	r2, r2, #1
 80080b0:	4413      	add	r3, r2
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6892      	ldr	r2, [r2, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	4798      	blx	r3
    }
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d010      	beq.n	80080fa <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80080f0:	2300      	movs	r3, #0
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d001      	beq.n	80080fa <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80080fa:	2300      	movs	r3, #0
    }
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 8008114:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	db03      	blt.n	8008124 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs+0x1c>
 800811c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008120:	2b09      	cmp	r3, #9
 8008122:	dd05      	ble.n	8008130 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs+0x28>
 8008124:	4b09      	ldr	r3, [pc, #36]	; (800814c <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs+0x44>)
 8008126:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs+0x48>)
 8008128:	2187      	movs	r1, #135	; 0x87
 800812a:	480a      	ldr	r0, [pc, #40]	; (8008154 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs+0x4c>)
 800812c:	f01c fcc2 	bl	8024ab4 <__assert_func>
        return &element[index];
 8008130:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008134:	4613      	mov	r3, r2
 8008136:	019b      	lsls	r3, r3, #6
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	3304      	adds	r3, #4
    }
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	080264cc 	.word	0x080264cc
 8008150:	080274b0 	.word	0x080274b0
 8008154:	080264e8 	.word	0x080264e8

08008158 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_14_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 177, 14, 4, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 65279, 0, 0);
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__tcf_0+0xc>)
 800815e:	f7fc fb11 	bl	8004784 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20003908 	.word	0x20003908

08008168 <_Z23getFont_verdana_14_4bppv>:
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 177, 14, 4, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 65279, 0, 0);
 800816e:	4b15      	ldr	r3, [pc, #84]	; (80081c4 <_Z23getFont_verdana_14_4bppv+0x5c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d120      	bne.n	80081bc <_Z23getFont_verdana_14_4bppv+0x54>
 800817a:	2300      	movs	r3, #0
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	2300      	movs	r3, #0
 8008180:	9308      	str	r3, [sp, #32]
 8008182:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8008186:	9307      	str	r3, [sp, #28]
 8008188:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <_Z23getFont_verdana_14_4bppv+0x60>)
 800818a:	9306      	str	r3, [sp, #24]
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <_Z23getFont_verdana_14_4bppv+0x64>)
 800818e:	9305      	str	r3, [sp, #20]
 8008190:	2301      	movs	r3, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	2301      	movs	r3, #1
 8008196:	9303      	str	r3, [sp, #12]
 8008198:	2301      	movs	r3, #1
 800819a:	9302      	str	r3, [sp, #8]
 800819c:	2304      	movs	r3, #4
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	2304      	movs	r3, #4
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	230e      	movs	r3, #14
 80081a6:	22b1      	movs	r2, #177	; 0xb1
 80081a8:	4909      	ldr	r1, [pc, #36]	; (80081d0 <_Z23getFont_verdana_14_4bppv+0x68>)
 80081aa:	480a      	ldr	r0, [pc, #40]	; (80081d4 <_Z23getFont_verdana_14_4bppv+0x6c>)
 80081ac:	f7fe f812 	bl	80061d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <_Z23getFont_verdana_14_4bppv+0x5c>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	4808      	ldr	r0, [pc, #32]	; (80081d8 <_Z23getFont_verdana_14_4bppv+0x70>)
 80081b8:	f01c fc9a 	bl	8024af0 <atexit>
    return verdana_14_4bpp;
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <_Z23getFont_verdana_14_4bppv+0x6c>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	2000392c 	.word	0x2000392c
 80081c8:	9049bd70 	.word	0x9049bd70
 80081cc:	080275b8 	.word	0x080275b8
 80081d0:	9049c314 	.word	0x9049c314
 80081d4:	20003908 	.word	0x20003908
 80081d8:	08008159 	.word	0x08008159

080081dc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 176, 20, 5, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__tcf_0+0xc>)
 80081e2:	f7fc facf 	bl	8004784 <_ZN8touchgfx13GeneratedFontD1Ev>
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20003930 	.word	0x20003930

080081ec <_Z23getFont_verdana_20_4bppv>:
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 176, 20, 5, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d11f      	bne.n	800823e <_Z23getFont_verdana_20_4bppv+0x52>
 80081fe:	2300      	movs	r3, #0
 8008200:	9309      	str	r3, [sp, #36]	; 0x24
 8008202:	2300      	movs	r3, #0
 8008204:	9308      	str	r3, [sp, #32]
 8008206:	233f      	movs	r3, #63	; 0x3f
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	4b10      	ldr	r3, [pc, #64]	; (800824c <_Z23getFont_verdana_20_4bppv+0x60>)
 800820c:	9306      	str	r3, [sp, #24]
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <_Z23getFont_verdana_20_4bppv+0x64>)
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	2301      	movs	r3, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	2301      	movs	r3, #1
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	2301      	movs	r3, #1
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	2304      	movs	r3, #4
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	2305      	movs	r3, #5
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2314      	movs	r3, #20
 8008228:	22b0      	movs	r2, #176	; 0xb0
 800822a:	490a      	ldr	r1, [pc, #40]	; (8008254 <_Z23getFont_verdana_20_4bppv+0x68>)
 800822c:	480a      	ldr	r0, [pc, #40]	; (8008258 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800822e:	f7fd ffd1 	bl	80061d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8008232:	4b05      	ldr	r3, [pc, #20]	; (8008248 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	4808      	ldr	r0, [pc, #32]	; (800825c <_Z23getFont_verdana_20_4bppv+0x70>)
 800823a:	f01c fc59 	bl	8024af0 <atexit>
    return verdana_20_4bpp;
 800823e:	4b06      	ldr	r3, [pc, #24]	; (8008258 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8008240:	4618      	mov	r0, r3
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20003954 	.word	0x20003954
 800824c:	9049be20 	.word	0x9049be20
 8008250:	080275bc 	.word	0x080275bc
 8008254:	9049ccc4 	.word	0x9049ccc4
 8008258:	20003930 	.word	0x20003930
 800825c:	080081dd 	.word	0x080081dd

08008260 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 176, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__tcf_0+0xc>)
 8008266:	f7fc fa8d 	bl	8004784 <_ZN8touchgfx13GeneratedFontD1Ev>
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20003958 	.word	0x20003958

08008270 <_Z23getFont_verdana_40_4bppv>:
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	; 0x28
 8008274:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 176, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <_Z23getFont_verdana_40_4bppv+0x5c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d11f      	bne.n	80082c2 <_Z23getFont_verdana_40_4bppv+0x52>
 8008282:	2300      	movs	r3, #0
 8008284:	9309      	str	r3, [sp, #36]	; 0x24
 8008286:	2300      	movs	r3, #0
 8008288:	9308      	str	r3, [sp, #32]
 800828a:	233f      	movs	r3, #63	; 0x3f
 800828c:	9307      	str	r3, [sp, #28]
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8008290:	9306      	str	r3, [sp, #24]
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	2302      	movs	r3, #2
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	2302      	movs	r3, #2
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	2301      	movs	r3, #1
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	2304      	movs	r3, #4
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	2308      	movs	r3, #8
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	2328      	movs	r3, #40	; 0x28
 80082ac:	22b0      	movs	r2, #176	; 0xb0
 80082ae:	490a      	ldr	r1, [pc, #40]	; (80082d8 <_Z23getFont_verdana_40_4bppv+0x68>)
 80082b0:	480a      	ldr	r0, [pc, #40]	; (80082dc <_Z23getFont_verdana_40_4bppv+0x6c>)
 80082b2:	f7fd ff8f 	bl	80061d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <_Z23getFont_verdana_40_4bppv+0x5c>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	4808      	ldr	r0, [pc, #32]	; (80082e0 <_Z23getFont_verdana_40_4bppv+0x70>)
 80082be:	f01c fc17 	bl	8024af0 <atexit>
    return verdana_40_4bpp;
 80082c2:	4b06      	ldr	r3, [pc, #24]	; (80082dc <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	2000397c 	.word	0x2000397c
 80082d0:	9049bfc0 	.word	0x9049bfc0
 80082d4:	080275c0 	.word	0x080275c0
 80082d8:	9049d664 	.word	0x9049d664
 80082dc:	20003958 	.word	0x20003958
 80082e0:	08008261 	.word	0x08008261

080082e4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80082f2:	4a07      	ldr	r2, [pc, #28]	; (8008310 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80082f8:	4a06      	ldr	r2, [pc, #24]	; (8008314 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80082fe:	4a06      	ldr	r2, [pc, #24]	; (8008318 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	8013      	strh	r3, [r2, #0]
    }
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	2000bb8c 	.word	0x2000bb8c
 8008314:	2000bb94 	.word	0x2000bb94
 8008318:	2000bb90 	.word	0x2000bb90

0800831c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d127      	bne.n	8008380 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d016      	beq.n	800836a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	4a1b      	ldr	r2, [pc, #108]	; (80083ac <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008344:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	4a18      	ldr	r2, [pc, #96]	; (80083b0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008350:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4413      	add	r3, r2
 800835a:	4a16      	ldr	r2, [pc, #88]	; (80083b4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800835c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e00a      	b.n	8008380 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800836a:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800836c:	4a12      	ldr	r2, [pc, #72]	; (80083b8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800836e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008370:	4a12      	ldr	r2, [pc, #72]	; (80083bc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008372:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008374:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	4a11      	ldr	r2, [pc, #68]	; (80083c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800837a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800837e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008386:	4a0f      	ldr	r2, [pc, #60]	; (80083c4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800838c:	f000 f83e 	bl	800840c <_ZN17TypedTextDatabase8getFontsEv>
 8008390:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008392:	f000 f833 	bl	80083fc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	4621      	mov	r1, r4
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f7ff ffa1 	bl	80082e4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20003980 	.word	0x20003980
 80083b0:	20003988 	.word	0x20003988
 80083b4:	2000398c 	.word	0x2000398c
 80083b8:	9049e038 	.word	0x9049e038
 80083bc:	9049e004 	.word	0x9049e004
 80083c0:	9049e120 	.word	0x9049e120
 80083c4:	20003984 	.word	0x20003984

080083c8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80083da:	6819      	ldr	r1, [r3, #0]
 80083dc:	887b      	ldrh	r3, [r7, #2]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	20003988 	.word	0x20003988
 80083f8:	2000398c 	.word	0x2000398c

080083fc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8008400:	230d      	movs	r3, #13
}
 8008402:	4618      	mov	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
    return _fonts;
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8008412:	4618      	mov	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20003990 	.word	0x20003990

08008420 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_14_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d113      	bne.n	8008458 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008436:	4293      	cmp	r3, r2
 8008438:	d10e      	bne.n	8008458 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800843a:	f7ff fed7 	bl	80081ec <_Z23getFont_verdana_20_4bppv>
 800843e:	4602      	mov	r2, r0
};
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008442:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8008444:	f7ff ff14 	bl	8008270 <_Z23getFont_verdana_40_4bppv>
 8008448:	4602      	mov	r2, r0
};
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800844c:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_14_4bpp())
 800844e:	f7ff fe8b 	bl	8008168 <_Z23getFont_verdana_14_4bppv>
 8008452:	4602      	mov	r2, r0
};
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008456:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20003990 	.word	0x20003990

08008464 <_GLOBAL__sub_I__fonts>:
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
 8008468:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800846c:	2001      	movs	r0, #1
 800846e:	f7ff ffd7 	bl	8008420 <_Z41__static_initialization_and_destruction_0ii>
 8008472:	bd80      	pop	{r7, pc}

08008474 <_ZN16CustomContainer1D1Ev>:

class CustomContainer1 : public CustomContainer1Base
{
public:
    CustomContainer1();
    virtual ~CustomContainer1() {}
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	4a05      	ldr	r2, [pc, #20]	; (8008494 <_ZN16CustomContainer1D1Ev+0x20>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4618      	mov	r0, r3
 8008486:	f7fc fc8b 	bl	8004da0 <_ZN20CustomContainer1BaseD1Ev>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	080275cc 	.word	0x080275cc

08008498 <_ZN16CustomContainer1D0Ev>:
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff ffe7 	bl	8008474 <_ZN16CustomContainer1D1Ev>
 80084a6:	21fc      	movs	r1, #252	; 0xfc
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f01c fad8 	bl	8024a5e <_ZdlPvj>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <_ZN16CustomContainer1C1Ev>:
#include <gui/containers/CustomContainer1.hpp>
#include <touchgfx\Bitmap.hpp>

CustomContainer1::CustomContainer1()
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fc fd0a 	bl	8004edc <_ZN20CustomContainer1BaseC1Ev>
 80084c8:	4a03      	ldr	r2, [pc, #12]	; (80084d8 <_ZN16CustomContainer1C1Ev+0x20>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
{

}
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	080275cc 	.word	0x080275cc

080084dc <_ZN16CustomContainer110initializeEv>:

void CustomContainer1::initialize()
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
    CustomContainer1Base::initialize();
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fc fdb4 	bl	8005054 <_ZN20CustomContainer1Base10initializeEv>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>:

void CustomContainer1::updateImage(Bitmap image)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	8039      	strh	r1, [r7, #0]
    icon.setBitmap(image);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	332c      	adds	r3, #44	; 0x2c
 8008502:	463a      	mov	r2, r7
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f00e fa7a 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    icon.invalidate();
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	332c      	adds	r3, #44	; 0x2c
 8008510:	4618      	mov	r0, r3
 8008512:	f010 fd5f 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <_ZN16CustomContainer111updateShapeEv>:

void CustomContainer1::updateShape()
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
    shape1.setVisible(true);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3358      	adds	r3, #88	; 0x58
 800852a:	2101      	movs	r1, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f7fc fa95 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
    shape1.invalidate();
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3358      	adds	r3, #88	; 0x58
 8008536:	4618      	mov	r0, r3
 8008538:	f00d fcac 	bl	8015e94 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZN16CustomContainer110cleanShapeEv>:

void CustomContainer1::cleanShape()
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
    shape1.setVisible(false);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3358      	adds	r3, #88	; 0x58
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f7fc fa82 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
    shape1.invalidate();
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3358      	adds	r3, #88	; 0x58
 800855c:	4618      	mov	r0, r3
 800855e:	f00d fc99 	bl	8015e94 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd f9ac 	bl	80058dc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008584:	4a03      	ldr	r2, [pc, #12]	; (8008594 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	601a      	str	r2, [r3, #0]
{

}
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	080268a0 	.word	0x080268a0

08008598 <_ZN5ModelC1Ev>:

extern osMailQId (mail);   // Declare external handler for  Mailq
extern UART_HandleTypeDef huart1;


Model::Model() : modelListener(0)
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3304      	adds	r3, #4
 80085aa:	22a0      	movs	r2, #160	; 0xa0
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f01c fb03 	bl	8024bba <memset>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
{

}
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	osEvent event = osMailGet(mail, 10);        // wait for mail
 80085d0:	4b14      	ldr	r3, [pc, #80]	; (8008624 <_ZN5Model4tickEv+0x5c>)
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	f107 0308 	add.w	r3, r7, #8
 80085d8:	220a      	movs	r2, #10
 80085da:	4618      	mov	r0, r3
 80085dc:	f008 fe2a 	bl	8011234 <osMailGet>
	if (event.status == osEventMail)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d119      	bne.n	800861a <_ZN5Model4tickEv+0x52>
	{
		T_MEAS *received_Value = (T_MEAS *)event.value.p;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	617b      	str	r3, [r7, #20]
		strcpy(currentLog.data,received_Value->data);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f103 020c 	add.w	r2, r3, #12
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	3308      	adds	r3, #8
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f01c feac 	bl	8025354 <strcpy>

	    modelListener->notifyLogChanged();
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4610      	mov	r0, r2
 800860c:	4798      	blx	r3
	    osMailFree(mail, received_Value);  // Free the memory location of the Mailq
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <_ZN5Model4tickEv+0x5c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6979      	ldr	r1, [r7, #20]
 8008614:	4618      	mov	r0, r3
 8008616:	f008 fe81 	bl	801131c <osMailFree>
	}
}
 800861a:	bf00      	nop
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	2000bdc4 	.word	0x2000bdc4

08008628 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
    {
    }
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
    {
    }
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    {
 8008658:	4a04      	ldr	r2, [pc, #16]	; (800866c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
    }
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	080276a0 	.word	0x080276a0

08008670 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
    }
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff ffe9 	bl	8008650 <_ZN8touchgfx9PresenterD1Ev>
 800867e:	2104      	movs	r1, #4
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f01c f9ec 	bl	8024a5e <_ZdlPvj>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
    {
 8008698:	4a04      	ldr	r2, [pc, #16]	; (80086ac <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
    }
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	080276a0 	.word	0x080276a0

080086b0 <_ZNK5Model13getCurrentLogEv>:

    void tick();

    // Function that allow your presenters to read current log.
    T_MEAS getCurrentLog() const { return currentLog; }
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	4610      	mov	r0, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	22a0      	movs	r2, #160	; 0xa0
 80086c4:	4619      	mov	r1, r3
 80086c6:	f01c fa6d 	bl	8024ba4 <memcpy>
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	4a06      	ldr	r2, [pc, #24]	; (80086f8 <_ZN13ModelListenerC1Ev+0x24>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	0802768c 	.word	0x0802768c

080086fc <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	4a04      	ldr	r2, [pc, #16]	; (8008718 <_ZN13ModelListenerD1Ev+0x1c>)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	0802768c 	.word	0x0802768c

0800871c <_ZN13ModelListenerD0Ev>:
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff ffe9 	bl	80086fc <_ZN13ModelListenerD1Ev>
 800872a:	2108      	movs	r1, #8
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f01c f996 	bl	8024a5e <_ZdlPvj>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <_ZN13ModelListener16notifyLogChangedEv>:

    /* Call this function to notify that log has changed.
    ** override this function.*/
    virtual void notifyLogChanged() {}
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <_ZN16Screen1PresenterD1Ev+0x30>)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	4a09      	ldr	r2, [pc, #36]	; (8008784 <_ZN16Screen1PresenterD1Ev+0x34>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3304      	adds	r3, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff ffc7 	bl	80086fc <_ZN13ModelListenerD1Ev>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff ff6d 	bl	8008650 <_ZN8touchgfx9PresenterD1Ev>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	0802765c 	.word	0x0802765c
 8008784:	08027678 	.word	0x08027678

08008788 <_ZThn4_N16Screen1PresenterD1Ev>:
 8008788:	f1a0 0004 	sub.w	r0, r0, #4
 800878c:	e7e0      	b.n	8008750 <_ZN16Screen1PresenterD1Ev>
 800878e:	bf00      	nop

08008790 <_ZN16Screen1PresenterD0Ev>:
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ffd9 	bl	8008750 <_ZN16Screen1PresenterD1Ev>
 800879e:	2110      	movs	r1, #16
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f01c f95c 	bl	8024a5e <_ZdlPvj>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80087b0:	f1a0 0004 	sub.w	r0, r0, #4
 80087b4:	e7ec      	b.n	8008790 <_ZN16Screen1PresenterD0Ev>
	...

080087b8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
    : view(v)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff ff63 	bl	8008690 <_ZN8touchgfx9PresenterC1Ev>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff ff80 	bl	80086d4 <_ZN13ModelListenerC1Ev>
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	4a06      	ldr	r2, [pc, #24]	; (80087f4 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	60da      	str	r2, [r3, #12]
{

}
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	0802765c 	.word	0x0802765c
 80087f4:	08027678 	.word	0x08027678

080087f8 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b0d1      	sub	sp, #324	; 0x144
 80087fc:	af26      	add	r7, sp, #152	; 0x98
 80087fe:	6078      	str	r0, [r7, #4]
	 view.setLog(model->getCurrentLog());
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68dc      	ldr	r4, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	f107 0308 	add.w	r3, r7, #8
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff ff4e 	bl	80086b0 <_ZNK5Model13getCurrentLogEv>
 8008814:	4668      	mov	r0, sp
 8008816:	f107 0314 	add.w	r3, r7, #20
 800881a:	2294      	movs	r2, #148	; 0x94
 800881c:	4619      	mov	r1, r3
 800881e:	f01c f9c1 	bl	8024ba4 <memcpy>
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008828:	4620      	mov	r0, r4
 800882a:	f000 f87f 	bl	800892c <_ZN11Screen1View6setLogE6T_MEAS>
}
 800882e:	bf00      	nop
 8008830:	37ac      	adds	r7, #172	; 0xac
 8008832:	46bd      	mov	sp, r7
 8008834:	bd90      	pop	{r4, r7, pc}

08008836 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]

}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <_ZN16Screen1Presenter16notifyLogChangedEv>:

void Screen1Presenter::notifyLogChanged()
{
 800884a:	b590      	push	{r4, r7, lr}
 800884c:	b0d1      	sub	sp, #324	; 0x144
 800884e:	af26      	add	r7, sp, #152	; 0x98
 8008850:	6078      	str	r0, [r7, #4]
    view.setLog(model->getCurrentLog());
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68dc      	ldr	r4, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	f107 0308 	add.w	r3, r7, #8
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff ff25 	bl	80086b0 <_ZNK5Model13getCurrentLogEv>
 8008866:	4668      	mov	r0, sp
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	2294      	movs	r2, #148	; 0x94
 800886e:	4619      	mov	r1, r3
 8008870:	f01c f998 	bl	8024ba4 <memcpy>
 8008874:	f107 0308 	add.w	r3, r7, #8
 8008878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800887a:	4620      	mov	r0, r4
 800887c:	f000 f856 	bl	800892c <_ZN11Screen1View6setLogE6T_MEAS>
}
 8008880:	bf00      	nop
 8008882:	37ac      	adds	r7, #172	; 0xac
 8008884:	46bd      	mov	sp, r7
 8008886:	bd90      	pop	{r4, r7, pc}

08008888 <_ZThn4_N16Screen1Presenter16notifyLogChangedEv>:

//    /*override the empty function.*/
    virtual void notifyLogChanged();
 8008888:	f1a0 0004 	sub.w	r0, r0, #4
 800888c:	f7ff bfdd 	b.w	800884a <_ZN16Screen1Presenter16notifyLogChangedEv>

08008890 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	4a05      	ldr	r2, [pc, #20]	; (80088b0 <_ZN11Screen1ViewD1Ev+0x20>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fd fffd 	bl	80068a0 <_ZN15Screen1ViewBaseD1Ev>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	080276b8 	.word	0x080276b8

080088b4 <_ZN11Screen1ViewD0Ev>:
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff ffe7 	bl	8008890 <_ZN11Screen1ViewD1Ev>
 80088c2:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f01c f8c9 	bl	8024a5e <_ZdlPvj>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>


Screen1View::Screen1View()
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe f82a 	bl	800693c <_ZN15Screen1ViewBaseC1Ev>
 80088e8:	4a03      	ldr	r2, [pc, #12]	; (80088f8 <_ZN11Screen1ViewC1Ev+0x20>)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
{

}
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	080276b8 	.word	0x080276b8

080088fc <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe f996 	bl	8006c38 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fd18 	bl	8006354 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <_ZN11Screen1View6setLogE6T_MEAS>:

void Screen1View::setLog(T_MEAS currentData)
{
 800892c:	b084      	sub	sp, #16
 800892e:	b590      	push	{r4, r7, lr}
 8008930:	b0cf      	sub	sp, #316	; 0x13c
 8008932:	af00      	add	r7, sp, #0
 8008934:	1d3c      	adds	r4, r7, #4
 8008936:	6020      	str	r0, [r4, #0]
 8008938:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800893c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	touchgfx::Unicode::UnicodeChar tmp[150];
	Unicode::strncpy(tmp, (const char*)currentData.data, 150);
 8008940:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8008944:	f103 0108 	add.w	r1, r3, #8
 8008948:	f107 030c 	add.w	r3, r7, #12
 800894c:	2296      	movs	r2, #150	; 0x96
 800894e:	4618      	mov	r0, r3
 8008950:	f011 ffa0 	bl	801a894 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(textArea2Buffer,150, tmp);
 8008954:	1d3b      	adds	r3, r7, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800895c:	f107 020c 	add.w	r2, r7, #12
 8008960:	2196      	movs	r1, #150	; 0x96
 8008962:	4618      	mov	r0, r3
 8008964:	f012 fa4d 	bl	801ae02 <_ZN8touchgfx7Unicode8snprintfEPttPKtz>
	textArea2.invalidate();
 8008968:	1d3b      	adds	r3, r7, #4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	33d4      	adds	r3, #212	; 0xd4
 800896e:	4618      	mov	r0, r3
 8008970:	f010 fb30 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8008974:	bf00      	nop
 8008976:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800897a:	46bd      	mov	sp, r7
 800897c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008980:	b004      	add	sp, #16
 8008982:	4770      	bx	lr

08008984 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	4a09      	ldr	r2, [pc, #36]	; (80089b4 <_ZN16Screen2PresenterD1Ev+0x30>)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	4a09      	ldr	r2, [pc, #36]	; (80089b8 <_ZN16Screen2PresenterD1Ev+0x34>)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3304      	adds	r3, #4
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fead 	bl	80086fc <_ZN13ModelListenerD1Ev>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff fe53 	bl	8008650 <_ZN8touchgfx9PresenterD1Ev>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	080276ec 	.word	0x080276ec
 80089b8:	08027704 	.word	0x08027704

080089bc <_ZThn4_N16Screen2PresenterD1Ev>:
 80089bc:	f1a0 0004 	sub.w	r0, r0, #4
 80089c0:	e7e0      	b.n	8008984 <_ZN16Screen2PresenterD1Ev>
 80089c2:	bf00      	nop

080089c4 <_ZN16Screen2PresenterD0Ev>:
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff ffd9 	bl	8008984 <_ZN16Screen2PresenterD1Ev>
 80089d2:	2110      	movs	r1, #16
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f01c f842 	bl	8024a5e <_ZdlPvj>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <_ZThn4_N16Screen2PresenterD0Ev>:
 80089e4:	f1a0 0004 	sub.w	r0, r0, #4
 80089e8:	e7ec      	b.n	80089c4 <_ZN16Screen2PresenterD0Ev>
	...

080089ec <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
    : view(v)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fe49 	bl	8008690 <_ZN8touchgfx9PresenterC1Ev>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3304      	adds	r3, #4
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fe66 	bl	80086d4 <_ZN13ModelListenerC1Ev>
 8008a08:	4a06      	ldr	r2, [pc, #24]	; (8008a24 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	4a06      	ldr	r2, [pc, #24]	; (8008a28 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	605a      	str	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	60da      	str	r2, [r3, #12]
{

}
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	080276ec 	.word	0x080276ec
 8008a28:	08027704 	.word	0x08027704

08008a2c <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]

}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <_ZN5Model8Get_ItemEv>:
    void save_Item(int16_t Item)
       {
           Indx_Item = Item;
       }

    int16_t Get_Item()
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
       {
           return Indx_Item;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
       }
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <_ZN16Screen2Presenter8Get_ItemEv>:
//    void save_Item(int16_t Item)
//    {
//        model->save_Item (Item);
//    }

    int16_t Get_Item()
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
    {
        return model->Get_Item();
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff ffea 	bl	8008a54 <_ZN5Model8Get_ItemEv>
 8008a80:	4603      	mov	r3, r0
    }
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	4a05      	ldr	r2, [pc, #20]	; (8008aac <_ZN11Screen2ViewD1Ev+0x20>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fab5 	bl	800700c <_ZN15Screen2ViewBaseD1Ev>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	08027718 	.word	0x08027718

08008ab0 <_ZN11Screen2ViewD0Ev>:
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff ffe7 	bl	8008a8c <_ZN11Screen2ViewD1Ev>
 8008abe:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f01b ffcb 	bl	8024a5e <_ZdlPvj>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <BitmapDatabase.hpp>

//extern UART_HandleTypeDef huart1;

Screen2View::Screen2View()
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe faec 	bl	80070bc <_ZN15Screen2ViewBaseC1Ev>
 8008ae4:	4a05      	ldr	r2, [pc, #20]	; (8008afc <_ZN11Screen2ViewC1Ev+0x28>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
{

}
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	08027718 	.word	0x08027718

08008b00 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b08d      	sub	sp, #52	; 0x34
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]

	Indx_Item = int(presenter -> Get_Item());
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff ffae 	bl	8008a6e <_ZN16Screen2Presenter8Get_ItemEv>
 8008b12:	4603      	mov	r3, r0
 8008b14:	461a      	mov	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	Unicode::itoa(Indx_Item,textArea2Buffer, TEXTAREA2_SIZE, 10);  // change the numbber of the scrollwheel WildCard
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 0174 	ldr.w	r0, [r3, #372]	; 0x174
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8008b28:	230a      	movs	r3, #10
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	f011 fee1 	bl	801a8f2 <_ZN8touchgfx7Unicode4itoaElPtti>
	//HAL_UART_Transmit(&huart1, (uint8_t *)textArea2Buffer, 2, HAL_MAX_DELAY);

	  switch (Indx_Item) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008b36:	2b09      	cmp	r3, #9
 8008b38:	f200 8126 	bhi.w	8008d88 <_ZN11Screen2View11setupScreenEv+0x288>
 8008b3c:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <_ZN11Screen2View11setupScreenEv+0x44>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b6d 	.word	0x08008b6d
 8008b48:	08008ba3 	.word	0x08008ba3
 8008b4c:	08008bd9 	.word	0x08008bd9
 8008b50:	08008c0f 	.word	0x08008c0f
 8008b54:	08008c45 	.word	0x08008c45
 8008b58:	08008c7b 	.word	0x08008c7b
 8008b5c:	08008cb1 	.word	0x08008cb1
 8008b60:	08008ce7 	.word	0x08008ce7
 8008b64:	08008d1d 	.word	0x08008d1d
 8008b68:	08008d53 	.word	0x08008d53
	        case 0 :
	          CHECK1.setBitmap(Bitmap(BITMAP_DOWN_ID));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008b72:	f107 0308 	add.w	r3, r7, #8
 8008b76:	2106      	movs	r1, #6
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fb fe54 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008b7e:	f107 0308 	add.w	r3, r7, #8
 8008b82:	4619      	mov	r1, r3
 8008b84:	4620      	mov	r0, r4
 8008b86:	f00d ff3b 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	33a8      	adds	r3, #168	; 0xa8
 8008b8e:	2101      	movs	r1, #1
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fb ff63 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	33a8      	adds	r3, #168	; 0xa8
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f010 fa1a 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008ba0:	e0f3      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>

	        case 1 :
	          CHECK1.setBitmap(Bitmap(BITMAP_UP_ID));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	2117      	movs	r1, #23
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fb fe39 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008bb4:	f107 030c 	add.w	r3, r7, #12
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f00d ff20 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	33a8      	adds	r3, #168	; 0xa8
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fb ff48 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	33a8      	adds	r3, #168	; 0xa8
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f010 f9ff 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008bd6:	e0d8      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>

	        case 2 :
	          CHECK1.setBitmap(Bitmap(BITMAP_CAMPAGNECUIVRE_ID));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008bde:	f107 0310 	add.w	r3, r7, #16
 8008be2:	2105      	movs	r1, #5
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fb fe1e 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008bea:	f107 0310 	add.w	r3, r7, #16
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f00d ff05 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true );
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	33a8      	adds	r3, #168	; 0xa8
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fb ff2d 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	33a8      	adds	r3, #168	; 0xa8
 8008c06:	4618      	mov	r0, r3
 8008c08:	f010 f9e4 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008c0c:	e0bd      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>

	        case 3 :
	          CHECK1.setBitmap(Bitmap(BITMAP_CAMPAGNEALU_ID));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008c14:	f107 0314 	add.w	r3, r7, #20
 8008c18:	2104      	movs	r1, #4
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fb fe03 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008c20:	f107 0314 	add.w	r3, r7, #20
 8008c24:	4619      	mov	r1, r3
 8008c26:	4620      	mov	r0, r4
 8008c28:	f00d feea 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	33a8      	adds	r3, #168	; 0xa8
 8008c30:	2101      	movs	r1, #1
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fb ff12 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	33a8      	adds	r3, #168	; 0xa8
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f010 f9c9 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008c42:	e0a2      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>
	        case 4 :
	          CHECK1.setBitmap(Bitmap(BITMAP_LOWCOP_ID));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008c4a:	f107 0318 	add.w	r3, r7, #24
 8008c4e:	2108      	movs	r1, #8
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fb fde8 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008c56:	f107 0318 	add.w	r3, r7, #24
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f00d fecf 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	33a8      	adds	r3, #168	; 0xa8
 8008c66:	2101      	movs	r1, #1
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fb fef7 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	33a8      	adds	r3, #168	; 0xa8
 8008c72:	4618      	mov	r0, r3
 8008c74:	f010 f9ae 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008c78:	e087      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>
	        case 5 :
	          CHECK1.setBitmap(Bitmap(BITMAP_LOGISTIQUE_ID));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008c80:	f107 031c 	add.w	r3, r7, #28
 8008c84:	2107      	movs	r1, #7
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fb fdcd 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008c8c:	f107 031c 	add.w	r3, r7, #28
 8008c90:	4619      	mov	r1, r3
 8008c92:	4620      	mov	r0, r4
 8008c94:	f00d feb4 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	33a8      	adds	r3, #168	; 0xa8
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fb fedc 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	33a8      	adds	r3, #168	; 0xa8
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f010 f993 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008cae:	e06c      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>
	        case 6 :
	          CHECK1.setBitmap(Bitmap(BITMAP_BREAK_ID));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008cb6:	f107 0320 	add.w	r3, r7, #32
 8008cba:	2103      	movs	r1, #3
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fb fdb2 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008cc2:	f107 0320 	add.w	r3, r7, #32
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f00d fe99 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	33a8      	adds	r3, #168	; 0xa8
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fb fec1 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	33a8      	adds	r3, #168	; 0xa8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f010 f978 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008ce4:	e051      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>
	        case 7 :
	          CHECK1.setBitmap(Bitmap(BITMAP_NEPASRECHARGER_ID));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cf0:	2114      	movs	r1, #20
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fb fd97 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f00d fe7e 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	33a8      	adds	r3, #168	; 0xa8
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fb fea6 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	33a8      	adds	r3, #168	; 0xa8
 8008d14:	4618      	mov	r0, r3
 8008d16:	f010 f95d 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008d1a:	e036      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>
	        case 8 :
	          CHECK1.setBitmap(Bitmap(BITMAP_MCMTQ_ID));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d26:	2109      	movs	r1, #9
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fb fd7c 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d32:	4619      	mov	r1, r3
 8008d34:	4620      	mov	r0, r4
 8008d36:	f00d fe63 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	33a8      	adds	r3, #168	; 0xa8
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fb fe8b 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	33a8      	adds	r3, #168	; 0xa8
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f010 f942 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008d50:	e01b      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>
	        case 9 :
	          CHECK1.setBitmap(Bitmap(BITMAP_TQ_ID));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8008d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d5c:	2116      	movs	r1, #22
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fb fd61 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8008d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f00d fe48 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	          CHECK1.setVisible( true ) ;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	33a8      	adds	r3, #168	; 0xa8
 8008d74:	2101      	movs	r1, #1
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fb fe70 	bl	8004a5c <_ZN8touchgfx8Drawable10setVisibleEb>
	          CHECK1.invalidate();
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	33a8      	adds	r3, #168	; 0xa8
 8008d80:	4618      	mov	r0, r3
 8008d82:	f010 f927 	bl	8018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>
	        break;
 8008d86:	e000      	b.n	8008d8a <_ZN11Screen2View11setupScreenEv+0x28a>

	        default:
	        break ;
 8008d88:	bf00      	nop
	  }

    Screen2ViewBase::setupScreen();
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe fb15 	bl	80073bc <_ZN15Screen2ViewBase11setupScreenEv>
}
 8008d92:	bf00      	nop
 8008d94:	3734      	adds	r7, #52	; 0x34
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd90      	pop	{r4, r7, pc}
 8008d9a:	bf00      	nop

08008d9c <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd fad4 	bl	8006354 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <_ZN16Screen3PresenterD1Ev+0x30>)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	4a09      	ldr	r2, [pc, #36]	; (8008de8 <_ZN16Screen3PresenterD1Ev+0x34>)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	605a      	str	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fc95 	bl	80086fc <_ZN13ModelListenerD1Ev>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff fc3b 	bl	8008650 <_ZN8touchgfx9PresenterD1Ev>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	08027750 	.word	0x08027750
 8008de8:	08027768 	.word	0x08027768

08008dec <_ZThn4_N16Screen3PresenterD1Ev>:
 8008dec:	f1a0 0004 	sub.w	r0, r0, #4
 8008df0:	e7e0      	b.n	8008db4 <_ZN16Screen3PresenterD1Ev>
 8008df2:	bf00      	nop

08008df4 <_ZN16Screen3PresenterD0Ev>:
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff ffd9 	bl	8008db4 <_ZN16Screen3PresenterD1Ev>
 8008e02:	2110      	movs	r1, #16
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f01b fe2a 	bl	8024a5e <_ZdlPvj>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <_ZThn4_N16Screen3PresenterD0Ev>:
 8008e14:	f1a0 0004 	sub.w	r0, r0, #4
 8008e18:	e7ec      	b.n	8008df4 <_ZN16Screen3PresenterD0Ev>
	...

08008e1c <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
    : view(v)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fc31 	bl	8008690 <_ZN8touchgfx9PresenterC1Ev>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fc4e 	bl	80086d4 <_ZN13ModelListenerC1Ev>
 8008e38:	4a06      	ldr	r2, [pc, #24]	; (8008e54 <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	4a06      	ldr	r2, [pc, #24]	; (8008e58 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	605a      	str	r2, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	60da      	str	r2, [r3, #12]
{

}
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	08027750 	.word	0x08027750
 8008e58:	08027768 	.word	0x08027768

08008e5c <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]

}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <_ZN5Model9save_ItemEs>:
    void save_Item(int16_t Item)
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	807b      	strh	r3, [r7, #2]
           Indx_Item = Item;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	887a      	ldrh	r2, [r7, #2]
 8008e94:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
       }
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <_ZN16Screen3Presenter9save_ItemEs>:


    void save_Item(int16_t Item)
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	807b      	strh	r3, [r7, #2]
        {
            model->save_Item (Item);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff ffe2 	bl	8008e84 <_ZN5Model9save_ItemEs>
        }
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <_ZN11Screen3ViewD1Ev+0x30>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	f642 0358 	movw	r3, #10328	; 0x2858
 8008edc:	4413      	add	r3, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f9a0 	bl	8009224 <_ZN8touchgfx8CallbackI11Screen3ViewsvvED1Ev>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fbe8 	bl	80076bc <_ZN15Screen3ViewBaseD1Ev>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	0802777c 	.word	0x0802777c

08008efc <_ZN11Screen3ViewD0Ev>:
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff ffdf 	bl	8008ec8 <_ZN11Screen3ViewD1Ev>
 8008f0a:	f642 0168 	movw	r1, #10344	; 0x2868
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f01b fda5 	bl	8024a5e <_ZdlPvj>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <_ZN11Screen3ViewC1Ev>:
#include "texts/TextKeysAndLanguages.hpp"
#include <gui_generated/containers/CustomContainer1Base.hpp>

extern UART_HandleTypeDef huart1;

Screen3View::Screen3View() :
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	scrollList1ItemSelectedCallback(this, &Screen3View::scrollList1ItemSelectedHandler)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fc40 	bl	80077b0 <_ZN15Screen3ViewBaseC1Ev>
 8008f30:	4a0a      	ldr	r2, [pc, #40]	; (8008f5c <_ZN11Screen3ViewC1Ev+0x3c>)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f642 0058 	movw	r0, #10328	; 0x2858
 8008f3c:	4418      	add	r0, r3
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <_ZN11Screen3ViewC1Ev+0x40>)
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	2300      	movs	r3, #0
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	cb0c      	ldmia	r3, {r2, r3}
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	f000 f929 	bl	80091a4 <_ZN8touchgfx8CallbackI11Screen3ViewsvvEC1EPS1_MS1_FvsE>
{

}
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	0802777c 	.word	0x0802777c
 8008f60:	08009111 	.word	0x08009111

08008f64 <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	// The item selected callbacks are registerd with scroll wheel and list
	scrollList1.setItemSelectedCallback(scrollList1ItemSelectedCallback);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	f642 0358 	movw	r3, #10328	; 0x2858
 8008f78:	4413      	add	r3, r2
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	f00b faf1 	bl	8014562 <_ZN8touchgfx10ScrollBase23setItemSelectedCallbackERNS_15GenericCallbackIsvvEE>

	// The scroll wheel and list is updated to show the selected icons and numbers.
	for (int i = 0; i < scrollList1ListItems.getNumberOfDrawables(); i++)
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe ff94 	bl	8007eb8 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE20getNumberOfDrawablesEv>
 8008f90:	4603      	mov	r3, r0
 8008f92:	461a      	mov	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4293      	cmp	r3, r2
 8008f98:	bfb4      	ite	lt
 8008f9a:	2301      	movlt	r3, #1
 8008f9c:	2300      	movge	r3, #0
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <_ZN11Screen3View11setupScreenEv+0x54>
	{
		scrollList1.itemChanged(i);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3370      	adds	r3, #112	; 0x70
 8008fa8:	68f9      	ldr	r1, [r7, #12]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f00b f9e4 	bl	8014378 <_ZN8touchgfx10ScrollBase11itemChangedEi>
	for (int i = 0; i < scrollList1ListItems.getNumberOfDrawables(); i++)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	e7e5      	b.n	8008f84 <_ZN11Screen3View11setupScreenEv+0x20>
	}
	Screen3ViewBase::setupScreen();
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fe2e 	bl	8007c1c <_ZN15Screen3ViewBase11setupScreenEv>
}
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fd f9be 	bl	8006354 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s>:

void Screen3View::scrollList1UpdateItem(CustomContainer1& item, int16_t itemIndex)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08e      	sub	sp, #56	; 0x38
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	80fb      	strh	r3, [r7, #6]
    switch (itemIndex)
 8008fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ff2:	2b09      	cmp	r3, #9
 8008ff4:	f200 8086 	bhi.w	8009104 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x124>
 8008ff8:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x20>)
 8008ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffe:	bf00      	nop
 8009000:	08009029 	.word	0x08009029
 8009004:	0800903f 	.word	0x0800903f
 8009008:	08009055 	.word	0x08009055
 800900c:	0800906b 	.word	0x0800906b
 8009010:	08009081 	.word	0x08009081
 8009014:	08009097 	.word	0x08009097
 8009018:	080090ad 	.word	0x080090ad
 800901c:	080090c3 	.word	0x080090c3
 8009020:	080090d9 	.word	0x080090d9
 8009024:	080090ef 	.word	0x080090ef
    {
    case 0:
    	item.updateImage(Bitmap(BITMAP_MINIDOWN_ID));
 8009028:	f107 0310 	add.w	r3, r7, #16
 800902c:	210d      	movs	r1, #13
 800902e:	4618      	mov	r0, r3
 8009030:	f7fb fbf9 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8009034:	8a39      	ldrh	r1, [r7, #16]
 8009036:	68b8      	ldr	r0, [r7, #8]
 8009038:	f7ff fa5c 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 800903c:	e063      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 1:
    	item.updateImage(Bitmap(BITMAP_MINIUP_ID));
 800903e:	f107 0314 	add.w	r3, r7, #20
 8009042:	2113      	movs	r1, #19
 8009044:	4618      	mov	r0, r3
 8009046:	f7fb fbee 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 800904a:	8ab9      	ldrh	r1, [r7, #20]
 800904c:	68b8      	ldr	r0, [r7, #8]
 800904e:	f7ff fa51 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 8009052:	e058      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 2:
    	item.updateImage(Bitmap(BITMAP_MINICAMPAGNECUIVRE_ID));
 8009054:	f107 0318 	add.w	r3, r7, #24
 8009058:	210c      	movs	r1, #12
 800905a:	4618      	mov	r0, r3
 800905c:	f7fb fbe3 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8009060:	8b39      	ldrh	r1, [r7, #24]
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f7ff fa46 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 8009068:	e04d      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 3:
    	item.updateImage(Bitmap(BITMAP_MINICAMPAGNEALU_ID));
 800906a:	f107 031c 	add.w	r3, r7, #28
 800906e:	210b      	movs	r1, #11
 8009070:	4618      	mov	r0, r3
 8009072:	f7fb fbd8 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 8009076:	8bb9      	ldrh	r1, [r7, #28]
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f7ff fa3b 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 800907e:	e042      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 4:
    	item.updateImage(Bitmap(BITMAP_MINILOWCOP_ID));
 8009080:	f107 0320 	add.w	r3, r7, #32
 8009084:	210f      	movs	r1, #15
 8009086:	4618      	mov	r0, r3
 8009088:	f7fb fbcd 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 800908c:	8c39      	ldrh	r1, [r7, #32]
 800908e:	68b8      	ldr	r0, [r7, #8]
 8009090:	f7ff fa30 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 8009094:	e037      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 5:
    	item.updateImage(Bitmap(BITMAP_MINILOGISTIQUE_ID));
 8009096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800909a:	210e      	movs	r1, #14
 800909c:	4618      	mov	r0, r3
 800909e:	f7fb fbc2 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80090a2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80090a4:	68b8      	ldr	r0, [r7, #8]
 80090a6:	f7ff fa25 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 80090aa:	e02c      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 6:
    	item.updateImage(Bitmap(BITMAP_MINIBREAK_ID));
 80090ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090b0:	210a      	movs	r1, #10
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fb fbb7 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80090b8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80090ba:	68b8      	ldr	r0, [r7, #8]
 80090bc:	f7ff fa1a 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 80090c0:	e021      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 7:
    	item.updateImage(Bitmap(BITMAP_MININEPASRECHARGER_ID));
 80090c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090c6:	2111      	movs	r1, #17
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fb fbac 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80090ce:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80090d0:	68b8      	ldr	r0, [r7, #8]
 80090d2:	f7ff fa0f 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 80090d6:	e016      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 8:
    	item.updateImage(Bitmap(BITMAP_MINIMCMTQ_ID));
 80090d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090dc:	2110      	movs	r1, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fb fba1 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80090e4:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80090e6:	68b8      	ldr	r0, [r7, #8]
 80090e8:	f7ff fa04 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 80090ec:	e00b      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
    case 9:
    	item.updateImage(Bitmap(BITMAP_MINITQ_ID));
 80090ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090f2:	2112      	movs	r1, #18
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fb fb96 	bl	8004826 <_ZN8touchgfx6BitmapC1Et>
 80090fa:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80090fc:	68b8      	ldr	r0, [r7, #8]
 80090fe:	f7ff f9f9 	bl	80084f4 <_ZN16CustomContainer111updateImageEN8touchgfx6BitmapE>
        break;
 8009102:	e000      	b.n	8009106 <_ZN11Screen3View21scrollList1UpdateItemER16CustomContainer1s+0x126>
      default:
    break ;
 8009104:	bf00      	nop
    }
}
 8009106:	bf00      	nop
 8009108:	3738      	adds	r7, #56	; 0x38
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop

08009110 <_ZN11Screen3View30scrollList1ItemSelectedHandlerEs>:

void Screen3View::scrollList1ItemSelectedHandler(int16_t itemSelected)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	807b      	strh	r3, [r7, #2]

//	touchgfx::Unicode::UnicodeChar myBuffer[10];
//	Unicode::itoa(itemSelected,myBuffer, 10, 10);
//	HAL_UART_Transmit(&huart1, (uint8_t *)myBuffer, 2, HAL_MAX_DELAY);
	presenter -> save_Item(itemSelected);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009120:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff febc 	bl	8008ea4 <_ZN16Screen3Presenter9save_ItemEs>

	for (int i = 0; i < 9; i++)
 800912c:	2300      	movs	r3, #0
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b08      	cmp	r3, #8
 8009134:	dc12      	bgt.n	800915c <_ZN11Screen3View30scrollList1ItemSelectedHandlerEs+0x4c>
	{
		touchgfx::Drawable* e = scrollList1ListItems.getDrawable(i);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	b212      	sxth	r2, r2
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe ffe0 	bl	8008108 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs>
 8009148:	61b8      	str	r0, [r7, #24]
		CustomContainer1* dd = (CustomContainer1*)e;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	617b      	str	r3, [r7, #20]
		dd->cleanShape();
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	f7ff f9f8 	bl	8008544 <_ZN16CustomContainer110cleanShapeEv>
	for (int i = 0; i < 9; i++)
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	3301      	adds	r3, #1
 8009158:	61fb      	str	r3, [r7, #28]
 800915a:	e7e9      	b.n	8009130 <_ZN11Screen3View30scrollList1ItemSelectedHandlerEs+0x20>
	}

	touchgfx::Drawable* d = scrollList1ListItems.getDrawable(itemSelected);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009162:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe ffcd 	bl	8008108 <_ZN8touchgfx17DrawableListItemsI16CustomContainer1Li10EE11getDrawableEs>
 800916e:	6138      	str	r0, [r7, #16]
	CustomContainer1* cc = (CustomContainer1*)d;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	60fb      	str	r3, [r7, #12]
	cc->updateShape();
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7ff f9d2 	bl	800851e <_ZN16CustomContainer111updateShapeEv>
}
 800917a:	bf00      	nop
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <_ZN8touchgfx15GenericCallbackIsvvEC1Ev>:
class GenericCallback<T1, void, void>
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	4a04      	ldr	r2, [pc, #16]	; (80091a0 <_ZN8touchgfx15GenericCallbackIsvvEC1Ev+0x1c>)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	080277d0 	.word	0x080277d0

080091a4 <_ZN8touchgfx8CallbackI11Screen3ViewsvvEC1EPS1_MS1_FvsE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4639      	mov	r1, r7
 80091b0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff ffe4 	bl	8009184 <_ZN8touchgfx15GenericCallbackIsvvEC1Ev>
 80091bc:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <_ZN8touchgfx8CallbackI11Screen3ViewsvvEC1EPS1_MS1_FvsE+0x3c>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3308      	adds	r3, #8
 80091cc:	463a      	mov	r2, r7
 80091ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091d2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	080277b8 	.word	0x080277b8

080091e4 <_ZN8touchgfx15GenericCallbackIsvvED1Ev>:
    virtual ~GenericCallback()
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
    }
 80091ec:	4a04      	ldr	r2, [pc, #16]	; (8009200 <_ZN8touchgfx15GenericCallbackIsvvED1Ev+0x1c>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	080277d0 	.word	0x080277d0

08009204 <_ZN8touchgfx15GenericCallbackIsvvED0Ev>:
    virtual ~GenericCallback()
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
    }
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff ffe9 	bl	80091e4 <_ZN8touchgfx15GenericCallbackIsvvED1Ev>
 8009212:	2104      	movs	r1, #4
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f01b fc22 	bl	8024a5e <_ZdlPvj>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <_ZN8touchgfx8CallbackI11Screen3ViewsvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	4a05      	ldr	r2, [pc, #20]	; (8009244 <_ZN8touchgfx8CallbackI11Screen3ViewsvvED1Ev+0x20>)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff ffd5 	bl	80091e4 <_ZN8touchgfx15GenericCallbackIsvvED1Ev>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	080277b8 	.word	0x080277b8

08009248 <_ZN8touchgfx8CallbackI11Screen3ViewsvvED0Ev>:
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ffe7 	bl	8009224 <_ZN8touchgfx8CallbackI11Screen3ViewsvvED1Ev>
 8009256:	2110      	movs	r1, #16
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f01b fc00 	bl	8024a5e <_ZdlPvj>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN8touchgfx8CallbackI11Screen3ViewsvvE7executeEs>:
    virtual void execute(T1 t1)
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
        (pobject->*pmemfun_1)(t1);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	68d2      	ldr	r2, [r2, #12]
 800927c:	1052      	asrs	r2, r2, #1
 800927e:	1898      	adds	r0, r3, r2
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <_ZN8touchgfx8CallbackI11Screen3ViewsvvE7executeEs+0x2a>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	e00a      	b.n	80092a8 <_ZN8touchgfx8CallbackI11Screen3ViewsvvE7executeEs+0x40>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	68d2      	ldr	r2, [r2, #12]
 800929a:	1052      	asrs	r2, r2, #1
 800929c:	4413      	add	r3, r2
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	6892      	ldr	r2, [r2, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80092ac:	4611      	mov	r1, r2
 80092ae:	4798      	blx	r3
    }
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv>:
    virtual bool isValid() const
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d010      	beq.n	80092ea <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv+0x32>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d107      	bne.n	80092e0 <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv+0x28>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv+0x28>
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv+0x2a>
 80092e0:	2300      	movs	r3, #0
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d001      	beq.n	80092ea <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv+0x32>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <_ZNK8touchgfx8CallbackI11Screen3ViewsvvE7isValidEv+0x34>
 80092ea:	2300      	movs	r3, #0
    }
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80092fe:	4b28      	ldr	r3, [pc, #160]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009300:	4a28      	ldr	r2, [pc, #160]	; (80093a4 <BSP_QSPI_Init+0xac>)
 8009302:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8009304:	4826      	ldr	r0, [pc, #152]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009306:	f004 fe5b 	bl	800dfc0 <HAL_QSPI_DeInit>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e041      	b.n	8009398 <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8009314:	2100      	movs	r1, #0
 8009316:	4822      	ldr	r0, [pc, #136]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009318:	f000 f878 	bl	800940c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 800931c:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 800931e:	2201      	movs	r2, #1
 8009320:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8009322:	4b1f      	ldr	r3, [pc, #124]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009324:	2204      	movs	r2, #4
 8009326:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8009328:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 800932a:	2210      	movs	r2, #16
 800932c:	60da      	str	r2, [r3, #12]
 800932e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009332:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	fa93 f3a3 	rbit	r3, r3
 800933a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800933c:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800933e:	fab3 f383 	clz	r3, r3
 8009342:	b2db      	uxtb	r3, r3
 8009344:	3b01      	subs	r3, #1
 8009346:	461a      	mov	r2, r3
 8009348:	4b15      	ldr	r3, [pc, #84]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 800934a:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 800934c:	4b14      	ldr	r3, [pc, #80]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 800934e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8009352:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009354:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009356:	2200      	movs	r2, #0
 8009358:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 800935c:	2200      	movs	r2, #0
 800935e:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009362:	2200      	movs	r2, #0
 8009364:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8009366:	480e      	ldr	r0, [pc, #56]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009368:	f004 fda0 	bl	800deac <HAL_QSPI_Init>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e010      	b.n	8009398 <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8009376:	480a      	ldr	r0, [pc, #40]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009378:	f000 f908 	bl	800958c <QSPI_ResetMemory>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8009382:	2304      	movs	r3, #4
 8009384:	e008      	b.n	8009398 <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8009386:	4806      	ldr	r0, [pc, #24]	; (80093a0 <BSP_QSPI_Init+0xa8>)
 8009388:	f000 f942 	bl	8009610 <QSPI_DummyCyclesCfg>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8009392:	2304      	movs	r3, #4
 8009394:	e000      	b.n	8009398 <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	2000c27c 	.word	0x2000c27c
 80093a4:	a0001000 	.word	0xa0001000

080093a8 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b090      	sub	sp, #64	; 0x40
 80093ac:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80093ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80093b4:	23eb      	movs	r3, #235	; 0xeb
 80093b6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80093b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80093be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093c2:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80093c4:	2300      	movs	r3, #0
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80093c8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80093cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80093ce:	230a      	movs	r3, #10
 80093d0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80093d6:	2300      	movs	r3, #0
 80093d8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80093da:	2300      	movs	r3, #0
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80093de:	2300      	movs	r3, #0
 80093e0:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80093e6:	463a      	mov	r2, r7
 80093e8:	f107 0308 	add.w	r3, r7, #8
 80093ec:	4619      	mov	r1, r3
 80093ee:	4806      	ldr	r0, [pc, #24]	; (8009408 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 80093f0:	f005 f824 	bl	800e43c <HAL_QSPI_MemoryMapped>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3740      	adds	r7, #64	; 0x40
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	2000c27c 	.word	0x2000c27c

0800940c <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08e      	sub	sp, #56	; 0x38
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8009416:	4b59      	ldr	r3, [pc, #356]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	4a58      	ldr	r2, [pc, #352]	; (800957c <BSP_QSPI_MspInit+0x170>)
 800941c:	f043 0302 	orr.w	r3, r3, #2
 8009420:	6393      	str	r3, [r2, #56]	; 0x38
 8009422:	4b56      	ldr	r3, [pc, #344]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	623b      	str	r3, [r7, #32]
 800942c:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800942e:	4b53      	ldr	r3, [pc, #332]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	4a52      	ldr	r2, [pc, #328]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009434:	f043 0302 	orr.w	r3, r3, #2
 8009438:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 800943a:	4b50      	ldr	r3, [pc, #320]	; (800957c <BSP_QSPI_MspInit+0x170>)
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	4a4f      	ldr	r2, [pc, #316]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009440:	f023 0302 	bic.w	r3, r3, #2
 8009444:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8009446:	4b4d      	ldr	r3, [pc, #308]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	4a4c      	ldr	r2, [pc, #304]	; (800957c <BSP_QSPI_MspInit+0x170>)
 800944c:	f043 0302 	orr.w	r3, r3, #2
 8009450:	6313      	str	r3, [r2, #48]	; 0x30
 8009452:	4b4a      	ldr	r3, [pc, #296]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800945e:	4b47      	ldr	r3, [pc, #284]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	4a46      	ldr	r2, [pc, #280]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009464:	f043 0302 	orr.w	r3, r3, #2
 8009468:	6313      	str	r3, [r2, #48]	; 0x30
 800946a:	4b44      	ldr	r3, [pc, #272]	; (800957c <BSP_QSPI_MspInit+0x170>)
 800946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	61bb      	str	r3, [r7, #24]
 8009474:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8009476:	4b41      	ldr	r3, [pc, #260]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	4a40      	ldr	r2, [pc, #256]	; (800957c <BSP_QSPI_MspInit+0x170>)
 800947c:	f043 0308 	orr.w	r3, r3, #8
 8009480:	6313      	str	r3, [r2, #48]	; 0x30
 8009482:	4b3e      	ldr	r3, [pc, #248]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 800948e:	4b3b      	ldr	r3, [pc, #236]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	4a3a      	ldr	r2, [pc, #232]	; (800957c <BSP_QSPI_MspInit+0x170>)
 8009494:	f043 0308 	orr.w	r3, r3, #8
 8009498:	6313      	str	r3, [r2, #48]	; 0x30
 800949a:	4b38      	ldr	r3, [pc, #224]	; (800957c <BSP_QSPI_MspInit+0x170>)
 800949c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80094a6:	4b35      	ldr	r3, [pc, #212]	; (800957c <BSP_QSPI_MspInit+0x170>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	4a34      	ldr	r2, [pc, #208]	; (800957c <BSP_QSPI_MspInit+0x170>)
 80094ac:	f043 0310 	orr.w	r3, r3, #16
 80094b0:	6313      	str	r3, [r2, #48]	; 0x30
 80094b2:	4b32      	ldr	r3, [pc, #200]	; (800957c <BSP_QSPI_MspInit+0x170>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 80094be:	4b2f      	ldr	r3, [pc, #188]	; (800957c <BSP_QSPI_MspInit+0x170>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	4a2e      	ldr	r2, [pc, #184]	; (800957c <BSP_QSPI_MspInit+0x170>)
 80094c4:	f043 0308 	orr.w	r3, r3, #8
 80094c8:	6313      	str	r3, [r2, #48]	; 0x30
 80094ca:	4b2c      	ldr	r3, [pc, #176]	; (800957c <BSP_QSPI_MspInit+0x170>)
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	60bb      	str	r3, [r7, #8]
 80094d4:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80094da:	2302      	movs	r3, #2
 80094dc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80094de:	2301      	movs	r3, #1
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80094e2:	2303      	movs	r3, #3
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80094e6:	230a      	movs	r3, #10
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80094ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ee:	4619      	mov	r1, r3
 80094f0:	4823      	ldr	r0, [pc, #140]	; (8009580 <BSP_QSPI_MspInit+0x174>)
 80094f2:	f001 fecd 	bl	800b290 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80094f6:	2304      	movs	r3, #4
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80094fe:	2309      	movs	r3, #9
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009506:	4619      	mov	r1, r3
 8009508:	481d      	ldr	r0, [pc, #116]	; (8009580 <BSP_QSPI_MspInit+0x174>)
 800950a:	f001 fec1 	bl	800b290 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800950e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009514:	2309      	movs	r3, #9
 8009516:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8009518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800951c:	4619      	mov	r1, r3
 800951e:	4819      	ldr	r0, [pc, #100]	; (8009584 <BSP_QSPI_MspInit+0x178>)
 8009520:	f001 feb6 	bl	800b290 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8009524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800952a:	2309      	movs	r3, #9
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800952e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009532:	4619      	mov	r1, r3
 8009534:	4813      	ldr	r0, [pc, #76]	; (8009584 <BSP_QSPI_MspInit+0x178>)
 8009536:	f001 feab 	bl	800b290 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800953a:	2304      	movs	r3, #4
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800953e:	2309      	movs	r3, #9
 8009540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8009542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009546:	4619      	mov	r1, r3
 8009548:	480f      	ldr	r0, [pc, #60]	; (8009588 <BSP_QSPI_MspInit+0x17c>)
 800954a:	f001 fea1 	bl	800b290 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800954e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009552:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009554:	2309      	movs	r3, #9
 8009556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8009558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800955c:	4619      	mov	r1, r3
 800955e:	4809      	ldr	r0, [pc, #36]	; (8009584 <BSP_QSPI_MspInit+0x178>)
 8009560:	f001 fe96 	bl	800b290 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8009564:	2200      	movs	r2, #0
 8009566:	210f      	movs	r1, #15
 8009568:	205c      	movs	r0, #92	; 0x5c
 800956a:	f000 fc8d 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800956e:	205c      	movs	r0, #92	; 0x5c
 8009570:	f000 fca6 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
}
 8009574:	bf00      	nop
 8009576:	3738      	adds	r7, #56	; 0x38
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	40023800 	.word	0x40023800
 8009580:	40020400 	.word	0x40020400
 8009584:	40020c00 	.word	0x40020c00
 8009588:	40021000 	.word	0x40021000

0800958c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b090      	sub	sp, #64	; 0x40
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009598:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800959a:	2366      	movs	r3, #102	; 0x66
 800959c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800959e:	2300      	movs	r3, #0
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80095a2:	2300      	movs	r3, #0
 80095a4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80095b6:	2300      	movs	r3, #0
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f004 fd2b 	bl	800e020 <HAL_QSPI_Command>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e019      	b.n	8009608 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80095d4:	2399      	movs	r3, #153	; 0x99
 80095d6:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095d8:	f107 0308 	add.w	r3, r7, #8
 80095dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f004 fd1c 	bl	800e020 <HAL_QSPI_Command>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e00a      	b.n	8009608 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80095f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f8c7 	bl	800978a <QSPI_AutoPollingMemReady>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3740      	adds	r7, #64	; 0x40
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b094      	sub	sp, #80	; 0x50
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800961e:	2385      	movs	r3, #133	; 0x85
 8009620:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009622:	2300      	movs	r3, #0
 8009624:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009626:	2300      	movs	r3, #0
 8009628:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800962a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800962e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8009634:	2301      	movs	r3, #1
 8009636:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009638:	2300      	movs	r3, #0
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800963c:	2300      	movs	r3, #0
 800963e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009640:	2300      	movs	r3, #0
 8009642:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009644:	f107 0310 	add.w	r3, r7, #16
 8009648:	f241 3288 	movw	r2, #5000	; 0x1388
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f004 fce6 	bl	800e020 <HAL_QSPI_Command>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e048      	b.n	80096f0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800965e:	f107 030f 	add.w	r3, r7, #15
 8009662:	f241 3288 	movw	r2, #5000	; 0x1388
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f004 fdce 	bl	800e20a <HAL_QSPI_Receive>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e03b      	b.n	80096f0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f83d 	bl	80096f8 <QSPI_WriteEnable>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e033      	b.n	80096f0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8009688:	2381      	movs	r3, #129	; 0x81
 800968a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	b25b      	sxtb	r3, r3
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	b25a      	sxtb	r2, r3
 8009696:	23f0      	movs	r3, #240	; 0xf0
 8009698:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800969a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969c:	fa93 f3a3 	rbit	r3, r3
 80096a0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80096a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a4:	fab3 f383 	clz	r3, r3
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4619      	mov	r1, r3
 80096ac:	230a      	movs	r3, #10
 80096ae:	408b      	lsls	r3, r1
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b25b      	sxtb	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096ba:	f107 0310 	add.w	r3, r7, #16
 80096be:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f004 fcab 	bl	800e020 <HAL_QSPI_Command>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e00d      	b.n	80096f0 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096d4:	f107 030f 	add.w	r3, r7, #15
 80096d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f004 fcfe 	bl	800e0e0 <HAL_QSPI_Transmit>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3750      	adds	r7, #80	; 0x50
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b096      	sub	sp, #88	; 0x58
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8009706:	2306      	movs	r3, #6
 8009708:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800970a:	2300      	movs	r3, #0
 800970c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800970e:	2300      	movs	r3, #0
 8009710:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8009712:	2300      	movs	r3, #0
 8009714:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800971a:	2300      	movs	r3, #0
 800971c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800971e:	2300      	movs	r3, #0
 8009720:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009722:	2300      	movs	r3, #0
 8009724:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009726:	f107 0320 	add.w	r3, r7, #32
 800972a:	f241 3288 	movw	r2, #5000	; 0x1388
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f004 fc75 	bl	800e020 <HAL_QSPI_Command>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e020      	b.n	8009782 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8009740:	2302      	movs	r3, #2
 8009742:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8009744:	2302      	movs	r3, #2
 8009746:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009748:	2300      	movs	r3, #0
 800974a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800974c:	2301      	movs	r3, #1
 800974e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8009750:	2310      	movs	r3, #16
 8009752:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009758:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800975a:	2305      	movs	r3, #5
 800975c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800975e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009762:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009764:	f107 0208 	add.w	r2, r7, #8
 8009768:	f107 0120 	add.w	r1, r7, #32
 800976c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f004 fdea 	bl	800e34a <HAL_QSPI_AutoPolling>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e000      	b.n	8009782 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3758      	adds	r7, #88	; 0x58
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b096      	sub	sp, #88	; 0x58
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009798:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800979a:	2305      	movs	r3, #5
 800979c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800979e:	2300      	movs	r3, #0
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80097a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097aa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80097b4:	2300      	movs	r3, #0
 80097b6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80097b8:	2300      	movs	r3, #0
 80097ba:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80097c0:	2301      	movs	r3, #1
 80097c2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80097cc:	2310      	movs	r3, #16
 80097ce:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80097d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097d4:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80097d6:	f107 0208 	add.w	r2, r7, #8
 80097da:	f107 0120 	add.w	r1, r7, #32
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f004 fdb2 	bl	800e34a <HAL_QSPI_AutoPolling>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3758      	adds	r7, #88	; 0x58
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009800:	4b15      	ldr	r3, [pc, #84]	; (8009858 <SystemInit+0x5c>)
 8009802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009806:	4a14      	ldr	r2, [pc, #80]	; (8009858 <SystemInit+0x5c>)
 8009808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800980c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009810:	4b12      	ldr	r3, [pc, #72]	; (800985c <SystemInit+0x60>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a11      	ldr	r2, [pc, #68]	; (800985c <SystemInit+0x60>)
 8009816:	f043 0301 	orr.w	r3, r3, #1
 800981a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800981c:	4b0f      	ldr	r3, [pc, #60]	; (800985c <SystemInit+0x60>)
 800981e:	2200      	movs	r2, #0
 8009820:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009822:	4b0e      	ldr	r3, [pc, #56]	; (800985c <SystemInit+0x60>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	490d      	ldr	r1, [pc, #52]	; (800985c <SystemInit+0x60>)
 8009828:	4b0d      	ldr	r3, [pc, #52]	; (8009860 <SystemInit+0x64>)
 800982a:	4013      	ands	r3, r2
 800982c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800982e:	4b0b      	ldr	r3, [pc, #44]	; (800985c <SystemInit+0x60>)
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <SystemInit+0x68>)
 8009832:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <SystemInit+0x60>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a08      	ldr	r2, [pc, #32]	; (800985c <SystemInit+0x60>)
 800983a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800983e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <SystemInit+0x60>)
 8009842:	2200      	movs	r2, #0
 8009844:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009846:	4b04      	ldr	r3, [pc, #16]	; (8009858 <SystemInit+0x5c>)
 8009848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800984c:	609a      	str	r2, [r3, #8]
#endif
}
 800984e:	bf00      	nop
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	e000ed00 	.word	0xe000ed00
 800985c:	40023800 	.word	0x40023800
 8009860:	fef6ffff 	.word	0xfef6ffff
 8009864:	24003010 	.word	0x24003010

08009868 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8009872:	f000 f9b5 	bl	8009be0 <ft5336_I2C_InitializeIfRequired>
}
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	4603      	mov	r3, r0
 8009886:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80098a6:	2300      	movs	r3, #0
 80098a8:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80098aa:	f000 f999 	bl	8009be0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]
 80098b2:	e010      	b.n	80098d6 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80098b4:	88fb      	ldrh	r3, [r7, #6]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	21a8      	movs	r1, #168	; 0xa8
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f8 fd94 	bl	80023e8 <TS_IO_Read>
 80098c0:	4603      	mov	r3, r0
 80098c2:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80098c4:	7b7b      	ldrb	r3, [r7, #13]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b51      	cmp	r3, #81	; 0x51
 80098ca:	d101      	bne.n	80098d0 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80098cc:	2301      	movs	r3, #1
 80098ce:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	3301      	adds	r3, #1
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d802      	bhi.n	80098e2 <ft5336_ReadID+0x4e>
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0e8      	beq.n	80098b4 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80098e2:	7b7b      	ldrb	r3, [r7, #13]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	b29b      	uxth	r3, r3
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f97d 	bl	8009bfc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f933 	bl	8009b70 <ft5336_TS_DisableIT>
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2102      	movs	r1, #2
 8009928:	4618      	mov	r0, r3
 800992a:	f7f8 fd5d 	bl	80023e8 <TS_IO_Read>
 800992e:	4603      	mov	r3, r0
 8009930:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f003 030f 	and.w	r3, r3, #15
 800993a:	b2db      	uxtb	r3, r3
 800993c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b05      	cmp	r3, #5
 8009944:	d901      	bls.n	800994a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	b2da      	uxtb	r2, r3
 800994e:	4b05      	ldr	r3, [pc, #20]	; (8009964 <ft5336_TS_DetectTouch+0x50>)
 8009950:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8009952:	4b04      	ldr	r3, [pc, #16]	; (8009964 <ft5336_TS_DetectTouch+0x50>)
 8009954:	2200      	movs	r2, #0
 8009956:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	b2db      	uxtb	r3, r3
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	2000399c 	.word	0x2000399c

08009968 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800998a:	4b6d      	ldr	r3, [pc, #436]	; (8009b40 <ft5336_TS_GetXY+0x1d8>)
 800998c:	789a      	ldrb	r2, [r3, #2]
 800998e:	4b6c      	ldr	r3, [pc, #432]	; (8009b40 <ft5336_TS_GetXY+0x1d8>)
 8009990:	785b      	ldrb	r3, [r3, #1]
 8009992:	429a      	cmp	r2, r3
 8009994:	f080 80cf 	bcs.w	8009b36 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8009998:	4b69      	ldr	r3, [pc, #420]	; (8009b40 <ft5336_TS_GetXY+0x1d8>)
 800999a:	789b      	ldrb	r3, [r3, #2]
 800999c:	2b09      	cmp	r3, #9
 800999e:	d871      	bhi.n	8009a84 <ft5336_TS_GetXY+0x11c>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <ft5336_TS_GetXY+0x40>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099e3 	.word	0x080099e3
 80099b0:	080099f5 	.word	0x080099f5
 80099b4:	08009a07 	.word	0x08009a07
 80099b8:	08009a19 	.word	0x08009a19
 80099bc:	08009a2b 	.word	0x08009a2b
 80099c0:	08009a3d 	.word	0x08009a3d
 80099c4:	08009a4f 	.word	0x08009a4f
 80099c8:	08009a61 	.word	0x08009a61
 80099cc:	08009a73 	.word	0x08009a73
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80099d0:	2304      	movs	r3, #4
 80099d2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80099d4:	2303      	movs	r3, #3
 80099d6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80099d8:	2306      	movs	r3, #6
 80099da:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80099dc:	2305      	movs	r3, #5
 80099de:	753b      	strb	r3, [r7, #20]
      break;
 80099e0:	e051      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80099e2:	230a      	movs	r3, #10
 80099e4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80099e6:	2309      	movs	r3, #9
 80099e8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80099ea:	230c      	movs	r3, #12
 80099ec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80099ee:	230b      	movs	r3, #11
 80099f0:	753b      	strb	r3, [r7, #20]
      break;
 80099f2:	e048      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80099f4:	2310      	movs	r3, #16
 80099f6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80099f8:	230f      	movs	r3, #15
 80099fa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80099fc:	2312      	movs	r3, #18
 80099fe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8009a00:	2311      	movs	r3, #17
 8009a02:	753b      	strb	r3, [r7, #20]
      break;
 8009a04:	e03f      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8009a06:	2316      	movs	r3, #22
 8009a08:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8009a0a:	2315      	movs	r3, #21
 8009a0c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8009a0e:	2318      	movs	r3, #24
 8009a10:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8009a12:	2317      	movs	r3, #23
 8009a14:	753b      	strb	r3, [r7, #20]
      break;
 8009a16:	e036      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8009a18:	231c      	movs	r3, #28
 8009a1a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8009a1c:	231b      	movs	r3, #27
 8009a1e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8009a20:	231e      	movs	r3, #30
 8009a22:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8009a24:	231d      	movs	r3, #29
 8009a26:	753b      	strb	r3, [r7, #20]
      break;
 8009a28:	e02d      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8009a2a:	2322      	movs	r3, #34	; 0x22
 8009a2c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8009a2e:	2321      	movs	r3, #33	; 0x21
 8009a30:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8009a32:	2324      	movs	r3, #36	; 0x24
 8009a34:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8009a36:	2323      	movs	r3, #35	; 0x23
 8009a38:	753b      	strb	r3, [r7, #20]
      break;
 8009a3a:	e024      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8009a3c:	2328      	movs	r3, #40	; 0x28
 8009a3e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8009a40:	2327      	movs	r3, #39	; 0x27
 8009a42:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8009a44:	232a      	movs	r3, #42	; 0x2a
 8009a46:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8009a48:	2329      	movs	r3, #41	; 0x29
 8009a4a:	753b      	strb	r3, [r7, #20]
      break;
 8009a4c:	e01b      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8009a4e:	232e      	movs	r3, #46	; 0x2e
 8009a50:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8009a52:	232d      	movs	r3, #45	; 0x2d
 8009a54:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8009a56:	2330      	movs	r3, #48	; 0x30
 8009a58:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8009a5a:	232f      	movs	r3, #47	; 0x2f
 8009a5c:	753b      	strb	r3, [r7, #20]
      break;
 8009a5e:	e012      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8009a60:	2334      	movs	r3, #52	; 0x34
 8009a62:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8009a64:	2333      	movs	r3, #51	; 0x33
 8009a66:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8009a68:	2336      	movs	r3, #54	; 0x36
 8009a6a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8009a6c:	2335      	movs	r3, #53	; 0x35
 8009a6e:	753b      	strb	r3, [r7, #20]
      break;
 8009a70:	e009      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8009a72:	233a      	movs	r3, #58	; 0x3a
 8009a74:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8009a76:	2339      	movs	r3, #57	; 0x39
 8009a78:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8009a7a:	233c      	movs	r3, #60	; 0x3c
 8009a7c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8009a7e:	233b      	movs	r3, #59	; 0x3b
 8009a80:	753b      	strb	r3, [r7, #20]
      break;
 8009a82:	e000      	b.n	8009a86 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8009a84:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8009a86:	89fb      	ldrh	r3, [r7, #14]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	7dfa      	ldrb	r2, [r7, #23]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f8 fcaa 	bl	80023e8 <TS_IO_Read>
 8009a94:	4603      	mov	r3, r0
 8009a96:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8009a98:	7cfb      	ldrb	r3, [r7, #19]
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	4b29      	ldr	r3, [pc, #164]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009aa0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8009aa2:	89fb      	ldrh	r3, [r7, #14]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	7dba      	ldrb	r2, [r7, #22]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f8 fc9c 	bl	80023e8 <TS_IO_Read>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8009ab4:	7cfb      	ldrb	r3, [r7, #19]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	021b      	lsls	r3, r3, #8
 8009aba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009abe:	b21a      	sxth	r2, r3
 8009ac0:	4b20      	ldr	r3, [pc, #128]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b21b      	sxth	r3, r3
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b21b      	sxth	r3, r3
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	4b1d      	ldr	r3, [pc, #116]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009ace:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8009ad0:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009ad2:	881a      	ldrh	r2, [r3, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8009ad8:	89fb      	ldrh	r3, [r7, #14]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	7d7a      	ldrb	r2, [r7, #21]
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7f8 fc81 	bl	80023e8 <TS_IO_Read>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8009aea:	7cfb      	ldrb	r3, [r7, #19]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	4b14      	ldr	r3, [pc, #80]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009af2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8009af4:	89fb      	ldrh	r3, [r7, #14]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	7d3a      	ldrb	r2, [r7, #20]
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7f8 fc73 	bl	80023e8 <TS_IO_Read>
 8009b02:	4603      	mov	r3, r0
 8009b04:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8009b06:	7cfb      	ldrb	r3, [r7, #19]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b10:	b21a      	sxth	r2, r3
 8009b12:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	b21b      	sxth	r3, r3
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	b21b      	sxth	r3, r3
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009b20:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8009b22:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <ft5336_TS_GetXY+0x1dc>)
 8009b24:	881a      	ldrh	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <ft5336_TS_GetXY+0x1d8>)
 8009b2c:	789b      	ldrb	r3, [r3, #2]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	4b03      	ldr	r3, [pc, #12]	; (8009b40 <ft5336_TS_GetXY+0x1d8>)
 8009b34:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8009b36:	bf00      	nop
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	2000399c 	.word	0x2000399c
 8009b44:	200039a0 	.word	0x200039a0

08009b48 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8009b56:	2301      	movs	r3, #1
 8009b58:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	7bfa      	ldrb	r2, [r7, #15]
 8009b60:	21a4      	movs	r1, #164	; 0xa4
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f8 fc26 	bl	80023b4 <TS_IO_Write>
}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8009b82:	88fb      	ldrh	r3, [r7, #6]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	7bfa      	ldrb	r2, [r7, #15]
 8009b88:	21a4      	movs	r1, #164	; 0xa4
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f8 fc12 	bl	80023b4 <TS_IO_Write>
}
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8009bcc:	4b03      	ldr	r3, [pc, #12]	; (8009bdc <ft5336_Get_I2C_InitializedStatus+0x14>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	2000399c 	.word	0x2000399c

08009be0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8009be4:	f7ff fff0 	bl	8009bc8 <ft5336_Get_I2C_InitializedStatus>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8009bee:	4b02      	ldr	r3, [pc, #8]	; (8009bf8 <ft5336_I2C_InitializeIfRequired+0x18>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	2000399c 	.word	0x2000399c

08009bfc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8009c1c:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <HAL_Init+0x34>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a0a      	ldr	r2, [pc, #40]	; (8009c4c <HAL_Init+0x34>)
 8009c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c26:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c28:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <HAL_Init+0x34>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a07      	ldr	r2, [pc, #28]	; (8009c4c <HAL_Init+0x34>)
 8009c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c34:	2003      	movs	r0, #3
 8009c36:	f000 f91c 	bl	8009e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	f7f8 fa32 	bl	80020a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009c40:	f7f7 fdd2 	bl	80017e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	40023c00 	.word	0x40023c00

08009c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c54:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <HAL_IncTick+0x20>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <HAL_IncTick+0x24>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4413      	add	r3, r2
 8009c60:	4a04      	ldr	r2, [pc, #16]	; (8009c74 <HAL_IncTick+0x24>)
 8009c62:	6013      	str	r3, [r2, #0]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20000058 	.word	0x20000058
 8009c74:	2000c2c8 	.word	0x2000c2c8

08009c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8009c7c:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <HAL_GetTick+0x14>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	2000c2c8 	.word	0x2000c2c8

08009c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c98:	f7ff ffee 	bl	8009c78 <HAL_GetTick>
 8009c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d005      	beq.n	8009cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <HAL_Delay+0x40>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009cb6:	bf00      	nop
 8009cb8:	f7ff ffde 	bl	8009c78 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d8f7      	bhi.n	8009cb8 <HAL_Delay+0x28>
  {
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20000058 	.word	0x20000058

08009cd4 <__NVIC_SetPriorityGrouping>:
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <__NVIC_SetPriorityGrouping+0x40>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <__NVIC_SetPriorityGrouping+0x44>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d02:	4a04      	ldr	r2, [pc, #16]	; (8009d14 <__NVIC_SetPriorityGrouping+0x40>)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	60d3      	str	r3, [r2, #12]
}
 8009d08:	bf00      	nop
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	e000ed00 	.word	0xe000ed00
 8009d18:	05fa0000 	.word	0x05fa0000

08009d1c <__NVIC_GetPriorityGrouping>:
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <__NVIC_GetPriorityGrouping+0x18>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	f003 0307 	and.w	r3, r3, #7
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	e000ed00 	.word	0xe000ed00

08009d38 <__NVIC_EnableIRQ>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	db0b      	blt.n	8009d62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	f003 021f 	and.w	r2, r3, #31
 8009d50:	4907      	ldr	r1, [pc, #28]	; (8009d70 <__NVIC_EnableIRQ+0x38>)
 8009d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	2001      	movs	r0, #1
 8009d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	e000e100 	.word	0xe000e100

08009d74 <__NVIC_DisableIRQ>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	db10      	blt.n	8009da8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	f003 021f 	and.w	r2, r3, #31
 8009d8c:	4909      	ldr	r1, [pc, #36]	; (8009db4 <__NVIC_DisableIRQ+0x40>)
 8009d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	2001      	movs	r0, #1
 8009d96:	fa00 f202 	lsl.w	r2, r0, r2
 8009d9a:	3320      	adds	r3, #32
 8009d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009da0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009da4:	f3bf 8f6f 	isb	sy
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	e000e100 	.word	0xe000e100

08009db8 <__NVIC_SetPriority>:
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	6039      	str	r1, [r7, #0]
 8009dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	db0a      	blt.n	8009de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	490c      	ldr	r1, [pc, #48]	; (8009e04 <__NVIC_SetPriority+0x4c>)
 8009dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd6:	0112      	lsls	r2, r2, #4
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	440b      	add	r3, r1
 8009ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009de0:	e00a      	b.n	8009df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	4908      	ldr	r1, [pc, #32]	; (8009e08 <__NVIC_SetPriority+0x50>)
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	3b04      	subs	r3, #4
 8009df0:	0112      	lsls	r2, r2, #4
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	440b      	add	r3, r1
 8009df6:	761a      	strb	r2, [r3, #24]
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	e000e100 	.word	0xe000e100
 8009e08:	e000ed00 	.word	0xe000ed00

08009e0c <NVIC_EncodePriority>:
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	; 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f1c3 0307 	rsb	r3, r3, #7
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	bf28      	it	cs
 8009e2a:	2304      	movcs	r3, #4
 8009e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3304      	adds	r3, #4
 8009e32:	2b06      	cmp	r3, #6
 8009e34:	d902      	bls.n	8009e3c <NVIC_EncodePriority+0x30>
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	3b03      	subs	r3, #3
 8009e3a:	e000      	b.n	8009e3e <NVIC_EncodePriority+0x32>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	43da      	mvns	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	401a      	ands	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e54:	f04f 31ff 	mov.w	r1, #4294967295
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	43d9      	mvns	r1, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e64:	4313      	orrs	r3, r2
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3724      	adds	r7, #36	; 0x24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ff2a 	bl	8009cd4 <__NVIC_SetPriorityGrouping>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e9a:	f7ff ff3f 	bl	8009d1c <__NVIC_GetPriorityGrouping>
 8009e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	f7ff ffb1 	bl	8009e0c <NVIC_EncodePriority>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff ff80 	bl	8009db8 <__NVIC_SetPriority>
}
 8009eb8:	bf00      	nop
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff ff32 	bl	8009d38 <__NVIC_EnableIRQ>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff ff42 	bl	8009d74 <__NVIC_DisableIRQ>
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8009efc:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <HAL_MPU_Disable+0x24>)
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	4a05      	ldr	r2, [pc, #20]	; (8009f1c <HAL_MPU_Disable+0x24>)
 8009f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f0a:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009f0c:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <HAL_MPU_Disable+0x28>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	605a      	str	r2, [r3, #4]
}
 8009f12:	bf00      	nop
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	e000ed00 	.word	0xe000ed00
 8009f20:	e000ed90 	.word	0xe000ed90

08009f24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009f2c:	4a0a      	ldr	r2, [pc, #40]	; (8009f58 <HAL_MPU_Enable+0x34>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f043 0301 	orr.w	r3, r3, #1
 8009f34:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <HAL_MPU_Enable+0x38>)
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	4a08      	ldr	r2, [pc, #32]	; (8009f5c <HAL_MPU_Enable+0x38>)
 8009f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009f46:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8009f4a:	bf00      	nop
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	e000ed90 	.word	0xe000ed90
 8009f5c:	e000ed00 	.word	0xe000ed00

08009f60 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	785a      	ldrb	r2, [r3, #1]
 8009f6c:	4b1d      	ldr	r3, [pc, #116]	; (8009fe4 <HAL_MPU_ConfigRegion+0x84>)
 8009f6e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d029      	beq.n	8009fcc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8009f78:	4a1a      	ldr	r2, [pc, #104]	; (8009fe4 <HAL_MPU_ConfigRegion+0x84>)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7b1b      	ldrb	r3, [r3, #12]
 8009f84:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7adb      	ldrb	r3, [r3, #11]
 8009f8a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	7a9b      	ldrb	r3, [r3, #10]
 8009f92:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7b5b      	ldrb	r3, [r3, #13]
 8009f9a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	7b9b      	ldrb	r3, [r3, #14]
 8009fa2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009fa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	7bdb      	ldrb	r3, [r3, #15]
 8009faa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7a5b      	ldrb	r3, [r3, #9]
 8009fb2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009fb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	7a1b      	ldrb	r3, [r3, #8]
 8009fba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009fbc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	7812      	ldrb	r2, [r2, #0]
 8009fc2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009fc4:	4a07      	ldr	r2, [pc, #28]	; (8009fe4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009fc6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009fc8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8009fca:	e005      	b.n	8009fd8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <HAL_MPU_ConfigRegion+0x84>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8009fd2:	4b04      	ldr	r3, [pc, #16]	; (8009fe4 <HAL_MPU_ConfigRegion+0x84>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	611a      	str	r2, [r3, #16]
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	e000ed90 	.word	0xe000ed90

08009fe8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e054      	b.n	800a0a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	7f5b      	ldrb	r3, [r3, #29]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d105      	bne.n	800a010 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7f7 fc14 	bl	8001838 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	791b      	ldrb	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10c      	bne.n	800a038 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a22      	ldr	r2, [pc, #136]	; (800a0ac <HAL_CRC_Init+0xc4>)
 800a024:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 0218 	bic.w	r2, r2, #24
 800a034:	609a      	str	r2, [r3, #8]
 800a036:	e00c      	b.n	800a052 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6899      	ldr	r1, [r3, #8]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	461a      	mov	r2, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f834 	bl	800a0b0 <HAL_CRCEx_Polynomial_Set>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e028      	b.n	800a0a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	795b      	ldrb	r3, [r3, #5]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295
 800a062:	611a      	str	r2, [r3, #16]
 800a064:	e004      	b.n	800a070 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6912      	ldr	r2, [r2, #16]
 800a06e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	695a      	ldr	r2, [r3, #20]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	699a      	ldr	r2, [r3, #24]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	04c11db7 	.word	0x04c11db7

0800a0b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a0c0:	231f      	movs	r3, #31
 800a0c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a0c4:	bf00      	nop
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	1e5a      	subs	r2, r3, #1
 800a0ca:	613a      	str	r2, [r7, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <HAL_CRCEx_Polynomial_Set+0x34>
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f003 031f 	and.w	r3, r3, #31
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0f0      	beq.n	800a0c6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b18      	cmp	r3, #24
 800a0e8:	d846      	bhi.n	800a178 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a17f 	.word	0x0800a17f
 800a0f4:	0800a179 	.word	0x0800a179
 800a0f8:	0800a179 	.word	0x0800a179
 800a0fc:	0800a179 	.word	0x0800a179
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a179 	.word	0x0800a179
 800a108:	0800a179 	.word	0x0800a179
 800a10c:	0800a179 	.word	0x0800a179
 800a110:	0800a16d 	.word	0x0800a16d
 800a114:	0800a179 	.word	0x0800a179
 800a118:	0800a179 	.word	0x0800a179
 800a11c:	0800a179 	.word	0x0800a179
 800a120:	0800a179 	.word	0x0800a179
 800a124:	0800a179 	.word	0x0800a179
 800a128:	0800a179 	.word	0x0800a179
 800a12c:	0800a179 	.word	0x0800a179
 800a130:	0800a161 	.word	0x0800a161
 800a134:	0800a179 	.word	0x0800a179
 800a138:	0800a179 	.word	0x0800a179
 800a13c:	0800a179 	.word	0x0800a179
 800a140:	0800a179 	.word	0x0800a179
 800a144:	0800a179 	.word	0x0800a179
 800a148:	0800a179 	.word	0x0800a179
 800a14c:	0800a179 	.word	0x0800a179
 800a150:	0800a155 	.word	0x0800a155
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	2b06      	cmp	r3, #6
 800a158:	d913      	bls.n	800a182 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a15e:	e010      	b.n	800a182 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b07      	cmp	r3, #7
 800a164:	d90f      	bls.n	800a186 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a16a:	e00c      	b.n	800a186 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2b0f      	cmp	r3, #15
 800a170:	d90b      	bls.n	800a18a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a176:	e008      	b.n	800a18a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
      break;
 800a17c:	e006      	b.n	800a18c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a17e:	bf00      	nop
 800a180:	e004      	b.n	800a18c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a182:	bf00      	nop
 800a184:	e002      	b.n	800a18c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a186:	bf00      	nop
 800a188:	e000      	b.n	800a18c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a18a:	bf00      	nop
  }
  if (status == HAL_OK)
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10d      	bne.n	800a1ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f023 0118 	bic.w	r1, r3, #24
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	371c      	adds	r7, #28
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a1c8:	f7ff fd56 	bl	8009c78 <HAL_GetTick>
 800a1cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e099      	b.n	800a30c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 0201 	bic.w	r2, r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1f8:	e00f      	b.n	800a21a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1fa:	f7ff fd3d 	bl	8009c78 <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b05      	cmp	r3, #5
 800a206:	d908      	bls.n	800a21a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2203      	movs	r2, #3
 800a212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e078      	b.n	800a30c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e8      	bne.n	800a1fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4b38      	ldr	r3, [pc, #224]	; (800a314 <HAL_DMA_Init+0x158>)
 800a234:	4013      	ands	r3, r2
 800a236:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a246:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a25e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b04      	cmp	r3, #4
 800a272:	d107      	bne.n	800a284 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	4313      	orrs	r3, r2
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f023 0307 	bic.w	r3, r3, #7
 800a29a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d117      	bne.n	800a2de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00e      	beq.n	800a2de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fb73 	bl	800a9ac <DMA_CheckFifoParam>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d008      	beq.n	800a2de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2240      	movs	r2, #64	; 0x40
 800a2d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e016      	b.n	800a30c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fb2a 	bl	800a940 <DMA_CalcBaseAndBitshift>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f4:	223f      	movs	r2, #63	; 0x3f
 800a2f6:	409a      	lsls	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	f010803f 	.word	0xf010803f

0800a318 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e050      	b.n	800a3cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d101      	bne.n	800a33a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800a336:	2302      	movs	r3, #2
 800a338:	e048      	b.n	800a3cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0201 	bic.w	r2, r2, #1
 800a348:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2200      	movs	r2, #0
 800a350:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2200      	movs	r2, #0
 800a358:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2200      	movs	r2, #0
 800a360:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2200      	movs	r2, #0
 800a368:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2200      	movs	r2, #0
 800a370:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2221      	movs	r2, #33	; 0x21
 800a378:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fae0 	bl	800a940 <DMA_CalcBaseAndBitshift>
 800a380:	4603      	mov	r3, r0
 800a382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a388:	223f      	movs	r2, #63	; 0x3f
 800a38a:	409a      	lsls	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d101      	bne.n	800a3fa <HAL_DMA_Start_IT+0x26>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e048      	b.n	800a48c <HAL_DMA_Start_IT+0xb8>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d137      	bne.n	800a47e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2202      	movs	r2, #2
 800a412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 fa5e 	bl	800a8e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a42c:	223f      	movs	r2, #63	; 0x3f
 800a42e:	409a      	lsls	r2, r3
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f042 0216 	orr.w	r2, r2, #22
 800a442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	695a      	ldr	r2, [r3, #20]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a452:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0208 	orr.w	r2, r2, #8
 800a46a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	e005      	b.n	800a48a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a486:	2302      	movs	r3, #2
 800a488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a4a2:	f7ff fbe9 	bl	8009c78 <HAL_GetTick>
 800a4a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d008      	beq.n	800a4c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2280      	movs	r2, #128	; 0x80
 800a4b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e052      	b.n	800a56c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0216 	bic.w	r2, r2, #22
 800a4d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	695a      	ldr	r2, [r3, #20]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d103      	bne.n	800a4f6 <HAL_DMA_Abort+0x62>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0208 	bic.w	r2, r2, #8
 800a504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a516:	e013      	b.n	800a540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a518:	f7ff fbae 	bl	8009c78 <HAL_GetTick>
 800a51c:	4602      	mov	r2, r0
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	2b05      	cmp	r3, #5
 800a524:	d90c      	bls.n	800a540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2220      	movs	r2, #32
 800a52a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2203      	movs	r2, #3
 800a538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e015      	b.n	800a56c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e4      	bne.n	800a518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a552:	223f      	movs	r2, #63	; 0x3f
 800a554:	409a      	lsls	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d004      	beq.n	800a592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2280      	movs	r2, #128	; 0x80
 800a58c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e00c      	b.n	800a5ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2205      	movs	r2, #5
 800a596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0201 	bic.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a5c4:	4b92      	ldr	r3, [pc, #584]	; (800a810 <HAL_DMA_IRQHandler+0x258>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a92      	ldr	r2, [pc, #584]	; (800a814 <HAL_DMA_IRQHandler+0x25c>)
 800a5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ce:	0a9b      	lsrs	r3, r3, #10
 800a5d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5e2:	2208      	movs	r2, #8
 800a5e4:	409a      	lsls	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d01a      	beq.n	800a624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d013      	beq.n	800a624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0204 	bic.w	r2, r2, #4
 800a60a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a610:	2208      	movs	r2, #8
 800a612:	409a      	lsls	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61c:	f043 0201 	orr.w	r2, r3, #1
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a628:	2201      	movs	r2, #1
 800a62a:	409a      	lsls	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d012      	beq.n	800a65a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a646:	2201      	movs	r2, #1
 800a648:	409a      	lsls	r2, r3
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a652:	f043 0202 	orr.w	r2, r3, #2
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65e:	2204      	movs	r2, #4
 800a660:	409a      	lsls	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4013      	ands	r3, r2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d012      	beq.n	800a690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00b      	beq.n	800a690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67c:	2204      	movs	r2, #4
 800a67e:	409a      	lsls	r2, r3
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	f043 0204 	orr.w	r2, r3, #4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a694:	2210      	movs	r2, #16
 800a696:	409a      	lsls	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d043      	beq.n	800a728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0308 	and.w	r3, r3, #8
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d03c      	beq.n	800a728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b2:	2210      	movs	r2, #16
 800a6b4:	409a      	lsls	r2, r3
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d018      	beq.n	800a6fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d108      	bne.n	800a6e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d024      	beq.n	800a728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
 800a6e6:	e01f      	b.n	800a728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01b      	beq.n	800a728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	4798      	blx	r3
 800a6f8:	e016      	b.n	800a728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	d107      	bne.n	800a718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f022 0208 	bic.w	r2, r2, #8
 800a716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72c:	2220      	movs	r2, #32
 800a72e:	409a      	lsls	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4013      	ands	r3, r2
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 808e 	beq.w	800a856 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 8086 	beq.w	800a856 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a74e:	2220      	movs	r2, #32
 800a750:	409a      	lsls	r2, r3
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d136      	bne.n	800a7d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0216 	bic.w	r2, r2, #22
 800a770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	695a      	ldr	r2, [r3, #20]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	d103      	bne.n	800a792 <HAL_DMA_IRQHandler+0x1da>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0208 	bic.w	r2, r2, #8
 800a7a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a6:	223f      	movs	r2, #63	; 0x3f
 800a7a8:	409a      	lsls	r2, r3
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d07d      	beq.n	800a8c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4798      	blx	r3
        }
        return;
 800a7ce:	e078      	b.n	800a8c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d01c      	beq.n	800a818 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d108      	bne.n	800a7fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d030      	beq.n	800a856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
 800a7fc:	e02b      	b.n	800a856 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d027      	beq.n	800a856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
 800a80e:	e022      	b.n	800a856 <HAL_DMA_IRQHandler+0x29e>
 800a810:	2000002c 	.word	0x2000002c
 800a814:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10f      	bne.n	800a846 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f022 0210 	bic.w	r2, r2, #16
 800a834:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d032      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d022      	beq.n	800a8b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2205      	movs	r2, #5
 800a86e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	3301      	adds	r3, #1
 800a886:	60bb      	str	r3, [r7, #8]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d307      	bcc.n	800a89e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1f2      	bne.n	800a882 <HAL_DMA_IRQHandler+0x2ca>
 800a89c:	e000      	b.n	800a8a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a89e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	4798      	blx	r3
 800a8c0:	e000      	b.n	800a8c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a8c2:	bf00      	nop
    }
  }
}
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop

0800a8cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	2b40      	cmp	r3, #64	; 0x40
 800a910:	d108      	bne.n	800a924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a922:	e007      	b.n	800a934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	60da      	str	r2, [r3, #12]
}
 800a934:	bf00      	nop
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	3b10      	subs	r3, #16
 800a950:	4a13      	ldr	r2, [pc, #76]	; (800a9a0 <DMA_CalcBaseAndBitshift+0x60>)
 800a952:	fba2 2303 	umull	r2, r3, r2, r3
 800a956:	091b      	lsrs	r3, r3, #4
 800a958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a95a:	4a12      	ldr	r2, [pc, #72]	; (800a9a4 <DMA_CalcBaseAndBitshift+0x64>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d908      	bls.n	800a980 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <DMA_CalcBaseAndBitshift+0x68>)
 800a976:	4013      	ands	r3, r2
 800a978:	1d1a      	adds	r2, r3, #4
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	659a      	str	r2, [r3, #88]	; 0x58
 800a97e:	e006      	b.n	800a98e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	4b08      	ldr	r3, [pc, #32]	; (800a9a8 <DMA_CalcBaseAndBitshift+0x68>)
 800a988:	4013      	ands	r3, r2
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	aaaaaaab 	.word	0xaaaaaaab
 800a9a4:	080277f8 	.word	0x080277f8
 800a9a8:	fffffc00 	.word	0xfffffc00

0800a9ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d11f      	bne.n	800aa06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d855      	bhi.n	800aa78 <DMA_CheckFifoParam+0xcc>
 800a9cc:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <DMA_CheckFifoParam+0x28>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800a9e5 	.word	0x0800a9e5
 800a9d8:	0800a9f7 	.word	0x0800a9f7
 800a9dc:	0800a9e5 	.word	0x0800a9e5
 800a9e0:	0800aa79 	.word	0x0800aa79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d045      	beq.n	800aa7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9f4:	e042      	b.n	800aa7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9fe:	d13f      	bne.n	800aa80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa04:	e03c      	b.n	800aa80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0e:	d121      	bne.n	800aa54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d836      	bhi.n	800aa84 <DMA_CheckFifoParam+0xd8>
 800aa16:	a201      	add	r2, pc, #4	; (adr r2, 800aa1c <DMA_CheckFifoParam+0x70>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aa2d 	.word	0x0800aa2d
 800aa20:	0800aa33 	.word	0x0800aa33
 800aa24:	0800aa2d 	.word	0x0800aa2d
 800aa28:	0800aa45 	.word	0x0800aa45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa30:	e02f      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d024      	beq.n	800aa88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa42:	e021      	b.n	800aa88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa4c:	d11e      	bne.n	800aa8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa52:	e01b      	b.n	800aa8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d902      	bls.n	800aa60 <DMA_CheckFifoParam+0xb4>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d003      	beq.n	800aa66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa5e:	e018      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
      break;
 800aa64:	e015      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00e      	beq.n	800aa90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]
      break;
 800aa76:	e00b      	b.n	800aa90 <DMA_CheckFifoParam+0xe4>
      break;
 800aa78:	bf00      	nop
 800aa7a:	e00a      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      break;
 800aa7c:	bf00      	nop
 800aa7e:	e008      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      break;
 800aa80:	bf00      	nop
 800aa82:	e006      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      break;
 800aa84:	bf00      	nop
 800aa86:	e004      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      break;
 800aa88:	bf00      	nop
 800aa8a:	e002      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      break;   
 800aa8c:	bf00      	nop
 800aa8e:	e000      	b.n	800aa92 <DMA_CheckFifoParam+0xe6>
      break;
 800aa90:	bf00      	nop
    }
  } 
  
  return status; 
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e039      	b.n	800ab26 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7f6 fed6 	bl	8001878 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	430a      	orrs	r2, r1
 800aae8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf0:	f023 0107 	bic.w	r1, r3, #7
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <HAL_DMA2D_Init+0x90>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	68d1      	ldr	r1, [r2, #12]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	430b      	orrs	r3, r1
 800ab14:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	ffffc000 	.word	0xffffc000

0800ab34 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e05f      	b.n	800ac06 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800ab46:	4b32      	ldr	r3, [pc, #200]	; (800ac10 <HAL_DMA2D_DeInit+0xdc>)
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d02e      	beq.n	800abb0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d107      	bne.n	800ab70 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f8c1 	bl	800ace8 <HAL_DMA2D_Abort>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d021      	beq.n	800abb0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e04a      	b.n	800ac06 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	f003 0320 	and.w	r3, r3, #32
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d108      	bne.n	800ab90 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800ab7e:	2100      	movs	r1, #0
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f8f7 	bl	800ad74 <HAL_DMA2D_CLUTLoading_Abort>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d011      	beq.n	800abb0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e03a      	b.n	800ac06 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	f003 0320 	and.w	r3, r3, #32
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d108      	bne.n	800abb0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800ab9e:	2101      	movs	r1, #1
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8e7 	bl	800ad74 <HAL_DMA2D_CLUTLoading_Abort>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e02a      	b.n	800ac06 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2200      	movs	r2, #0
 800abb6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	223f      	movs	r2, #63	; 0x3f
 800abbe:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2200      	movs	r2, #0
 800abc6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2200      	movs	r2, #0
 800abce:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2200      	movs	r2, #0
 800abd6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2200      	movs	r2, #0
 800abde:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2200      	movs	r2, #0
 800abe6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7f6 fe6b 	bl	80018c4 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40023800 	.word	0x40023800

0800ac14 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d101      	bne.n	800ac30 <HAL_DMA2D_Start_IT+0x1c>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e020      	b.n	800ac72 <HAL_DMA2D_Start_IT+0x5e>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 fa84 	bl	800b158 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800ac5e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b086      	sub	sp, #24
 800ac7e:	af02      	add	r7, sp, #8
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	607a      	str	r2, [r7, #4]
 800ac86:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <HAL_DMA2D_BlendingStart_IT+0x1c>
 800ac92:	2302      	movs	r3, #2
 800ac94:	e024      	b.n	800ace0 <HAL_DMA2D_BlendingStart_IT+0x66>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2202      	movs	r2, #2
 800aca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 fa4d 	bl	800b158 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800accc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 0201 	orr.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f023 0205 	bic.w	r2, r3, #5
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0204 	orr.w	r2, r2, #4
 800ad02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad04:	f7fe ffb8 	bl	8009c78 <HAL_GetTick>
 800ad08:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ad0a:	e017      	b.n	800ad3c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800ad0c:	f7fe ffb4 	bl	8009c78 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad1a:	d90f      	bls.n	800ad3c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad20:	f043 0220 	orr.w	r2, r3, #32
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2203      	movs	r2, #3
 800ad2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e017      	b.n	800ad6c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e0      	bne.n	800ad0c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800ad58:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3324      	adds	r3, #36	; 0x24
 800ad84:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f042 0204 	orr.w	r2, r2, #4
 800ad94:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d103      	bne.n	800ada4 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	331c      	adds	r3, #28
 800ada2:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800ada4:	f7fe ff68 	bl	8009c78 <HAL_GetTick>
 800ada8:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800adaa:	e017      	b.n	800addc <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800adac:	f7fe ff64 	bl	8009c78 <HAL_GetTick>
 800adb0:	4602      	mov	r2, r0
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adba:	d90f      	bls.n	800addc <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc0:	f043 0220 	orr.w	r2, r3, #32
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2203      	movs	r2, #3
 800adcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e016      	b.n	800ae0a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0320 	and.w	r3, r3, #32
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e1      	bne.n	800adac <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800adf6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d026      	beq.n	800ae82 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d021      	beq.n	800ae82 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae4c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	f043 0201 	orr.w	r2, r3, #1
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2204      	movs	r2, #4
 800ae66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f003 0320 	and.w	r3, r3, #32
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d026      	beq.n	800aeda <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d021      	beq.n	800aeda <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aea4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb2:	f043 0202 	orr.w	r2, r3, #2
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2204      	movs	r2, #4
 800aebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f003 0308 	and.w	r3, r3, #8
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d026      	beq.n	800af32 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d021      	beq.n	800af32 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aefc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2208      	movs	r2, #8
 800af04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0a:	f043 0204 	orr.w	r2, r3, #4
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2204      	movs	r2, #4
 800af16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d013      	beq.n	800af64 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00e      	beq.n	800af64 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af54:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2204      	movs	r2, #4
 800af5c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f853 	bl	800b00a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d024      	beq.n	800afb8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01f      	beq.n	800afb8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af86:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2202      	movs	r2, #2
 800af8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01f      	beq.n	800b002 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01a      	beq.n	800b002 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800afda:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2210      	movs	r2, #16
 800afe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f80e 	bl	800b01e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800b002:	bf00      	nop
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800b012:	bf00      	nop
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800b01e:	b480      	push	{r7}
 800b020:	b083      	sub	sp, #12
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
	...

0800b034 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d101      	bne.n	800b054 <HAL_DMA2D_ConfigLayer+0x20>
 800b050:	2302      	movs	r3, #2
 800b052:	e079      	b.n	800b148 <HAL_DMA2D_ConfigLayer+0x114>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	011b      	lsls	r3, r3, #4
 800b068:	3318      	adds	r3, #24
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	041b      	lsls	r3, r3, #16
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800b07e:	4b35      	ldr	r3, [pc, #212]	; (800b154 <HAL_DMA2D_ConfigLayer+0x120>)
 800b080:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b0a      	cmp	r3, #10
 800b088:	d003      	beq.n	800b092 <HAL_DMA2D_ConfigLayer+0x5e>
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b09      	cmp	r3, #9
 800b090:	d107      	bne.n	800b0a2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e005      	b.n	800b0ae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	061b      	lsls	r3, r3, #24
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d120      	bne.n	800b0f6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	ea02 0103 	and.w	r1, r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	6812      	ldr	r2, [r2, #0]
 800b0d4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b0a      	cmp	r3, #10
 800b0dc:	d003      	beq.n	800b0e6 <HAL_DMA2D_ConfigLayer+0xb2>
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	2b09      	cmp	r3, #9
 800b0e4:	d127      	bne.n	800b136 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b0f2:	629a      	str	r2, [r3, #40]	; 0x28
 800b0f4:	e01f      	b.n	800b136 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69da      	ldr	r2, [r3, #28]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	43db      	mvns	r3, r3
 800b100:	ea02 0103 	and.w	r1, r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	6812      	ldr	r2, [r2, #0]
 800b116:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b0a      	cmp	r3, #10
 800b11e:	d003      	beq.n	800b128 <HAL_DMA2D_ConfigLayer+0xf4>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b09      	cmp	r3, #9
 800b126:	d106      	bne.n	800b136 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	68da      	ldr	r2, [r3, #12]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b134:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	371c      	adds	r7, #28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	ff03000f 	.word	0xff03000f

0800b158 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800b158:	b480      	push	{r7}
 800b15a:	b08b      	sub	sp, #44	; 0x2c
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	041a      	lsls	r2, r3, #16
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	431a      	orrs	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b190:	d174      	bne.n	800b27c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b198:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1a0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1a8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d108      	bne.n	800b1ca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b1c8:	e053      	b.n	800b272 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d106      	bne.n	800b1e0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1de:	e048      	b.n	800b272 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d111      	bne.n	800b20c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	0cdb      	lsrs	r3, r3, #19
 800b1ec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	0a9b      	lsrs	r3, r3, #10
 800b1f2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	08db      	lsrs	r3, r3, #3
 800b1f8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	02db      	lsls	r3, r3, #11
 800b202:	4313      	orrs	r3, r2
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	4313      	orrs	r3, r2
 800b208:	627b      	str	r3, [r7, #36]	; 0x24
 800b20a:	e032      	b.n	800b272 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b03      	cmp	r3, #3
 800b212:	d117      	bne.n	800b244 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	0fdb      	lsrs	r3, r3, #31
 800b218:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	0cdb      	lsrs	r3, r3, #19
 800b21e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	0adb      	lsrs	r3, r3, #11
 800b224:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	08db      	lsrs	r3, r3, #3
 800b22a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	029b      	lsls	r3, r3, #10
 800b234:	431a      	orrs	r2, r3
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	03db      	lsls	r3, r3, #15
 800b23a:	4313      	orrs	r3, r2
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	4313      	orrs	r3, r2
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
 800b242:	e016      	b.n	800b272 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	0f1b      	lsrs	r3, r3, #28
 800b248:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	0d1b      	lsrs	r3, r3, #20
 800b24e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	0b1b      	lsrs	r3, r3, #12
 800b254:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	091b      	lsrs	r3, r3, #4
 800b25a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	011a      	lsls	r2, r3, #4
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	021b      	lsls	r3, r3, #8
 800b264:	431a      	orrs	r2, r3
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	031b      	lsls	r3, r3, #12
 800b26a:	4313      	orrs	r3, r2
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	4313      	orrs	r3, r2
 800b270:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800b27a:	e003      	b.n	800b284 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	60da      	str	r2, [r3, #12]
}
 800b284:	bf00      	nop
 800b286:	372c      	adds	r7, #44	; 0x2c
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b290:	b480      	push	{r7}
 800b292:	b089      	sub	sp, #36	; 0x24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b29a:	2300      	movs	r3, #0
 800b29c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e175      	b.n	800b59c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	f040 8164 	bne.w	800b596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d003      	beq.n	800b2de <HAL_GPIO_Init+0x4e>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b12      	cmp	r3, #18
 800b2dc:	d123      	bne.n	800b326 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	08da      	lsrs	r2, r3, #3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3208      	adds	r2, #8
 800b2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f003 0307 	and.w	r3, r3, #7
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	220f      	movs	r2, #15
 800b2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	4013      	ands	r3, r2
 800b300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	691a      	ldr	r2, [r3, #16]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	f003 0307 	and.w	r3, r3, #7
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	fa02 f303 	lsl.w	r3, r2, r3
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	4313      	orrs	r3, r2
 800b316:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	08da      	lsrs	r2, r3, #3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3208      	adds	r2, #8
 800b320:	69b9      	ldr	r1, [r7, #24]
 800b322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	2203      	movs	r2, #3
 800b332:	fa02 f303 	lsl.w	r3, r2, r3
 800b336:	43db      	mvns	r3, r3
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	4013      	ands	r3, r2
 800b33c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f003 0203 	and.w	r2, r3, #3
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	fa02 f303 	lsl.w	r3, r2, r3
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	4313      	orrs	r3, r2
 800b352:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	69ba      	ldr	r2, [r7, #24]
 800b358:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d00b      	beq.n	800b37a <HAL_GPIO_Init+0xea>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d007      	beq.n	800b37a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b36e:	2b11      	cmp	r3, #17
 800b370:	d003      	beq.n	800b37a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	2b12      	cmp	r3, #18
 800b378:	d130      	bne.n	800b3dc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	2203      	movs	r2, #3
 800b386:	fa02 f303 	lsl.w	r3, r2, r3
 800b38a:	43db      	mvns	r3, r3
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	4013      	ands	r3, r2
 800b390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	fa02 f303 	lsl.w	r3, r2, r3
 800b39e:	69ba      	ldr	r2, [r7, #24]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b8:	43db      	mvns	r3, r3
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	4013      	ands	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	091b      	lsrs	r3, r3, #4
 800b3c6:	f003 0201 	and.w	r2, r3, #1
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	43db      	mvns	r3, r3
 800b3ee:	69ba      	ldr	r2, [r7, #24]
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	689a      	ldr	r2, [r3, #8]
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b400:	69ba      	ldr	r2, [r7, #24]
 800b402:	4313      	orrs	r3, r2
 800b404:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80be 	beq.w	800b596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b41a:	4b65      	ldr	r3, [pc, #404]	; (800b5b0 <HAL_GPIO_Init+0x320>)
 800b41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41e:	4a64      	ldr	r2, [pc, #400]	; (800b5b0 <HAL_GPIO_Init+0x320>)
 800b420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b424:	6453      	str	r3, [r2, #68]	; 0x44
 800b426:	4b62      	ldr	r3, [pc, #392]	; (800b5b0 <HAL_GPIO_Init+0x320>)
 800b428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b432:	4a60      	ldr	r2, [pc, #384]	; (800b5b4 <HAL_GPIO_Init+0x324>)
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	089b      	lsrs	r3, r3, #2
 800b438:	3302      	adds	r3, #2
 800b43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	220f      	movs	r2, #15
 800b44a:	fa02 f303 	lsl.w	r3, r2, r3
 800b44e:	43db      	mvns	r3, r3
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	4013      	ands	r3, r2
 800b454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a57      	ldr	r2, [pc, #348]	; (800b5b8 <HAL_GPIO_Init+0x328>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d037      	beq.n	800b4ce <HAL_GPIO_Init+0x23e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a56      	ldr	r2, [pc, #344]	; (800b5bc <HAL_GPIO_Init+0x32c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d031      	beq.n	800b4ca <HAL_GPIO_Init+0x23a>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a55      	ldr	r2, [pc, #340]	; (800b5c0 <HAL_GPIO_Init+0x330>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d02b      	beq.n	800b4c6 <HAL_GPIO_Init+0x236>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a54      	ldr	r2, [pc, #336]	; (800b5c4 <HAL_GPIO_Init+0x334>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d025      	beq.n	800b4c2 <HAL_GPIO_Init+0x232>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a53      	ldr	r2, [pc, #332]	; (800b5c8 <HAL_GPIO_Init+0x338>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d01f      	beq.n	800b4be <HAL_GPIO_Init+0x22e>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a52      	ldr	r2, [pc, #328]	; (800b5cc <HAL_GPIO_Init+0x33c>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d019      	beq.n	800b4ba <HAL_GPIO_Init+0x22a>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a51      	ldr	r2, [pc, #324]	; (800b5d0 <HAL_GPIO_Init+0x340>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d013      	beq.n	800b4b6 <HAL_GPIO_Init+0x226>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a50      	ldr	r2, [pc, #320]	; (800b5d4 <HAL_GPIO_Init+0x344>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d00d      	beq.n	800b4b2 <HAL_GPIO_Init+0x222>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a4f      	ldr	r2, [pc, #316]	; (800b5d8 <HAL_GPIO_Init+0x348>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d007      	beq.n	800b4ae <HAL_GPIO_Init+0x21e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a4e      	ldr	r2, [pc, #312]	; (800b5dc <HAL_GPIO_Init+0x34c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d101      	bne.n	800b4aa <HAL_GPIO_Init+0x21a>
 800b4a6:	2309      	movs	r3, #9
 800b4a8:	e012      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4aa:	230a      	movs	r3, #10
 800b4ac:	e010      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	e00e      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4b2:	2307      	movs	r3, #7
 800b4b4:	e00c      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4b6:	2306      	movs	r3, #6
 800b4b8:	e00a      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ba:	2305      	movs	r3, #5
 800b4bc:	e008      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4be:	2304      	movs	r3, #4
 800b4c0:	e006      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e004      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e002      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	f002 0203 	and.w	r2, r2, #3
 800b4d6:	0092      	lsls	r2, r2, #2
 800b4d8:	4093      	lsls	r3, r2
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b4e0:	4934      	ldr	r1, [pc, #208]	; (800b5b4 <HAL_GPIO_Init+0x324>)
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	089b      	lsrs	r3, r3, #2
 800b4e6:	3302      	adds	r3, #2
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b4ee:	4b3c      	ldr	r3, [pc, #240]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	43db      	mvns	r3, r3
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	4313      	orrs	r3, r2
 800b510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b512:	4a33      	ldr	r2, [pc, #204]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b518:	4b31      	ldr	r3, [pc, #196]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	43db      	mvns	r3, r3
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	4013      	ands	r3, r2
 800b526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	4313      	orrs	r3, r2
 800b53a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b53c:	4a28      	ldr	r2, [pc, #160]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b542:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	43db      	mvns	r3, r3
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	4013      	ands	r3, r2
 800b550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b566:	4a1e      	ldr	r2, [pc, #120]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b56c:	4b1c      	ldr	r3, [pc, #112]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	43db      	mvns	r3, r3
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4013      	ands	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b590:	4a13      	ldr	r2, [pc, #76]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	3301      	adds	r3, #1
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	2b0f      	cmp	r3, #15
 800b5a0:	f67f ae86 	bls.w	800b2b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b5a4:	bf00      	nop
 800b5a6:	3724      	adds	r7, #36	; 0x24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	40023800 	.word	0x40023800
 800b5b4:	40013800 	.word	0x40013800
 800b5b8:	40020000 	.word	0x40020000
 800b5bc:	40020400 	.word	0x40020400
 800b5c0:	40020800 	.word	0x40020800
 800b5c4:	40020c00 	.word	0x40020c00
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	40021400 	.word	0x40021400
 800b5d0:	40021800 	.word	0x40021800
 800b5d4:	40021c00 	.word	0x40021c00
 800b5d8:	40022000 	.word	0x40022000
 800b5dc:	40022400 	.word	0x40022400
 800b5e0:	40013c00 	.word	0x40013c00

0800b5e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	e0d9      	b.n	800b7b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b600:	2201      	movs	r2, #1
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	fa02 f303 	lsl.w	r3, r2, r3
 800b608:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	4013      	ands	r3, r2
 800b610:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	429a      	cmp	r2, r3
 800b618:	f040 80c9 	bne.w	800b7ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800b61c:	4a6a      	ldr	r2, [pc, #424]	; (800b7c8 <HAL_GPIO_DeInit+0x1e4>)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	089b      	lsrs	r3, r3, #2
 800b622:	3302      	adds	r3, #2
 800b624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b628:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f003 0303 	and.w	r3, r3, #3
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	220f      	movs	r2, #15
 800b634:	fa02 f303 	lsl.w	r3, r2, r3
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a62      	ldr	r2, [pc, #392]	; (800b7cc <HAL_GPIO_DeInit+0x1e8>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d037      	beq.n	800b6b6 <HAL_GPIO_DeInit+0xd2>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a61      	ldr	r2, [pc, #388]	; (800b7d0 <HAL_GPIO_DeInit+0x1ec>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d031      	beq.n	800b6b2 <HAL_GPIO_DeInit+0xce>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a60      	ldr	r2, [pc, #384]	; (800b7d4 <HAL_GPIO_DeInit+0x1f0>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d02b      	beq.n	800b6ae <HAL_GPIO_DeInit+0xca>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a5f      	ldr	r2, [pc, #380]	; (800b7d8 <HAL_GPIO_DeInit+0x1f4>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d025      	beq.n	800b6aa <HAL_GPIO_DeInit+0xc6>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a5e      	ldr	r2, [pc, #376]	; (800b7dc <HAL_GPIO_DeInit+0x1f8>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d01f      	beq.n	800b6a6 <HAL_GPIO_DeInit+0xc2>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a5d      	ldr	r2, [pc, #372]	; (800b7e0 <HAL_GPIO_DeInit+0x1fc>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d019      	beq.n	800b6a2 <HAL_GPIO_DeInit+0xbe>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a5c      	ldr	r2, [pc, #368]	; (800b7e4 <HAL_GPIO_DeInit+0x200>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d013      	beq.n	800b69e <HAL_GPIO_DeInit+0xba>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a5b      	ldr	r2, [pc, #364]	; (800b7e8 <HAL_GPIO_DeInit+0x204>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d00d      	beq.n	800b69a <HAL_GPIO_DeInit+0xb6>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a5a      	ldr	r2, [pc, #360]	; (800b7ec <HAL_GPIO_DeInit+0x208>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d007      	beq.n	800b696 <HAL_GPIO_DeInit+0xb2>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a59      	ldr	r2, [pc, #356]	; (800b7f0 <HAL_GPIO_DeInit+0x20c>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d101      	bne.n	800b692 <HAL_GPIO_DeInit+0xae>
 800b68e:	2309      	movs	r3, #9
 800b690:	e012      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b692:	230a      	movs	r3, #10
 800b694:	e010      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b696:	2308      	movs	r3, #8
 800b698:	e00e      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b69a:	2307      	movs	r3, #7
 800b69c:	e00c      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b69e:	2306      	movs	r3, #6
 800b6a0:	e00a      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b6a2:	2305      	movs	r3, #5
 800b6a4:	e008      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b6a6:	2304      	movs	r3, #4
 800b6a8:	e006      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e004      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e002      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e000      	b.n	800b6b8 <HAL_GPIO_DeInit+0xd4>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	f002 0203 	and.w	r2, r2, #3
 800b6be:	0092      	lsls	r2, r2, #2
 800b6c0:	4093      	lsls	r3, r2
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d132      	bne.n	800b72e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f003 0303 	and.w	r3, r3, #3
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	220f      	movs	r2, #15
 800b6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b6d8:	4a3b      	ldr	r2, [pc, #236]	; (800b7c8 <HAL_GPIO_DeInit+0x1e4>)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	089b      	lsrs	r3, r3, #2
 800b6de:	3302      	adds	r3, #2
 800b6e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	43da      	mvns	r2, r3
 800b6e8:	4837      	ldr	r0, [pc, #220]	; (800b7c8 <HAL_GPIO_DeInit+0x1e4>)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	089b      	lsrs	r3, r3, #2
 800b6ee:	400a      	ands	r2, r1
 800b6f0:	3302      	adds	r3, #2
 800b6f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b6f6:	4b3f      	ldr	r3, [pc, #252]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	43db      	mvns	r3, r3
 800b6fe:	493d      	ldr	r1, [pc, #244]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b700:	4013      	ands	r3, r2
 800b702:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b704:	4b3b      	ldr	r3, [pc, #236]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	43db      	mvns	r3, r3
 800b70c:	4939      	ldr	r1, [pc, #228]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b70e:	4013      	ands	r3, r2
 800b710:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b712:	4b38      	ldr	r3, [pc, #224]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	43db      	mvns	r3, r3
 800b71a:	4936      	ldr	r1, [pc, #216]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b71c:	4013      	ands	r3, r2
 800b71e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b720:	4b34      	ldr	r3, [pc, #208]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b722:	68da      	ldr	r2, [r3, #12]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	43db      	mvns	r3, r3
 800b728:	4932      	ldr	r1, [pc, #200]	; (800b7f4 <HAL_GPIO_DeInit+0x210>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	2103      	movs	r1, #3
 800b738:	fa01 f303 	lsl.w	r3, r1, r3
 800b73c:	43db      	mvns	r3, r3
 800b73e:	401a      	ands	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	08da      	lsrs	r2, r3, #3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3208      	adds	r2, #8
 800b74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	220f      	movs	r2, #15
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	43db      	mvns	r3, r3
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	08d2      	lsrs	r2, r2, #3
 800b764:	4019      	ands	r1, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3208      	adds	r2, #8
 800b76a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	689a      	ldr	r2, [r3, #8]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	2103      	movs	r1, #3
 800b778:	fa01 f303 	lsl.w	r3, r1, r3
 800b77c:	43db      	mvns	r3, r3
 800b77e:	401a      	ands	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	2101      	movs	r1, #1
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	fa01 f303 	lsl.w	r3, r1, r3
 800b790:	43db      	mvns	r3, r3
 800b792:	401a      	ands	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	2103      	movs	r1, #3
 800b7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a6:	43db      	mvns	r3, r3
 800b7a8:	401a      	ands	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2b0f      	cmp	r3, #15
 800b7b8:	f67f af22 	bls.w	800b600 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b7bc:	bf00      	nop
 800b7be:	371c      	adds	r7, #28
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	40013800 	.word	0x40013800
 800b7cc:	40020000 	.word	0x40020000
 800b7d0:	40020400 	.word	0x40020400
 800b7d4:	40020800 	.word	0x40020800
 800b7d8:	40020c00 	.word	0x40020c00
 800b7dc:	40021000 	.word	0x40021000
 800b7e0:	40021400 	.word	0x40021400
 800b7e4:	40021800 	.word	0x40021800
 800b7e8:	40021c00 	.word	0x40021c00
 800b7ec:	40022000 	.word	0x40022000
 800b7f0:	40022400 	.word	0x40022400
 800b7f4:	40013c00 	.word	0x40013c00

0800b7f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	807b      	strh	r3, [r7, #2]
 800b804:	4613      	mov	r3, r2
 800b806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b808:	787b      	ldrb	r3, [r7, #1]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b80e:	887a      	ldrh	r2, [r7, #2]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b814:	e003      	b.n	800b81e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b816:	887b      	ldrh	r3, [r7, #2]
 800b818:	041a      	lsls	r2, r3, #16
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	619a      	str	r2, [r3, #24]
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
	...

0800b82c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d101      	bne.n	800b83e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e07f      	b.n	800b93e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7f6 f850 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2224      	movs	r2, #36	; 0x24
 800b85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f022 0201 	bic.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b87c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b88c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d107      	bne.n	800b8a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8a2:	609a      	str	r2, [r3, #8]
 800b8a4:	e006      	b.n	800b8b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b8b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d104      	bne.n	800b8c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6859      	ldr	r1, [r3, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	4b1d      	ldr	r3, [pc, #116]	; (800b948 <HAL_I2C_Init+0x11c>)
 800b8d2:	430b      	orrs	r3, r1
 800b8d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	691a      	ldr	r2, [r3, #16]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	ea42 0103 	orr.w	r1, r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	021a      	lsls	r2, r3, #8
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	430a      	orrs	r2, r1
 800b8fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	69d9      	ldr	r1, [r3, #28]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a1a      	ldr	r2, [r3, #32]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	430a      	orrs	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0201 	orr.w	r2, r2, #1
 800b91e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2220      	movs	r2, #32
 800b92a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	02008000 	.word	0x02008000

0800b94c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e021      	b.n	800b9a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2224      	movs	r2, #36	; 0x24
 800b962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f022 0201 	bic.w	r2, r2, #1
 800b974:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7f6 f8a2 	bl	8001ac0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	f040 809a 	bne.w	800bafc <HAL_I2C_Slave_Transmit_DMA+0x150>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d105      	bne.n	800b9e0 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e08e      	b.n	800bafe <HAL_I2C_Slave_Transmit_DMA+0x152>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d101      	bne.n	800b9ee <HAL_I2C_Slave_Transmit_DMA+0x42>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e087      	b.n	800bafe <HAL_I2C_Slave_Transmit_DMA+0x152>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2221      	movs	r2, #33	; 0x21
 800b9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2220      	movs	r2, #32
 800ba02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	88fa      	ldrh	r2, [r7, #6]
 800ba16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4a38      	ldr	r2, [pc, #224]	; (800bb08 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 800ba26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4a38      	ldr	r2, [pc, #224]	; (800bb0c <HAL_I2C_Slave_Transmit_DMA+0x160>)
 800ba2c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d020      	beq.n	800ba78 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3a:	4a35      	ldr	r2, [pc, #212]	; (800bb10 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 800ba3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	4a34      	ldr	r2, [pc, #208]	; (800bb14 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 800ba44:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba52:	2200      	movs	r2, #0
 800ba54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ba5a:	68b9      	ldr	r1, [r7, #8]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3328      	adds	r3, #40	; 0x28
 800ba62:	461a      	mov	r2, r3
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba68:	f7fe fcb4 	bl	800a3d4 <HAL_DMA_Start_IT>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d12e      	bne.n	800bad4 <HAL_I2C_Slave_Transmit_DMA+0x128>
 800ba76:	e013      	b.n	800baa0 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2228      	movs	r2, #40	; 0x28
 800ba7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e02e      	b.n	800bafe <HAL_I2C_Slave_Transmit_DMA+0x152>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800baae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bab8:	2104      	movs	r1, #4
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f001 fca4 	bl	800d408 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bace:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	e014      	b.n	800bafe <HAL_I2C_Slave_Transmit_DMA+0x152>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2228      	movs	r2, #40	; 0x28
 800bad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae8:	f043 0210 	orr.w	r2, r3, #16
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e000      	b.n	800bafe <HAL_I2C_Slave_Transmit_DMA+0x152>
  }
  else
  {
    return HAL_BUSY;
 800bafc:	2302      	movs	r3, #2
  }
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	ffff0000 	.word	0xffff0000
 800bb0c:	0800c5f5 	.word	0x0800c5f5
 800bb10:	0800d025 	.word	0x0800d025
 800bb14:	0800d0ab 	.word	0x0800d0ab

0800bb18 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	4613      	mov	r3, r2
 800bb24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	f040 809a 	bne.w	800bc68 <HAL_I2C_Slave_Receive_DMA+0x150>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <HAL_I2C_Slave_Receive_DMA+0x28>
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d105      	bne.n	800bb4c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e08e      	b.n	800bc6a <HAL_I2C_Slave_Receive_DMA+0x152>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <HAL_I2C_Slave_Receive_DMA+0x42>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e087      	b.n	800bc6a <HAL_I2C_Slave_Receive_DMA+0x152>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2222      	movs	r2, #34	; 0x22
 800bb66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	88fa      	ldrh	r2, [r7, #6]
 800bb82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4a38      	ldr	r2, [pc, #224]	; (800bc74 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800bb92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4a38      	ldr	r2, [pc, #224]	; (800bc78 <HAL_I2C_Slave_Receive_DMA+0x160>)
 800bb98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d020      	beq.n	800bbe4 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba6:	4a35      	ldr	r2, [pc, #212]	; (800bc7c <HAL_I2C_Slave_Receive_DMA+0x164>)
 800bba8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	4a34      	ldr	r2, [pc, #208]	; (800bc80 <HAL_I2C_Slave_Receive_DMA+0x168>)
 800bbb0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3324      	adds	r3, #36	; 0x24
 800bbcc:	4619      	mov	r1, r3
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd4:	f7fe fbfe 	bl	800a3d4 <HAL_DMA_Start_IT>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d12e      	bne.n	800bc40 <HAL_I2C_Slave_Receive_DMA+0x128>
 800bbe2:	e013      	b.n	800bc0c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2228      	movs	r2, #40	; 0x28
 800bbe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e02e      	b.n	800bc6a <HAL_I2C_Slave_Receive_DMA+0x152>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc1a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bc24:	2104      	movs	r1, #4
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f001 fbee 	bl	800d408 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc3a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e014      	b.n	800bc6a <HAL_I2C_Slave_Receive_DMA+0x152>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2228      	movs	r2, #40	; 0x28
 800bc44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc54:	f043 0210 	orr.w	r2, r3, #16
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e000      	b.n	800bc6a <HAL_I2C_Slave_Receive_DMA+0x152>
  }
  else
  {
    return HAL_BUSY;
 800bc68:	2302      	movs	r3, #2
  }
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	ffff0000 	.word	0xffff0000
 800bc78:	0800c5f5 	.word	0x0800c5f5
 800bc7c:	0800d065 	.word	0x0800d065
 800bc80:	0800d0ab 	.word	0x0800d0ab

0800bc84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	4611      	mov	r1, r2
 800bc90:	461a      	mov	r2, r3
 800bc92:	4603      	mov	r3, r0
 800bc94:	817b      	strh	r3, [r7, #10]
 800bc96:	460b      	mov	r3, r1
 800bc98:	813b      	strh	r3, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b20      	cmp	r3, #32
 800bca8:	f040 80f9 	bne.w	800be9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <HAL_I2C_Mem_Write+0x34>
 800bcb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d105      	bne.n	800bcc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e0ed      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d101      	bne.n	800bcd2 <HAL_I2C_Mem_Write+0x4e>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e0e6      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bcda:	f7fd ffcd 	bl	8009c78 <HAL_GetTick>
 800bcde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	2319      	movs	r3, #25
 800bce6:	2201      	movs	r2, #1
 800bce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f001 fa3a 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e0d1      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2221      	movs	r2, #33	; 0x21
 800bd00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2240      	movs	r2, #64	; 0x40
 800bd08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a3a      	ldr	r2, [r7, #32]
 800bd16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd24:	88f8      	ldrh	r0, [r7, #6]
 800bd26:	893a      	ldrh	r2, [r7, #8]
 800bd28:	8979      	ldrh	r1, [r7, #10]
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	4603      	mov	r3, r0
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fd27 	bl	800c788 <I2C_RequestMemoryWrite>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e0a9      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	2bff      	cmp	r3, #255	; 0xff
 800bd54:	d90e      	bls.n	800bd74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	22ff      	movs	r2, #255	; 0xff
 800bd5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	8979      	ldrh	r1, [r7, #10]
 800bd64:	2300      	movs	r3, #0
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f001 fb1d 	bl	800d3ac <I2C_TransferConfig>
 800bd72:	e00f      	b.n	800bd94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	8979      	ldrh	r1, [r7, #10]
 800bd86:	2300      	movs	r3, #0
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f001 fb0c 	bl	800d3ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f001 fa24 	bl	800d1e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e07b      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	781a      	ldrb	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d034      	beq.n	800be4c <HAL_I2C_Mem_Write+0x1c8>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d130      	bne.n	800be4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	2180      	movs	r1, #128	; 0x80
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f001 f9b6 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	e04d      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2bff      	cmp	r3, #255	; 0xff
 800be0c:	d90e      	bls.n	800be2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	22ff      	movs	r2, #255	; 0xff
 800be12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	8979      	ldrh	r1, [r7, #10]
 800be1c:	2300      	movs	r3, #0
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f001 fac1 	bl	800d3ac <I2C_TransferConfig>
 800be2a:	e00f      	b.n	800be4c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be30:	b29a      	uxth	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	8979      	ldrh	r1, [r7, #10]
 800be3e:	2300      	movs	r3, #0
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f001 fab0 	bl	800d3ac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be50:	b29b      	uxth	r3, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	d19e      	bne.n	800bd94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f001 fa03 	bl	800d266 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e01a      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2220      	movs	r2, #32
 800be70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6859      	ldr	r1, [r3, #4]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <HAL_I2C_Mem_Write+0x224>)
 800be7e:	400b      	ands	r3, r1
 800be80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2220      	movs	r2, #32
 800be86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e000      	b.n	800bea0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800be9e:	2302      	movs	r3, #2
  }
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	fe00e800 	.word	0xfe00e800

0800beac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	4608      	mov	r0, r1
 800beb6:	4611      	mov	r1, r2
 800beb8:	461a      	mov	r2, r3
 800beba:	4603      	mov	r3, r0
 800bebc:	817b      	strh	r3, [r7, #10]
 800bebe:	460b      	mov	r3, r1
 800bec0:	813b      	strh	r3, [r7, #8]
 800bec2:	4613      	mov	r3, r2
 800bec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b20      	cmp	r3, #32
 800bed0:	f040 80fd 	bne.w	800c0ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <HAL_I2C_Mem_Read+0x34>
 800beda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bee6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e0f1      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d101      	bne.n	800befa <HAL_I2C_Mem_Read+0x4e>
 800bef6:	2302      	movs	r3, #2
 800bef8:	e0ea      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf02:	f7fd feb9 	bl	8009c78 <HAL_GetTick>
 800bf06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	2319      	movs	r3, #25
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f001 f926 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e0d5      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2222      	movs	r2, #34	; 0x22
 800bf28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2240      	movs	r2, #64	; 0x40
 800bf30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a3a      	ldr	r2, [r7, #32]
 800bf3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bf4c:	88f8      	ldrh	r0, [r7, #6]
 800bf4e:	893a      	ldrh	r2, [r7, #8]
 800bf50:	8979      	ldrh	r1, [r7, #10]
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 fc67 	bl	800c830 <I2C_RequestMemoryRead>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d005      	beq.n	800bf74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e0ad      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	2bff      	cmp	r3, #255	; 0xff
 800bf7c:	d90e      	bls.n	800bf9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	22ff      	movs	r2, #255	; 0xff
 800bf82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	8979      	ldrh	r1, [r7, #10]
 800bf8c:	4b52      	ldr	r3, [pc, #328]	; (800c0d8 <HAL_I2C_Mem_Read+0x22c>)
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f001 fa09 	bl	800d3ac <I2C_TransferConfig>
 800bf9a:	e00f      	b.n	800bfbc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	8979      	ldrh	r1, [r7, #10]
 800bfae:	4b4a      	ldr	r3, [pc, #296]	; (800c0d8 <HAL_I2C_Mem_Read+0x22c>)
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f001 f9f8 	bl	800d3ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2104      	movs	r1, #4
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f001 f8cd 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e07c      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff2:	3b01      	subs	r3, #1
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bffe:	b29b      	uxth	r3, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d034      	beq.n	800c07c <HAL_I2C_Mem_Read+0x1d0>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c016:	2b00      	cmp	r3, #0
 800c018:	d130      	bne.n	800c07c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	2200      	movs	r2, #0
 800c022:	2180      	movs	r1, #128	; 0x80
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f001 f89e 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e04d      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2bff      	cmp	r3, #255	; 0xff
 800c03c:	d90e      	bls.n	800c05c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	22ff      	movs	r2, #255	; 0xff
 800c042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c048:	b2da      	uxtb	r2, r3
 800c04a:	8979      	ldrh	r1, [r7, #10]
 800c04c:	2300      	movs	r3, #0
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f001 f9a9 	bl	800d3ac <I2C_TransferConfig>
 800c05a:	e00f      	b.n	800c07c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c060:	b29a      	uxth	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	8979      	ldrh	r1, [r7, #10]
 800c06e:	2300      	movs	r3, #0
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f001 f998 	bl	800d3ac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c080:	b29b      	uxth	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d19a      	bne.n	800bfbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f001 f8eb 	bl	800d266 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e01a      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2220      	movs	r2, #32
 800c0a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6859      	ldr	r1, [r3, #4]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	4b0b      	ldr	r3, [pc, #44]	; (800c0dc <HAL_I2C_Mem_Read+0x230>)
 800c0ae:	400b      	ands	r3, r1
 800c0b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e000      	b.n	800c0d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c0ce:	2302      	movs	r3, #2
  }
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	80002400 	.word	0x80002400
 800c0dc:	fe00e800 	.word	0xfe00e800

0800c0e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	68f9      	ldr	r1, [r7, #12]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	4798      	blx	r3
  }
}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	70fb      	strb	r3, [r7, #3]
 800c170:	4613      	mov	r3, r2
 800c172:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f2:	b2db      	uxtb	r3, r3
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d101      	bne.n	800c224 <I2C_Slave_ISR_IT+0x24>
 800c220:	2302      	movs	r3, #2
 800c222:	e0f0      	b.n	800c406 <I2C_Slave_ISR_IT+0x206>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	091b      	lsrs	r3, r3, #4
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d04d      	beq.n	800c2d4 <I2C_Slave_ISR_IT+0xd4>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	091b      	lsrs	r3, r3, #4
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b00      	cmp	r3, #0
 800c242:	d047      	beq.n	800c2d4 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c248:	b29b      	uxth	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d128      	bne.n	800c2a0 <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b28      	cmp	r3, #40	; 0x28
 800c258:	d108      	bne.n	800c26c <I2C_Slave_ISR_IT+0x6c>
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c260:	d104      	bne.n	800c26c <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c262:	6979      	ldr	r1, [r7, #20]
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 fda5 	bl	800cdb4 <I2C_ITListenCplt>
 800c26a:	e032      	b.n	800c2d2 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b29      	cmp	r3, #41	; 0x29
 800c276:	d10e      	bne.n	800c296 <I2C_Slave_ISR_IT+0x96>
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c27e:	d00a      	beq.n	800c296 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2210      	movs	r2, #16
 800c286:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f000 fea7 	bl	800cfdc <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 fbe1 	bl	800ca56 <I2C_ITSlaveSeqCplt>
 800c294:	e01d      	b.n	800c2d2 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2210      	movs	r2, #16
 800c29c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c29e:	e09a      	b.n	800c3d6 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2210      	movs	r2, #16
 800c2a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ac:	f043 0204 	orr.w	r2, r3, #4
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d004      	beq.n	800c2c4 <I2C_Slave_ISR_IT+0xc4>
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2c0:	f040 8089 	bne.w	800c3d6 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 fdc6 	bl	800ce5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c2d0:	e081      	b.n	800c3d6 <I2C_Slave_ISR_IT+0x1d6>
 800c2d2:	e080      	b.n	800c3d6 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	089b      	lsrs	r3, r3, #2
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d034      	beq.n	800c34a <I2C_Slave_ISR_IT+0x14a>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	089b      	lsrs	r3, r3, #2
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d02e      	beq.n	800c34a <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d01c      	beq.n	800c330 <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f023 0304 	bic.w	r3, r3, #4
 800c2fc:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	b2d2      	uxtb	r2, r2
 800c30a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c31a:	3b01      	subs	r3, #1
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c326:	b29b      	uxth	r3, r3
 800c328:	3b01      	subs	r3, #1
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c334:	b29b      	uxth	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d14f      	bne.n	800c3da <I2C_Slave_ISR_IT+0x1da>
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c340:	d04b      	beq.n	800c3da <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 fb87 	bl	800ca56 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c348:	e047      	b.n	800c3da <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	08db      	lsrs	r3, r3, #3
 800c34e:	f003 0301 	and.w	r3, r3, #1
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <I2C_Slave_ISR_IT+0x16c>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	08db      	lsrs	r3, r3, #3
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c362:	6979      	ldr	r1, [r7, #20]
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f000 fab7 	bl	800c8d8 <I2C_ITAddrCplt>
 800c36a:	e037      	b.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	085b      	lsrs	r3, r3, #1
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	2b00      	cmp	r3, #0
 800c376:	d031      	beq.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	085b      	lsrs	r3, r3, #1
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02b      	beq.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c388:	b29b      	uxth	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d018      	beq.n	800c3c0 <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c392:	781a      	ldrb	r2, [r3, #0]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	851a      	strh	r2, [r3, #40]	; 0x28
 800c3be:	e00d      	b.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3c6:	d002      	beq.n	800c3ce <I2C_Slave_ISR_IT+0x1ce>
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 fb41 	bl	800ca56 <I2C_ITSlaveSeqCplt>
 800c3d4:	e002      	b.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 800c3d6:	bf00      	nop
 800c3d8:	e000      	b.n	800c3dc <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 800c3da:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	095b      	lsrs	r3, r3, #5
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <I2C_Slave_ISR_IT+0x1fc>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	095b      	lsrs	r3, r3, #5
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c3f4:	6979      	ldr	r1, [r7, #20]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 fc06 	bl	800cc08 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b088      	sub	sp, #32
 800c412:	af02      	add	r7, sp, #8
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c420:	2b01      	cmp	r3, #1
 800c422:	d101      	bne.n	800c428 <I2C_Master_ISR_DMA+0x1a>
 800c424:	2302      	movs	r3, #2
 800c426:	e0e1      	b.n	800c5ec <I2C_Master_ISR_DMA+0x1de>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	091b      	lsrs	r3, r3, #4
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d017      	beq.n	800c46c <I2C_Master_ISR_DMA+0x5e>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	091b      	lsrs	r3, r3, #4
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	d011      	beq.n	800c46c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2210      	movs	r2, #16
 800c44e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c454:	f043 0204 	orr.w	r2, r3, #4
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c45c:	2112      	movs	r1, #18
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 ffd2 	bl	800d408 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f000 fdb9 	bl	800cfdc <I2C_Flush_TXDR>
 800c46a:	e0ba      	b.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	09db      	lsrs	r3, r3, #7
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	d072      	beq.n	800c55e <I2C_Master_ISR_DMA+0x150>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	099b      	lsrs	r3, r3, #6
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d06c      	beq.n	800c55e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c492:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c498:	b29b      	uxth	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d04e      	beq.n	800c53c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4aa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	2bff      	cmp	r3, #255	; 0xff
 800c4b4:	d906      	bls.n	800c4c4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	22ff      	movs	r2, #255	; 0xff
 800c4ba:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c4bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	e010      	b.n	800c4e6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4d6:	d003      	beq.n	800c4e0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	617b      	str	r3, [r7, #20]
 800c4de:	e002      	b.n	800c4e6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c4e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c4e4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	8a79      	ldrh	r1, [r7, #18]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 ff59 	bl	800d3ac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	b29a      	uxth	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b22      	cmp	r3, #34	; 0x22
 800c516:	d108      	bne.n	800c52a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c526:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c528:	e05b      	b.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c538:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c53a:	e052      	b.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c54a:	d003      	beq.n	800c554 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 fa45 	bl	800c9dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c552:	e046      	b.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c554:	2140      	movs	r1, #64	; 0x40
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 fc80 	bl	800ce5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c55c:	e041      	b.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	099b      	lsrs	r3, r3, #6
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d029      	beq.n	800c5be <I2C_Master_ISR_DMA+0x1b0>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	099b      	lsrs	r3, r3, #6
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	2b00      	cmp	r3, #0
 800c574:	d023      	beq.n	800c5be <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d119      	bne.n	800c5b4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c58a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c58e:	d027      	beq.n	800c5e0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c598:	d108      	bne.n	800c5ac <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5a8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c5aa:	e019      	b.n	800c5e0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 fa15 	bl	800c9dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c5b2:	e015      	b.n	800c5e0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c5b4:	2140      	movs	r1, #64	; 0x40
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f000 fc50 	bl	800ce5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c5bc:	e010      	b.n	800c5e0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	095b      	lsrs	r3, r3, #5
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00b      	beq.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	095b      	lsrs	r3, r3, #5
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d005      	beq.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f000 fa79 	bl	800cad0 <I2C_ITMasterCplt>
 800c5de:	e000      	b.n	800c5e2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c5e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 800c606:	2300      	movs	r3, #0
 800c608:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c610:	2b01      	cmp	r3, #1
 800c612:	d101      	bne.n	800c618 <I2C_Slave_ISR_DMA+0x24>
 800c614:	2302      	movs	r3, #2
 800c616:	e0b2      	b.n	800c77e <I2C_Slave_ISR_DMA+0x18a>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	091b      	lsrs	r3, r3, #4
 800c624:	f003 0301 	and.w	r3, r3, #1
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 8082 	beq.w	800c732 <I2C_Slave_ISR_DMA+0x13e>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	091b      	lsrs	r3, r3, #4
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	d07b      	beq.n	800c732 <I2C_Slave_ISR_DMA+0x13e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	0b9b      	lsrs	r3, r3, #14
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d105      	bne.n	800c652 <I2C_Slave_ISR_DMA+0x5e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	0bdb      	lsrs	r3, r3, #15
 800c64a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d068      	beq.n	800c724 <I2C_Slave_ISR_DMA+0x130>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00d      	beq.n	800c676 <I2C_Slave_ISR_DMA+0x82>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	0bdb      	lsrs	r3, r3, #15
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	d007      	beq.n	800c676 <I2C_Slave_ISR_DMA+0x82>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <I2C_Slave_ISR_DMA+0x82>
          {
            treatdmanack = 1U;
 800c672:	2301      	movs	r3, #1
 800c674:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00d      	beq.n	800c69a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	0b9b      	lsrs	r3, r3, #14
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	2b00      	cmp	r3, #0
 800c688:	d007      	beq.n	800c69a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800c696:	2301      	movs	r3, #1
 800c698:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d128      	bne.n	800c6f2 <I2C_Slave_ISR_DMA+0xfe>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b28      	cmp	r3, #40	; 0x28
 800c6aa:	d108      	bne.n	800c6be <I2C_Slave_ISR_DMA+0xca>
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6b2:	d104      	bne.n	800c6be <I2C_Slave_ISR_DMA+0xca>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 fb7c 	bl	800cdb4 <I2C_ITListenCplt>
 800c6bc:	e031      	b.n	800c722 <I2C_Slave_ISR_DMA+0x12e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b29      	cmp	r3, #41	; 0x29
 800c6c8:	d10e      	bne.n	800c6e8 <I2C_Slave_ISR_DMA+0xf4>
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c6d0:	d00a      	beq.n	800c6e8 <I2C_Slave_ISR_DMA+0xf4>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2210      	movs	r2, #16
 800c6d8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f000 fc7e 	bl	800cfdc <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 f9b8 	bl	800ca56 <I2C_ITSlaveSeqCplt>
 800c6e6:	e01c      	b.n	800c722 <I2C_Slave_ISR_DMA+0x12e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c6f0:	e01d      	b.n	800c72e <I2C_Slave_ISR_DMA+0x13a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2210      	movs	r2, #16
 800c6f8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6fe:	f043 0204 	orr.w	r2, r3, #4
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <I2C_Slave_ISR_DMA+0x120>
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c712:	d10c      	bne.n	800c72e <I2C_Slave_ISR_DMA+0x13a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c718:	4619      	mov	r1, r3
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 fb9e 	bl	800ce5c <I2C_ITError>
      if (treatdmanack == 1U)
 800c720:	e005      	b.n	800c72e <I2C_Slave_ISR_DMA+0x13a>
 800c722:	e004      	b.n	800c72e <I2C_Slave_ISR_DMA+0x13a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2210      	movs	r2, #16
 800c72a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c72c:	e022      	b.n	800c774 <I2C_Slave_ISR_DMA+0x180>
      if (treatdmanack == 1U)
 800c72e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c730:	e020      	b.n	800c774 <I2C_Slave_ISR_DMA+0x180>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	08db      	lsrs	r3, r3, #3
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00a      	beq.n	800c754 <I2C_Slave_ISR_DMA+0x160>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	08db      	lsrs	r3, r3, #3
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d004      	beq.n	800c754 <I2C_Slave_ISR_DMA+0x160>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c74a:	68b9      	ldr	r1, [r7, #8]
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 f8c3 	bl	800c8d8 <I2C_ITAddrCplt>
 800c752:	e00f      	b.n	800c774 <I2C_Slave_ISR_DMA+0x180>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	095b      	lsrs	r3, r3, #5
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d009      	beq.n	800c774 <I2C_Slave_ISR_DMA+0x180>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	095b      	lsrs	r3, r3, #5
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 fa4a 	bl	800cc08 <I2C_ITSlaveCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
	...

0800c788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af02      	add	r7, sp, #8
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	4608      	mov	r0, r1
 800c792:	4611      	mov	r1, r2
 800c794:	461a      	mov	r2, r3
 800c796:	4603      	mov	r3, r0
 800c798:	817b      	strh	r3, [r7, #10]
 800c79a:	460b      	mov	r3, r1
 800c79c:	813b      	strh	r3, [r7, #8]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c7a2:	88fb      	ldrh	r3, [r7, #6]
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	8979      	ldrh	r1, [r7, #10]
 800c7a8:	4b20      	ldr	r3, [pc, #128]	; (800c82c <I2C_RequestMemoryWrite+0xa4>)
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 fdfb 	bl	800d3ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7b6:	69fa      	ldr	r2, [r7, #28]
 800c7b8:	69b9      	ldr	r1, [r7, #24]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 fd13 	bl	800d1e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e02c      	b.n	800c824 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c7ca:	88fb      	ldrh	r3, [r7, #6]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d105      	bne.n	800c7dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c7d0:	893b      	ldrh	r3, [r7, #8]
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	629a      	str	r2, [r3, #40]	; 0x28
 800c7da:	e015      	b.n	800c808 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c7dc:	893b      	ldrh	r3, [r7, #8]
 800c7de:	0a1b      	lsrs	r3, r3, #8
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	69b9      	ldr	r1, [r7, #24]
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 fcf9 	bl	800d1e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e012      	b.n	800c824 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c7fe:	893b      	ldrh	r3, [r7, #8]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	2200      	movs	r2, #0
 800c810:	2180      	movs	r1, #128	; 0x80
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 fca7 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e000      	b.n	800c824 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	80002000 	.word	0x80002000

0800c830 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af02      	add	r7, sp, #8
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	4608      	mov	r0, r1
 800c83a:	4611      	mov	r1, r2
 800c83c:	461a      	mov	r2, r3
 800c83e:	4603      	mov	r3, r0
 800c840:	817b      	strh	r3, [r7, #10]
 800c842:	460b      	mov	r3, r1
 800c844:	813b      	strh	r3, [r7, #8]
 800c846:	4613      	mov	r3, r2
 800c848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c84a:	88fb      	ldrh	r3, [r7, #6]
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	8979      	ldrh	r1, [r7, #10]
 800c850:	4b20      	ldr	r3, [pc, #128]	; (800c8d4 <I2C_RequestMemoryRead+0xa4>)
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	2300      	movs	r3, #0
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f000 fda8 	bl	800d3ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c85c:	69fa      	ldr	r2, [r7, #28]
 800c85e:	69b9      	ldr	r1, [r7, #24]
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 fcc0 	bl	800d1e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e02c      	b.n	800c8ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c870:	88fb      	ldrh	r3, [r7, #6]
 800c872:	2b01      	cmp	r3, #1
 800c874:	d105      	bne.n	800c882 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c876:	893b      	ldrh	r3, [r7, #8]
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	629a      	str	r2, [r3, #40]	; 0x28
 800c880:	e015      	b.n	800c8ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c882:	893b      	ldrh	r3, [r7, #8]
 800c884:	0a1b      	lsrs	r3, r3, #8
 800c886:	b29b      	uxth	r3, r3
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	69b9      	ldr	r1, [r7, #24]
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f000 fca6 	bl	800d1e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e012      	b.n	800c8ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c8a4:	893b      	ldrh	r3, [r7, #8]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2140      	movs	r1, #64	; 0x40
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f000 fc54 	bl	800d166 <I2C_WaitOnFlagUntilTimeout>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	80002000 	.word	0x80002000

0800c8d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c8ee:	2b28      	cmp	r3, #40	; 0x28
 800c8f0:	d168      	bne.n	800c9c4 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	0c1b      	lsrs	r3, r3, #16
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 0301 	and.w	r3, r3, #1
 800c900:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	0c1b      	lsrs	r3, r3, #16
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c910:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c91e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	b29b      	uxth	r3, r3
 800c928:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c92c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d137      	bne.n	800c9a6 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800c936:	897b      	ldrh	r3, [r7, #10]
 800c938:	09db      	lsrs	r3, r3, #7
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	89bb      	ldrh	r3, [r7, #12]
 800c93e:	4053      	eors	r3, r2
 800c940:	b29b      	uxth	r3, r3
 800c942:	f003 0306 	and.w	r3, r3, #6
 800c946:	2b00      	cmp	r3, #0
 800c948:	d11c      	bne.n	800c984 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c94a:	897b      	ldrh	r3, [r7, #10]
 800c94c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d139      	bne.n	800c9d4 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2208      	movs	r2, #8
 800c96c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c976:	89ba      	ldrh	r2, [r7, #12]
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7ff fbf1 	bl	800c164 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c982:	e027      	b.n	800c9d4 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800c984:	893b      	ldrh	r3, [r7, #8]
 800c986:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c988:	2104      	movs	r1, #4
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fdaa 	bl	800d4e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c998:	89ba      	ldrh	r2, [r7, #12]
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff fbe0 	bl	800c164 <HAL_I2C_AddrCallback>
}
 800c9a4:	e016      	b.n	800c9d4 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c9a6:	2104      	movs	r1, #4
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fd9b 	bl	800d4e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c9b6:	89ba      	ldrh	r2, [r7, #12]
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff fbd1 	bl	800c164 <HAL_I2C_AddrCallback>
}
 800c9c2:	e007      	b.n	800c9d4 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2208      	movs	r2, #8
 800c9ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c9d4:	bf00      	nop
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b21      	cmp	r3, #33	; 0x21
 800c9f6:	d115      	bne.n	800ca24 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2211      	movs	r2, #17
 800ca04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ca0c:	2101      	movs	r1, #1
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fd68 	bl	800d4e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff fb79 	bl	800c114 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ca22:	e014      	b.n	800ca4e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2220      	movs	r2, #32
 800ca28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2212      	movs	r2, #18
 800ca30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ca38:	2102      	movs	r1, #2
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fd52 	bl	800d4e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff fb6d 	bl	800c128 <HAL_I2C_MasterRxCpltCallback>
}
 800ca4e:	bf00      	nop
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b29      	cmp	r3, #41	; 0x29
 800ca70:	d112      	bne.n	800ca98 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2228      	movs	r2, #40	; 0x28
 800ca76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2221      	movs	r2, #33	; 0x21
 800ca7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ca80:	2101      	movs	r1, #1
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fd2e 	bl	800d4e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff fb53 	bl	800c13c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ca96:	e017      	b.n	800cac8 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b2a      	cmp	r3, #42	; 0x2a
 800caa2:	d111      	bne.n	800cac8 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2228      	movs	r2, #40	; 0x28
 800caa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2222      	movs	r2, #34	; 0x22
 800cab0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cab2:	2102      	movs	r1, #2
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fd15 	bl	800d4e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f7ff fb44 	bl	800c150 <HAL_I2C_SlaveRxCpltCallback>
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2220      	movs	r2, #32
 800cae0:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6859      	ldr	r1, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	4b44      	ldr	r3, [pc, #272]	; (800cc00 <I2C_ITMasterCplt+0x130>)
 800caee:	400b      	ands	r3, r1
 800caf0:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a40      	ldr	r2, [pc, #256]	; (800cc04 <I2C_ITMasterCplt+0x134>)
 800cb02:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	091b      	lsrs	r3, r3, #4
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d009      	beq.n	800cb24 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2210      	movs	r2, #16
 800cb16:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb1c:	f043 0204 	orr.w	r2, r3, #4
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fa59 	bl	800cfdc <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cb2a:	2103      	movs	r1, #3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fcd9 	bl	800d4e4 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb36:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b60      	cmp	r3, #96	; 0x60
 800cb42:	d002      	beq.n	800cb4a <I2C_ITMasterCplt+0x7a>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d006      	beq.n	800cb58 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f983 	bl	800ce5c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cb56:	e04e      	b.n	800cbf6 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	2b21      	cmp	r3, #33	; 0x21
 800cb62:	d121      	bne.n	800cba8 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b40      	cmp	r3, #64	; 0x40
 800cb76:	d10b      	bne.n	800cb90 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff fb03 	bl	800c194 <HAL_I2C_MemTxCpltCallback>
}
 800cb8e:	e032      	b.n	800cbf6 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7ff fab7 	bl	800c114 <HAL_I2C_MasterTxCpltCallback>
}
 800cba6:	e026      	b.n	800cbf6 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	2b22      	cmp	r3, #34	; 0x22
 800cbb2:	d120      	bne.n	800cbf6 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2220      	movs	r2, #32
 800cbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d10b      	bne.n	800cbe0 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff fae5 	bl	800c1a8 <HAL_I2C_MemRxCpltCallback>
}
 800cbde:	e00a      	b.n	800cbf6 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff fa99 	bl	800c128 <HAL_I2C_MasterRxCpltCallback>
}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	fe00e800 	.word	0xfe00e800
 800cc04:	ffff0000 	.word	0xffff0000

0800cc08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2220      	movs	r2, #32
 800cc24:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cc26:	2107      	movs	r1, #7
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fc5b 	bl	800d4e4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc3c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6859      	ldr	r1, [r3, #4]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	4b58      	ldr	r3, [pc, #352]	; (800cdac <I2C_ITSlaveCplt+0x1a4>)
 800cc4a:	400b      	ands	r3, r1
 800cc4c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f9c4 	bl	800cfdc <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	0b9b      	lsrs	r3, r3, #14
 800cc58:	f003 0301 	and.w	r3, r3, #1
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d018      	beq.n	800cc9a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc76:	e010      	b.n	800cc9a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	0bdb      	lsrs	r3, r3, #15
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00a      	beq.n	800cc9a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d006      	beq.n	800cc9a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	089b      	lsrs	r3, r3, #2
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d020      	beq.n	800cce8 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f023 0304 	bic.w	r3, r3, #4
 800ccac:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	b2d2      	uxtb	r2, r2
 800ccba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00c      	beq.n	800cce8 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccf6:	f043 0204 	orr.w	r2, r3, #4
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d010      	beq.n	800cd3c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f89b 	bl	800ce5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b28      	cmp	r3, #40	; 0x28
 800cd30:	d138      	bne.n	800cda4 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd32:	68f9      	ldr	r1, [r7, #12]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f83d 	bl	800cdb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd3a:	e033      	b.n	800cda4 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd44:	d011      	beq.n	800cd6a <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fe85 	bl	800ca56 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a18      	ldr	r2, [pc, #96]	; (800cdb0 <I2C_ITSlaveCplt+0x1a8>)
 800cd50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2220      	movs	r2, #32
 800cd56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff fa0c 	bl	800c180 <HAL_I2C_ListenCpltCallback>
}
 800cd68:	e01c      	b.n	800cda4 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b22      	cmp	r3, #34	; 0x22
 800cd74:	d10b      	bne.n	800cd8e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2220      	movs	r2, #32
 800cd7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff f9e2 	bl	800c150 <HAL_I2C_SlaveRxCpltCallback>
}
 800cd8c:	e00a      	b.n	800cda4 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff f9cc 	bl	800c13c <HAL_I2C_SlaveTxCpltCallback>
}
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	fe00e800 	.word	0xfe00e800
 800cdb0:	ffff0000 	.word	0xffff0000

0800cdb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a25      	ldr	r2, [pc, #148]	; (800ce58 <I2C_ITListenCplt+0xa4>)
 800cdc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	089b      	lsrs	r3, r3, #2
 800cde4:	f003 0301 	and.w	r3, r3, #1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d022      	beq.n	800ce32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf6:	b2d2      	uxtb	r2, r2
 800cdf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d012      	beq.n	800ce32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce10:	3b01      	subs	r3, #1
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce2a:	f043 0204 	orr.w	r2, r3, #4
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ce32:	2107      	movs	r1, #7
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 fb55 	bl	800d4e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2210      	movs	r2, #16
 800ce40:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff f998 	bl	800c180 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	ffff0000 	.word	0xffff0000

0800ce5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce6c:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a55      	ldr	r2, [pc, #340]	; (800cfd0 <I2C_ITError+0x174>)
 800ce7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	431a      	orrs	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	2b28      	cmp	r3, #40	; 0x28
 800ce92:	d005      	beq.n	800cea0 <I2C_ITError+0x44>
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b29      	cmp	r3, #41	; 0x29
 800ce98:	d002      	beq.n	800cea0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
 800ce9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce9e:	d10e      	bne.n	800cebe <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cea0:	2103      	movs	r1, #3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fb1e 	bl	800d4e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2228      	movs	r2, #40	; 0x28
 800ceac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a46      	ldr	r2, [pc, #280]	; (800cfd4 <I2C_ITError+0x178>)
 800ceba:	635a      	str	r2, [r3, #52]	; 0x34
 800cebc:	e013      	b.n	800cee6 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cebe:	2107      	movs	r1, #7
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fb0f 	bl	800d4e4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b60      	cmp	r3, #96	; 0x60
 800ced0:	d003      	beq.n	800ceda <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2220      	movs	r2, #32
 800ced6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cef4:	d123      	bne.n	800cf3e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d05c      	beq.n	800cfc8 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf12:	4a31      	ldr	r2, [pc, #196]	; (800cfd8 <I2C_ITError+0x17c>)
 800cf14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fd fb26 	bl	800a574 <HAL_DMA_Abort_IT>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d04c      	beq.n	800cfc8 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf3c:	e044      	b.n	800cfc8 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf4c:	d123      	bne.n	800cf96 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf5c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d030      	beq.n	800cfc8 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6a:	4a1b      	ldr	r2, [pc, #108]	; (800cfd8 <I2C_ITError+0x17c>)
 800cf6c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fd fafa 	bl	800a574 <HAL_DMA_Abort_IT>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d020      	beq.n	800cfc8 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
}
 800cf94:	e018      	b.n	800cfc8 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b60      	cmp	r3, #96	; 0x60
 800cfa0:	d10b      	bne.n	800cfba <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7ff f90c 	bl	800c1d0 <HAL_I2C_AbortCpltCallback>
}
 800cfb8:	e006      	b.n	800cfc8 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff f8fa 	bl	800c1bc <HAL_I2C_ErrorCallback>
}
 800cfc8:	bf00      	nop
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	ffff0000 	.word	0xffff0000
 800cfd4:	0800c201 	.word	0x0800c201
 800cfd8:	0800d11f 	.word	0x0800d11f

0800cfdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	699b      	ldr	r3, [r3, #24]
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d103      	bne.n	800cffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2200      	movs	r2, #0
 800cff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	2b01      	cmp	r3, #1
 800d006:	d007      	beq.n	800d018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	699a      	ldr	r2, [r3, #24]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f042 0201 	orr.w	r2, r2, #1
 800d016:	619a      	str	r2, [r3, #24]
  }
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d03e:	d002      	beq.n	800d046 <I2C_DMASlaveTransmitCplt+0x22>
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d054:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff fcfd 	bl	800ca56 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d076:	60bb      	str	r3, [r7, #8]

  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10e      	bne.n	800d0a2 <I2C_DMASlaveReceiveCplt+0x3e>
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d08a:	d00a      	beq.n	800d0a2 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d09a:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff fcda 	bl	800ca56 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d007      	beq.n	800d0ec <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d101      	bne.n	800d0ec <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7fd fbed 	bl	800a8cc <HAL_DMA_GetError>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d00e      	beq.n	800d116 <I2C_DMAError+0x6c>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00b      	beq.n	800d116 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d10c:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d10e:	2110      	movs	r1, #16
 800d110:	68b8      	ldr	r0, [r7, #8]
 800d112:	f7ff fea3 	bl	800ce5c <I2C_ITError>
  }
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	2200      	movs	r2, #0
 800d132:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d138:	2200      	movs	r2, #0
 800d13a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b60      	cmp	r3, #96	; 0x60
 800d146:	d107      	bne.n	800d158 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2220      	movs	r2, #32
 800d14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff f83d 	bl	800c1d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d156:	e002      	b.n	800d15e <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7ff f82f 	bl	800c1bc <HAL_I2C_ErrorCallback>
}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	603b      	str	r3, [r7, #0]
 800d172:	4613      	mov	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d176:	e022      	b.n	800d1be <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17e:	d01e      	beq.n	800d1be <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d180:	f7fc fd7a 	bl	8009c78 <HAL_GetTick>
 800d184:	4602      	mov	r2, r0
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d302      	bcc.n	800d196 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d113      	bne.n	800d1be <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d19a:	f043 0220 	orr.w	r2, r3, #32
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2220      	movs	r2, #32
 800d1a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e00f      	b.n	800d1de <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	699a      	ldr	r2, [r3, #24]
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	bf0c      	ite	eq
 800d1ce:	2301      	moveq	r3, #1
 800d1d0:	2300      	movne	r3, #0
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	79fb      	ldrb	r3, [r7, #7]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d0cd      	beq.n	800d178 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	60f8      	str	r0, [r7, #12]
 800d1ee:	60b9      	str	r1, [r7, #8]
 800d1f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d1f2:	e02c      	b.n	800d24e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	68b9      	ldr	r1, [r7, #8]
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 f871 	bl	800d2e0 <I2C_IsAcknowledgeFailed>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e02a      	b.n	800d25e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20e:	d01e      	beq.n	800d24e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d210:	f7fc fd32 	bl	8009c78 <HAL_GetTick>
 800d214:	4602      	mov	r2, r0
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d302      	bcc.n	800d226 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d113      	bne.n	800d24e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d22a:	f043 0220 	orr.w	r2, r3, #32
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2220      	movs	r2, #32
 800d236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e007      	b.n	800d25e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d1cb      	bne.n	800d1f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	60f8      	str	r0, [r7, #12]
 800d26e:	60b9      	str	r1, [r7, #8]
 800d270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d272:	e028      	b.n	800d2c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	68b9      	ldr	r1, [r7, #8]
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 f831 	bl	800d2e0 <I2C_IsAcknowledgeFailed>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e026      	b.n	800d2d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d288:	f7fc fcf6 	bl	8009c78 <HAL_GetTick>
 800d28c:	4602      	mov	r2, r0
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	429a      	cmp	r2, r3
 800d296:	d302      	bcc.n	800d29e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d113      	bne.n	800d2c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a2:	f043 0220 	orr.w	r2, r3, #32
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e007      	b.n	800d2d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	699b      	ldr	r3, [r3, #24]
 800d2cc:	f003 0320 	and.w	r3, r3, #32
 800d2d0:	2b20      	cmp	r3, #32
 800d2d2:	d1cf      	bne.n	800d274 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
	...

0800d2e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	f003 0310 	and.w	r3, r3, #16
 800d2f6:	2b10      	cmp	r3, #16
 800d2f8:	d151      	bne.n	800d39e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d2fa:	e022      	b.n	800d342 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d302:	d01e      	beq.n	800d342 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d304:	f7fc fcb8 	bl	8009c78 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	429a      	cmp	r2, r3
 800d312:	d302      	bcc.n	800d31a <I2C_IsAcknowledgeFailed+0x3a>
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d113      	bne.n	800d342 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d31e:	f043 0220 	orr.w	r2, r3, #32
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2220      	movs	r2, #32
 800d32a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e02e      	b.n	800d3a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	f003 0320 	and.w	r3, r3, #32
 800d34c:	2b20      	cmp	r3, #32
 800d34e:	d1d5      	bne.n	800d2fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2210      	movs	r2, #16
 800d356:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2220      	movs	r2, #32
 800d35e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff fe3b 	bl	800cfdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	6859      	ldr	r1, [r3, #4]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <I2C_IsAcknowledgeFailed+0xc8>)
 800d372:	400b      	ands	r3, r1
 800d374:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37a:	f043 0204 	orr.w	r2, r3, #4
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2220      	movs	r2, #32
 800d386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e000      	b.n	800d3a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	fe00e800 	.word	0xfe00e800

0800d3ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	607b      	str	r3, [r7, #4]
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	817b      	strh	r3, [r7, #10]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	0d5b      	lsrs	r3, r3, #21
 800d3c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d3cc:	4b0d      	ldr	r3, [pc, #52]	; (800d404 <I2C_TransferConfig+0x58>)
 800d3ce:	430b      	orrs	r3, r1
 800d3d0:	43db      	mvns	r3, r3
 800d3d2:	ea02 0103 	and.w	r1, r2, r3
 800d3d6:	897b      	ldrh	r3, [r7, #10]
 800d3d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d3dc:	7a7b      	ldrb	r3, [r7, #9]
 800d3de:	041b      	lsls	r3, r3, #16
 800d3e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	431a      	orrs	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d3f6:	bf00      	nop
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	03ff63ff 	.word	0x03ff63ff

0800d408 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d414:	2300      	movs	r3, #0
 800d416:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41c:	4a2f      	ldr	r2, [pc, #188]	; (800d4dc <I2C_Enable_IRQ+0xd4>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d004      	beq.n	800d42c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800d426:	4a2e      	ldr	r2, [pc, #184]	; (800d4e0 <I2C_Enable_IRQ+0xd8>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d124      	bne.n	800d476 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d42c:	887b      	ldrh	r3, [r7, #2]
 800d42e:	f003 0304 	and.w	r3, r3, #4
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d43c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800d43e:	887b      	ldrh	r3, [r7, #2]
 800d440:	f003 0311 	and.w	r3, r3, #17
 800d444:	2b11      	cmp	r3, #17
 800d446:	d103      	bne.n	800d450 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d44e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800d450:	887b      	ldrh	r3, [r7, #2]
 800d452:	f003 0312 	and.w	r3, r3, #18
 800d456:	2b12      	cmp	r3, #18
 800d458:	d103      	bne.n	800d462 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f043 0320 	orr.w	r3, r3, #32
 800d460:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800d462:	887b      	ldrh	r3, [r7, #2]
 800d464:	f003 0312 	and.w	r3, r3, #18
 800d468:	2b12      	cmp	r3, #18
 800d46a:	d128      	bne.n	800d4be <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d472:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800d474:	e023      	b.n	800d4be <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d476:	887b      	ldrh	r3, [r7, #2]
 800d478:	f003 0304 	and.w	r3, r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d003      	beq.n	800d488 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d486:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d488:	887b      	ldrh	r3, [r7, #2]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d498:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d49a:	887b      	ldrh	r3, [r7, #2]
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d4aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800d4ac:	887b      	ldrh	r3, [r7, #2]
 800d4ae:	f003 0312 	and.w	r3, r3, #18
 800d4b2:	2b12      	cmp	r3, #18
 800d4b4:	d103      	bne.n	800d4be <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f043 0320 	orr.w	r3, r3, #32
 800d4bc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6819      	ldr	r1, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	601a      	str	r2, [r3, #0]
}
 800d4ce:	bf00      	nop
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	0800c40f 	.word	0x0800c40f
 800d4e0:	0800c5f5 	.word	0x0800c5f5

0800d4e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d4f4:	887b      	ldrh	r3, [r7, #2]
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00f      	beq.n	800d51e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d504:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d512:	2b28      	cmp	r3, #40	; 0x28
 800d514:	d003      	beq.n	800d51e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d51c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d51e:	887b      	ldrh	r3, [r7, #2]
 800d520:	f003 0302 	and.w	r3, r3, #2
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00f      	beq.n	800d548 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d52e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d536:	b2db      	uxtb	r3, r3
 800d538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d53c:	2b28      	cmp	r3, #40	; 0x28
 800d53e:	d003      	beq.n	800d548 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d546:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d548:	887b      	ldrh	r3, [r7, #2]
 800d54a:	f003 0304 	and.w	r3, r3, #4
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d558:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800d55a:	887b      	ldrh	r3, [r7, #2]
 800d55c:	f003 0311 	and.w	r3, r3, #17
 800d560:	2b11      	cmp	r3, #17
 800d562:	d103      	bne.n	800d56c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d56a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800d56c:	887b      	ldrh	r3, [r7, #2]
 800d56e:	f003 0312 	and.w	r3, r3, #18
 800d572:	2b12      	cmp	r3, #18
 800d574:	d103      	bne.n	800d57e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f043 0320 	orr.w	r3, r3, #32
 800d57c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800d57e:	887b      	ldrh	r3, [r7, #2]
 800d580:	f003 0312 	and.w	r3, r3, #18
 800d584:	2b12      	cmp	r3, #18
 800d586:	d103      	bne.n	800d590 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d58e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6819      	ldr	r1, [r3, #0]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	43da      	mvns	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	400a      	ands	r2, r1
 800d5a0:	601a      	str	r2, [r3, #0]
}
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b20      	cmp	r3, #32
 800d5c2:	d138      	bne.n	800d636 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d101      	bne.n	800d5d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	e032      	b.n	800d638 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2224      	movs	r2, #36	; 0x24
 800d5de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f022 0201 	bic.w	r2, r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d600:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6819      	ldr	r1, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f042 0201 	orr.w	r2, r2, #1
 800d620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2220      	movs	r2, #32
 800d626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	e000      	b.n	800d638 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d636:	2302      	movs	r3, #2
  }
}
 800d638:	4618      	mov	r0, r3
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b20      	cmp	r3, #32
 800d658:	d139      	bne.n	800d6ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d660:	2b01      	cmp	r3, #1
 800d662:	d101      	bne.n	800d668 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d664:	2302      	movs	r3, #2
 800d666:	e033      	b.n	800d6d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2224      	movs	r2, #36	; 0x24
 800d674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 0201 	bic.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d696:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	021b      	lsls	r3, r3, #8
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f042 0201 	orr.w	r2, r2, #1
 800d6b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e000      	b.n	800d6d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d6ce:	2302      	movs	r3, #2
  }
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d101      	bne.n	800d6ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e0bf      	b.n	800d86e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7f4 fa1c 	bl	8001b40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2202      	movs	r2, #2
 800d70c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	699a      	ldr	r2, [r3, #24]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d71e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6999      	ldr	r1, [r3, #24]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d734:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	430a      	orrs	r2, r1
 800d742:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	6899      	ldr	r1, [r3, #8]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	4b4a      	ldr	r3, [pc, #296]	; (800d878 <HAL_LTDC_Init+0x19c>)
 800d750:	400b      	ands	r3, r1
 800d752:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	041b      	lsls	r3, r3, #16
 800d75a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6899      	ldr	r1, [r3, #8]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	699a      	ldr	r2, [r3, #24]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	431a      	orrs	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	430a      	orrs	r2, r1
 800d770:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68d9      	ldr	r1, [r3, #12]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	4b3e      	ldr	r3, [pc, #248]	; (800d878 <HAL_LTDC_Init+0x19c>)
 800d77e:	400b      	ands	r3, r1
 800d780:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	69db      	ldr	r3, [r3, #28]
 800d786:	041b      	lsls	r3, r3, #16
 800d788:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68d9      	ldr	r1, [r3, #12]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a1a      	ldr	r2, [r3, #32]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	431a      	orrs	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	430a      	orrs	r2, r1
 800d79e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	6919      	ldr	r1, [r3, #16]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b33      	ldr	r3, [pc, #204]	; (800d878 <HAL_LTDC_Init+0x19c>)
 800d7ac:	400b      	ands	r3, r1
 800d7ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b4:	041b      	lsls	r3, r3, #16
 800d7b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6919      	ldr	r1, [r3, #16]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	431a      	orrs	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	6959      	ldr	r1, [r3, #20]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	4b27      	ldr	r3, [pc, #156]	; (800d878 <HAL_LTDC_Init+0x19c>)
 800d7da:	400b      	ands	r3, r1
 800d7dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e2:	041b      	lsls	r3, r3, #16
 800d7e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6959      	ldr	r1, [r3, #20]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	431a      	orrs	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	430a      	orrs	r2, r1
 800d7fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d802:	021b      	lsls	r3, r3, #8
 800d804:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d80c:	041b      	lsls	r3, r3, #16
 800d80e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d81e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d832:	431a      	orrs	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	430a      	orrs	r2, r1
 800d83a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f042 0206 	orr.w	r2, r2, #6
 800d84a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	699a      	ldr	r2, [r3, #24]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f042 0201 	orr.w	r2, r2, #1
 800d85a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	f000f800 	.word	0xf000f800

0800d87c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d892:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f003 0304 	and.w	r3, r3, #4
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d023      	beq.n	800d8e6 <HAL_LTDC_IRQHandler+0x6a>
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f003 0304 	and.w	r3, r3, #4
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d01e      	beq.n	800d8e6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f022 0204 	bic.w	r2, r2, #4
 800d8b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2204      	movs	r2, #4
 800d8be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8c6:	f043 0201 	orr.w	r2, r3, #1
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2204      	movs	r2, #4
 800d8d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 f86f 	bl	800d9c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f003 0302 	and.w	r3, r3, #2
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d023      	beq.n	800d938 <HAL_LTDC_IRQHandler+0xbc>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	f003 0302 	and.w	r3, r3, #2
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d01e      	beq.n	800d938 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f022 0202 	bic.w	r2, r2, #2
 800d908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2202      	movs	r2, #2
 800d910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d918:	f043 0202 	orr.w	r2, r3, #2
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2204      	movs	r2, #4
 800d926:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f846 	bl	800d9c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d01b      	beq.n	800d97a <HAL_LTDC_IRQHandler+0xfe>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d016      	beq.n	800d97a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f022 0201 	bic.w	r2, r2, #1
 800d95a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2201      	movs	r2, #1
 800d962:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7f6 fde1 	bl	800453c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f003 0308 	and.w	r3, r3, #8
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01b      	beq.n	800d9bc <HAL_LTDC_IRQHandler+0x140>
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	f003 0308 	and.w	r3, r3, #8
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d016      	beq.n	800d9bc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f022 0208 	bic.w	r2, r2, #8
 800d99c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f80e 	bl	800d9d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d9bc:	bf00      	nop
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d9ec:	b5b0      	push	{r4, r5, r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d101      	bne.n	800da06 <HAL_LTDC_ConfigLayer+0x1a>
 800da02:	2302      	movs	r3, #2
 800da04:	e02c      	b.n	800da60 <HAL_LTDC_ConfigLayer+0x74>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2202      	movs	r2, #2
 800da12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2134      	movs	r1, #52	; 0x34
 800da1c:	fb01 f303 	mul.w	r3, r1, r3
 800da20:	4413      	add	r3, r2
 800da22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	4614      	mov	r4, r2
 800da2a:	461d      	mov	r5, r3
 800da2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 f849 	bl	800dad8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2201      	movs	r2, #1
 800da4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2201      	movs	r2, #1
 800da52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bdb0      	pop	{r4, r5, r7, pc}

0800da68 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d101      	bne.n	800da80 <HAL_LTDC_ProgramLineEvent+0x18>
 800da7c:	2302      	movs	r3, #2
 800da7e:	e023      	b.n	800dac8 <HAL_LTDC_ProgramLineEvent+0x60>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f022 0201 	bic.w	r2, r2, #1
 800da9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800daa0:	4a0c      	ldr	r2, [pc, #48]	; (800dad4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0201 	orr.w	r2, r2, #1
 800dab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	40016800 	.word	0x40016800

0800dad8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dad8:	b480      	push	{r7}
 800dada:	b089      	sub	sp, #36	; 0x24
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	685a      	ldr	r2, [r3, #4]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800daf4:	4413      	add	r3, r2
 800daf6:	041b      	lsls	r3, r3, #16
 800daf8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	461a      	mov	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	01db      	lsls	r3, r3, #7
 800db04:	4413      	add	r3, r2
 800db06:	3384      	adds	r3, #132	; 0x84
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	6812      	ldr	r2, [r2, #0]
 800db0e:	4611      	mov	r1, r2
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	01d2      	lsls	r2, r2, #7
 800db14:	440a      	add	r2, r1
 800db16:	3284      	adds	r2, #132	; 0x84
 800db18:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800db1c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	0c1b      	lsrs	r3, r3, #16
 800db2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db2e:	4413      	add	r3, r2
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4619      	mov	r1, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	01db      	lsls	r3, r3, #7
 800db3c:	440b      	add	r3, r1
 800db3e:	3384      	adds	r3, #132	; 0x84
 800db40:	4619      	mov	r1, r3
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	4313      	orrs	r3, r2
 800db46:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	68da      	ldr	r2, [r3, #12]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db56:	4413      	add	r3, r2
 800db58:	041b      	lsls	r3, r3, #16
 800db5a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	461a      	mov	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	01db      	lsls	r3, r3, #7
 800db66:	4413      	add	r3, r2
 800db68:	3384      	adds	r3, #132	; 0x84
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	6812      	ldr	r2, [r2, #0]
 800db70:	4611      	mov	r1, r2
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	01d2      	lsls	r2, r2, #7
 800db76:	440a      	add	r2, r1
 800db78:	3284      	adds	r2, #132	; 0x84
 800db7a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800db7e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db8e:	4413      	add	r3, r2
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4619      	mov	r1, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	01db      	lsls	r3, r3, #7
 800db9c:	440b      	add	r3, r1
 800db9e:	3384      	adds	r3, #132	; 0x84
 800dba0:	4619      	mov	r1, r3
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	461a      	mov	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	01db      	lsls	r3, r3, #7
 800dbb2:	4413      	add	r3, r2
 800dbb4:	3384      	adds	r3, #132	; 0x84
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	6812      	ldr	r2, [r2, #0]
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	01d2      	lsls	r2, r2, #7
 800dbc2:	440a      	add	r2, r1
 800dbc4:	3284      	adds	r2, #132	; 0x84
 800dbc6:	f023 0307 	bic.w	r3, r3, #7
 800dbca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	01db      	lsls	r3, r3, #7
 800dbd6:	4413      	add	r3, r2
 800dbd8:	3384      	adds	r3, #132	; 0x84
 800dbda:	461a      	mov	r2, r3
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dbe8:	021b      	lsls	r3, r3, #8
 800dbea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dbf2:	041b      	lsls	r3, r3, #16
 800dbf4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	061b      	lsls	r3, r3, #24
 800dbfc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	461a      	mov	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	01db      	lsls	r3, r3, #7
 800dc08:	4413      	add	r3, r2
 800dc0a:	3384      	adds	r3, #132	; 0x84
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	01db      	lsls	r3, r3, #7
 800dc18:	4413      	add	r3, r2
 800dc1a:	3384      	adds	r3, #132	; 0x84
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	2300      	movs	r3, #0
 800dc20:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc28:	461a      	mov	r2, r3
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	431a      	orrs	r2, r3
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4619      	mov	r1, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	01db      	lsls	r3, r3, #7
 800dc3c:	440b      	add	r3, r1
 800dc3e:	3384      	adds	r3, #132	; 0x84
 800dc40:	4619      	mov	r1, r3
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	01db      	lsls	r3, r3, #7
 800dc52:	4413      	add	r3, r2
 800dc54:	3384      	adds	r3, #132	; 0x84
 800dc56:	695b      	ldr	r3, [r3, #20]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	6812      	ldr	r2, [r2, #0]
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	01d2      	lsls	r2, r2, #7
 800dc62:	440a      	add	r2, r1
 800dc64:	3284      	adds	r2, #132	; 0x84
 800dc66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc6a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	461a      	mov	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	01db      	lsls	r3, r3, #7
 800dc76:	4413      	add	r3, r2
 800dc78:	3384      	adds	r3, #132	; 0x84
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	01db      	lsls	r3, r3, #7
 800dc8c:	4413      	add	r3, r2
 800dc8e:	3384      	adds	r3, #132	; 0x84
 800dc90:	69da      	ldr	r2, [r3, #28]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4619      	mov	r1, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	01db      	lsls	r3, r3, #7
 800dc9c:	440b      	add	r3, r1
 800dc9e:	3384      	adds	r3, #132	; 0x84
 800dca0:	4619      	mov	r1, r3
 800dca2:	4b58      	ldr	r3, [pc, #352]	; (800de04 <LTDC_SetConfig+0x32c>)
 800dca4:	4013      	ands	r3, r2
 800dca6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	69da      	ldr	r2, [r3, #28]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	6a1b      	ldr	r3, [r3, #32]
 800dcb0:	68f9      	ldr	r1, [r7, #12]
 800dcb2:	6809      	ldr	r1, [r1, #0]
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	6879      	ldr	r1, [r7, #4]
 800dcb8:	01c9      	lsls	r1, r1, #7
 800dcba:	4401      	add	r1, r0
 800dcbc:	3184      	adds	r1, #132	; 0x84
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	01db      	lsls	r3, r3, #7
 800dccc:	4413      	add	r3, r2
 800dcce:	3384      	adds	r3, #132	; 0x84
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	01db      	lsls	r3, r3, #7
 800dcdc:	4413      	add	r3, r2
 800dcde:	3384      	adds	r3, #132	; 0x84
 800dce0:	461a      	mov	r2, r3
 800dce2:	2300      	movs	r3, #0
 800dce4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	01db      	lsls	r3, r3, #7
 800dcf0:	4413      	add	r3, r2
 800dcf2:	3384      	adds	r3, #132	; 0x84
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800dd04:	2304      	movs	r3, #4
 800dd06:	61fb      	str	r3, [r7, #28]
 800dd08:	e01b      	b.n	800dd42 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d102      	bne.n	800dd18 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800dd12:	2303      	movs	r3, #3
 800dd14:	61fb      	str	r3, [r7, #28]
 800dd16:	e014      	b.n	800dd42 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d00b      	beq.n	800dd38 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d007      	beq.n	800dd38 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d003      	beq.n	800dd38 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800dd34:	2b07      	cmp	r3, #7
 800dd36:	d102      	bne.n	800dd3e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800dd38:	2302      	movs	r3, #2
 800dd3a:	61fb      	str	r3, [r7, #28]
 800dd3c:	e001      	b.n	800dd42 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	01db      	lsls	r3, r3, #7
 800dd4c:	4413      	add	r3, r2
 800dd4e:	3384      	adds	r3, #132	; 0x84
 800dd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	4611      	mov	r1, r2
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	01d2      	lsls	r2, r2, #7
 800dd5c:	440a      	add	r2, r1
 800dd5e:	3284      	adds	r2, #132	; 0x84
 800dd60:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800dd64:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6a:	69fa      	ldr	r2, [r7, #28]
 800dd6c:	fb02 f303 	mul.w	r3, r2, r3
 800dd70:	041a      	lsls	r2, r3, #16
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	6859      	ldr	r1, [r3, #4]
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	1acb      	subs	r3, r1, r3
 800dd7c:	69f9      	ldr	r1, [r7, #28]
 800dd7e:	fb01 f303 	mul.w	r3, r1, r3
 800dd82:	3303      	adds	r3, #3
 800dd84:	68f9      	ldr	r1, [r7, #12]
 800dd86:	6809      	ldr	r1, [r1, #0]
 800dd88:	4608      	mov	r0, r1
 800dd8a:	6879      	ldr	r1, [r7, #4]
 800dd8c:	01c9      	lsls	r1, r1, #7
 800dd8e:	4401      	add	r1, r0
 800dd90:	3184      	adds	r1, #132	; 0x84
 800dd92:	4313      	orrs	r3, r2
 800dd94:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	01db      	lsls	r3, r3, #7
 800dda0:	4413      	add	r3, r2
 800dda2:	3384      	adds	r3, #132	; 0x84
 800dda4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	01db      	lsls	r3, r3, #7
 800ddb0:	440b      	add	r3, r1
 800ddb2:	3384      	adds	r3, #132	; 0x84
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <LTDC_SetConfig+0x330>)
 800ddb8:	4013      	ands	r3, r2
 800ddba:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	01db      	lsls	r3, r3, #7
 800ddc6:	4413      	add	r3, r2
 800ddc8:	3384      	adds	r3, #132	; 0x84
 800ddca:	461a      	mov	r2, r3
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	01db      	lsls	r3, r3, #7
 800dddc:	4413      	add	r3, r2
 800ddde:	3384      	adds	r3, #132	; 0x84
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	6812      	ldr	r2, [r2, #0]
 800dde6:	4611      	mov	r1, r2
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	01d2      	lsls	r2, r2, #7
 800ddec:	440a      	add	r2, r1
 800ddee:	3284      	adds	r2, #132	; 0x84
 800ddf0:	f043 0301 	orr.w	r3, r3, #1
 800ddf4:	6013      	str	r3, [r2, #0]
}
 800ddf6:	bf00      	nop
 800ddf8:	3724      	adds	r7, #36	; 0x24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	fffff8f8 	.word	0xfffff8f8
 800de08:	fffff800 	.word	0xfffff800

0800de0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800de16:	4b23      	ldr	r3, [pc, #140]	; (800dea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800de18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1a:	4a22      	ldr	r2, [pc, #136]	; (800dea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800de1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de20:	6413      	str	r3, [r2, #64]	; 0x40
 800de22:	4b20      	ldr	r3, [pc, #128]	; (800dea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800de24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de2a:	603b      	str	r3, [r7, #0]
 800de2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800de2e:	4b1e      	ldr	r3, [pc, #120]	; (800dea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4a1d      	ldr	r2, [pc, #116]	; (800dea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de3a:	f7fb ff1d 	bl	8009c78 <HAL_GetTick>
 800de3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800de40:	e009      	b.n	800de56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800de42:	f7fb ff19 	bl	8009c78 <HAL_GetTick>
 800de46:	4602      	mov	r2, r0
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	1ad3      	subs	r3, r2, r3
 800de4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de50:	d901      	bls.n	800de56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e022      	b.n	800de9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800de56:	4b14      	ldr	r3, [pc, #80]	; (800dea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de62:	d1ee      	bne.n	800de42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800de64:	4b10      	ldr	r3, [pc, #64]	; (800dea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a0f      	ldr	r2, [pc, #60]	; (800dea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de70:	f7fb ff02 	bl	8009c78 <HAL_GetTick>
 800de74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800de76:	e009      	b.n	800de8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800de78:	f7fb fefe 	bl	8009c78 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de86:	d901      	bls.n	800de8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800de88:	2303      	movs	r3, #3
 800de8a:	e007      	b.n	800de9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800de8c:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de98:	d1ee      	bne.n	800de78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	40023800 	.word	0x40023800
 800dea8:	40007000 	.word	0x40007000

0800deac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800deb8:	f7fb fede 	bl	8009c78 <HAL_GetTick>
 800debc:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e073      	b.n	800dfb0 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d101      	bne.n	800ded8 <HAL_QSPI_Init+0x2c>
 800ded4:	2302      	movs	r3, #2
 800ded6:	e06b      	b.n	800dfb0 <HAL_QSPI_Init+0x104>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10b      	bne.n	800df04 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7f3 feeb 	bl	8001cd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800defa:	f241 3188 	movw	r1, #5000	; 0x1388
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 fb65 	bl	800e5ce <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	3b01      	subs	r3, #1
 800df14:	021a      	lsls	r2, r3, #8
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	430a      	orrs	r2, r1
 800df1c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2200      	movs	r2, #0
 800df28:	2120      	movs	r1, #32
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fb5d 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800df30:	4603      	mov	r3, r0
 800df32:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800df34:	7bfb      	ldrb	r3, [r7, #15]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d135      	bne.n	800dfa6 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	4b1d      	ldr	r3, [pc, #116]	; (800dfb8 <HAL_QSPI_Init+0x10c>)
 800df42:	4013      	ands	r3, r2
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	6852      	ldr	r2, [r2, #4]
 800df48:	0611      	lsls	r1, r2, #24
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	68d2      	ldr	r2, [r2, #12]
 800df4e:	4311      	orrs	r1, r2
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	69d2      	ldr	r2, [r2, #28]
 800df54:	4311      	orrs	r1, r2
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	6a12      	ldr	r2, [r2, #32]
 800df5a:	4311      	orrs	r1, r2
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	6812      	ldr	r2, [r2, #0]
 800df60:	430b      	orrs	r3, r1
 800df62:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	685a      	ldr	r2, [r3, #4]
 800df6a:	4b14      	ldr	r3, [pc, #80]	; (800dfbc <HAL_QSPI_Init+0x110>)
 800df6c:	4013      	ands	r3, r2
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	6912      	ldr	r2, [r2, #16]
 800df72:	0411      	lsls	r1, r2, #16
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	6952      	ldr	r2, [r2, #20]
 800df78:	4311      	orrs	r1, r2
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	6992      	ldr	r2, [r2, #24]
 800df7e:	4311      	orrs	r1, r2
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	6812      	ldr	r2, [r2, #0]
 800df84:	430b      	orrs	r3, r1
 800df86:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f042 0201 	orr.w	r2, r2, #1
 800df96:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800dfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	00ffff2f 	.word	0x00ffff2f
 800dfbc:	ffe0f8fe 	.word	0xffe0f8fe

0800dfc0 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d101      	bne.n	800dfd2 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e022      	b.n	800e018 <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d101      	bne.n	800dfe2 <HAL_QSPI_DeInit+0x22>
 800dfde:	2302      	movs	r3, #2
 800dfe0:	e01a      	b.n	800e018 <HAL_QSPI_DeInit+0x58>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f022 0201 	bic.w	r2, r2, #1
 800dff8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7f3 fef8 	bl	8001df0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b088      	sub	sp, #32
 800e024:	af02      	add	r7, sp, #8
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 800e030:	f7fb fe22 	bl	8009c78 <HAL_GetTick>
 800e034:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d101      	bne.n	800e046 <HAL_QSPI_Command+0x26>
 800e042:	2302      	movs	r3, #2
 800e044:	e048      	b.n	800e0d8 <HAL_QSPI_Command+0xb8>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b01      	cmp	r3, #1
 800e058:	d137      	bne.n	800e0ca <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2202      	movs	r2, #2
 800e064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2200      	movs	r2, #0
 800e070:	2120      	movs	r1, #32
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f000 fab9 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e078:	4603      	mov	r3, r0
 800e07a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800e07c:	7dfb      	ldrb	r3, [r7, #23]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d125      	bne.n	800e0ce <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e082:	2200      	movs	r2, #0
 800e084:	68b9      	ldr	r1, [r7, #8]
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f000 fae6 	bl	800e658 <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e090:	2b00      	cmp	r3, #0
 800e092:	d115      	bne.n	800e0c0 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2201      	movs	r2, #1
 800e09c:	2102      	movs	r1, #2
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f000 faa3 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e0a8:	7dfb      	ldrb	r3, [r7, #23]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10f      	bne.n	800e0ce <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0be:	e006      	b.n	800e0ce <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0c8:	e001      	b.n	800e0ce <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800e0ca:	2302      	movs	r3, #2
 800e0cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3718      	adds	r7, #24
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08a      	sub	sp, #40	; 0x28
 800e0e4:	af02      	add	r7, sp, #8
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e0f0:	f7fb fdc2 	bl	8009c78 <HAL_GetTick>
 800e0f4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3320      	adds	r3, #32
 800e0fc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b01      	cmp	r3, #1
 800e108:	d101      	bne.n	800e10e <HAL_QSPI_Transmit+0x2e>
 800e10a:	2302      	movs	r3, #2
 800e10c:	e079      	b.n	800e202 <HAL_QSPI_Transmit+0x122>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d168      	bne.n	800e1f4 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2200      	movs	r2, #0
 800e126:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d059      	beq.n	800e1e2 <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2212      	movs	r2, #18
 800e132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	1c5a      	adds	r2, r3, #1
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	695a      	ldr	r2, [r3, #20]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e162:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 800e164:	e019      	b.n	800e19a <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	2201      	movs	r2, #1
 800e16e:	2104      	movs	r1, #4
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 fa3a 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e176:	4603      	mov	r3, r0
 800e178:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e17a:	7ffb      	ldrb	r3, [r7, #31]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d111      	bne.n	800e1a4 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	1c59      	adds	r1, r3, #1
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	6251      	str	r1, [r2, #36]	; 0x24
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	1e5a      	subs	r2, r3, #1
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e1      	bne.n	800e166 <HAL_QSPI_Transmit+0x86>
 800e1a2:	e000      	b.n	800e1a6 <HAL_QSPI_Transmit+0xc6>
          break;
 800e1a4:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800e1a6:	7ffb      	ldrb	r3, [r7, #31]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d115      	bne.n	800e1d8 <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	2102      	movs	r1, #2
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 fa17 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e1c0:	7ffb      	ldrb	r3, [r7, #31]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d108      	bne.n	800e1d8 <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 f998 	bl	800e504 <HAL_QSPI_Abort>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1e0:	e00a      	b.n	800e1f8 <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e6:	f043 0208 	orr.w	r2, r3, #8
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	77fb      	strb	r3, [r7, #31]
 800e1f2:	e001      	b.n	800e1f8 <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e200:	7ffb      	ldrb	r3, [r7, #31]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3720      	adds	r7, #32
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b08a      	sub	sp, #40	; 0x28
 800e20e:	af02      	add	r7, sp, #8
 800e210:	60f8      	str	r0, [r7, #12]
 800e212:	60b9      	str	r1, [r7, #8]
 800e214:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e21a:	f7fb fd2d 	bl	8009c78 <HAL_GetTick>
 800e21e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3320      	adds	r3, #32
 800e22e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d101      	bne.n	800e240 <HAL_QSPI_Receive+0x36>
 800e23c:	2302      	movs	r3, #2
 800e23e:	e080      	b.n	800e342 <HAL_QSPI_Receive+0x138>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b01      	cmp	r3, #1
 800e252:	d16f      	bne.n	800e334 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d060      	beq.n	800e322 <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2222      	movs	r2, #34	; 0x22
 800e264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e298:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 800e2a2:	e01a      	b.n	800e2da <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	2106      	movs	r1, #6
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f000 f99b 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e2b8:	7ffb      	ldrb	r3, [r7, #31]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d112      	bne.n	800e2e4 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c2:	1c59      	adds	r1, r3, #1
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	6311      	str	r1, [r2, #48]	; 0x30
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	7812      	ldrb	r2, [r2, #0]
 800e2cc:	b2d2      	uxtb	r2, r2
 800e2ce:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d4:	1e5a      	subs	r2, r3, #1
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1e0      	bne.n	800e2a4 <HAL_QSPI_Receive+0x9a>
 800e2e2:	e000      	b.n	800e2e6 <HAL_QSPI_Receive+0xdc>
          break;
 800e2e4:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800e2e6:	7ffb      	ldrb	r3, [r7, #31]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d115      	bne.n	800e318 <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	2102      	movs	r1, #2
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f000 f977 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e300:	7ffb      	ldrb	r3, [r7, #31]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d108      	bne.n	800e318 <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2202      	movs	r2, #2
 800e30c:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f000 f8f8 	bl	800e504 <HAL_QSPI_Abort>
 800e314:	4603      	mov	r3, r0
 800e316:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e320:	e00a      	b.n	800e338 <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e326:	f043 0208 	orr.w	r2, r3, #8
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	77fb      	strb	r3, [r7, #31]
 800e332:	e001      	b.n	800e338 <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e334:	2302      	movs	r3, #2
 800e336:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e340:	7ffb      	ldrb	r3, [r7, #31]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3720      	adds	r7, #32
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b088      	sub	sp, #32
 800e34e:	af02      	add	r7, sp, #8
 800e350:	60f8      	str	r0, [r7, #12]
 800e352:	60b9      	str	r1, [r7, #8]
 800e354:	607a      	str	r2, [r7, #4]
 800e356:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 800e35c:	f7fb fc8c 	bl	8009c78 <HAL_GetTick>
 800e360:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d101      	bne.n	800e372 <HAL_QSPI_AutoPolling+0x28>
 800e36e:	2302      	movs	r3, #2
 800e370:	e060      	b.n	800e434 <HAL_QSPI_AutoPolling+0xea>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2201      	movs	r2, #1
 800e376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b01      	cmp	r3, #1
 800e384:	d14f      	bne.n	800e426 <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2242      	movs	r2, #66	; 0x42
 800e390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	2200      	movs	r2, #0
 800e39c:	2120      	movs	r1, #32
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f000 f923 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d13d      	bne.n	800e42a <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	6812      	ldr	r2, [r2, #0]
 800e3b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	6852      	ldr	r2, [r2, #4]
 800e3c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	6892      	ldr	r2, [r2, #8]
 800e3ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e3e4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	68da      	ldr	r2, [r3, #12]
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e3ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e3f2:	68b9      	ldr	r1, [r7, #8]
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f000 f92f 	bl	800e658 <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2201      	movs	r2, #1
 800e402:	2108      	movs	r1, #8
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f000 f8f0 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e40a:	4603      	mov	r3, r0
 800e40c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d10a      	bne.n	800e42a <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2208      	movs	r2, #8
 800e41a:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e424:	e001      	b.n	800e42a <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800e426:	2302      	movs	r3, #2
 800e428:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 800e432:	7dfb      	ldrb	r3, [r7, #23]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b088      	sub	sp, #32
 800e440:	af02      	add	r7, sp, #8
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 800e44c:	f7fb fc14 	bl	8009c78 <HAL_GetTick>
 800e450:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d101      	bne.n	800e462 <HAL_QSPI_MemoryMapped+0x26>
 800e45e:	2302      	movs	r3, #2
 800e460:	e04c      	b.n	800e4fc <HAL_QSPI_MemoryMapped+0xc0>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b01      	cmp	r3, #1
 800e474:	d13b      	bne.n	800e4ee <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2200      	movs	r2, #0
 800e47a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2282      	movs	r2, #130	; 0x82
 800e480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	2200      	movs	r2, #0
 800e48e:	2120      	movs	r1, #32
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f000 f8aa 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e496:	4603      	mov	r3, r0
 800e498:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d128      	bne.n	800e4f2 <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f023 0108 	bic.w	r1, r3, #8
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	430a      	orrs	r2, r1
 800e4b4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	2b08      	cmp	r3, #8
 800e4bc:	d110      	bne.n	800e4e0 <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	6812      	ldr	r2, [r2, #0]
 800e4c6:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2210      	movs	r2, #16
 800e4ce:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e4de:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800e4e0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e4e4:	68b9      	ldr	r1, [r7, #8]
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f000 f8b6 	bl	800e658 <QSPI_Config>
 800e4ec:	e001      	b.n	800e4f2 <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 800e4ee:	2302      	movs	r3, #2
 800e4f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3718      	adds	r7, #24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af02      	add	r7, sp, #8
 800e50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800e510:	f7fb fbb2 	bl	8009c78 <HAL_GetTick>
 800e514:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d04e      	beq.n	800e5c4 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f003 0304 	and.w	r3, r3, #4
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d017      	beq.n	800e56c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f022 0204 	bic.w	r2, r2, #4
 800e54a:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e550:	4618      	mov	r0, r3
 800e552:	f7fb ff9f 	bl	800a494 <HAL_DMA_Abort>
 800e556:	4603      	mov	r3, r0
 800e558:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e564:	f043 0204 	orr.w	r2, r3, #4
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f042 0202 	orr.w	r2, r2, #2
 800e57a:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	2201      	movs	r2, #1
 800e586:	2102      	movs	r1, #2
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f82e 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e58e:	4603      	mov	r3, r0
 800e590:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10e      	bne.n	800e5b6 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2202      	movs	r2, #2
 800e59e:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	2120      	movs	r1, #32
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f81c 	bl	800e5ea <QSPI_WaitFlagStateUntilTimeout>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d103      	bne.n	800e5c4 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e5ce:	b480      	push	{r7}
 800e5d0:	b083      	sub	sp, #12
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	649a      	str	r2, [r3, #72]	; 0x48
}
 800e5de:	bf00      	nop
 800e5e0:	370c      	adds	r7, #12
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr

0800e5ea <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b084      	sub	sp, #16
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	60f8      	str	r0, [r7, #12]
 800e5f2:	60b9      	str	r1, [r7, #8]
 800e5f4:	603b      	str	r3, [r7, #0]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e5fa:	e01a      	b.n	800e632 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e602:	d016      	beq.n	800e632 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d007      	beq.n	800e61a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e60a:	f7fb fb35 	bl	8009c78 <HAL_GetTick>
 800e60e:	4602      	mov	r2, r0
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	69ba      	ldr	r2, [r7, #24]
 800e616:	429a      	cmp	r2, r3
 800e618:	d20b      	bcs.n	800e632 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2204      	movs	r2, #4
 800e61e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e626:	f043 0201 	orr.w	r2, r3, #1
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	e00e      	b.n	800e650 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689a      	ldr	r2, [r3, #8]
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	4013      	ands	r3, r2
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	bf14      	ite	ne
 800e640:	2301      	movne	r3, #1
 800e642:	2300      	moveq	r3, #0
 800e644:	b2db      	uxtb	r3, r3
 800e646:	461a      	mov	r2, r3
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d1d6      	bne.n	800e5fc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d009      	beq.n	800e680 <QSPI_Config+0x28>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e672:	d005      	beq.n	800e680 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3a01      	subs	r2, #1
 800e67e:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 80b9 	beq.w	800e7fc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	6a1b      	ldr	r3, [r3, #32]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d05f      	beq.n	800e752 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	6892      	ldr	r2, [r2, #8]
 800e69a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	69db      	ldr	r3, [r3, #28]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d031      	beq.n	800e708 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ac:	431a      	orrs	r2, r3
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b8:	431a      	orrs	r2, r3
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	049b      	lsls	r3, r3, #18
 800e6c0:	431a      	orrs	r2, r3
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	6a1b      	ldr	r3, [r3, #32]
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	431a      	orrs	r2, r3
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	69db      	ldr	r3, [r3, #28]
 800e6d8:	431a      	orrs	r2, r3
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	699b      	ldr	r3, [r3, #24]
 800e6de:	431a      	orrs	r2, r3
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	ea42 0103 	orr.w	r1, r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	430a      	orrs	r2, r1
 800e6f0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e6f8:	f000 812e 	beq.w	800e958 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	6852      	ldr	r2, [r2, #4]
 800e704:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e706:	e127      	b.n	800e958 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e710:	431a      	orrs	r2, r3
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e716:	431a      	orrs	r2, r3
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71c:	431a      	orrs	r2, r3
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	049b      	lsls	r3, r3, #18
 800e724:	431a      	orrs	r2, r3
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	431a      	orrs	r2, r3
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	6a1b      	ldr	r3, [r3, #32]
 800e730:	431a      	orrs	r2, r3
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	69db      	ldr	r3, [r3, #28]
 800e736:	431a      	orrs	r2, r3
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	699b      	ldr	r3, [r3, #24]
 800e73c:	431a      	orrs	r2, r3
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	ea42 0103 	orr.w	r1, r2, r3
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	430a      	orrs	r2, r1
 800e74e:	615a      	str	r2, [r3, #20]
}
 800e750:	e102      	b.n	800e958 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	69db      	ldr	r3, [r3, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d02e      	beq.n	800e7b8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e762:	431a      	orrs	r2, r3
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e768:	431a      	orrs	r2, r3
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	431a      	orrs	r2, r3
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	049b      	lsls	r3, r3, #18
 800e776:	431a      	orrs	r2, r3
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	6a1b      	ldr	r3, [r3, #32]
 800e77c:	431a      	orrs	r2, r3
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	431a      	orrs	r2, r3
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	69db      	ldr	r3, [r3, #28]
 800e788:	431a      	orrs	r2, r3
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	431a      	orrs	r2, r3
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	ea42 0103 	orr.w	r1, r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e7a8:	f000 80d6 	beq.w	800e958 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	6852      	ldr	r2, [r2, #4]
 800e7b4:	619a      	str	r2, [r3, #24]
}
 800e7b6:	e0cf      	b.n	800e958 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c0:	431a      	orrs	r2, r3
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7cc:	431a      	orrs	r2, r3
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	049b      	lsls	r3, r3, #18
 800e7d4:	431a      	orrs	r2, r3
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	431a      	orrs	r2, r3
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	69db      	ldr	r3, [r3, #28]
 800e7e0:	431a      	orrs	r2, r3
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	431a      	orrs	r2, r3
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	ea42 0103 	orr.w	r1, r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	430a      	orrs	r2, r1
 800e7f8:	615a      	str	r2, [r3, #20]
}
 800e7fa:	e0ad      	b.n	800e958 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	6a1b      	ldr	r3, [r3, #32]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d058      	beq.n	800e8b6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	6892      	ldr	r2, [r2, #8]
 800e80c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	69db      	ldr	r3, [r3, #28]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d02d      	beq.n	800e872 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81e:	431a      	orrs	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e824:	431a      	orrs	r2, r3
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82a:	431a      	orrs	r2, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	695b      	ldr	r3, [r3, #20]
 800e830:	049b      	lsls	r3, r3, #18
 800e832:	431a      	orrs	r2, r3
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	431a      	orrs	r2, r3
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	431a      	orrs	r2, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	431a      	orrs	r2, r3
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	431a      	orrs	r2, r3
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	ea42 0103 	orr.w	r1, r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	430a      	orrs	r2, r1
 800e85c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e864:	d078      	beq.n	800e958 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	6852      	ldr	r2, [r2, #4]
 800e86e:	619a      	str	r2, [r3, #24]
}
 800e870:	e072      	b.n	800e958 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87a:	431a      	orrs	r2, r3
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e880:	431a      	orrs	r2, r3
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e886:	431a      	orrs	r2, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	049b      	lsls	r3, r3, #18
 800e88e:	431a      	orrs	r2, r3
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	431a      	orrs	r2, r3
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	431a      	orrs	r2, r3
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	69db      	ldr	r3, [r3, #28]
 800e8a0:	431a      	orrs	r2, r3
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	ea42 0103 	orr.w	r1, r2, r3
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	430a      	orrs	r2, r1
 800e8b2:	615a      	str	r2, [r3, #20]
}
 800e8b4:	e050      	b.n	800e958 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	69db      	ldr	r3, [r3, #28]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d02a      	beq.n	800e914 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c6:	431a      	orrs	r2, r3
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d2:	431a      	orrs	r2, r3
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	695b      	ldr	r3, [r3, #20]
 800e8d8:	049b      	lsls	r3, r3, #18
 800e8da:	431a      	orrs	r2, r3
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	6a1b      	ldr	r3, [r3, #32]
 800e8e0:	431a      	orrs	r2, r3
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	431a      	orrs	r2, r3
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	431a      	orrs	r2, r3
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	ea42 0103 	orr.w	r1, r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e906:	d027      	beq.n	800e958 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	6852      	ldr	r2, [r2, #4]
 800e910:	619a      	str	r2, [r3, #24]
}
 800e912:	e021      	b.n	800e958 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d01d      	beq.n	800e958 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e924:	431a      	orrs	r2, r3
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92a:	431a      	orrs	r2, r3
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	431a      	orrs	r2, r3
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	049b      	lsls	r3, r3, #18
 800e938:	431a      	orrs	r2, r3
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	431a      	orrs	r2, r3
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	431a      	orrs	r2, r3
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	ea42 0103 	orr.w	r1, r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	430a      	orrs	r2, r1
 800e956:	615a      	str	r2, [r3, #20]
}
 800e958:	bf00      	nop
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800e96c:	2300      	movs	r3, #0
 800e96e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d101      	bne.n	800e97a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	e25c      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f003 0301 	and.w	r3, r3, #1
 800e982:	2b00      	cmp	r3, #0
 800e984:	f000 8087 	beq.w	800ea96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e988:	4b96      	ldr	r3, [pc, #600]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	f003 030c 	and.w	r3, r3, #12
 800e990:	2b04      	cmp	r3, #4
 800e992:	d00c      	beq.n	800e9ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e994:	4b93      	ldr	r3, [pc, #588]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f003 030c 	and.w	r3, r3, #12
 800e99c:	2b08      	cmp	r3, #8
 800e99e:	d112      	bne.n	800e9c6 <HAL_RCC_OscConfig+0x62>
 800e9a0:	4b90      	ldr	r3, [pc, #576]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9ac:	d10b      	bne.n	800e9c6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9ae:	4b8d      	ldr	r3, [pc, #564]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d06c      	beq.n	800ea94 <HAL_RCC_OscConfig+0x130>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d168      	bne.n	800ea94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e236      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9ce:	d106      	bne.n	800e9de <HAL_RCC_OscConfig+0x7a>
 800e9d0:	4b84      	ldr	r3, [pc, #528]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a83      	ldr	r2, [pc, #524]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9da:	6013      	str	r3, [r2, #0]
 800e9dc:	e02e      	b.n	800ea3c <HAL_RCC_OscConfig+0xd8>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10c      	bne.n	800ea00 <HAL_RCC_OscConfig+0x9c>
 800e9e6:	4b7f      	ldr	r3, [pc, #508]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a7e      	ldr	r2, [pc, #504]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9f0:	6013      	str	r3, [r2, #0]
 800e9f2:	4b7c      	ldr	r3, [pc, #496]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a7b      	ldr	r2, [pc, #492]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800e9f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	e01d      	b.n	800ea3c <HAL_RCC_OscConfig+0xd8>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ea08:	d10c      	bne.n	800ea24 <HAL_RCC_OscConfig+0xc0>
 800ea0a:	4b76      	ldr	r3, [pc, #472]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a75      	ldr	r2, [pc, #468]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	4b73      	ldr	r3, [pc, #460]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a72      	ldr	r2, [pc, #456]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	e00b      	b.n	800ea3c <HAL_RCC_OscConfig+0xd8>
 800ea24:	4b6f      	ldr	r3, [pc, #444]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a6e      	ldr	r2, [pc, #440]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	4b6c      	ldr	r3, [pc, #432]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a6b      	ldr	r2, [pc, #428]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d013      	beq.n	800ea6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea44:	f7fb f918 	bl	8009c78 <HAL_GetTick>
 800ea48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea4a:	e008      	b.n	800ea5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ea4c:	f7fb f914 	bl	8009c78 <HAL_GetTick>
 800ea50:	4602      	mov	r2, r0
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	1ad3      	subs	r3, r2, r3
 800ea56:	2b64      	cmp	r3, #100	; 0x64
 800ea58:	d901      	bls.n	800ea5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	e1ea      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea5e:	4b61      	ldr	r3, [pc, #388]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d0f0      	beq.n	800ea4c <HAL_RCC_OscConfig+0xe8>
 800ea6a:	e014      	b.n	800ea96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea6c:	f7fb f904 	bl	8009c78 <HAL_GetTick>
 800ea70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea72:	e008      	b.n	800ea86 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ea74:	f7fb f900 	bl	8009c78 <HAL_GetTick>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	2b64      	cmp	r3, #100	; 0x64
 800ea80:	d901      	bls.n	800ea86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ea82:	2303      	movs	r3, #3
 800ea84:	e1d6      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea86:	4b57      	ldr	r3, [pc, #348]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1f0      	bne.n	800ea74 <HAL_RCC_OscConfig+0x110>
 800ea92:	e000      	b.n	800ea96 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f003 0302 	and.w	r3, r3, #2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d069      	beq.n	800eb76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eaa2:	4b50      	ldr	r3, [pc, #320]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	f003 030c 	and.w	r3, r3, #12
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00b      	beq.n	800eac6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eaae:	4b4d      	ldr	r3, [pc, #308]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	f003 030c 	and.w	r3, r3, #12
 800eab6:	2b08      	cmp	r3, #8
 800eab8:	d11c      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x190>
 800eaba:	4b4a      	ldr	r3, [pc, #296]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d116      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eac6:	4b47      	ldr	r3, [pc, #284]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f003 0302 	and.w	r3, r3, #2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d005      	beq.n	800eade <HAL_RCC_OscConfig+0x17a>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d001      	beq.n	800eade <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	e1aa      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eade:	4b41      	ldr	r3, [pc, #260]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	493d      	ldr	r1, [pc, #244]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eaf2:	e040      	b.n	800eb76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d023      	beq.n	800eb44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eafc:	4b39      	ldr	r3, [pc, #228]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a38      	ldr	r2, [pc, #224]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb02:	f043 0301 	orr.w	r3, r3, #1
 800eb06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb08:	f7fb f8b6 	bl	8009c78 <HAL_GetTick>
 800eb0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb0e:	e008      	b.n	800eb22 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eb10:	f7fb f8b2 	bl	8009c78 <HAL_GetTick>
 800eb14:	4602      	mov	r2, r0
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d901      	bls.n	800eb22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	e188      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb22:	4b30      	ldr	r3, [pc, #192]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f003 0302 	and.w	r3, r3, #2
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d0f0      	beq.n	800eb10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb2e:	4b2d      	ldr	r3, [pc, #180]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	4929      	ldr	r1, [pc, #164]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	600b      	str	r3, [r1, #0]
 800eb42:	e018      	b.n	800eb76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eb44:	4b27      	ldr	r3, [pc, #156]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a26      	ldr	r2, [pc, #152]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb4a:	f023 0301 	bic.w	r3, r3, #1
 800eb4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb50:	f7fb f892 	bl	8009c78 <HAL_GetTick>
 800eb54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb56:	e008      	b.n	800eb6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eb58:	f7fb f88e 	bl	8009c78 <HAL_GetTick>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d901      	bls.n	800eb6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e164      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb6a:	4b1e      	ldr	r3, [pc, #120]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f003 0302 	and.w	r3, r3, #2
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1f0      	bne.n	800eb58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f003 0308 	and.w	r3, r3, #8
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d038      	beq.n	800ebf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d019      	beq.n	800ebbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb8a:	4b16      	ldr	r3, [pc, #88]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8e:	4a15      	ldr	r2, [pc, #84]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800eb90:	f043 0301 	orr.w	r3, r3, #1
 800eb94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb96:	f7fb f86f 	bl	8009c78 <HAL_GetTick>
 800eb9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb9c:	e008      	b.n	800ebb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb9e:	f7fb f86b 	bl	8009c78 <HAL_GetTick>
 800eba2:	4602      	mov	r2, r0
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d901      	bls.n	800ebb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ebac:	2303      	movs	r3, #3
 800ebae:	e141      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ebb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebb4:	f003 0302 	and.w	r3, r3, #2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d0f0      	beq.n	800eb9e <HAL_RCC_OscConfig+0x23a>
 800ebbc:	e01a      	b.n	800ebf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ebbe:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ebc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebc2:	4a08      	ldr	r2, [pc, #32]	; (800ebe4 <HAL_RCC_OscConfig+0x280>)
 800ebc4:	f023 0301 	bic.w	r3, r3, #1
 800ebc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebca:	f7fb f855 	bl	8009c78 <HAL_GetTick>
 800ebce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ebd0:	e00a      	b.n	800ebe8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ebd2:	f7fb f851 	bl	8009c78 <HAL_GetTick>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d903      	bls.n	800ebe8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ebe0:	2303      	movs	r3, #3
 800ebe2:	e127      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
 800ebe4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ebe8:	4b94      	ldr	r3, [pc, #592]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ebea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebec:	f003 0302 	and.w	r3, r3, #2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1ee      	bne.n	800ebd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 0304 	and.w	r3, r3, #4
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 80a4 	beq.w	800ed4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ec02:	4b8e      	ldr	r3, [pc, #568]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10d      	bne.n	800ec2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ec0e:	4b8b      	ldr	r3, [pc, #556]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec12:	4a8a      	ldr	r2, [pc, #552]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec18:	6413      	str	r3, [r2, #64]	; 0x40
 800ec1a:	4b88      	ldr	r3, [pc, #544]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ec26:	2301      	movs	r3, #1
 800ec28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec2a:	4b85      	ldr	r3, [pc, #532]	; (800ee40 <HAL_RCC_OscConfig+0x4dc>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d118      	bne.n	800ec68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ec36:	4b82      	ldr	r3, [pc, #520]	; (800ee40 <HAL_RCC_OscConfig+0x4dc>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a81      	ldr	r2, [pc, #516]	; (800ee40 <HAL_RCC_OscConfig+0x4dc>)
 800ec3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ec42:	f7fb f819 	bl	8009c78 <HAL_GetTick>
 800ec46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec48:	e008      	b.n	800ec5c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ec4a:	f7fb f815 	bl	8009c78 <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	2b64      	cmp	r3, #100	; 0x64
 800ec56:	d901      	bls.n	800ec5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	e0eb      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec5c:	4b78      	ldr	r3, [pc, #480]	; (800ee40 <HAL_RCC_OscConfig+0x4dc>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d0f0      	beq.n	800ec4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d106      	bne.n	800ec7e <HAL_RCC_OscConfig+0x31a>
 800ec70:	4b72      	ldr	r3, [pc, #456]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec74:	4a71      	ldr	r2, [pc, #452]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec76:	f043 0301 	orr.w	r3, r3, #1
 800ec7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ec7c:	e02d      	b.n	800ecda <HAL_RCC_OscConfig+0x376>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10c      	bne.n	800eca0 <HAL_RCC_OscConfig+0x33c>
 800ec86:	4b6d      	ldr	r3, [pc, #436]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec8a:	4a6c      	ldr	r2, [pc, #432]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec8c:	f023 0301 	bic.w	r3, r3, #1
 800ec90:	6713      	str	r3, [r2, #112]	; 0x70
 800ec92:	4b6a      	ldr	r3, [pc, #424]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec96:	4a69      	ldr	r2, [pc, #420]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ec98:	f023 0304 	bic.w	r3, r3, #4
 800ec9c:	6713      	str	r3, [r2, #112]	; 0x70
 800ec9e:	e01c      	b.n	800ecda <HAL_RCC_OscConfig+0x376>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	2b05      	cmp	r3, #5
 800eca6:	d10c      	bne.n	800ecc2 <HAL_RCC_OscConfig+0x35e>
 800eca8:	4b64      	ldr	r3, [pc, #400]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecac:	4a63      	ldr	r2, [pc, #396]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecae:	f043 0304 	orr.w	r3, r3, #4
 800ecb2:	6713      	str	r3, [r2, #112]	; 0x70
 800ecb4:	4b61      	ldr	r3, [pc, #388]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb8:	4a60      	ldr	r2, [pc, #384]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecba:	f043 0301 	orr.w	r3, r3, #1
 800ecbe:	6713      	str	r3, [r2, #112]	; 0x70
 800ecc0:	e00b      	b.n	800ecda <HAL_RCC_OscConfig+0x376>
 800ecc2:	4b5e      	ldr	r3, [pc, #376]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecc6:	4a5d      	ldr	r2, [pc, #372]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecc8:	f023 0301 	bic.w	r3, r3, #1
 800eccc:	6713      	str	r3, [r2, #112]	; 0x70
 800ecce:	4b5b      	ldr	r3, [pc, #364]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecd2:	4a5a      	ldr	r2, [pc, #360]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ecd4:	f023 0304 	bic.w	r3, r3, #4
 800ecd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d015      	beq.n	800ed0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ece2:	f7fa ffc9 	bl	8009c78 <HAL_GetTick>
 800ece6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ece8:	e00a      	b.n	800ed00 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ecea:	f7fa ffc5 	bl	8009c78 <HAL_GetTick>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d901      	bls.n	800ed00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	e099      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ed00:	4b4e      	ldr	r3, [pc, #312]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed04:	f003 0302 	and.w	r3, r3, #2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0ee      	beq.n	800ecea <HAL_RCC_OscConfig+0x386>
 800ed0c:	e014      	b.n	800ed38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed0e:	f7fa ffb3 	bl	8009c78 <HAL_GetTick>
 800ed12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ed14:	e00a      	b.n	800ed2c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ed16:	f7fa ffaf 	bl	8009c78 <HAL_GetTick>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d901      	bls.n	800ed2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	e083      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ed2c:	4b43      	ldr	r3, [pc, #268]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed30:	f003 0302 	and.w	r3, r3, #2
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1ee      	bne.n	800ed16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ed38:	7dfb      	ldrb	r3, [r7, #23]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d105      	bne.n	800ed4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ed3e:	4b3f      	ldr	r3, [pc, #252]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed42:	4a3e      	ldr	r2, [pc, #248]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	699b      	ldr	r3, [r3, #24]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d06f      	beq.n	800ee32 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ed52:	4b3a      	ldr	r3, [pc, #232]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	f003 030c 	and.w	r3, r3, #12
 800ed5a:	2b08      	cmp	r3, #8
 800ed5c:	d067      	beq.n	800ee2e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	699b      	ldr	r3, [r3, #24]
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d149      	bne.n	800edfa <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed66:	4b35      	ldr	r3, [pc, #212]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a34      	ldr	r2, [pc, #208]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed72:	f7fa ff81 	bl	8009c78 <HAL_GetTick>
 800ed76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed78:	e008      	b.n	800ed8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed7a:	f7fa ff7d 	bl	8009c78 <HAL_GetTick>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d901      	bls.n	800ed8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ed88:	2303      	movs	r3, #3
 800ed8a:	e053      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed8c:	4b2b      	ldr	r3, [pc, #172]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1f0      	bne.n	800ed7a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	69da      	ldr	r2, [r3, #28]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a1b      	ldr	r3, [r3, #32]
 800eda0:	431a      	orrs	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda6:	019b      	lsls	r3, r3, #6
 800eda8:	431a      	orrs	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edae:	085b      	lsrs	r3, r3, #1
 800edb0:	3b01      	subs	r3, #1
 800edb2:	041b      	lsls	r3, r3, #16
 800edb4:	431a      	orrs	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edba:	061b      	lsls	r3, r3, #24
 800edbc:	4313      	orrs	r3, r2
 800edbe:	4a1f      	ldr	r2, [pc, #124]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800edc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edc4:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800edc6:	4b1d      	ldr	r3, [pc, #116]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a1c      	ldr	r2, [pc, #112]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800edcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800edd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edd2:	f7fa ff51 	bl	8009c78 <HAL_GetTick>
 800edd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800edd8:	e008      	b.n	800edec <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800edda:	f7fa ff4d 	bl	8009c78 <HAL_GetTick>
 800edde:	4602      	mov	r2, r0
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	d901      	bls.n	800edec <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800ede8:	2303      	movs	r3, #3
 800edea:	e023      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800edec:	4b13      	ldr	r3, [pc, #76]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d0f0      	beq.n	800edda <HAL_RCC_OscConfig+0x476>
 800edf8:	e01b      	b.n	800ee32 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800edfa:	4b10      	ldr	r3, [pc, #64]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a0f      	ldr	r2, [pc, #60]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ee00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ee04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee06:	f7fa ff37 	bl	8009c78 <HAL_GetTick>
 800ee0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee0c:	e008      	b.n	800ee20 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee0e:	f7fa ff33 	bl	8009c78 <HAL_GetTick>
 800ee12:	4602      	mov	r2, r0
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d901      	bls.n	800ee20 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e009      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee20:	4b06      	ldr	r3, [pc, #24]	; (800ee3c <HAL_RCC_OscConfig+0x4d8>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1f0      	bne.n	800ee0e <HAL_RCC_OscConfig+0x4aa>
 800ee2c:	e001      	b.n	800ee32 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	40023800 	.word	0x40023800
 800ee40:	40007000 	.word	0x40007000

0800ee44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d101      	bne.n	800ee5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	e0ce      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ee5c:	4b69      	ldr	r3, [pc, #420]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f003 030f 	and.w	r3, r3, #15
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d910      	bls.n	800ee8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee6a:	4b66      	ldr	r3, [pc, #408]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f023 020f 	bic.w	r2, r3, #15
 800ee72:	4964      	ldr	r1, [pc, #400]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee7a:	4b62      	ldr	r3, [pc, #392]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f003 030f 	and.w	r3, r3, #15
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d001      	beq.n	800ee8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e0b6      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f003 0302 	and.w	r3, r3, #2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d020      	beq.n	800eeda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f003 0304 	and.w	r3, r3, #4
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d005      	beq.n	800eeb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eea4:	4b58      	ldr	r3, [pc, #352]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	4a57      	ldr	r2, [pc, #348]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eeaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800eeae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f003 0308 	and.w	r3, r3, #8
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d005      	beq.n	800eec8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eebc:	4b52      	ldr	r3, [pc, #328]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	4a51      	ldr	r2, [pc, #324]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800eec6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eec8:	4b4f      	ldr	r3, [pc, #316]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	494c      	ldr	r1, [pc, #304]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eed6:	4313      	orrs	r3, r2
 800eed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d040      	beq.n	800ef68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d107      	bne.n	800eefe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eeee:	4b46      	ldr	r3, [pc, #280]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d115      	bne.n	800ef26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800eefa:	2301      	movs	r3, #1
 800eefc:	e07d      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d107      	bne.n	800ef16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef06:	4b40      	ldr	r3, [pc, #256]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d109      	bne.n	800ef26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ef12:	2301      	movs	r3, #1
 800ef14:	e071      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef16:	4b3c      	ldr	r3, [pc, #240]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f003 0302 	and.w	r3, r3, #2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e069      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ef26:	4b38      	ldr	r3, [pc, #224]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	f023 0203 	bic.w	r2, r3, #3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	4935      	ldr	r1, [pc, #212]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800ef34:	4313      	orrs	r3, r2
 800ef36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef38:	f7fa fe9e 	bl	8009c78 <HAL_GetTick>
 800ef3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef3e:	e00a      	b.n	800ef56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef40:	f7fa fe9a 	bl	8009c78 <HAL_GetTick>
 800ef44:	4602      	mov	r2, r0
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d901      	bls.n	800ef56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ef52:	2303      	movs	r3, #3
 800ef54:	e051      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef56:	4b2c      	ldr	r3, [pc, #176]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	f003 020c 	and.w	r2, r3, #12
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d1eb      	bne.n	800ef40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ef68:	4b26      	ldr	r3, [pc, #152]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f003 030f 	and.w	r3, r3, #15
 800ef70:	683a      	ldr	r2, [r7, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d210      	bcs.n	800ef98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef76:	4b23      	ldr	r3, [pc, #140]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f023 020f 	bic.w	r2, r3, #15
 800ef7e:	4921      	ldr	r1, [pc, #132]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef86:	4b1f      	ldr	r3, [pc, #124]	; (800f004 <HAL_RCC_ClockConfig+0x1c0>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 030f 	and.w	r3, r3, #15
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d001      	beq.n	800ef98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	e030      	b.n	800effa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f003 0304 	and.w	r3, r3, #4
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d008      	beq.n	800efb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800efa4:	4b18      	ldr	r3, [pc, #96]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	4915      	ldr	r1, [pc, #84]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800efb2:	4313      	orrs	r3, r2
 800efb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f003 0308 	and.w	r3, r3, #8
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d009      	beq.n	800efd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800efc2:	4b11      	ldr	r3, [pc, #68]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	490d      	ldr	r1, [pc, #52]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800efd2:	4313      	orrs	r3, r2
 800efd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800efd6:	f000 f81d 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 800efda:	4601      	mov	r1, r0
 800efdc:	4b0a      	ldr	r3, [pc, #40]	; (800f008 <HAL_RCC_ClockConfig+0x1c4>)
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	091b      	lsrs	r3, r3, #4
 800efe2:	f003 030f 	and.w	r3, r3, #15
 800efe6:	4a09      	ldr	r2, [pc, #36]	; (800f00c <HAL_RCC_ClockConfig+0x1c8>)
 800efe8:	5cd3      	ldrb	r3, [r2, r3]
 800efea:	fa21 f303 	lsr.w	r3, r1, r3
 800efee:	4a08      	ldr	r2, [pc, #32]	; (800f010 <HAL_RCC_ClockConfig+0x1cc>)
 800eff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800eff2:	2000      	movs	r0, #0
 800eff4:	f7f3 f856 	bl	80020a4 <HAL_InitTick>

  return HAL_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	40023c00 	.word	0x40023c00
 800f008:	40023800 	.word	0x40023800
 800f00c:	080277e0 	.word	0x080277e0
 800f010:	2000002c 	.word	0x2000002c

0800f014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	607b      	str	r3, [r7, #4]
 800f01e:	2300      	movs	r3, #0
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	2300      	movs	r3, #0
 800f024:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f02a:	4b50      	ldr	r3, [pc, #320]	; (800f16c <HAL_RCC_GetSysClockFreq+0x158>)
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	f003 030c 	and.w	r3, r3, #12
 800f032:	2b04      	cmp	r3, #4
 800f034:	d007      	beq.n	800f046 <HAL_RCC_GetSysClockFreq+0x32>
 800f036:	2b08      	cmp	r3, #8
 800f038:	d008      	beq.n	800f04c <HAL_RCC_GetSysClockFreq+0x38>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f040 808d 	bne.w	800f15a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f040:	4b4b      	ldr	r3, [pc, #300]	; (800f170 <HAL_RCC_GetSysClockFreq+0x15c>)
 800f042:	60bb      	str	r3, [r7, #8]
       break;
 800f044:	e08c      	b.n	800f160 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f046:	4b4b      	ldr	r3, [pc, #300]	; (800f174 <HAL_RCC_GetSysClockFreq+0x160>)
 800f048:	60bb      	str	r3, [r7, #8]
      break;
 800f04a:	e089      	b.n	800f160 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f04c:	4b47      	ldr	r3, [pc, #284]	; (800f16c <HAL_RCC_GetSysClockFreq+0x158>)
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f054:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800f056:	4b45      	ldr	r3, [pc, #276]	; (800f16c <HAL_RCC_GetSysClockFreq+0x158>)
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d023      	beq.n	800f0aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f062:	4b42      	ldr	r3, [pc, #264]	; (800f16c <HAL_RCC_GetSysClockFreq+0x158>)
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	099b      	lsrs	r3, r3, #6
 800f068:	f04f 0400 	mov.w	r4, #0
 800f06c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f070:	f04f 0200 	mov.w	r2, #0
 800f074:	ea03 0501 	and.w	r5, r3, r1
 800f078:	ea04 0602 	and.w	r6, r4, r2
 800f07c:	4a3d      	ldr	r2, [pc, #244]	; (800f174 <HAL_RCC_GetSysClockFreq+0x160>)
 800f07e:	fb02 f106 	mul.w	r1, r2, r6
 800f082:	2200      	movs	r2, #0
 800f084:	fb02 f205 	mul.w	r2, r2, r5
 800f088:	440a      	add	r2, r1
 800f08a:	493a      	ldr	r1, [pc, #232]	; (800f174 <HAL_RCC_GetSysClockFreq+0x160>)
 800f08c:	fba5 0101 	umull	r0, r1, r5, r1
 800f090:	1853      	adds	r3, r2, r1
 800f092:	4619      	mov	r1, r3
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f04f 0400 	mov.w	r4, #0
 800f09a:	461a      	mov	r2, r3
 800f09c:	4623      	mov	r3, r4
 800f09e:	f7f1 f907 	bl	80002b0 <__aeabi_uldivmod>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	60fb      	str	r3, [r7, #12]
 800f0a8:	e049      	b.n	800f13e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f0aa:	4b30      	ldr	r3, [pc, #192]	; (800f16c <HAL_RCC_GetSysClockFreq+0x158>)
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	099b      	lsrs	r3, r3, #6
 800f0b0:	f04f 0400 	mov.w	r4, #0
 800f0b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f0b8:	f04f 0200 	mov.w	r2, #0
 800f0bc:	ea03 0501 	and.w	r5, r3, r1
 800f0c0:	ea04 0602 	and.w	r6, r4, r2
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4632      	mov	r2, r6
 800f0c8:	f04f 0300 	mov.w	r3, #0
 800f0cc:	f04f 0400 	mov.w	r4, #0
 800f0d0:	0154      	lsls	r4, r2, #5
 800f0d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f0d6:	014b      	lsls	r3, r1, #5
 800f0d8:	4619      	mov	r1, r3
 800f0da:	4622      	mov	r2, r4
 800f0dc:	1b49      	subs	r1, r1, r5
 800f0de:	eb62 0206 	sbc.w	r2, r2, r6
 800f0e2:	f04f 0300 	mov.w	r3, #0
 800f0e6:	f04f 0400 	mov.w	r4, #0
 800f0ea:	0194      	lsls	r4, r2, #6
 800f0ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f0f0:	018b      	lsls	r3, r1, #6
 800f0f2:	1a5b      	subs	r3, r3, r1
 800f0f4:	eb64 0402 	sbc.w	r4, r4, r2
 800f0f8:	f04f 0100 	mov.w	r1, #0
 800f0fc:	f04f 0200 	mov.w	r2, #0
 800f100:	00e2      	lsls	r2, r4, #3
 800f102:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f106:	00d9      	lsls	r1, r3, #3
 800f108:	460b      	mov	r3, r1
 800f10a:	4614      	mov	r4, r2
 800f10c:	195b      	adds	r3, r3, r5
 800f10e:	eb44 0406 	adc.w	r4, r4, r6
 800f112:	f04f 0100 	mov.w	r1, #0
 800f116:	f04f 0200 	mov.w	r2, #0
 800f11a:	02a2      	lsls	r2, r4, #10
 800f11c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800f120:	0299      	lsls	r1, r3, #10
 800f122:	460b      	mov	r3, r1
 800f124:	4614      	mov	r4, r2
 800f126:	4618      	mov	r0, r3
 800f128:	4621      	mov	r1, r4
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f04f 0400 	mov.w	r4, #0
 800f130:	461a      	mov	r2, r3
 800f132:	4623      	mov	r3, r4
 800f134:	f7f1 f8bc 	bl	80002b0 <__aeabi_uldivmod>
 800f138:	4603      	mov	r3, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800f13e:	4b0b      	ldr	r3, [pc, #44]	; (800f16c <HAL_RCC_GetSysClockFreq+0x158>)
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	0c1b      	lsrs	r3, r3, #16
 800f144:	f003 0303 	and.w	r3, r3, #3
 800f148:	3301      	adds	r3, #1
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	fbb2 f3f3 	udiv	r3, r2, r3
 800f156:	60bb      	str	r3, [r7, #8]
      break;
 800f158:	e002      	b.n	800f160 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f15a:	4b05      	ldr	r3, [pc, #20]	; (800f170 <HAL_RCC_GetSysClockFreq+0x15c>)
 800f15c:	60bb      	str	r3, [r7, #8]
      break;
 800f15e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f160:	68bb      	ldr	r3, [r7, #8]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f16a:	bf00      	nop
 800f16c:	40023800 	.word	0x40023800
 800f170:	00f42400 	.word	0x00f42400
 800f174:	017d7840 	.word	0x017d7840

0800f178 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f178:	b480      	push	{r7}
 800f17a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f17c:	4b03      	ldr	r3, [pc, #12]	; (800f18c <HAL_RCC_GetHCLKFreq+0x14>)
 800f17e:	681b      	ldr	r3, [r3, #0]
}
 800f180:	4618      	mov	r0, r3
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	2000002c 	.word	0x2000002c

0800f190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f194:	f7ff fff0 	bl	800f178 <HAL_RCC_GetHCLKFreq>
 800f198:	4601      	mov	r1, r0
 800f19a:	4b05      	ldr	r3, [pc, #20]	; (800f1b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	0a9b      	lsrs	r3, r3, #10
 800f1a0:	f003 0307 	and.w	r3, r3, #7
 800f1a4:	4a03      	ldr	r2, [pc, #12]	; (800f1b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f1a6:	5cd3      	ldrb	r3, [r2, r3]
 800f1a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	40023800 	.word	0x40023800
 800f1b4:	080277f0 	.word	0x080277f0

0800f1b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f1bc:	f7ff ffdc 	bl	800f178 <HAL_RCC_GetHCLKFreq>
 800f1c0:	4601      	mov	r1, r0
 800f1c2:	4b05      	ldr	r3, [pc, #20]	; (800f1d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	0b5b      	lsrs	r3, r3, #13
 800f1c8:	f003 0307 	and.w	r3, r3, #7
 800f1cc:	4a03      	ldr	r2, [pc, #12]	; (800f1dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800f1ce:	5cd3      	ldrb	r3, [r2, r3]
 800f1d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	40023800 	.word	0x40023800
 800f1dc:	080277f0 	.word	0x080277f0

0800f1e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	220f      	movs	r2, #15
 800f1ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f1f0:	4b12      	ldr	r3, [pc, #72]	; (800f23c <HAL_RCC_GetClockConfig+0x5c>)
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	f003 0203 	and.w	r2, r3, #3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f1fc:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <HAL_RCC_GetClockConfig+0x5c>)
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f208:	4b0c      	ldr	r3, [pc, #48]	; (800f23c <HAL_RCC_GetClockConfig+0x5c>)
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800f214:	4b09      	ldr	r3, [pc, #36]	; (800f23c <HAL_RCC_GetClockConfig+0x5c>)
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	08db      	lsrs	r3, r3, #3
 800f21a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f222:	4b07      	ldr	r3, [pc, #28]	; (800f240 <HAL_RCC_GetClockConfig+0x60>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f003 020f 	and.w	r2, r3, #15
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	601a      	str	r2, [r3, #0]
}
 800f22e:	bf00      	nop
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	40023800 	.word	0x40023800
 800f240:	40023c00 	.word	0x40023c00

0800f244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b088      	sub	sp, #32
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800f250:	2300      	movs	r3, #0
 800f252:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f003 0301 	and.w	r3, r3, #1
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d012      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f26c:	4b69      	ldr	r3, [pc, #420]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	4a68      	ldr	r2, [pc, #416]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f276:	6093      	str	r3, [r2, #8]
 800f278:	4b66      	ldr	r3, [pc, #408]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f27a:	689a      	ldr	r2, [r3, #8]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f280:	4964      	ldr	r1, [pc, #400]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f282:	4313      	orrs	r3, r2
 800f284:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d101      	bne.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800f28e:	2301      	movs	r3, #1
 800f290:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d017      	beq.n	800f2ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f29e:	4b5d      	ldr	r3, [pc, #372]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ac:	4959      	ldr	r1, [pc, #356]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2bc:	d101      	bne.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d017      	beq.n	800f30a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f2da:	4b4e      	ldr	r3, [pc, #312]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e8:	494a      	ldr	r1, [pc, #296]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2f8:	d101      	bne.n	800f2fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f302:	2b00      	cmp	r3, #0
 800f304:	d101      	bne.n	800f30a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800f306:	2301      	movs	r3, #1
 800f308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800f316:	2301      	movs	r3, #1
 800f318:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f003 0320 	and.w	r3, r3, #32
 800f322:	2b00      	cmp	r3, #0
 800f324:	f000 808b 	beq.w	800f43e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f328:	4b3a      	ldr	r3, [pc, #232]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32c:	4a39      	ldr	r2, [pc, #228]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f32e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f332:	6413      	str	r3, [r2, #64]	; 0x40
 800f334:	4b37      	ldr	r3, [pc, #220]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f33c:	60bb      	str	r3, [r7, #8]
 800f33e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f340:	4b35      	ldr	r3, [pc, #212]	; (800f418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4a34      	ldr	r2, [pc, #208]	; (800f418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f34a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f34c:	f7fa fc94 	bl	8009c78 <HAL_GetTick>
 800f350:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f352:	e008      	b.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f354:	f7fa fc90 	bl	8009c78 <HAL_GetTick>
 800f358:	4602      	mov	r2, r0
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	2b64      	cmp	r3, #100	; 0x64
 800f360:	d901      	bls.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800f362:	2303      	movs	r3, #3
 800f364:	e355      	b.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f366:	4b2c      	ldr	r3, [pc, #176]	; (800f418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d0f0      	beq.n	800f354 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f372:	4b28      	ldr	r3, [pc, #160]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f37a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d035      	beq.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d02e      	beq.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f390:	4b20      	ldr	r3, [pc, #128]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f398:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f39a:	4b1e      	ldr	r3, [pc, #120]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f39e:	4a1d      	ldr	r2, [pc, #116]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f3a6:	4b1b      	ldr	r3, [pc, #108]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3aa:	4a1a      	ldr	r2, [pc, #104]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f3b2:	4a18      	ldr	r2, [pc, #96]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f3b8:	4b16      	ldr	r3, [pc, #88]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3bc:	f003 0301 	and.w	r3, r3, #1
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d114      	bne.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3c4:	f7fa fc58 	bl	8009c78 <HAL_GetTick>
 800f3c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f3ca:	e00a      	b.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f3cc:	f7fa fc54 	bl	8009c78 <HAL_GetTick>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	1ad3      	subs	r3, r2, r3
 800f3d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d901      	bls.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e317      	b.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f3e2:	4b0c      	ldr	r3, [pc, #48]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3e6:	f003 0302 	and.w	r3, r3, #2
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d0ee      	beq.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3fa:	d111      	bne.n	800f420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800f3fc:	4b05      	ldr	r3, [pc, #20]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f408:	4b04      	ldr	r3, [pc, #16]	; (800f41c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800f40a:	400b      	ands	r3, r1
 800f40c:	4901      	ldr	r1, [pc, #4]	; (800f414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f40e:	4313      	orrs	r3, r2
 800f410:	608b      	str	r3, [r1, #8]
 800f412:	e00b      	b.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f414:	40023800 	.word	0x40023800
 800f418:	40007000 	.word	0x40007000
 800f41c:	0ffffcff 	.word	0x0ffffcff
 800f420:	4bb0      	ldr	r3, [pc, #704]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	4aaf      	ldr	r2, [pc, #700]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f426:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f42a:	6093      	str	r3, [r2, #8]
 800f42c:	4bad      	ldr	r3, [pc, #692]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f42e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f438:	49aa      	ldr	r1, [pc, #680]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f43a:	4313      	orrs	r3, r2
 800f43c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 0310 	and.w	r3, r3, #16
 800f446:	2b00      	cmp	r3, #0
 800f448:	d010      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f44a:	4ba6      	ldr	r3, [pc, #664]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f450:	4aa4      	ldr	r2, [pc, #656]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f45a:	4ba2      	ldr	r3, [pc, #648]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f45c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f464:	499f      	ldr	r1, [pc, #636]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f466:	4313      	orrs	r3, r2
 800f468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00a      	beq.n	800f48e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f478:	4b9a      	ldr	r3, [pc, #616]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f47e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f486:	4997      	ldr	r1, [pc, #604]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f488:	4313      	orrs	r3, r2
 800f48a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00a      	beq.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f49a:	4b92      	ldr	r3, [pc, #584]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4a8:	498e      	ldr	r1, [pc, #568]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00a      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f4bc:	4b89      	ldr	r3, [pc, #548]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ca:	4986      	ldr	r1, [pc, #536]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00a      	beq.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f4de:	4b81      	ldr	r3, [pc, #516]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ec:	497d      	ldr	r1, [pc, #500]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00a      	beq.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f500:	4b78      	ldr	r3, [pc, #480]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f506:	f023 0203 	bic.w	r2, r3, #3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f50e:	4975      	ldr	r1, [pc, #468]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f510:	4313      	orrs	r3, r2
 800f512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00a      	beq.n	800f538 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f522:	4b70      	ldr	r3, [pc, #448]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f528:	f023 020c 	bic.w	r2, r3, #12
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f530:	496c      	ldr	r1, [pc, #432]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f532:	4313      	orrs	r3, r2
 800f534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00a      	beq.n	800f55a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f544:	4b67      	ldr	r3, [pc, #412]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f54a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f552:	4964      	ldr	r1, [pc, #400]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f554:	4313      	orrs	r3, r2
 800f556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00a      	beq.n	800f57c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f566:	4b5f      	ldr	r3, [pc, #380]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f56c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f574:	495b      	ldr	r1, [pc, #364]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f576:	4313      	orrs	r3, r2
 800f578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00a      	beq.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f588:	4b56      	ldr	r3, [pc, #344]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f58e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f596:	4953      	ldr	r1, [pc, #332]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f598:	4313      	orrs	r3, r2
 800f59a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f5aa:	4b4e      	ldr	r3, [pc, #312]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5b8:	494a      	ldr	r1, [pc, #296]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00a      	beq.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f5cc:	4b45      	ldr	r3, [pc, #276]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5da:	4942      	ldr	r1, [pc, #264]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00a      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f5ee:	4b3d      	ldr	r3, [pc, #244]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5fc:	4939      	ldr	r1, [pc, #228]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f5fe:	4313      	orrs	r3, r2
 800f600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00a      	beq.n	800f626 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f610:	4b34      	ldr	r3, [pc, #208]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f616:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f61e:	4931      	ldr	r1, [pc, #196]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f620:	4313      	orrs	r3, r2
 800f622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d011      	beq.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f632:	4b2c      	ldr	r3, [pc, #176]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f638:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f640:	4928      	ldr	r1, [pc, #160]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f642:	4313      	orrs	r3, r2
 800f644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f64c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f650:	d101      	bne.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800f652:	2301      	movs	r3, #1
 800f654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f003 0308 	and.w	r3, r3, #8
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d001      	beq.n	800f666 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800f662:	2301      	movs	r3, #1
 800f664:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00a      	beq.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f672:	4b1c      	ldr	r3, [pc, #112]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f678:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f680:	4918      	ldr	r1, [pc, #96]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f682:	4313      	orrs	r3, r2
 800f684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00b      	beq.n	800f6ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f694:	4b13      	ldr	r3, [pc, #76]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f69a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6a4:	490f      	ldr	r1, [pc, #60]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d005      	beq.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6ba:	f040 80d8 	bne.w	800f86e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f6be:	4b09      	ldr	r3, [pc, #36]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a08      	ldr	r2, [pc, #32]	; (800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800f6c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f6c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6ca:	f7fa fad5 	bl	8009c78 <HAL_GetTick>
 800f6ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f6d0:	e00a      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f6d2:	f7fa fad1 	bl	8009c78 <HAL_GetTick>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	2b64      	cmp	r3, #100	; 0x64
 800f6de:	d903      	bls.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f6e0:	2303      	movs	r3, #3
 800f6e2:	e196      	b.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800f6e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f6e8:	4b6c      	ldr	r3, [pc, #432]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d1ee      	bne.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d021      	beq.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f704:	2b00      	cmp	r3, #0
 800f706:	d11d      	bne.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f708:	4b64      	ldr	r3, [pc, #400]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f70a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f70e:	0c1b      	lsrs	r3, r3, #16
 800f710:	f003 0303 	and.w	r3, r3, #3
 800f714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f716:	4b61      	ldr	r3, [pc, #388]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f71c:	0e1b      	lsrs	r3, r3, #24
 800f71e:	f003 030f 	and.w	r3, r3, #15
 800f722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	019a      	lsls	r2, r3, #6
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	041b      	lsls	r3, r3, #16
 800f72e:	431a      	orrs	r2, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	061b      	lsls	r3, r3, #24
 800f734:	431a      	orrs	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	071b      	lsls	r3, r3, #28
 800f73c:	4957      	ldr	r1, [pc, #348]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f73e:	4313      	orrs	r3, r2
 800f740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f758:	d00a      	beq.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f762:	2b00      	cmp	r3, #0
 800f764:	d02e      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f76e:	d129      	bne.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f770:	4b4a      	ldr	r3, [pc, #296]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f776:	0c1b      	lsrs	r3, r3, #16
 800f778:	f003 0303 	and.w	r3, r3, #3
 800f77c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f77e:	4b47      	ldr	r3, [pc, #284]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f784:	0f1b      	lsrs	r3, r3, #28
 800f786:	f003 0307 	and.w	r3, r3, #7
 800f78a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	019a      	lsls	r2, r3, #6
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	041b      	lsls	r3, r3, #16
 800f796:	431a      	orrs	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	061b      	lsls	r3, r3, #24
 800f79e:	431a      	orrs	r2, r3
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	071b      	lsls	r3, r3, #28
 800f7a4:	493d      	ldr	r1, [pc, #244]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f7ac:	4b3b      	ldr	r3, [pc, #236]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7b2:	f023 021f 	bic.w	r2, r3, #31
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	4937      	ldr	r1, [pc, #220]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d01d      	beq.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f7d0:	4b32      	ldr	r3, [pc, #200]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f7d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7d6:	0e1b      	lsrs	r3, r3, #24
 800f7d8:	f003 030f 	and.w	r3, r3, #15
 800f7dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f7de:	4b2f      	ldr	r3, [pc, #188]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7e4:	0f1b      	lsrs	r3, r3, #28
 800f7e6:	f003 0307 	and.w	r3, r3, #7
 800f7ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	019a      	lsls	r2, r3, #6
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	041b      	lsls	r3, r3, #16
 800f7f8:	431a      	orrs	r2, r3
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	061b      	lsls	r3, r3, #24
 800f7fe:	431a      	orrs	r2, r3
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	071b      	lsls	r3, r3, #28
 800f804:	4925      	ldr	r1, [pc, #148]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f806:	4313      	orrs	r3, r2
 800f808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f814:	2b00      	cmp	r3, #0
 800f816:	d011      	beq.n	800f83c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	019a      	lsls	r2, r3, #6
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	041b      	lsls	r3, r3, #16
 800f824:	431a      	orrs	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	061b      	lsls	r3, r3, #24
 800f82c:	431a      	orrs	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	689b      	ldr	r3, [r3, #8]
 800f832:	071b      	lsls	r3, r3, #28
 800f834:	4919      	ldr	r1, [pc, #100]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f836:	4313      	orrs	r3, r2
 800f838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f83c:	4b17      	ldr	r3, [pc, #92]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a16      	ldr	r2, [pc, #88]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f842:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f848:	f7fa fa16 	bl	8009c78 <HAL_GetTick>
 800f84c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f84e:	e008      	b.n	800f862 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f850:	f7fa fa12 	bl	8009c78 <HAL_GetTick>
 800f854:	4602      	mov	r2, r0
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	2b64      	cmp	r3, #100	; 0x64
 800f85c:	d901      	bls.n	800f862 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f85e:	2303      	movs	r3, #3
 800f860:	e0d7      	b.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f862:	4b0e      	ldr	r3, [pc, #56]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0f0      	beq.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	2b01      	cmp	r3, #1
 800f872:	f040 80cd 	bne.w	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f876:	4b09      	ldr	r3, [pc, #36]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a08      	ldr	r2, [pc, #32]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800f87c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f882:	f7fa f9f9 	bl	8009c78 <HAL_GetTick>
 800f886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f888:	e00a      	b.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f88a:	f7fa f9f5 	bl	8009c78 <HAL_GetTick>
 800f88e:	4602      	mov	r2, r0
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	2b64      	cmp	r3, #100	; 0x64
 800f896:	d903      	bls.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f898:	2303      	movs	r3, #3
 800f89a:	e0ba      	b.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800f89c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f8a0:	4b5e      	ldr	r3, [pc, #376]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f8a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8ac:	d0ed      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d009      	beq.n	800f8d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d02e      	beq.n	800f92c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d12a      	bne.n	800f92c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f8d6:	4b51      	ldr	r3, [pc, #324]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8dc:	0c1b      	lsrs	r3, r3, #16
 800f8de:	f003 0303 	and.w	r3, r3, #3
 800f8e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f8e4:	4b4d      	ldr	r3, [pc, #308]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8ea:	0f1b      	lsrs	r3, r3, #28
 800f8ec:	f003 0307 	and.w	r3, r3, #7
 800f8f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	695b      	ldr	r3, [r3, #20]
 800f8f6:	019a      	lsls	r2, r3, #6
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	041b      	lsls	r3, r3, #16
 800f8fc:	431a      	orrs	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	699b      	ldr	r3, [r3, #24]
 800f902:	061b      	lsls	r3, r3, #24
 800f904:	431a      	orrs	r2, r3
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	071b      	lsls	r3, r3, #28
 800f90a:	4944      	ldr	r1, [pc, #272]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f90c:	4313      	orrs	r3, r2
 800f90e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f912:	4b42      	ldr	r3, [pc, #264]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f918:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f920:	3b01      	subs	r3, #1
 800f922:	021b      	lsls	r3, r3, #8
 800f924:	493d      	ldr	r1, [pc, #244]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f926:	4313      	orrs	r3, r2
 800f928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f934:	2b00      	cmp	r3, #0
 800f936:	d022      	beq.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f93c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f940:	d11d      	bne.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f942:	4b36      	ldr	r3, [pc, #216]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f948:	0e1b      	lsrs	r3, r3, #24
 800f94a:	f003 030f 	and.w	r3, r3, #15
 800f94e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f950:	4b32      	ldr	r3, [pc, #200]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f956:	0f1b      	lsrs	r3, r3, #28
 800f958:	f003 0307 	and.w	r3, r3, #7
 800f95c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	019a      	lsls	r2, r3, #6
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6a1b      	ldr	r3, [r3, #32]
 800f968:	041b      	lsls	r3, r3, #16
 800f96a:	431a      	orrs	r2, r3
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	061b      	lsls	r3, r3, #24
 800f970:	431a      	orrs	r2, r3
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	071b      	lsls	r3, r3, #28
 800f976:	4929      	ldr	r1, [pc, #164]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f978:	4313      	orrs	r3, r2
 800f97a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f003 0308 	and.w	r3, r3, #8
 800f986:	2b00      	cmp	r3, #0
 800f988:	d028      	beq.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f98a:	4b24      	ldr	r3, [pc, #144]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f990:	0e1b      	lsrs	r3, r3, #24
 800f992:	f003 030f 	and.w	r3, r3, #15
 800f996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f998:	4b20      	ldr	r3, [pc, #128]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f99e:	0c1b      	lsrs	r3, r3, #16
 800f9a0:	f003 0303 	and.w	r3, r3, #3
 800f9a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	019a      	lsls	r2, r3, #6
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	041b      	lsls	r3, r3, #16
 800f9b0:	431a      	orrs	r2, r3
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	061b      	lsls	r3, r3, #24
 800f9b6:	431a      	orrs	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	69db      	ldr	r3, [r3, #28]
 800f9bc:	071b      	lsls	r3, r3, #28
 800f9be:	4917      	ldr	r1, [pc, #92]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f9c6:	4b15      	ldr	r3, [pc, #84]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d4:	4911      	ldr	r1, [pc, #68]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f9dc:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a0e      	ldr	r2, [pc, #56]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800f9e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9e8:	f7fa f946 	bl	8009c78 <HAL_GetTick>
 800f9ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f9ee:	e008      	b.n	800fa02 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f9f0:	f7fa f942 	bl	8009c78 <HAL_GetTick>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	2b64      	cmp	r3, #100	; 0x64
 800f9fc:	d901      	bls.n	800fa02 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f9fe:	2303      	movs	r3, #3
 800fa00:	e007      	b.n	800fa12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800fa02:	4b06      	ldr	r3, [pc, #24]	; (800fa1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa0e:	d1ef      	bne.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3720      	adds	r7, #32
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	40023800 	.word	0x40023800

0800fa20 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d101      	bne.n	800fa34 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	e025      	b.n	800fa80 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d106      	bne.n	800fa4e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7f2 fb21 	bl	8002090 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2202      	movs	r2, #2
 800fa52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4610      	mov	r0, r2
 800fa62:	f001 f8a7 	bl	8010bb4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6818      	ldr	r0, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	6839      	ldr	r1, [r7, #0]
 800fa72:	f001 f911 	bl	8010c98 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800fa7e:	2300      	movs	r3, #0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d101      	bne.n	800faa4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800faa0:	2302      	movs	r3, #2
 800faa2:	e018      	b.n	800fad6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2202      	movs	r2, #2
 800faa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	68b9      	ldr	r1, [r7, #8]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f001 f96f 	bl	8010d98 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d104      	bne.n	800facc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2205      	movs	r2, #5
 800fac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800faca:	e003      	b.n	800fad4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d101      	bne.n	800faf8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800faf4:	2302      	movs	r3, #2
 800faf6:	e00e      	b.n	800fb16 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2202      	movs	r2, #2
 800fafc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f001 f967 	bl	8010dda <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b082      	sub	sp, #8
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d101      	bne.n	800fb30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e01d      	b.n	800fb6c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d106      	bne.n	800fb4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 f815 	bl	800fb74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2202      	movs	r2, #2
 800fb4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	3304      	adds	r3, #4
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	f000 f985 	bl	800fe6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2201      	movs	r2, #1
 800fb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb6a:	2300      	movs	r3, #0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68da      	ldr	r2, [r3, #12]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f042 0201 	orr.w	r2, r2, #1
 800fb9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	689a      	ldr	r2, [r3, #8]
 800fba6:	4b0c      	ldr	r3, [pc, #48]	; (800fbd8 <HAL_TIM_Base_Start_IT+0x50>)
 800fba8:	4013      	ands	r3, r2
 800fbaa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2b06      	cmp	r3, #6
 800fbb0:	d00b      	beq.n	800fbca <HAL_TIM_Base_Start_IT+0x42>
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbb8:	d007      	beq.n	800fbca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f042 0201 	orr.w	r2, r2, #1
 800fbc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3714      	adds	r7, #20
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr
 800fbd8:	00010007 	.word	0x00010007

0800fbdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	f003 0302 	and.w	r3, r3, #2
 800fbee:	2b02      	cmp	r3, #2
 800fbf0:	d122      	bne.n	800fc38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	f003 0302 	and.w	r3, r3, #2
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	d11b      	bne.n	800fc38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f06f 0202 	mvn.w	r2, #2
 800fc08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	699b      	ldr	r3, [r3, #24]
 800fc16:	f003 0303 	and.w	r3, r3, #3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 f905 	bl	800fe2e <HAL_TIM_IC_CaptureCallback>
 800fc24:	e005      	b.n	800fc32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 f8f7 	bl	800fe1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f908 	bl	800fe42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	691b      	ldr	r3, [r3, #16]
 800fc3e:	f003 0304 	and.w	r3, r3, #4
 800fc42:	2b04      	cmp	r3, #4
 800fc44:	d122      	bne.n	800fc8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	f003 0304 	and.w	r3, r3, #4
 800fc50:	2b04      	cmp	r3, #4
 800fc52:	d11b      	bne.n	800fc8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f06f 0204 	mvn.w	r2, #4
 800fc5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2202      	movs	r2, #2
 800fc62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	699b      	ldr	r3, [r3, #24]
 800fc6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f8db 	bl	800fe2e <HAL_TIM_IC_CaptureCallback>
 800fc78:	e005      	b.n	800fc86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f8cd 	bl	800fe1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 f8de 	bl	800fe42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	f003 0308 	and.w	r3, r3, #8
 800fc96:	2b08      	cmp	r3, #8
 800fc98:	d122      	bne.n	800fce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	f003 0308 	and.w	r3, r3, #8
 800fca4:	2b08      	cmp	r3, #8
 800fca6:	d11b      	bne.n	800fce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f06f 0208 	mvn.w	r2, #8
 800fcb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2204      	movs	r2, #4
 800fcb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	69db      	ldr	r3, [r3, #28]
 800fcbe:	f003 0303 	and.w	r3, r3, #3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d003      	beq.n	800fcce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f8b1 	bl	800fe2e <HAL_TIM_IC_CaptureCallback>
 800fccc:	e005      	b.n	800fcda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 f8a3 	bl	800fe1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 f8b4 	bl	800fe42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	f003 0310 	and.w	r3, r3, #16
 800fcea:	2b10      	cmp	r3, #16
 800fcec:	d122      	bne.n	800fd34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	f003 0310 	and.w	r3, r3, #16
 800fcf8:	2b10      	cmp	r3, #16
 800fcfa:	d11b      	bne.n	800fd34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f06f 0210 	mvn.w	r2, #16
 800fd04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2208      	movs	r2, #8
 800fd0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	69db      	ldr	r3, [r3, #28]
 800fd12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d003      	beq.n	800fd22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 f887 	bl	800fe2e <HAL_TIM_IC_CaptureCallback>
 800fd20:	e005      	b.n	800fd2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f879 	bl	800fe1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f000 f88a 	bl	800fe42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d10e      	bne.n	800fd60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d107      	bne.n	800fd60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f06f 0201 	mvn.w	r2, #1
 800fd58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f7f1 fd22 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd6a:	2b80      	cmp	r3, #128	; 0x80
 800fd6c:	d10e      	bne.n	800fd8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd78:	2b80      	cmp	r3, #128	; 0x80
 800fd7a:	d107      	bne.n	800fd8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fd84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 f91a 	bl	800ffc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd9a:	d10e      	bne.n	800fdba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda6:	2b80      	cmp	r3, #128	; 0x80
 800fda8:	d107      	bne.n	800fdba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fdb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 f90d 	bl	800ffd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdc4:	2b40      	cmp	r3, #64	; 0x40
 800fdc6:	d10e      	bne.n	800fde6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdd2:	2b40      	cmp	r3, #64	; 0x40
 800fdd4:	d107      	bne.n	800fde6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fdde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 f838 	bl	800fe56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	f003 0320 	and.w	r3, r3, #32
 800fdf0:	2b20      	cmp	r3, #32
 800fdf2:	d10e      	bne.n	800fe12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	f003 0320 	and.w	r3, r3, #32
 800fdfe:	2b20      	cmp	r3, #32
 800fe00:	d107      	bne.n	800fe12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f06f 0220 	mvn.w	r2, #32
 800fe0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f8cd 	bl	800ffac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe12:	bf00      	nop
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fe1a:	b480      	push	{r7}
 800fe1c:	b083      	sub	sp, #12
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fe22:	bf00      	nop
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b083      	sub	sp, #12
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe36:	bf00      	nop
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe42:	b480      	push	{r7}
 800fe44:	b083      	sub	sp, #12
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fe4a:	bf00      	nop
 800fe4c:	370c      	adds	r7, #12
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr

0800fe56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fe56:	b480      	push	{r7}
 800fe58:	b083      	sub	sp, #12
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fe5e:	bf00      	nop
 800fe60:	370c      	adds	r7, #12
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
	...

0800fe6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a40      	ldr	r2, [pc, #256]	; (800ff80 <TIM_Base_SetConfig+0x114>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d013      	beq.n	800feac <TIM_Base_SetConfig+0x40>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe8a:	d00f      	beq.n	800feac <TIM_Base_SetConfig+0x40>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4a3d      	ldr	r2, [pc, #244]	; (800ff84 <TIM_Base_SetConfig+0x118>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d00b      	beq.n	800feac <TIM_Base_SetConfig+0x40>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4a3c      	ldr	r2, [pc, #240]	; (800ff88 <TIM_Base_SetConfig+0x11c>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d007      	beq.n	800feac <TIM_Base_SetConfig+0x40>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4a3b      	ldr	r2, [pc, #236]	; (800ff8c <TIM_Base_SetConfig+0x120>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d003      	beq.n	800feac <TIM_Base_SetConfig+0x40>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4a3a      	ldr	r2, [pc, #232]	; (800ff90 <TIM_Base_SetConfig+0x124>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d108      	bne.n	800febe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	4313      	orrs	r3, r2
 800febc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4a2f      	ldr	r2, [pc, #188]	; (800ff80 <TIM_Base_SetConfig+0x114>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d02b      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fecc:	d027      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4a2c      	ldr	r2, [pc, #176]	; (800ff84 <TIM_Base_SetConfig+0x118>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d023      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4a2b      	ldr	r2, [pc, #172]	; (800ff88 <TIM_Base_SetConfig+0x11c>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d01f      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4a2a      	ldr	r2, [pc, #168]	; (800ff8c <TIM_Base_SetConfig+0x120>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d01b      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a29      	ldr	r2, [pc, #164]	; (800ff90 <TIM_Base_SetConfig+0x124>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d017      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a28      	ldr	r2, [pc, #160]	; (800ff94 <TIM_Base_SetConfig+0x128>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d013      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4a27      	ldr	r2, [pc, #156]	; (800ff98 <TIM_Base_SetConfig+0x12c>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d00f      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4a26      	ldr	r2, [pc, #152]	; (800ff9c <TIM_Base_SetConfig+0x130>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d00b      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4a25      	ldr	r2, [pc, #148]	; (800ffa0 <TIM_Base_SetConfig+0x134>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d007      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a24      	ldr	r2, [pc, #144]	; (800ffa4 <TIM_Base_SetConfig+0x138>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d003      	beq.n	800ff1e <TIM_Base_SetConfig+0xb2>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a23      	ldr	r2, [pc, #140]	; (800ffa8 <TIM_Base_SetConfig+0x13c>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d108      	bne.n	800ff30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	695b      	ldr	r3, [r3, #20]
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	689a      	ldr	r2, [r3, #8]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a0a      	ldr	r2, [pc, #40]	; (800ff80 <TIM_Base_SetConfig+0x114>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d003      	beq.n	800ff64 <TIM_Base_SetConfig+0xf8>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a0c      	ldr	r2, [pc, #48]	; (800ff90 <TIM_Base_SetConfig+0x124>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d103      	bne.n	800ff6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	691a      	ldr	r2, [r3, #16]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	615a      	str	r2, [r3, #20]
}
 800ff72:	bf00      	nop
 800ff74:	3714      	adds	r7, #20
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop
 800ff80:	40010000 	.word	0x40010000
 800ff84:	40000400 	.word	0x40000400
 800ff88:	40000800 	.word	0x40000800
 800ff8c:	40000c00 	.word	0x40000c00
 800ff90:	40010400 	.word	0x40010400
 800ff94:	40014000 	.word	0x40014000
 800ff98:	40014400 	.word	0x40014400
 800ff9c:	40014800 	.word	0x40014800
 800ffa0:	40001800 	.word	0x40001800
 800ffa4:	40001c00 	.word	0x40001c00
 800ffa8:	40002000 	.word	0x40002000

0800ffac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ffc8:	bf00      	nop
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fff6:	2301      	movs	r3, #1
 800fff8:	e040      	b.n	801007c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d106      	bne.n	8010010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2200      	movs	r2, #0
 8010006:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7f1 ff1a 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2224      	movs	r2, #36	; 0x24
 8010014:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f022 0201 	bic.w	r2, r2, #1
 8010024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f956 	bl	80102d8 <UART_SetConfig>
 801002c:	4603      	mov	r3, r0
 801002e:	2b01      	cmp	r3, #1
 8010030:	d101      	bne.n	8010036 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010032:	2301      	movs	r3, #1
 8010034:	e022      	b.n	801007c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003a:	2b00      	cmp	r3, #0
 801003c:	d002      	beq.n	8010044 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 fbee 	bl	8010820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	685a      	ldr	r2, [r3, #4]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	689a      	ldr	r2, [r3, #8]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010062:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f042 0201 	orr.w	r2, r2, #1
 8010072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 fc75 	bl	8010964 <UART_CheckIdleState>
 801007a:	4603      	mov	r3, r0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	; 0x28
 8010088:	af02      	add	r7, sp, #8
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	4613      	mov	r3, r2
 8010092:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010098:	2b20      	cmp	r3, #32
 801009a:	d17f      	bne.n	801019c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d002      	beq.n	80100a8 <HAL_UART_Transmit+0x24>
 80100a2:	88fb      	ldrh	r3, [r7, #6]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80100a8:	2301      	movs	r3, #1
 80100aa:	e078      	b.n	801019e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d101      	bne.n	80100ba <HAL_UART_Transmit+0x36>
 80100b6:	2302      	movs	r3, #2
 80100b8:	e071      	b.n	801019e <HAL_UART_Transmit+0x11a>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2200      	movs	r2, #0
 80100c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2221      	movs	r2, #33	; 0x21
 80100cc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80100ce:	f7f9 fdd3 	bl	8009c78 <HAL_GetTick>
 80100d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	88fa      	ldrh	r2, [r7, #6]
 80100d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	88fa      	ldrh	r2, [r7, #6]
 80100e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100ec:	d108      	bne.n	8010100 <HAL_UART_Transmit+0x7c>
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d104      	bne.n	8010100 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	61bb      	str	r3, [r7, #24]
 80100fe:	e003      	b.n	8010108 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010104:	2300      	movs	r3, #0
 8010106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010108:	e02c      	b.n	8010164 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	9300      	str	r3, [sp, #0]
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	2200      	movs	r2, #0
 8010112:	2180      	movs	r1, #128	; 0x80
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f000 fc54 	bl	80109c2 <UART_WaitOnFlagUntilTimeout>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8010120:	2303      	movs	r3, #3
 8010122:	e03c      	b.n	801019e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d10b      	bne.n	8010142 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	461a      	mov	r2, r3
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010138:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	3302      	adds	r3, #2
 801013e:	61bb      	str	r3, [r7, #24]
 8010140:	e007      	b.n	8010152 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	781a      	ldrb	r2, [r3, #0]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	3301      	adds	r3, #1
 8010150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010158:	b29b      	uxth	r3, r3
 801015a:	3b01      	subs	r3, #1
 801015c:	b29a      	uxth	r2, r3
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801016a:	b29b      	uxth	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1cc      	bne.n	801010a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	2200      	movs	r2, #0
 8010178:	2140      	movs	r1, #64	; 0x40
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f000 fc21 	bl	80109c2 <UART_WaitOnFlagUntilTimeout>
 8010180:	4603      	mov	r3, r0
 8010182:	2b00      	cmp	r3, #0
 8010184:	d001      	beq.n	801018a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e009      	b.n	801019e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2220      	movs	r2, #32
 801018e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	e000      	b.n	801019e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 801019c:	2302      	movs	r3, #2
  }
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3720      	adds	r7, #32
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
	...

080101a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	4613      	mov	r3, r2
 80101b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101ba:	2b20      	cmp	r3, #32
 80101bc:	d16c      	bne.n	8010298 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d002      	beq.n	80101ca <HAL_UART_Receive_DMA+0x22>
 80101c4:	88fb      	ldrh	r3, [r7, #6]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d101      	bne.n	80101ce <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80101ca:	2301      	movs	r3, #1
 80101cc:	e065      	b.n	801029a <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d101      	bne.n	80101dc <HAL_UART_Receive_DMA+0x34>
 80101d8:	2302      	movs	r3, #2
 80101da:	e05e      	b.n	801029a <HAL_UART_Receive_DMA+0xf2>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	88fa      	ldrh	r2, [r7, #6]
 80101ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2200      	movs	r2, #0
 80101f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2222      	movs	r2, #34	; 0x22
 80101fc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010202:	2b00      	cmp	r3, #0
 8010204:	d02a      	beq.n	801025c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801020a:	4a26      	ldr	r2, [pc, #152]	; (80102a4 <HAL_UART_Receive_DMA+0xfc>)
 801020c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010212:	4a25      	ldr	r2, [pc, #148]	; (80102a8 <HAL_UART_Receive_DMA+0x100>)
 8010214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801021a:	4a24      	ldr	r2, [pc, #144]	; (80102ac <HAL_UART_Receive_DMA+0x104>)
 801021c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010222:	2200      	movs	r2, #0
 8010224:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	3324      	adds	r3, #36	; 0x24
 8010230:	4619      	mov	r1, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010236:	461a      	mov	r2, r3
 8010238:	88fb      	ldrh	r3, [r7, #6]
 801023a:	f7fa f8cb 	bl	800a3d4 <HAL_DMA_Start_IT>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00b      	beq.n	801025c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2210      	movs	r2, #16
 8010248:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2200      	movs	r2, #0
 801024e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2220      	movs	r2, #32
 8010256:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	e01e      	b.n	801029a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010272:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	689a      	ldr	r2, [r3, #8]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f042 0201 	orr.w	r2, r2, #1
 8010282:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	689a      	ldr	r2, [r3, #8]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010292:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	e000      	b.n	801029a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8010298:	2302      	movs	r3, #2
  }
}
 801029a:	4618      	mov	r0, r3
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	08010abd 	.word	0x08010abd
 80102a8:	08010b21 	.word	0x08010b21
 80102ac:	08010b3d 	.word	0x08010b3d

080102b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80102b8:	bf00      	nop
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80102cc:	bf00      	nop
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b088      	sub	sp, #32
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80102e0:	2300      	movs	r3, #0
 80102e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	689a      	ldr	r2, [r3, #8]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	431a      	orrs	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	695b      	ldr	r3, [r3, #20]
 80102f6:	431a      	orrs	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	69db      	ldr	r3, [r3, #28]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	4bb1      	ldr	r3, [pc, #708]	; (80105cc <UART_SetConfig+0x2f4>)
 8010308:	4013      	ands	r3, r2
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	6812      	ldr	r2, [r2, #0]
 801030e:	6939      	ldr	r1, [r7, #16]
 8010310:	430b      	orrs	r3, r1
 8010312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	68da      	ldr	r2, [r3, #12]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	430a      	orrs	r2, r1
 8010328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	699b      	ldr	r3, [r3, #24]
 801032e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6a1b      	ldr	r3, [r3, #32]
 8010334:	693a      	ldr	r2, [r7, #16]
 8010336:	4313      	orrs	r3, r2
 8010338:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	693a      	ldr	r2, [r7, #16]
 801034a:	430a      	orrs	r2, r1
 801034c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a9f      	ldr	r2, [pc, #636]	; (80105d0 <UART_SetConfig+0x2f8>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d121      	bne.n	801039c <UART_SetConfig+0xc4>
 8010358:	4b9e      	ldr	r3, [pc, #632]	; (80105d4 <UART_SetConfig+0x2fc>)
 801035a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801035e:	f003 0303 	and.w	r3, r3, #3
 8010362:	2b03      	cmp	r3, #3
 8010364:	d816      	bhi.n	8010394 <UART_SetConfig+0xbc>
 8010366:	a201      	add	r2, pc, #4	; (adr r2, 801036c <UART_SetConfig+0x94>)
 8010368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801036c:	0801037d 	.word	0x0801037d
 8010370:	08010389 	.word	0x08010389
 8010374:	08010383 	.word	0x08010383
 8010378:	0801038f 	.word	0x0801038f
 801037c:	2301      	movs	r3, #1
 801037e:	77fb      	strb	r3, [r7, #31]
 8010380:	e151      	b.n	8010626 <UART_SetConfig+0x34e>
 8010382:	2302      	movs	r3, #2
 8010384:	77fb      	strb	r3, [r7, #31]
 8010386:	e14e      	b.n	8010626 <UART_SetConfig+0x34e>
 8010388:	2304      	movs	r3, #4
 801038a:	77fb      	strb	r3, [r7, #31]
 801038c:	e14b      	b.n	8010626 <UART_SetConfig+0x34e>
 801038e:	2308      	movs	r3, #8
 8010390:	77fb      	strb	r3, [r7, #31]
 8010392:	e148      	b.n	8010626 <UART_SetConfig+0x34e>
 8010394:	2310      	movs	r3, #16
 8010396:	77fb      	strb	r3, [r7, #31]
 8010398:	bf00      	nop
 801039a:	e144      	b.n	8010626 <UART_SetConfig+0x34e>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a8d      	ldr	r2, [pc, #564]	; (80105d8 <UART_SetConfig+0x300>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d134      	bne.n	8010410 <UART_SetConfig+0x138>
 80103a6:	4b8b      	ldr	r3, [pc, #556]	; (80105d4 <UART_SetConfig+0x2fc>)
 80103a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ac:	f003 030c 	and.w	r3, r3, #12
 80103b0:	2b0c      	cmp	r3, #12
 80103b2:	d829      	bhi.n	8010408 <UART_SetConfig+0x130>
 80103b4:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <UART_SetConfig+0xe4>)
 80103b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ba:	bf00      	nop
 80103bc:	080103f1 	.word	0x080103f1
 80103c0:	08010409 	.word	0x08010409
 80103c4:	08010409 	.word	0x08010409
 80103c8:	08010409 	.word	0x08010409
 80103cc:	080103fd 	.word	0x080103fd
 80103d0:	08010409 	.word	0x08010409
 80103d4:	08010409 	.word	0x08010409
 80103d8:	08010409 	.word	0x08010409
 80103dc:	080103f7 	.word	0x080103f7
 80103e0:	08010409 	.word	0x08010409
 80103e4:	08010409 	.word	0x08010409
 80103e8:	08010409 	.word	0x08010409
 80103ec:	08010403 	.word	0x08010403
 80103f0:	2300      	movs	r3, #0
 80103f2:	77fb      	strb	r3, [r7, #31]
 80103f4:	e117      	b.n	8010626 <UART_SetConfig+0x34e>
 80103f6:	2302      	movs	r3, #2
 80103f8:	77fb      	strb	r3, [r7, #31]
 80103fa:	e114      	b.n	8010626 <UART_SetConfig+0x34e>
 80103fc:	2304      	movs	r3, #4
 80103fe:	77fb      	strb	r3, [r7, #31]
 8010400:	e111      	b.n	8010626 <UART_SetConfig+0x34e>
 8010402:	2308      	movs	r3, #8
 8010404:	77fb      	strb	r3, [r7, #31]
 8010406:	e10e      	b.n	8010626 <UART_SetConfig+0x34e>
 8010408:	2310      	movs	r3, #16
 801040a:	77fb      	strb	r3, [r7, #31]
 801040c:	bf00      	nop
 801040e:	e10a      	b.n	8010626 <UART_SetConfig+0x34e>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4a71      	ldr	r2, [pc, #452]	; (80105dc <UART_SetConfig+0x304>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d120      	bne.n	801045c <UART_SetConfig+0x184>
 801041a:	4b6e      	ldr	r3, [pc, #440]	; (80105d4 <UART_SetConfig+0x2fc>)
 801041c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010420:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010424:	2b10      	cmp	r3, #16
 8010426:	d00f      	beq.n	8010448 <UART_SetConfig+0x170>
 8010428:	2b10      	cmp	r3, #16
 801042a:	d802      	bhi.n	8010432 <UART_SetConfig+0x15a>
 801042c:	2b00      	cmp	r3, #0
 801042e:	d005      	beq.n	801043c <UART_SetConfig+0x164>
 8010430:	e010      	b.n	8010454 <UART_SetConfig+0x17c>
 8010432:	2b20      	cmp	r3, #32
 8010434:	d005      	beq.n	8010442 <UART_SetConfig+0x16a>
 8010436:	2b30      	cmp	r3, #48	; 0x30
 8010438:	d009      	beq.n	801044e <UART_SetConfig+0x176>
 801043a:	e00b      	b.n	8010454 <UART_SetConfig+0x17c>
 801043c:	2300      	movs	r3, #0
 801043e:	77fb      	strb	r3, [r7, #31]
 8010440:	e0f1      	b.n	8010626 <UART_SetConfig+0x34e>
 8010442:	2302      	movs	r3, #2
 8010444:	77fb      	strb	r3, [r7, #31]
 8010446:	e0ee      	b.n	8010626 <UART_SetConfig+0x34e>
 8010448:	2304      	movs	r3, #4
 801044a:	77fb      	strb	r3, [r7, #31]
 801044c:	e0eb      	b.n	8010626 <UART_SetConfig+0x34e>
 801044e:	2308      	movs	r3, #8
 8010450:	77fb      	strb	r3, [r7, #31]
 8010452:	e0e8      	b.n	8010626 <UART_SetConfig+0x34e>
 8010454:	2310      	movs	r3, #16
 8010456:	77fb      	strb	r3, [r7, #31]
 8010458:	bf00      	nop
 801045a:	e0e4      	b.n	8010626 <UART_SetConfig+0x34e>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a5f      	ldr	r2, [pc, #380]	; (80105e0 <UART_SetConfig+0x308>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d120      	bne.n	80104a8 <UART_SetConfig+0x1d0>
 8010466:	4b5b      	ldr	r3, [pc, #364]	; (80105d4 <UART_SetConfig+0x2fc>)
 8010468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801046c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010470:	2b40      	cmp	r3, #64	; 0x40
 8010472:	d00f      	beq.n	8010494 <UART_SetConfig+0x1bc>
 8010474:	2b40      	cmp	r3, #64	; 0x40
 8010476:	d802      	bhi.n	801047e <UART_SetConfig+0x1a6>
 8010478:	2b00      	cmp	r3, #0
 801047a:	d005      	beq.n	8010488 <UART_SetConfig+0x1b0>
 801047c:	e010      	b.n	80104a0 <UART_SetConfig+0x1c8>
 801047e:	2b80      	cmp	r3, #128	; 0x80
 8010480:	d005      	beq.n	801048e <UART_SetConfig+0x1b6>
 8010482:	2bc0      	cmp	r3, #192	; 0xc0
 8010484:	d009      	beq.n	801049a <UART_SetConfig+0x1c2>
 8010486:	e00b      	b.n	80104a0 <UART_SetConfig+0x1c8>
 8010488:	2300      	movs	r3, #0
 801048a:	77fb      	strb	r3, [r7, #31]
 801048c:	e0cb      	b.n	8010626 <UART_SetConfig+0x34e>
 801048e:	2302      	movs	r3, #2
 8010490:	77fb      	strb	r3, [r7, #31]
 8010492:	e0c8      	b.n	8010626 <UART_SetConfig+0x34e>
 8010494:	2304      	movs	r3, #4
 8010496:	77fb      	strb	r3, [r7, #31]
 8010498:	e0c5      	b.n	8010626 <UART_SetConfig+0x34e>
 801049a:	2308      	movs	r3, #8
 801049c:	77fb      	strb	r3, [r7, #31]
 801049e:	e0c2      	b.n	8010626 <UART_SetConfig+0x34e>
 80104a0:	2310      	movs	r3, #16
 80104a2:	77fb      	strb	r3, [r7, #31]
 80104a4:	bf00      	nop
 80104a6:	e0be      	b.n	8010626 <UART_SetConfig+0x34e>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a4d      	ldr	r2, [pc, #308]	; (80105e4 <UART_SetConfig+0x30c>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d124      	bne.n	80104fc <UART_SetConfig+0x224>
 80104b2:	4b48      	ldr	r3, [pc, #288]	; (80105d4 <UART_SetConfig+0x2fc>)
 80104b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80104bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c0:	d012      	beq.n	80104e8 <UART_SetConfig+0x210>
 80104c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c6:	d802      	bhi.n	80104ce <UART_SetConfig+0x1f6>
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d007      	beq.n	80104dc <UART_SetConfig+0x204>
 80104cc:	e012      	b.n	80104f4 <UART_SetConfig+0x21c>
 80104ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104d2:	d006      	beq.n	80104e2 <UART_SetConfig+0x20a>
 80104d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104d8:	d009      	beq.n	80104ee <UART_SetConfig+0x216>
 80104da:	e00b      	b.n	80104f4 <UART_SetConfig+0x21c>
 80104dc:	2300      	movs	r3, #0
 80104de:	77fb      	strb	r3, [r7, #31]
 80104e0:	e0a1      	b.n	8010626 <UART_SetConfig+0x34e>
 80104e2:	2302      	movs	r3, #2
 80104e4:	77fb      	strb	r3, [r7, #31]
 80104e6:	e09e      	b.n	8010626 <UART_SetConfig+0x34e>
 80104e8:	2304      	movs	r3, #4
 80104ea:	77fb      	strb	r3, [r7, #31]
 80104ec:	e09b      	b.n	8010626 <UART_SetConfig+0x34e>
 80104ee:	2308      	movs	r3, #8
 80104f0:	77fb      	strb	r3, [r7, #31]
 80104f2:	e098      	b.n	8010626 <UART_SetConfig+0x34e>
 80104f4:	2310      	movs	r3, #16
 80104f6:	77fb      	strb	r3, [r7, #31]
 80104f8:	bf00      	nop
 80104fa:	e094      	b.n	8010626 <UART_SetConfig+0x34e>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a39      	ldr	r2, [pc, #228]	; (80105e8 <UART_SetConfig+0x310>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d124      	bne.n	8010550 <UART_SetConfig+0x278>
 8010506:	4b33      	ldr	r3, [pc, #204]	; (80105d4 <UART_SetConfig+0x2fc>)
 8010508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801050c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010514:	d012      	beq.n	801053c <UART_SetConfig+0x264>
 8010516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801051a:	d802      	bhi.n	8010522 <UART_SetConfig+0x24a>
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <UART_SetConfig+0x258>
 8010520:	e012      	b.n	8010548 <UART_SetConfig+0x270>
 8010522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010526:	d006      	beq.n	8010536 <UART_SetConfig+0x25e>
 8010528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801052c:	d009      	beq.n	8010542 <UART_SetConfig+0x26a>
 801052e:	e00b      	b.n	8010548 <UART_SetConfig+0x270>
 8010530:	2301      	movs	r3, #1
 8010532:	77fb      	strb	r3, [r7, #31]
 8010534:	e077      	b.n	8010626 <UART_SetConfig+0x34e>
 8010536:	2302      	movs	r3, #2
 8010538:	77fb      	strb	r3, [r7, #31]
 801053a:	e074      	b.n	8010626 <UART_SetConfig+0x34e>
 801053c:	2304      	movs	r3, #4
 801053e:	77fb      	strb	r3, [r7, #31]
 8010540:	e071      	b.n	8010626 <UART_SetConfig+0x34e>
 8010542:	2308      	movs	r3, #8
 8010544:	77fb      	strb	r3, [r7, #31]
 8010546:	e06e      	b.n	8010626 <UART_SetConfig+0x34e>
 8010548:	2310      	movs	r3, #16
 801054a:	77fb      	strb	r3, [r7, #31]
 801054c:	bf00      	nop
 801054e:	e06a      	b.n	8010626 <UART_SetConfig+0x34e>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a25      	ldr	r2, [pc, #148]	; (80105ec <UART_SetConfig+0x314>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d124      	bne.n	80105a4 <UART_SetConfig+0x2cc>
 801055a:	4b1e      	ldr	r3, [pc, #120]	; (80105d4 <UART_SetConfig+0x2fc>)
 801055c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010560:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010568:	d012      	beq.n	8010590 <UART_SetConfig+0x2b8>
 801056a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801056e:	d802      	bhi.n	8010576 <UART_SetConfig+0x29e>
 8010570:	2b00      	cmp	r3, #0
 8010572:	d007      	beq.n	8010584 <UART_SetConfig+0x2ac>
 8010574:	e012      	b.n	801059c <UART_SetConfig+0x2c4>
 8010576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801057a:	d006      	beq.n	801058a <UART_SetConfig+0x2b2>
 801057c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010580:	d009      	beq.n	8010596 <UART_SetConfig+0x2be>
 8010582:	e00b      	b.n	801059c <UART_SetConfig+0x2c4>
 8010584:	2300      	movs	r3, #0
 8010586:	77fb      	strb	r3, [r7, #31]
 8010588:	e04d      	b.n	8010626 <UART_SetConfig+0x34e>
 801058a:	2302      	movs	r3, #2
 801058c:	77fb      	strb	r3, [r7, #31]
 801058e:	e04a      	b.n	8010626 <UART_SetConfig+0x34e>
 8010590:	2304      	movs	r3, #4
 8010592:	77fb      	strb	r3, [r7, #31]
 8010594:	e047      	b.n	8010626 <UART_SetConfig+0x34e>
 8010596:	2308      	movs	r3, #8
 8010598:	77fb      	strb	r3, [r7, #31]
 801059a:	e044      	b.n	8010626 <UART_SetConfig+0x34e>
 801059c:	2310      	movs	r3, #16
 801059e:	77fb      	strb	r3, [r7, #31]
 80105a0:	bf00      	nop
 80105a2:	e040      	b.n	8010626 <UART_SetConfig+0x34e>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a11      	ldr	r2, [pc, #68]	; (80105f0 <UART_SetConfig+0x318>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d139      	bne.n	8010622 <UART_SetConfig+0x34a>
 80105ae:	4b09      	ldr	r3, [pc, #36]	; (80105d4 <UART_SetConfig+0x2fc>)
 80105b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80105b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105bc:	d027      	beq.n	801060e <UART_SetConfig+0x336>
 80105be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105c2:	d817      	bhi.n	80105f4 <UART_SetConfig+0x31c>
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d01c      	beq.n	8010602 <UART_SetConfig+0x32a>
 80105c8:	e027      	b.n	801061a <UART_SetConfig+0x342>
 80105ca:	bf00      	nop
 80105cc:	efff69f3 	.word	0xefff69f3
 80105d0:	40011000 	.word	0x40011000
 80105d4:	40023800 	.word	0x40023800
 80105d8:	40004400 	.word	0x40004400
 80105dc:	40004800 	.word	0x40004800
 80105e0:	40004c00 	.word	0x40004c00
 80105e4:	40005000 	.word	0x40005000
 80105e8:	40011400 	.word	0x40011400
 80105ec:	40007800 	.word	0x40007800
 80105f0:	40007c00 	.word	0x40007c00
 80105f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105f8:	d006      	beq.n	8010608 <UART_SetConfig+0x330>
 80105fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80105fe:	d009      	beq.n	8010614 <UART_SetConfig+0x33c>
 8010600:	e00b      	b.n	801061a <UART_SetConfig+0x342>
 8010602:	2300      	movs	r3, #0
 8010604:	77fb      	strb	r3, [r7, #31]
 8010606:	e00e      	b.n	8010626 <UART_SetConfig+0x34e>
 8010608:	2302      	movs	r3, #2
 801060a:	77fb      	strb	r3, [r7, #31]
 801060c:	e00b      	b.n	8010626 <UART_SetConfig+0x34e>
 801060e:	2304      	movs	r3, #4
 8010610:	77fb      	strb	r3, [r7, #31]
 8010612:	e008      	b.n	8010626 <UART_SetConfig+0x34e>
 8010614:	2308      	movs	r3, #8
 8010616:	77fb      	strb	r3, [r7, #31]
 8010618:	e005      	b.n	8010626 <UART_SetConfig+0x34e>
 801061a:	2310      	movs	r3, #16
 801061c:	77fb      	strb	r3, [r7, #31]
 801061e:	bf00      	nop
 8010620:	e001      	b.n	8010626 <UART_SetConfig+0x34e>
 8010622:	2310      	movs	r3, #16
 8010624:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	69db      	ldr	r3, [r3, #28]
 801062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801062e:	d17c      	bne.n	801072a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8010630:	7ffb      	ldrb	r3, [r7, #31]
 8010632:	2b08      	cmp	r3, #8
 8010634:	d859      	bhi.n	80106ea <UART_SetConfig+0x412>
 8010636:	a201      	add	r2, pc, #4	; (adr r2, 801063c <UART_SetConfig+0x364>)
 8010638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801063c:	08010661 	.word	0x08010661
 8010640:	0801067f 	.word	0x0801067f
 8010644:	0801069d 	.word	0x0801069d
 8010648:	080106eb 	.word	0x080106eb
 801064c:	080106b5 	.word	0x080106b5
 8010650:	080106eb 	.word	0x080106eb
 8010654:	080106eb 	.word	0x080106eb
 8010658:	080106eb 	.word	0x080106eb
 801065c:	080106d3 	.word	0x080106d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8010660:	f7fe fd96 	bl	800f190 <HAL_RCC_GetPCLK1Freq>
 8010664:	4603      	mov	r3, r0
 8010666:	005a      	lsls	r2, r3, #1
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	085b      	lsrs	r3, r3, #1
 801066e:	441a      	add	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	fbb2 f3f3 	udiv	r3, r2, r3
 8010678:	b29b      	uxth	r3, r3
 801067a:	61bb      	str	r3, [r7, #24]
        break;
 801067c:	e038      	b.n	80106f0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 801067e:	f7fe fd9b 	bl	800f1b8 <HAL_RCC_GetPCLK2Freq>
 8010682:	4603      	mov	r3, r0
 8010684:	005a      	lsls	r2, r3, #1
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	085b      	lsrs	r3, r3, #1
 801068c:	441a      	add	r2, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	fbb2 f3f3 	udiv	r3, r2, r3
 8010696:	b29b      	uxth	r3, r3
 8010698:	61bb      	str	r3, [r7, #24]
        break;
 801069a:	e029      	b.n	80106f0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	085a      	lsrs	r2, r3, #1
 80106a2:	4b5d      	ldr	r3, [pc, #372]	; (8010818 <UART_SetConfig+0x540>)
 80106a4:	4413      	add	r3, r2
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	6852      	ldr	r2, [r2, #4]
 80106aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	61bb      	str	r3, [r7, #24]
        break;
 80106b2:	e01d      	b.n	80106f0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80106b4:	f7fe fcae 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 80106b8:	4603      	mov	r3, r0
 80106ba:	005a      	lsls	r2, r3, #1
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	085b      	lsrs	r3, r3, #1
 80106c2:	441a      	add	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	61bb      	str	r3, [r7, #24]
        break;
 80106d0:	e00e      	b.n	80106f0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	085b      	lsrs	r3, r3, #1
 80106d8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	61bb      	str	r3, [r7, #24]
        break;
 80106e8:	e002      	b.n	80106f0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80106ea:	2301      	movs	r3, #1
 80106ec:	75fb      	strb	r3, [r7, #23]
        break;
 80106ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	2b0f      	cmp	r3, #15
 80106f4:	d916      	bls.n	8010724 <UART_SetConfig+0x44c>
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106fc:	d212      	bcs.n	8010724 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	b29b      	uxth	r3, r3
 8010702:	f023 030f 	bic.w	r3, r3, #15
 8010706:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	085b      	lsrs	r3, r3, #1
 801070c:	b29b      	uxth	r3, r3
 801070e:	f003 0307 	and.w	r3, r3, #7
 8010712:	b29a      	uxth	r2, r3
 8010714:	89fb      	ldrh	r3, [r7, #14]
 8010716:	4313      	orrs	r3, r2
 8010718:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	89fa      	ldrh	r2, [r7, #14]
 8010720:	60da      	str	r2, [r3, #12]
 8010722:	e06e      	b.n	8010802 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8010724:	2301      	movs	r3, #1
 8010726:	75fb      	strb	r3, [r7, #23]
 8010728:	e06b      	b.n	8010802 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 801072a:	7ffb      	ldrb	r3, [r7, #31]
 801072c:	2b08      	cmp	r3, #8
 801072e:	d857      	bhi.n	80107e0 <UART_SetConfig+0x508>
 8010730:	a201      	add	r2, pc, #4	; (adr r2, 8010738 <UART_SetConfig+0x460>)
 8010732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010736:	bf00      	nop
 8010738:	0801075d 	.word	0x0801075d
 801073c:	08010779 	.word	0x08010779
 8010740:	08010795 	.word	0x08010795
 8010744:	080107e1 	.word	0x080107e1
 8010748:	080107ad 	.word	0x080107ad
 801074c:	080107e1 	.word	0x080107e1
 8010750:	080107e1 	.word	0x080107e1
 8010754:	080107e1 	.word	0x080107e1
 8010758:	080107c9 	.word	0x080107c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801075c:	f7fe fd18 	bl	800f190 <HAL_RCC_GetPCLK1Freq>
 8010760:	4602      	mov	r2, r0
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	085b      	lsrs	r3, r3, #1
 8010768:	441a      	add	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010772:	b29b      	uxth	r3, r3
 8010774:	61bb      	str	r3, [r7, #24]
        break;
 8010776:	e036      	b.n	80107e6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8010778:	f7fe fd1e 	bl	800f1b8 <HAL_RCC_GetPCLK2Freq>
 801077c:	4602      	mov	r2, r0
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	085b      	lsrs	r3, r3, #1
 8010784:	441a      	add	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	fbb2 f3f3 	udiv	r3, r2, r3
 801078e:	b29b      	uxth	r3, r3
 8010790:	61bb      	str	r3, [r7, #24]
        break;
 8010792:	e028      	b.n	80107e6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	085a      	lsrs	r2, r3, #1
 801079a:	4b20      	ldr	r3, [pc, #128]	; (801081c <UART_SetConfig+0x544>)
 801079c:	4413      	add	r3, r2
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	6852      	ldr	r2, [r2, #4]
 80107a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	61bb      	str	r3, [r7, #24]
        break;
 80107aa:	e01c      	b.n	80107e6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80107ac:	f7fe fc32 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 80107b0:	4602      	mov	r2, r0
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	085b      	lsrs	r3, r3, #1
 80107b8:	441a      	add	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	fbb2 f3f3 	udiv	r3, r2, r3
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	61bb      	str	r3, [r7, #24]
        break;
 80107c6:	e00e      	b.n	80107e6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	085b      	lsrs	r3, r3, #1
 80107ce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80107da:	b29b      	uxth	r3, r3
 80107dc:	61bb      	str	r3, [r7, #24]
        break;
 80107de:	e002      	b.n	80107e6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80107e0:	2301      	movs	r3, #1
 80107e2:	75fb      	strb	r3, [r7, #23]
        break;
 80107e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	2b0f      	cmp	r3, #15
 80107ea:	d908      	bls.n	80107fe <UART_SetConfig+0x526>
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107f2:	d204      	bcs.n	80107fe <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	69ba      	ldr	r2, [r7, #24]
 80107fa:	60da      	str	r2, [r3, #12]
 80107fc:	e001      	b.n	8010802 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80107fe:	2301      	movs	r3, #1
 8010800:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 801080e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3720      	adds	r7, #32
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	01e84800 	.word	0x01e84800
 801081c:	00f42400 	.word	0x00f42400

08010820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082c:	f003 0301 	and.w	r3, r3, #1
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00a      	beq.n	801084a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	430a      	orrs	r2, r1
 8010848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084e:	f003 0302 	and.w	r3, r3, #2
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00a      	beq.n	801086c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	430a      	orrs	r2, r1
 801086a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010870:	f003 0304 	and.w	r3, r3, #4
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00a      	beq.n	801088e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	430a      	orrs	r2, r1
 801088c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010892:	f003 0308 	and.w	r3, r3, #8
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00a      	beq.n	80108b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	430a      	orrs	r2, r1
 80108ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b4:	f003 0310 	and.w	r3, r3, #16
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00a      	beq.n	80108d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	430a      	orrs	r2, r1
 80108d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d6:	f003 0320 	and.w	r3, r3, #32
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00a      	beq.n	80108f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	430a      	orrs	r2, r1
 80108f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d01a      	beq.n	8010936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	430a      	orrs	r2, r1
 8010914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801091a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801091e:	d10a      	bne.n	8010936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	430a      	orrs	r2, r1
 8010934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00a      	beq.n	8010958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	430a      	orrs	r2, r1
 8010956:	605a      	str	r2, [r3, #4]
  }
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b086      	sub	sp, #24
 8010968:	af02      	add	r7, sp, #8
 801096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010972:	f7f9 f981 	bl	8009c78 <HAL_GetTick>
 8010976:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f003 0308 	and.w	r3, r3, #8
 8010982:	2b08      	cmp	r3, #8
 8010984:	d10e      	bne.n	80109a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010986:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801098a:	9300      	str	r3, [sp, #0]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2200      	movs	r2, #0
 8010990:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 f814 	bl	80109c2 <UART_WaitOnFlagUntilTimeout>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109a0:	2303      	movs	r3, #3
 80109a2:	e00a      	b.n	80109ba <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2220      	movs	r2, #32
 80109a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2220      	movs	r2, #32
 80109ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80109b8:	2300      	movs	r3, #0
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}

080109c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b084      	sub	sp, #16
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	60f8      	str	r0, [r7, #12]
 80109ca:	60b9      	str	r1, [r7, #8]
 80109cc:	603b      	str	r3, [r7, #0]
 80109ce:	4613      	mov	r3, r2
 80109d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109d2:	e02a      	b.n	8010a2a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109da:	d026      	beq.n	8010a2a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109dc:	f7f9 f94c 	bl	8009c78 <HAL_GetTick>
 80109e0:	4602      	mov	r2, r0
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	69ba      	ldr	r2, [r7, #24]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d302      	bcc.n	80109f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d11b      	bne.n	8010a2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	689a      	ldr	r2, [r3, #8]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f022 0201 	bic.w	r2, r2, #1
 8010a10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2220      	movs	r2, #32
 8010a16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2220      	movs	r2, #32
 8010a1c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8010a26:	2303      	movs	r3, #3
 8010a28:	e00f      	b.n	8010a4a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	69da      	ldr	r2, [r3, #28]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	4013      	ands	r3, r2
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	bf0c      	ite	eq
 8010a3a:	2301      	moveq	r3, #1
 8010a3c:	2300      	movne	r3, #0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	461a      	mov	r2, r3
 8010a42:	79fb      	ldrb	r3, [r7, #7]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d0c5      	beq.n	80109d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010a48:	2300      	movs	r3, #0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010a52:	b480      	push	{r7}
 8010a54:	b083      	sub	sp, #12
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010a68:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010a70:	bf00      	nop
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010a92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	689a      	ldr	r2, [r3, #8]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f022 0201 	bic.w	r2, r2, #1
 8010aa2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2220      	movs	r2, #32
 8010aa8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	661a      	str	r2, [r3, #96]	; 0x60
}
 8010ab0:	bf00      	nop
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	69db      	ldr	r3, [r3, #28]
 8010ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ad2:	d01e      	beq.n	8010b12 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010aea:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	689a      	ldr	r2, [r3, #8]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f022 0201 	bic.w	r2, r2, #1
 8010afa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	689a      	ldr	r2, [r3, #8]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b0a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2220      	movs	r2, #32
 8010b10:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f7ef fe36 	bl	8000784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b18:	bf00      	nop
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010b2e:	68f8      	ldr	r0, [r7, #12]
 8010b30:	f7ff fbbe 	bl	80102b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b34:	bf00      	nop
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b54:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b60:	2b80      	cmp	r3, #128	; 0x80
 8010b62:	d109      	bne.n	8010b78 <UART_DMAError+0x3c>
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	2b21      	cmp	r3, #33	; 0x21
 8010b68:	d106      	bne.n	8010b78 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8010b72:	6978      	ldr	r0, [r7, #20]
 8010b74:	f7ff ff6d 	bl	8010a52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b82:	2b40      	cmp	r3, #64	; 0x40
 8010b84:	d109      	bne.n	8010b9a <UART_DMAError+0x5e>
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2b22      	cmp	r3, #34	; 0x22
 8010b8a:	d106      	bne.n	8010b9a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8010b94:	6978      	ldr	r0, [r7, #20]
 8010b96:	f7ff ff71 	bl	8010a7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b9e:	f043 0210 	orr.w	r2, r3, #16
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ba6:	6978      	ldr	r0, [r7, #20]
 8010ba8:	f7ff fb8c 	bl	80102c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bac:	bf00      	nop
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d027      	beq.n	8010c1e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	4b2f      	ldr	r3, [pc, #188]	; (8010c94 <FMC_SDRAM_Init+0xe0>)
 8010bd8:	4013      	ands	r3, r2
 8010bda:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010be4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8010bea:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8010bf0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8010bf6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8010bfc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8010c02:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8010c08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010c0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	4313      	orrs	r3, r2
 8010c14:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	601a      	str	r2, [r3, #0]
 8010c1c:	e032      	b.n	8010c84 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010c2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010c3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010c48:	68ba      	ldr	r2, [r7, #8]
 8010c4a:	4b12      	ldr	r3, [pc, #72]	; (8010c94 <FMC_SDRAM_Init+0xe0>)
 8010c4c:	4013      	ands	r3, r2
 8010c4e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c58:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8010c5e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010c64:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8010c6a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010c70:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	4313      	orrs	r3, r2
 8010c76:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3714      	adds	r7, #20
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	ffff8000 	.word	0xffff8000

08010c98 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b087      	sub	sp, #28
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d02e      	beq.n	8010d10 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010cbe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010cce:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	3b01      	subs	r3, #1
 8010cd6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010cd8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010ce2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	691b      	ldr	r3, [r3, #16]
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010cec:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	695b      	ldr	r3, [r3, #20]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010cf6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	699b      	ldr	r3, [r3, #24]
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d00:	4313      	orrs	r3, r2
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	4313      	orrs	r3, r2
 8010d06:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	697a      	ldr	r2, [r7, #20]
 8010d0c:	609a      	str	r2, [r3, #8]
 8010d0e:	e039      	b.n	8010d84 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010d16:	697a      	ldr	r2, [r7, #20]
 8010d18:	4b1e      	ldr	r3, [pc, #120]	; (8010d94 <FMC_SDRAM_Timing_Init+0xfc>)
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	695b      	ldr	r3, [r3, #20]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	697a      	ldr	r2, [r7, #20]
 8010d32:	4313      	orrs	r3, r2
 8010d34:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d42:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	3b01      	subs	r3, #1
 8010d50:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d52:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	689b      	ldr	r3, [r3, #8]
 8010d58:	3b01      	subs	r3, #1
 8010d5a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010d5c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	3b01      	subs	r3, #1
 8010d64:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010d66:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	699b      	ldr	r3, [r3, #24]
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d70:	4313      	orrs	r3, r2
 8010d72:	693a      	ldr	r2, [r7, #16]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010d84:	2300      	movs	r3, #0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	371c      	adds	r7, #28
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	ff0f0fff 	.word	0xff0f0fff

08010d98 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b087      	sub	sp, #28
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8010db0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	3b01      	subs	r3, #1
 8010db8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8010dba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8010dcc:	2300      	movs	r3, #0
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	371c      	adds	r7, #28
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010dda:	b480      	push	{r7}
 8010ddc:	b083      	sub	sp, #12
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
 8010de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	695a      	ldr	r2, [r3, #20]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	431a      	orrs	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	4603      	mov	r3, r0
 8010e08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e12:	2b84      	cmp	r3, #132	; 0x84
 8010e14:	d005      	beq.n	8010e22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010e16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	3303      	adds	r3, #3
 8010e20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010e22:	68fb      	ldr	r3, [r7, #12]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e36:	f3ef 8305 	mrs	r3, IPSR
 8010e3a:	607b      	str	r3, [r7, #4]
  return(result);
 8010e3c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	bf14      	ite	ne
 8010e42:	2301      	movne	r3, #1
 8010e44:	2300      	moveq	r3, #0
 8010e46:	b2db      	uxtb	r3, r3
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010e58:	f001 ff36 	bl	8012cc8 <vTaskStartScheduler>
  
  return osOK;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e64:	b087      	sub	sp, #28
 8010e66:	af02      	add	r7, sp, #8
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	685c      	ldr	r4, [r3, #4]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e78:	b29e      	uxth	r6, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff ffbd 	bl	8010e00 <makeFreeRtosPriority>
 8010e86:	4602      	mov	r2, r0
 8010e88:	f107 030c 	add.w	r3, r7, #12
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	9200      	str	r2, [sp, #0]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	4632      	mov	r2, r6
 8010e94:	4629      	mov	r1, r5
 8010e96:	4620      	mov	r0, r4
 8010e98:	f001 fda9 	bl	80129ee <xTaskCreate>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d001      	beq.n	8010ea6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	e000      	b.n	8010ea8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010eb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <osDelay+0x16>
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	e000      	b.n	8010ec8 <osDelay+0x18>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f001 fec7 	bl	8012c5c <vTaskDelay>
  
  return osOK;
 8010ece:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b086      	sub	sp, #24
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	3303      	adds	r3, #3
 8010ee6:	f023 0303 	bic.w	r3, r3, #3
 8010eea:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8010eec:	2014      	movs	r0, #20
 8010eee:	f000 fa2b 	bl	8011348 <pvPortMalloc>
 8010ef2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d046      	beq.n	8010f88 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4618      	mov	r0, r3
 8010f14:	f000 fa18 	bl	8011348 <pvPortMalloc>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d02b      	beq.n	8010f7e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	68fa      	ldr	r2, [r7, #12]
 8010f2c:	fb02 f303 	mul.w	r3, r2, r3
 8010f30:	4618      	mov	r0, r3
 8010f32:	f000 fa09 	bl	8011348 <pvPortMalloc>
 8010f36:	4602      	mov	r2, r0
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d011      	beq.n	8010f68 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8010f44:	2300      	movs	r3, #0
 8010f46:	613b      	str	r3, [r7, #16]
 8010f48:	e008      	b.n	8010f5c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	685a      	ldr	r2, [r3, #4]
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	4413      	add	r3, r2
 8010f52:	2200      	movs	r2, #0
 8010f54:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	613b      	str	r3, [r7, #16]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	693a      	ldr	r2, [r7, #16]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d3f1      	bcc.n	8010f4a <osPoolCreate+0x72>
 8010f66:	e00f      	b.n	8010f88 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 fab7 	bl	80114e0 <vPortFree>
        vPortFree(thePool);
 8010f72:	6978      	ldr	r0, [r7, #20]
 8010f74:	f000 fab4 	bl	80114e0 <vPortFree>
        thePool = NULL;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	617b      	str	r3, [r7, #20]
 8010f7c:	e004      	b.n	8010f88 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8010f7e:	6978      	ldr	r0, [r7, #20]
 8010f80:	f000 faae 	bl	80114e0 <vPortFree>
      thePool = NULL;
 8010f84:	2300      	movs	r3, #0
 8010f86:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8010f88:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3718      	adds	r7, #24
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b08a      	sub	sp, #40	; 0x28
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8010fa2:	f7ff ff45 	bl	8010e30 <inHandlerMode>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d010      	beq.n	8010fce <osPoolAlloc+0x3c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010fac:	f3ef 8211 	mrs	r2, BASEPRI
 8010fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb4:	b672      	cpsid	i
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	b662      	cpsie	i
 8010fc4:	617a      	str	r2, [r7, #20]
 8010fc6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010fc8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8010fca:	627b      	str	r3, [r7, #36]	; 0x24
 8010fcc:	e001      	b.n	8010fd2 <osPoolAlloc+0x40>
  }
  else {
    vPortEnterCritical();
 8010fce:	f000 fd5b 	bl	8011a88 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	61fb      	str	r3, [r7, #28]
 8010fd6:	e029      	b.n	801102c <osPoolAlloc+0x9a>
    index = pool_id->currentIndex + i;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	69fa      	ldr	r2, [r7, #28]
 8010fde:	4413      	add	r3, r2
 8010fe0:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	689b      	ldr	r3, [r3, #8]
 8010fe6:	69ba      	ldr	r2, [r7, #24]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d301      	bcc.n	8010ff0 <osPoolAlloc+0x5e>
      index = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	685a      	ldr	r2, [r3, #4]
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d113      	bne.n	8011026 <osPoolAlloc+0x94>
      pool_id->markers[index] = 1;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	69bb      	ldr	r3, [r7, #24]
 8011004:	4413      	add	r3, r2
 8011006:	2201      	movs	r2, #1
 8011008:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4619      	mov	r1, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	69ba      	ldr	r2, [r7, #24]
 8011016:	fb02 f303 	mul.w	r3, r2, r3
 801101a:	440b      	add	r3, r1
 801101c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	69ba      	ldr	r2, [r7, #24]
 8011022:	611a      	str	r2, [r3, #16]
      break;
 8011024:	e007      	b.n	8011036 <osPoolAlloc+0xa4>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	3301      	adds	r3, #1
 801102a:	61fb      	str	r3, [r7, #28]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	689b      	ldr	r3, [r3, #8]
 8011030:	69fa      	ldr	r2, [r7, #28]
 8011032:	429a      	cmp	r2, r3
 8011034:	d3d0      	bcc.n	8010fd8 <osPoolAlloc+0x46>
    }
  }
  
  if (inHandlerMode()) {
 8011036:	f7ff fefb 	bl	8010e30 <inHandlerMode>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d005      	beq.n	801104c <osPoolAlloc+0xba>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	e001      	b.n	8011050 <osPoolAlloc+0xbe>
  }
  else {
    vPortExitCritical();
 801104c:	f000 fd4e 	bl	8011aec <vPortExitCritical>
  }
  
  return p;
 8011050:	6a3b      	ldr	r3, [r7, #32]
}
 8011052:	4618      	mov	r0, r3
 8011054:	3728      	adds	r7, #40	; 0x28
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}

0801105a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801105a:	b480      	push	{r7}
 801105c:	b085      	sub	sp, #20
 801105e:	af00      	add	r7, sp, #0
 8011060:	6078      	str	r0, [r7, #4]
 8011062:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d101      	bne.n	801106e <osPoolFree+0x14>
    return osErrorParameter;
 801106a:	2380      	movs	r3, #128	; 0x80
 801106c:	e030      	b.n	80110d0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d101      	bne.n	8011078 <osPoolFree+0x1e>
    return osErrorParameter;
 8011074:	2380      	movs	r3, #128	; 0x80
 8011076:	e02b      	b.n	80110d0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	683a      	ldr	r2, [r7, #0]
 801107e:	429a      	cmp	r2, r3
 8011080:	d201      	bcs.n	8011086 <osPoolFree+0x2c>
    return osErrorParameter;
 8011082:	2380      	movs	r3, #128	; 0x80
 8011084:	e024      	b.n	80110d0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	6812      	ldr	r2, [r2, #0]
 801108c:	1a9b      	subs	r3, r3, r2
 801108e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	68da      	ldr	r2, [r3, #12]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	fbb3 f1f2 	udiv	r1, r3, r2
 801109a:	fb02 f201 	mul.w	r2, r2, r1
 801109e:	1a9b      	subs	r3, r3, r2
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d001      	beq.n	80110a8 <osPoolFree+0x4e>
    return osErrorParameter;
 80110a4:	2380      	movs	r3, #128	; 0x80
 80110a6:	e013      	b.n	80110d0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	68fa      	ldr	r2, [r7, #12]
 80110ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80110b2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d301      	bcc.n	80110c2 <osPoolFree+0x68>
    return osErrorParameter;
 80110be:	2380      	movs	r3, #128	; 0x80
 80110c0:	e006      	b.n	80110d0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	4413      	add	r3, r2
 80110ca:	2200      	movs	r2, #0
 80110cc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80110dc:	b590      	push	{r4, r7, lr}
 80110de:	b087      	sub	sp, #28
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	613b      	str	r3, [r7, #16]
 80110f2:	2300      	movs	r3, #0
 80110f4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	689c      	ldr	r4, [r3, #8]
 80110fa:	200c      	movs	r0, #12
 80110fc:	f000 f924 	bl	8011348 <pvPortMalloc>
 8011100:	4603      	mov	r3, r0
 8011102:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <osMailCreate+0x36>
    return NULL;
 801110e:	2300      	movs	r3, #0
 8011110:	e038      	b.n	8011184 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	689b      	ldr	r3, [r3, #8]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6818      	ldr	r0, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	681c      	ldr	r4, [r3, #0]
 8011126:	2200      	movs	r2, #0
 8011128:	2104      	movs	r1, #4
 801112a:	f000 fe39 	bl	8011da0 <xQueueGenericCreate>
 801112e:	4603      	mov	r3, r0
 8011130:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d107      	bne.n	801114e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	689b      	ldr	r3, [r3, #8]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4618      	mov	r0, r3
 8011146:	f000 f9cb 	bl	80114e0 <vPortFree>
    return NULL;
 801114a:	2300      	movs	r3, #0
 801114c:	e01a      	b.n	8011184 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	681c      	ldr	r4, [r3, #0]
 8011154:	f107 030c 	add.w	r3, r7, #12
 8011158:	4618      	mov	r0, r3
 801115a:	f7ff febd 	bl	8010ed8 <osPoolCreate>
 801115e:	4603      	mov	r3, r0
 8011160:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d107      	bne.n	801117e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4618      	mov	r0, r3
 8011176:	f000 f9b3 	bl	80114e0 <vPortFree>
    return NULL;
 801117a:	2300      	movs	r3, #0
 801117c:	e002      	b.n	8011184 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8011184:	4618      	mov	r0, r3
 8011186:	371c      	adds	r7, #28
 8011188:	46bd      	mov	sp, r7
 801118a:	bd90      	pop	{r4, r7, pc}

0801118c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d101      	bne.n	80111a0 <osMailAlloc+0x14>
    return NULL;
 801119c:	2300      	movs	r3, #0
 801119e:	e006      	b.n	80111ae <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ff fef4 	bl	8010f92 <osPoolAlloc>
 80111aa:	60f8      	str	r0, [r7, #12]
  
  return p;
 80111ac:	68fb      	ldr	r3, [r7, #12]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
	...

080111b8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d101      	bne.n	80111cc <osMailPut+0x14>
    return osErrorParameter;
 80111c8:	2380      	movs	r3, #128	; 0x80
 80111ca:	e02c      	b.n	8011226 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80111cc:	2300      	movs	r3, #0
 80111ce:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80111d0:	f7ff fe2e 	bl	8010e30 <inHandlerMode>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d018      	beq.n	801120c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6858      	ldr	r0, [r3, #4]
 80111de:	f107 020c 	add.w	r2, r7, #12
 80111e2:	4639      	mov	r1, r7
 80111e4:	2300      	movs	r3, #0
 80111e6:	f000 ff37 	bl	8012058 <xQueueGenericSendFromISR>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d001      	beq.n	80111f4 <osMailPut+0x3c>
      return osErrorOS;
 80111f0:	23ff      	movs	r3, #255	; 0xff
 80111f2:	e018      	b.n	8011226 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d014      	beq.n	8011224 <osMailPut+0x6c>
 80111fa:	4b0d      	ldr	r3, [pc, #52]	; (8011230 <osMailPut+0x78>)
 80111fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	f3bf 8f4f 	dsb	sy
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	e00b      	b.n	8011224 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6858      	ldr	r0, [r3, #4]
 8011210:	4639      	mov	r1, r7
 8011212:	2300      	movs	r3, #0
 8011214:	2200      	movs	r2, #0
 8011216:	f000 fe1d 	bl	8011e54 <xQueueGenericSend>
 801121a:	4603      	mov	r3, r0
 801121c:	2b01      	cmp	r3, #1
 801121e:	d001      	beq.n	8011224 <osMailPut+0x6c>
      return osErrorOS;
 8011220:	23ff      	movs	r3, #255	; 0xff
 8011222:	e000      	b.n	8011226 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3710      	adds	r7, #16
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	e000ed04 	.word	0xe000ed04

08011234 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	b08b      	sub	sp, #44	; 0x2c
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10a      	bne.n	8011260 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801124a:	2380      	movs	r3, #128	; 0x80
 801124c:	617b      	str	r3, [r7, #20]
    return event;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	461c      	mov	r4, r3
 8011252:	f107 0314 	add.w	r3, r7, #20
 8011256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801125a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801125e:	e056      	b.n	801130e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011260:	2300      	movs	r3, #0
 8011262:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011264:	2300      	movs	r3, #0
 8011266:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126e:	d103      	bne.n	8011278 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8011270:	f04f 33ff 	mov.w	r3, #4294967295
 8011274:	627b      	str	r3, [r7, #36]	; 0x24
 8011276:	e009      	b.n	801128c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d006      	beq.n	801128c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011284:	2b00      	cmp	r3, #0
 8011286:	d101      	bne.n	801128c <osMailGet+0x58>
      ticks = 1;
 8011288:	2301      	movs	r3, #1
 801128a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801128c:	f7ff fdd0 	bl	8010e30 <inHandlerMode>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d01d      	beq.n	80112d2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	6858      	ldr	r0, [r3, #4]
 801129a:	f107 0220 	add.w	r2, r7, #32
 801129e:	f107 0314 	add.w	r3, r7, #20
 80112a2:	3304      	adds	r3, #4
 80112a4:	4619      	mov	r1, r3
 80112a6:	f001 f9f7 	bl	8012698 <xQueueReceiveFromISR>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d102      	bne.n	80112b6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80112b0:	2320      	movs	r3, #32
 80112b2:	617b      	str	r3, [r7, #20]
 80112b4:	e001      	b.n	80112ba <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80112b6:	2300      	movs	r3, #0
 80112b8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d01e      	beq.n	80112fe <osMailGet+0xca>
 80112c0:	4b15      	ldr	r3, [pc, #84]	; (8011318 <osMailGet+0xe4>)
 80112c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	e015      	b.n	80112fe <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	6858      	ldr	r0, [r3, #4]
 80112d6:	f107 0314 	add.w	r3, r7, #20
 80112da:	3304      	adds	r3, #4
 80112dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112de:	4619      	mov	r1, r3
 80112e0:	f000 ffe8 	bl	80122b4 <xQueueReceive>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d102      	bne.n	80112f0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80112ea:	2320      	movs	r3, #32
 80112ec:	617b      	str	r3, [r7, #20]
 80112ee:	e006      	b.n	80112fe <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80112f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d101      	bne.n	80112fa <osMailGet+0xc6>
 80112f6:	2300      	movs	r3, #0
 80112f8:	e000      	b.n	80112fc <osMailGet+0xc8>
 80112fa:	2340      	movs	r3, #64	; 0x40
 80112fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	461c      	mov	r4, r3
 8011302:	f107 0314 	add.w	r3, r7, #20
 8011306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801130a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	372c      	adds	r7, #44	; 0x2c
 8011312:	46bd      	mov	sp, r7
 8011314:	bd90      	pop	{r4, r7, pc}
 8011316:	bf00      	nop
 8011318:	e000ed04 	.word	0xe000ed04

0801131c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d101      	bne.n	8011330 <osMailFree+0x14>
    return osErrorParameter;
 801132c:	2380      	movs	r3, #128	; 0x80
 801132e:	e006      	b.n	801133e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fe8f 	bl	801105a <osPoolFree>
 801133c:	4603      	mov	r3, r0
}
 801133e:	4618      	mov	r0, r3
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
	...

08011348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b08a      	sub	sp, #40	; 0x28
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011350:	2300      	movs	r3, #0
 8011352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011354:	f001 fd02 	bl	8012d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011358:	4b5c      	ldr	r3, [pc, #368]	; (80114cc <pvPortMalloc+0x184>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d101      	bne.n	8011364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011360:	f000 f91a 	bl	8011598 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011364:	4b5a      	ldr	r3, [pc, #360]	; (80114d0 <pvPortMalloc+0x188>)
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4013      	ands	r3, r2
 801136c:	2b00      	cmp	r3, #0
 801136e:	f040 8090 	bne.w	8011492 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d01e      	beq.n	80113b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011378:	2208      	movs	r2, #8
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4413      	add	r3, r2
 801137e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f003 0307 	and.w	r3, r3, #7
 8011386:	2b00      	cmp	r3, #0
 8011388:	d015      	beq.n	80113b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f023 0307 	bic.w	r3, r3, #7
 8011390:	3308      	adds	r3, #8
 8011392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f003 0307 	and.w	r3, r3, #7
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00b      	beq.n	80113b6 <pvPortMalloc+0x6e>
	__asm volatile
 801139e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a2:	b672      	cpsid	i
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	b662      	cpsie	i
 80113b2:	617b      	str	r3, [r7, #20]
 80113b4:	e7fe      	b.n	80113b4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d06a      	beq.n	8011492 <pvPortMalloc+0x14a>
 80113bc:	4b45      	ldr	r3, [pc, #276]	; (80114d4 <pvPortMalloc+0x18c>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d865      	bhi.n	8011492 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80113c6:	4b44      	ldr	r3, [pc, #272]	; (80114d8 <pvPortMalloc+0x190>)
 80113c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80113ca:	4b43      	ldr	r3, [pc, #268]	; (80114d8 <pvPortMalloc+0x190>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113d0:	e004      	b.n	80113dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80113d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d903      	bls.n	80113ee <pvPortMalloc+0xa6>
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1f1      	bne.n	80113d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80113ee:	4b37      	ldr	r3, [pc, #220]	; (80114cc <pvPortMalloc+0x184>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d04c      	beq.n	8011492 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2208      	movs	r2, #8
 80113fe:	4413      	add	r3, r2
 8011400:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	6a3b      	ldr	r3, [r7, #32]
 8011408:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	1ad2      	subs	r2, r2, r3
 8011412:	2308      	movs	r3, #8
 8011414:	005b      	lsls	r3, r3, #1
 8011416:	429a      	cmp	r2, r3
 8011418:	d920      	bls.n	801145c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4413      	add	r3, r2
 8011420:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	f003 0307 	and.w	r3, r3, #7
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00b      	beq.n	8011444 <pvPortMalloc+0xfc>
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	b672      	cpsid	i
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	b662      	cpsie	i
 8011440:	613b      	str	r3, [r7, #16]
 8011442:	e7fe      	b.n	8011442 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011446:	685a      	ldr	r2, [r3, #4]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	1ad2      	subs	r2, r2, r3
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011456:	69b8      	ldr	r0, [r7, #24]
 8011458:	f000 f900 	bl	801165c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801145c:	4b1d      	ldr	r3, [pc, #116]	; (80114d4 <pvPortMalloc+0x18c>)
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	4a1b      	ldr	r2, [pc, #108]	; (80114d4 <pvPortMalloc+0x18c>)
 8011468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801146a:	4b1a      	ldr	r3, [pc, #104]	; (80114d4 <pvPortMalloc+0x18c>)
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	4b1b      	ldr	r3, [pc, #108]	; (80114dc <pvPortMalloc+0x194>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d203      	bcs.n	801147e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011476:	4b17      	ldr	r3, [pc, #92]	; (80114d4 <pvPortMalloc+0x18c>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4a18      	ldr	r2, [pc, #96]	; (80114dc <pvPortMalloc+0x194>)
 801147c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011480:	685a      	ldr	r2, [r3, #4]
 8011482:	4b13      	ldr	r3, [pc, #76]	; (80114d0 <pvPortMalloc+0x188>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	431a      	orrs	r2, r3
 8011488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148e:	2200      	movs	r2, #0
 8011490:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011492:	f001 fc71 	bl	8012d78 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d101      	bne.n	80114a0 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801149c:	f7ef f9c2 	bl	8000824 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	f003 0307 	and.w	r3, r3, #7
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00b      	beq.n	80114c2 <pvPortMalloc+0x17a>
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	b672      	cpsid	i
 80114b0:	f383 8811 	msr	BASEPRI, r3
 80114b4:	f3bf 8f6f 	isb	sy
 80114b8:	f3bf 8f4f 	dsb	sy
 80114bc:	b662      	cpsie	i
 80114be:	60fb      	str	r3, [r7, #12]
 80114c0:	e7fe      	b.n	80114c0 <pvPortMalloc+0x178>
	return pvReturn;
 80114c2:	69fb      	ldr	r3, [r7, #28]
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3728      	adds	r7, #40	; 0x28
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	2000b9ac 	.word	0x2000b9ac
 80114d0:	2000b9b8 	.word	0x2000b9b8
 80114d4:	2000b9b0 	.word	0x2000b9b0
 80114d8:	2000b9a4 	.word	0x2000b9a4
 80114dc:	2000b9b4 	.word	0x2000b9b4

080114e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d04a      	beq.n	8011588 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80114f2:	2308      	movs	r3, #8
 80114f4:	425b      	negs	r3, r3
 80114f6:	697a      	ldr	r2, [r7, #20]
 80114f8:	4413      	add	r3, r2
 80114fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	685a      	ldr	r2, [r3, #4]
 8011504:	4b22      	ldr	r3, [pc, #136]	; (8011590 <vPortFree+0xb0>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	4013      	ands	r3, r2
 801150a:	2b00      	cmp	r3, #0
 801150c:	d10b      	bne.n	8011526 <vPortFree+0x46>
 801150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011512:	b672      	cpsid	i
 8011514:	f383 8811 	msr	BASEPRI, r3
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	b662      	cpsie	i
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	e7fe      	b.n	8011524 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00b      	beq.n	8011546 <vPortFree+0x66>
 801152e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011532:	b672      	cpsid	i
 8011534:	f383 8811 	msr	BASEPRI, r3
 8011538:	f3bf 8f6f 	isb	sy
 801153c:	f3bf 8f4f 	dsb	sy
 8011540:	b662      	cpsie	i
 8011542:	60bb      	str	r3, [r7, #8]
 8011544:	e7fe      	b.n	8011544 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	685a      	ldr	r2, [r3, #4]
 801154a:	4b11      	ldr	r3, [pc, #68]	; (8011590 <vPortFree+0xb0>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4013      	ands	r3, r2
 8011550:	2b00      	cmp	r3, #0
 8011552:	d019      	beq.n	8011588 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d115      	bne.n	8011588 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	4b0b      	ldr	r3, [pc, #44]	; (8011590 <vPortFree+0xb0>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	43db      	mvns	r3, r3
 8011566:	401a      	ands	r2, r3
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801156c:	f001 fbf6 	bl	8012d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	685a      	ldr	r2, [r3, #4]
 8011574:	4b07      	ldr	r3, [pc, #28]	; (8011594 <vPortFree+0xb4>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4413      	add	r3, r2
 801157a:	4a06      	ldr	r2, [pc, #24]	; (8011594 <vPortFree+0xb4>)
 801157c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801157e:	6938      	ldr	r0, [r7, #16]
 8011580:	f000 f86c 	bl	801165c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011584:	f001 fbf8 	bl	8012d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011588:	bf00      	nop
 801158a:	3718      	adds	r7, #24
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	2000b9b8 	.word	0x2000b9b8
 8011594:	2000b9b0 	.word	0x2000b9b0

08011598 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011598:	b480      	push	{r7}
 801159a:	b085      	sub	sp, #20
 801159c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80115a4:	4b27      	ldr	r3, [pc, #156]	; (8011644 <prvHeapInit+0xac>)
 80115a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	f003 0307 	and.w	r3, r3, #7
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00c      	beq.n	80115cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	3307      	adds	r3, #7
 80115b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f023 0307 	bic.w	r3, r3, #7
 80115be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	4a1f      	ldr	r2, [pc, #124]	; (8011644 <prvHeapInit+0xac>)
 80115c8:	4413      	add	r3, r2
 80115ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80115d0:	4a1d      	ldr	r2, [pc, #116]	; (8011648 <prvHeapInit+0xb0>)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80115d6:	4b1c      	ldr	r3, [pc, #112]	; (8011648 <prvHeapInit+0xb0>)
 80115d8:	2200      	movs	r2, #0
 80115da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	4413      	add	r3, r2
 80115e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80115e4:	2208      	movs	r2, #8
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	1a9b      	subs	r3, r3, r2
 80115ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f023 0307 	bic.w	r3, r3, #7
 80115f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	4a15      	ldr	r2, [pc, #84]	; (801164c <prvHeapInit+0xb4>)
 80115f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80115fa:	4b14      	ldr	r3, [pc, #80]	; (801164c <prvHeapInit+0xb4>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2200      	movs	r2, #0
 8011600:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011602:	4b12      	ldr	r3, [pc, #72]	; (801164c <prvHeapInit+0xb4>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	1ad2      	subs	r2, r2, r3
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011618:	4b0c      	ldr	r3, [pc, #48]	; (801164c <prvHeapInit+0xb4>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	4a0a      	ldr	r2, [pc, #40]	; (8011650 <prvHeapInit+0xb8>)
 8011626:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	4a09      	ldr	r2, [pc, #36]	; (8011654 <prvHeapInit+0xbc>)
 801162e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011630:	4b09      	ldr	r3, [pc, #36]	; (8011658 <prvHeapInit+0xc0>)
 8011632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011636:	601a      	str	r2, [r3, #0]
}
 8011638:	bf00      	nop
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	200039a4 	.word	0x200039a4
 8011648:	2000b9a4 	.word	0x2000b9a4
 801164c:	2000b9ac 	.word	0x2000b9ac
 8011650:	2000b9b4 	.word	0x2000b9b4
 8011654:	2000b9b0 	.word	0x2000b9b0
 8011658:	2000b9b8 	.word	0x2000b9b8

0801165c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801165c:	b480      	push	{r7}
 801165e:	b085      	sub	sp, #20
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011664:	4b28      	ldr	r3, [pc, #160]	; (8011708 <prvInsertBlockIntoFreeList+0xac>)
 8011666:	60fb      	str	r3, [r7, #12]
 8011668:	e002      	b.n	8011670 <prvInsertBlockIntoFreeList+0x14>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	60fb      	str	r3, [r7, #12]
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	429a      	cmp	r2, r3
 8011678:	d8f7      	bhi.n	801166a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	4413      	add	r3, r2
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	429a      	cmp	r2, r3
 801168a:	d108      	bne.n	801169e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	441a      	add	r2, r3
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	441a      	add	r2, r3
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d118      	bne.n	80116e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	4b15      	ldr	r3, [pc, #84]	; (801170c <prvInsertBlockIntoFreeList+0xb0>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d00d      	beq.n	80116da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	441a      	add	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	e008      	b.n	80116ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80116da:	4b0c      	ldr	r3, [pc, #48]	; (801170c <prvInsertBlockIntoFreeList+0xb0>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	601a      	str	r2, [r3, #0]
 80116e2:	e003      	b.n	80116ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d002      	beq.n	80116fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	687a      	ldr	r2, [r7, #4]
 80116f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116fa:	bf00      	nop
 80116fc:	3714      	adds	r7, #20
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	2000b9a4 	.word	0x2000b9a4
 801170c:	2000b9ac 	.word	0x2000b9ac

08011710 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f103 0208 	add.w	r2, r3, #8
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f04f 32ff 	mov.w	r2, #4294967295
 8011728:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f103 0208 	add.w	r2, r3, #8
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f103 0208 	add.w	r2, r3, #8
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011744:	bf00      	nop
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801175e:	bf00      	nop
 8011760:	370c      	adds	r7, #12
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801176a:	b480      	push	{r7}
 801176c:	b085      	sub	sp, #20
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
 8011772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	68fa      	ldr	r2, [r7, #12]
 801177e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	689a      	ldr	r2, [r3, #8]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	683a      	ldr	r2, [r7, #0]
 8011794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	1c5a      	adds	r2, r3, #1
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	601a      	str	r2, [r3, #0]
}
 80117a6:	bf00      	nop
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr

080117b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80117b2:	b480      	push	{r7}
 80117b4:	b085      	sub	sp, #20
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
 80117ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c8:	d103      	bne.n	80117d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	691b      	ldr	r3, [r3, #16]
 80117ce:	60fb      	str	r3, [r7, #12]
 80117d0:	e00c      	b.n	80117ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	3308      	adds	r3, #8
 80117d6:	60fb      	str	r3, [r7, #12]
 80117d8:	e002      	b.n	80117e0 <vListInsert+0x2e>
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	68ba      	ldr	r2, [r7, #8]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d2f6      	bcs.n	80117da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	685a      	ldr	r2, [r3, #4]
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	68fa      	ldr	r2, [r7, #12]
 8011800:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	683a      	ldr	r2, [r7, #0]
 8011806:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	1c5a      	adds	r2, r3, #1
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	601a      	str	r2, [r3, #0]
}
 8011818:	bf00      	nop
 801181a:	3714      	adds	r7, #20
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr

08011824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011824:	b480      	push	{r7}
 8011826:	b085      	sub	sp, #20
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	6892      	ldr	r2, [r2, #8]
 801183a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	6852      	ldr	r2, [r2, #4]
 8011844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d103      	bne.n	8011858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	689a      	ldr	r2, [r3, #8]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	1e5a      	subs	r2, r3, #1
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681b      	ldr	r3, [r3, #0]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3714      	adds	r7, #20
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr

08011878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	60b9      	str	r1, [r7, #8]
 8011882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	3b04      	subs	r3, #4
 8011888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3b04      	subs	r3, #4
 8011896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	f023 0201 	bic.w	r2, r3, #1
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	3b04      	subs	r3, #4
 80118a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80118a8:	4a0c      	ldr	r2, [pc, #48]	; (80118dc <pxPortInitialiseStack+0x64>)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	3b14      	subs	r3, #20
 80118b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	3b04      	subs	r3, #4
 80118be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f06f 0202 	mvn.w	r2, #2
 80118c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	3b20      	subs	r3, #32
 80118cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80118ce:	68fb      	ldr	r3, [r7, #12]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr
 80118dc:	080118e1 	.word	0x080118e1

080118e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80118ea:	4b13      	ldr	r3, [pc, #76]	; (8011938 <prvTaskExitError+0x58>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f2:	d00b      	beq.n	801190c <prvTaskExitError+0x2c>
 80118f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f8:	b672      	cpsid	i
 80118fa:	f383 8811 	msr	BASEPRI, r3
 80118fe:	f3bf 8f6f 	isb	sy
 8011902:	f3bf 8f4f 	dsb	sy
 8011906:	b662      	cpsie	i
 8011908:	60fb      	str	r3, [r7, #12]
 801190a:	e7fe      	b.n	801190a <prvTaskExitError+0x2a>
 801190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011910:	b672      	cpsid	i
 8011912:	f383 8811 	msr	BASEPRI, r3
 8011916:	f3bf 8f6f 	isb	sy
 801191a:	f3bf 8f4f 	dsb	sy
 801191e:	b662      	cpsie	i
 8011920:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011922:	bf00      	nop
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d0fc      	beq.n	8011924 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801192a:	bf00      	nop
 801192c:	3714      	adds	r7, #20
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	2000005c 	.word	0x2000005c
 801193c:	00000000 	.word	0x00000000

08011940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011940:	4b07      	ldr	r3, [pc, #28]	; (8011960 <pxCurrentTCBConst2>)
 8011942:	6819      	ldr	r1, [r3, #0]
 8011944:	6808      	ldr	r0, [r1, #0]
 8011946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194a:	f380 8809 	msr	PSP, r0
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f04f 0000 	mov.w	r0, #0
 8011956:	f380 8811 	msr	BASEPRI, r0
 801195a:	4770      	bx	lr
 801195c:	f3af 8000 	nop.w

08011960 <pxCurrentTCBConst2>:
 8011960:	2000b9c4 	.word	0x2000b9c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011964:	bf00      	nop
 8011966:	bf00      	nop

08011968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011968:	4808      	ldr	r0, [pc, #32]	; (801198c <prvPortStartFirstTask+0x24>)
 801196a:	6800      	ldr	r0, [r0, #0]
 801196c:	6800      	ldr	r0, [r0, #0]
 801196e:	f380 8808 	msr	MSP, r0
 8011972:	f04f 0000 	mov.w	r0, #0
 8011976:	f380 8814 	msr	CONTROL, r0
 801197a:	b662      	cpsie	i
 801197c:	b661      	cpsie	f
 801197e:	f3bf 8f4f 	dsb	sy
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	df00      	svc	0
 8011988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801198a:	bf00      	nop
 801198c:	e000ed08 	.word	0xe000ed08

08011990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011996:	4b36      	ldr	r3, [pc, #216]	; (8011a70 <xPortStartScheduler+0xe0>)
 8011998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	22ff      	movs	r2, #255	; 0xff
 80119a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80119b0:	78fb      	ldrb	r3, [r7, #3]
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80119b8:	b2da      	uxtb	r2, r3
 80119ba:	4b2e      	ldr	r3, [pc, #184]	; (8011a74 <xPortStartScheduler+0xe4>)
 80119bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80119be:	4b2e      	ldr	r3, [pc, #184]	; (8011a78 <xPortStartScheduler+0xe8>)
 80119c0:	2207      	movs	r2, #7
 80119c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119c4:	e009      	b.n	80119da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80119c6:	4b2c      	ldr	r3, [pc, #176]	; (8011a78 <xPortStartScheduler+0xe8>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	3b01      	subs	r3, #1
 80119cc:	4a2a      	ldr	r2, [pc, #168]	; (8011a78 <xPortStartScheduler+0xe8>)
 80119ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80119d0:	78fb      	ldrb	r3, [r7, #3]
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119da:	78fb      	ldrb	r3, [r7, #3]
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119e2:	2b80      	cmp	r3, #128	; 0x80
 80119e4:	d0ef      	beq.n	80119c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80119e6:	4b24      	ldr	r3, [pc, #144]	; (8011a78 <xPortStartScheduler+0xe8>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f1c3 0307 	rsb	r3, r3, #7
 80119ee:	2b04      	cmp	r3, #4
 80119f0:	d00b      	beq.n	8011a0a <xPortStartScheduler+0x7a>
 80119f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f6:	b672      	cpsid	i
 80119f8:	f383 8811 	msr	BASEPRI, r3
 80119fc:	f3bf 8f6f 	isb	sy
 8011a00:	f3bf 8f4f 	dsb	sy
 8011a04:	b662      	cpsie	i
 8011a06:	60bb      	str	r3, [r7, #8]
 8011a08:	e7fe      	b.n	8011a08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011a0a:	4b1b      	ldr	r3, [pc, #108]	; (8011a78 <xPortStartScheduler+0xe8>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	021b      	lsls	r3, r3, #8
 8011a10:	4a19      	ldr	r2, [pc, #100]	; (8011a78 <xPortStartScheduler+0xe8>)
 8011a12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011a14:	4b18      	ldr	r3, [pc, #96]	; (8011a78 <xPortStartScheduler+0xe8>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a1c:	4a16      	ldr	r2, [pc, #88]	; (8011a78 <xPortStartScheduler+0xe8>)
 8011a1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	b2da      	uxtb	r2, r3
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011a28:	4b14      	ldr	r3, [pc, #80]	; (8011a7c <xPortStartScheduler+0xec>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4a13      	ldr	r2, [pc, #76]	; (8011a7c <xPortStartScheduler+0xec>)
 8011a2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011a32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011a34:	4b11      	ldr	r3, [pc, #68]	; (8011a7c <xPortStartScheduler+0xec>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4a10      	ldr	r2, [pc, #64]	; (8011a7c <xPortStartScheduler+0xec>)
 8011a3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011a3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011a40:	f000 f8d4 	bl	8011bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011a44:	4b0e      	ldr	r3, [pc, #56]	; (8011a80 <xPortStartScheduler+0xf0>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a4a:	f000 f8f3 	bl	8011c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a4e:	4b0d      	ldr	r3, [pc, #52]	; (8011a84 <xPortStartScheduler+0xf4>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4a0c      	ldr	r2, [pc, #48]	; (8011a84 <xPortStartScheduler+0xf4>)
 8011a54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011a58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a5a:	f7ff ff85 	bl	8011968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a5e:	f001 fae7 	bl	8013030 <vTaskSwitchContext>
	prvTaskExitError();
 8011a62:	f7ff ff3d 	bl	80118e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	e000e400 	.word	0xe000e400
 8011a74:	2000b9bc 	.word	0x2000b9bc
 8011a78:	2000b9c0 	.word	0x2000b9c0
 8011a7c:	e000ed20 	.word	0xe000ed20
 8011a80:	2000005c 	.word	0x2000005c
 8011a84:	e000ef34 	.word	0xe000ef34

08011a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a92:	b672      	cpsid	i
 8011a94:	f383 8811 	msr	BASEPRI, r3
 8011a98:	f3bf 8f6f 	isb	sy
 8011a9c:	f3bf 8f4f 	dsb	sy
 8011aa0:	b662      	cpsie	i
 8011aa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011aa4:	4b0f      	ldr	r3, [pc, #60]	; (8011ae4 <vPortEnterCritical+0x5c>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	4a0e      	ldr	r2, [pc, #56]	; (8011ae4 <vPortEnterCritical+0x5c>)
 8011aac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011aae:	4b0d      	ldr	r3, [pc, #52]	; (8011ae4 <vPortEnterCritical+0x5c>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d110      	bne.n	8011ad8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ab6:	4b0c      	ldr	r3, [pc, #48]	; (8011ae8 <vPortEnterCritical+0x60>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d00b      	beq.n	8011ad8 <vPortEnterCritical+0x50>
 8011ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac4:	b672      	cpsid	i
 8011ac6:	f383 8811 	msr	BASEPRI, r3
 8011aca:	f3bf 8f6f 	isb	sy
 8011ace:	f3bf 8f4f 	dsb	sy
 8011ad2:	b662      	cpsie	i
 8011ad4:	603b      	str	r3, [r7, #0]
 8011ad6:	e7fe      	b.n	8011ad6 <vPortEnterCritical+0x4e>
	}
}
 8011ad8:	bf00      	nop
 8011ada:	370c      	adds	r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr
 8011ae4:	2000005c 	.word	0x2000005c
 8011ae8:	e000ed04 	.word	0xe000ed04

08011aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011af2:	4b12      	ldr	r3, [pc, #72]	; (8011b3c <vPortExitCritical+0x50>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d10b      	bne.n	8011b12 <vPortExitCritical+0x26>
 8011afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afe:	b672      	cpsid	i
 8011b00:	f383 8811 	msr	BASEPRI, r3
 8011b04:	f3bf 8f6f 	isb	sy
 8011b08:	f3bf 8f4f 	dsb	sy
 8011b0c:	b662      	cpsie	i
 8011b0e:	607b      	str	r3, [r7, #4]
 8011b10:	e7fe      	b.n	8011b10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011b12:	4b0a      	ldr	r3, [pc, #40]	; (8011b3c <vPortExitCritical+0x50>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	4a08      	ldr	r2, [pc, #32]	; (8011b3c <vPortExitCritical+0x50>)
 8011b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b1c:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <vPortExitCritical+0x50>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d104      	bne.n	8011b2e <vPortExitCritical+0x42>
 8011b24:	2300      	movs	r3, #0
 8011b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b2e:	bf00      	nop
 8011b30:	370c      	adds	r7, #12
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	2000005c 	.word	0x2000005c

08011b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b40:	f3ef 8009 	mrs	r0, PSP
 8011b44:	f3bf 8f6f 	isb	sy
 8011b48:	4b15      	ldr	r3, [pc, #84]	; (8011ba0 <pxCurrentTCBConst>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	f01e 0f10 	tst.w	lr, #16
 8011b50:	bf08      	it	eq
 8011b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5a:	6010      	str	r0, [r2, #0]
 8011b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b64:	b672      	cpsid	i
 8011b66:	f380 8811 	msr	BASEPRI, r0
 8011b6a:	f3bf 8f4f 	dsb	sy
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	b662      	cpsie	i
 8011b74:	f001 fa5c 	bl	8013030 <vTaskSwitchContext>
 8011b78:	f04f 0000 	mov.w	r0, #0
 8011b7c:	f380 8811 	msr	BASEPRI, r0
 8011b80:	bc09      	pop	{r0, r3}
 8011b82:	6819      	ldr	r1, [r3, #0]
 8011b84:	6808      	ldr	r0, [r1, #0]
 8011b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b8a:	f01e 0f10 	tst.w	lr, #16
 8011b8e:	bf08      	it	eq
 8011b90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b94:	f380 8809 	msr	PSP, r0
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <pxCurrentTCBConst>:
 8011ba0:	2000b9c4 	.word	0x2000b9c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ba4:	bf00      	nop
 8011ba6:	bf00      	nop

08011ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
	__asm volatile
 8011bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb2:	b672      	cpsid	i
 8011bb4:	f383 8811 	msr	BASEPRI, r3
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	b662      	cpsie	i
 8011bc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011bc4:	f001 f976 	bl	8012eb4 <xTaskIncrementTick>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011bce:	4b06      	ldr	r3, [pc, #24]	; (8011be8 <SysTick_Handler+0x40>)
 8011bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011be0:	bf00      	nop
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	e000ed04 	.word	0xe000ed04

08011bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011bec:	b480      	push	{r7}
 8011bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011bf0:	4b0b      	ldr	r3, [pc, #44]	; (8011c20 <vPortSetupTimerInterrupt+0x34>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011bf6:	4b0b      	ldr	r3, [pc, #44]	; (8011c24 <vPortSetupTimerInterrupt+0x38>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011bfc:	4b0a      	ldr	r3, [pc, #40]	; (8011c28 <vPortSetupTimerInterrupt+0x3c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4a0a      	ldr	r2, [pc, #40]	; (8011c2c <vPortSetupTimerInterrupt+0x40>)
 8011c02:	fba2 2303 	umull	r2, r3, r2, r3
 8011c06:	099b      	lsrs	r3, r3, #6
 8011c08:	4a09      	ldr	r2, [pc, #36]	; (8011c30 <vPortSetupTimerInterrupt+0x44>)
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011c0e:	4b04      	ldr	r3, [pc, #16]	; (8011c20 <vPortSetupTimerInterrupt+0x34>)
 8011c10:	2207      	movs	r2, #7
 8011c12:	601a      	str	r2, [r3, #0]
}
 8011c14:	bf00      	nop
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop
 8011c20:	e000e010 	.word	0xe000e010
 8011c24:	e000e018 	.word	0xe000e018
 8011c28:	2000002c 	.word	0x2000002c
 8011c2c:	10624dd3 	.word	0x10624dd3
 8011c30:	e000e014 	.word	0xe000e014

08011c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011c44 <vPortEnableVFP+0x10>
 8011c38:	6801      	ldr	r1, [r0, #0]
 8011c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011c3e:	6001      	str	r1, [r0, #0]
 8011c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011c42:	bf00      	nop
 8011c44:	e000ed88 	.word	0xe000ed88

08011c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c4e:	f3ef 8305 	mrs	r3, IPSR
 8011c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b0f      	cmp	r3, #15
 8011c58:	d915      	bls.n	8011c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c5a:	4a18      	ldr	r2, [pc, #96]	; (8011cbc <vPortValidateInterruptPriority+0x74>)
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	4413      	add	r3, r2
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c64:	4b16      	ldr	r3, [pc, #88]	; (8011cc0 <vPortValidateInterruptPriority+0x78>)
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	7afa      	ldrb	r2, [r7, #11]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d20b      	bcs.n	8011c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c72:	b672      	cpsid	i
 8011c74:	f383 8811 	msr	BASEPRI, r3
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	b662      	cpsie	i
 8011c82:	607b      	str	r3, [r7, #4]
 8011c84:	e7fe      	b.n	8011c84 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c86:	4b0f      	ldr	r3, [pc, #60]	; (8011cc4 <vPortValidateInterruptPriority+0x7c>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c8e:	4b0e      	ldr	r3, [pc, #56]	; (8011cc8 <vPortValidateInterruptPriority+0x80>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d90b      	bls.n	8011cae <vPortValidateInterruptPriority+0x66>
 8011c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9a:	b672      	cpsid	i
 8011c9c:	f383 8811 	msr	BASEPRI, r3
 8011ca0:	f3bf 8f6f 	isb	sy
 8011ca4:	f3bf 8f4f 	dsb	sy
 8011ca8:	b662      	cpsie	i
 8011caa:	603b      	str	r3, [r7, #0]
 8011cac:	e7fe      	b.n	8011cac <vPortValidateInterruptPriority+0x64>
	}
 8011cae:	bf00      	nop
 8011cb0:	3714      	adds	r7, #20
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr
 8011cba:	bf00      	nop
 8011cbc:	e000e3f0 	.word	0xe000e3f0
 8011cc0:	2000b9bc 	.word	0x2000b9bc
 8011cc4:	e000ed0c 	.word	0xe000ed0c
 8011cc8:	2000b9c0 	.word	0x2000b9c0

08011ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10b      	bne.n	8011cf8 <xQueueGenericReset+0x2c>
 8011ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce4:	b672      	cpsid	i
 8011ce6:	f383 8811 	msr	BASEPRI, r3
 8011cea:	f3bf 8f6f 	isb	sy
 8011cee:	f3bf 8f4f 	dsb	sy
 8011cf2:	b662      	cpsie	i
 8011cf4:	60bb      	str	r3, [r7, #8]
 8011cf6:	e7fe      	b.n	8011cf6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8011cf8:	f7ff fec6 	bl	8011a88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d04:	68f9      	ldr	r1, [r7, #12]
 8011d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011d08:	fb01 f303 	mul.w	r3, r1, r3
 8011d0c:	441a      	add	r2, r3
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2200      	movs	r2, #0
 8011d16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d28:	3b01      	subs	r3, #1
 8011d2a:	68f9      	ldr	r1, [r7, #12]
 8011d2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011d2e:	fb01 f303 	mul.w	r3, r1, r3
 8011d32:	441a      	add	r2, r3
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	22ff      	movs	r2, #255	; 0xff
 8011d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	22ff      	movs	r2, #255	; 0xff
 8011d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d114      	bne.n	8011d78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	691b      	ldr	r3, [r3, #16]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d01a      	beq.n	8011d8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	3310      	adds	r3, #16
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f001 fa10 	bl	8013180 <xTaskRemoveFromEventList>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d012      	beq.n	8011d8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011d66:	4b0d      	ldr	r3, [pc, #52]	; (8011d9c <xQueueGenericReset+0xd0>)
 8011d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	e009      	b.n	8011d8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	3310      	adds	r3, #16
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff fcc7 	bl	8011710 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	3324      	adds	r3, #36	; 0x24
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7ff fcc2 	bl	8011710 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011d8c:	f7ff feae 	bl	8011aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011d90:	2301      	movs	r3, #1
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	e000ed04 	.word	0xe000ed04

08011da0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b08a      	sub	sp, #40	; 0x28
 8011da4:	af02      	add	r7, sp, #8
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	4613      	mov	r3, r2
 8011dac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d10b      	bne.n	8011dcc <xQueueGenericCreate+0x2c>
 8011db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db8:	b672      	cpsid	i
 8011dba:	f383 8811 	msr	BASEPRI, r3
 8011dbe:	f3bf 8f6f 	isb	sy
 8011dc2:	f3bf 8f4f 	dsb	sy
 8011dc6:	b662      	cpsie	i
 8011dc8:	613b      	str	r3, [r7, #16]
 8011dca:	e7fe      	b.n	8011dca <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d102      	bne.n	8011dd8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	61fb      	str	r3, [r7, #28]
 8011dd6:	e004      	b.n	8011de2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	fb02 f303 	mul.w	r3, r2, r3
 8011de0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	3348      	adds	r3, #72	; 0x48
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff faae 	bl	8011348 <pvPortMalloc>
 8011dec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00b      	beq.n	8011e0c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	3348      	adds	r3, #72	; 0x48
 8011df8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011dfa:	79fa      	ldrb	r2, [r7, #7]
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	4613      	mov	r3, r2
 8011e02:	697a      	ldr	r2, [r7, #20]
 8011e04:	68b9      	ldr	r1, [r7, #8]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f000 f805 	bl	8011e16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011e0c:	69bb      	ldr	r3, [r7, #24]
	}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3720      	adds	r7, #32
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b084      	sub	sp, #16
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	60f8      	str	r0, [r7, #12]
 8011e1e:	60b9      	str	r1, [r7, #8]
 8011e20:	607a      	str	r2, [r7, #4]
 8011e22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d103      	bne.n	8011e32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	69ba      	ldr	r2, [r7, #24]
 8011e2e:	601a      	str	r2, [r3, #0]
 8011e30:	e002      	b.n	8011e38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	68fa      	ldr	r2, [r7, #12]
 8011e3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011e44:	2101      	movs	r1, #1
 8011e46:	69b8      	ldr	r0, [r7, #24]
 8011e48:	f7ff ff40 	bl	8011ccc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011e4c:	bf00      	nop
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b08e      	sub	sp, #56	; 0x38
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
 8011e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e62:	2300      	movs	r3, #0
 8011e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10b      	bne.n	8011e88 <xQueueGenericSend+0x34>
 8011e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e74:	b672      	cpsid	i
 8011e76:	f383 8811 	msr	BASEPRI, r3
 8011e7a:	f3bf 8f6f 	isb	sy
 8011e7e:	f3bf 8f4f 	dsb	sy
 8011e82:	b662      	cpsie	i
 8011e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e86:	e7fe      	b.n	8011e86 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d103      	bne.n	8011e96 <xQueueGenericSend+0x42>
 8011e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d101      	bne.n	8011e9a <xQueueGenericSend+0x46>
 8011e96:	2301      	movs	r3, #1
 8011e98:	e000      	b.n	8011e9c <xQueueGenericSend+0x48>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d10b      	bne.n	8011eb8 <xQueueGenericSend+0x64>
 8011ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea4:	b672      	cpsid	i
 8011ea6:	f383 8811 	msr	BASEPRI, r3
 8011eaa:	f3bf 8f6f 	isb	sy
 8011eae:	f3bf 8f4f 	dsb	sy
 8011eb2:	b662      	cpsie	i
 8011eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8011eb6:	e7fe      	b.n	8011eb6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d103      	bne.n	8011ec6 <xQueueGenericSend+0x72>
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d101      	bne.n	8011eca <xQueueGenericSend+0x76>
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e000      	b.n	8011ecc <xQueueGenericSend+0x78>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10b      	bne.n	8011ee8 <xQueueGenericSend+0x94>
 8011ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed4:	b672      	cpsid	i
 8011ed6:	f383 8811 	msr	BASEPRI, r3
 8011eda:	f3bf 8f6f 	isb	sy
 8011ede:	f3bf 8f4f 	dsb	sy
 8011ee2:	b662      	cpsie	i
 8011ee4:	623b      	str	r3, [r7, #32]
 8011ee6:	e7fe      	b.n	8011ee6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ee8:	f001 faf0 	bl	80134cc <xTaskGetSchedulerState>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d102      	bne.n	8011ef8 <xQueueGenericSend+0xa4>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d101      	bne.n	8011efc <xQueueGenericSend+0xa8>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e000      	b.n	8011efe <xQueueGenericSend+0xaa>
 8011efc:	2300      	movs	r3, #0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d10b      	bne.n	8011f1a <xQueueGenericSend+0xc6>
 8011f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f06:	b672      	cpsid	i
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	b662      	cpsie	i
 8011f16:	61fb      	str	r3, [r7, #28]
 8011f18:	e7fe      	b.n	8011f18 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f1a:	f7ff fdb5 	bl	8011a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d302      	bcc.n	8011f30 <xQueueGenericSend+0xdc>
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	2b02      	cmp	r3, #2
 8011f2e:	d129      	bne.n	8011f84 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f30:	683a      	ldr	r2, [r7, #0]
 8011f32:	68b9      	ldr	r1, [r7, #8]
 8011f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f36:	f000 fc4a 	bl	80127ce <prvCopyDataToQueue>
 8011f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d010      	beq.n	8011f66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f46:	3324      	adds	r3, #36	; 0x24
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f001 f919 	bl	8013180 <xTaskRemoveFromEventList>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d013      	beq.n	8011f7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f54:	4b3f      	ldr	r3, [pc, #252]	; (8012054 <xQueueGenericSend+0x200>)
 8011f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f5a:	601a      	str	r2, [r3, #0]
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	e00a      	b.n	8011f7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d007      	beq.n	8011f7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f6c:	4b39      	ldr	r3, [pc, #228]	; (8012054 <xQueueGenericSend+0x200>)
 8011f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	f3bf 8f4f 	dsb	sy
 8011f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f7c:	f7ff fdb6 	bl	8011aec <vPortExitCritical>
				return pdPASS;
 8011f80:	2301      	movs	r3, #1
 8011f82:	e063      	b.n	801204c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d103      	bne.n	8011f92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f8a:	f7ff fdaf 	bl	8011aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	e05c      	b.n	801204c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d106      	bne.n	8011fa6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f98:	f107 0314 	add.w	r3, r7, #20
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f001 f953 	bl	8013248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fa6:	f7ff fda1 	bl	8011aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011faa:	f000 fed7 	bl	8012d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fae:	f7ff fd6b 	bl	8011a88 <vPortEnterCritical>
 8011fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fb8:	b25b      	sxtb	r3, r3
 8011fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fbe:	d103      	bne.n	8011fc8 <xQueueGenericSend+0x174>
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fce:	b25b      	sxtb	r3, r3
 8011fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd4:	d103      	bne.n	8011fde <xQueueGenericSend+0x18a>
 8011fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fde:	f7ff fd85 	bl	8011aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fe2:	1d3a      	adds	r2, r7, #4
 8011fe4:	f107 0314 	add.w	r3, r7, #20
 8011fe8:	4611      	mov	r1, r2
 8011fea:	4618      	mov	r0, r3
 8011fec:	f001 f942 	bl	8013274 <xTaskCheckForTimeOut>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d124      	bne.n	8012040 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ff8:	f000 fce1 	bl	80129be <prvIsQueueFull>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d018      	beq.n	8012034 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012004:	3310      	adds	r3, #16
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	4611      	mov	r1, r2
 801200a:	4618      	mov	r0, r3
 801200c:	f001 f892 	bl	8013134 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012012:	f000 fc6c 	bl	80128ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012016:	f000 feaf 	bl	8012d78 <xTaskResumeAll>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	f47f af7c 	bne.w	8011f1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012022:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <xQueueGenericSend+0x200>)
 8012024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	f3bf 8f6f 	isb	sy
 8012032:	e772      	b.n	8011f1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012036:	f000 fc5a 	bl	80128ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801203a:	f000 fe9d 	bl	8012d78 <xTaskResumeAll>
 801203e:	e76c      	b.n	8011f1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012042:	f000 fc54 	bl	80128ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012046:	f000 fe97 	bl	8012d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801204a:	2300      	movs	r3, #0
		}
	}
}
 801204c:	4618      	mov	r0, r3
 801204e:	3738      	adds	r7, #56	; 0x38
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	e000ed04 	.word	0xe000ed04

08012058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b08e      	sub	sp, #56	; 0x38
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
 8012064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206c:	2b00      	cmp	r3, #0
 801206e:	d10b      	bne.n	8012088 <xQueueGenericSendFromISR+0x30>
 8012070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012074:	b672      	cpsid	i
 8012076:	f383 8811 	msr	BASEPRI, r3
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	b662      	cpsie	i
 8012084:	627b      	str	r3, [r7, #36]	; 0x24
 8012086:	e7fe      	b.n	8012086 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d103      	bne.n	8012096 <xQueueGenericSendFromISR+0x3e>
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012092:	2b00      	cmp	r3, #0
 8012094:	d101      	bne.n	801209a <xQueueGenericSendFromISR+0x42>
 8012096:	2301      	movs	r3, #1
 8012098:	e000      	b.n	801209c <xQueueGenericSendFromISR+0x44>
 801209a:	2300      	movs	r3, #0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10b      	bne.n	80120b8 <xQueueGenericSendFromISR+0x60>
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	b672      	cpsid	i
 80120a6:	f383 8811 	msr	BASEPRI, r3
 80120aa:	f3bf 8f6f 	isb	sy
 80120ae:	f3bf 8f4f 	dsb	sy
 80120b2:	b662      	cpsie	i
 80120b4:	623b      	str	r3, [r7, #32]
 80120b6:	e7fe      	b.n	80120b6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	2b02      	cmp	r3, #2
 80120bc:	d103      	bne.n	80120c6 <xQueueGenericSendFromISR+0x6e>
 80120be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d101      	bne.n	80120ca <xQueueGenericSendFromISR+0x72>
 80120c6:	2301      	movs	r3, #1
 80120c8:	e000      	b.n	80120cc <xQueueGenericSendFromISR+0x74>
 80120ca:	2300      	movs	r3, #0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10b      	bne.n	80120e8 <xQueueGenericSendFromISR+0x90>
 80120d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d4:	b672      	cpsid	i
 80120d6:	f383 8811 	msr	BASEPRI, r3
 80120da:	f3bf 8f6f 	isb	sy
 80120de:	f3bf 8f4f 	dsb	sy
 80120e2:	b662      	cpsie	i
 80120e4:	61fb      	str	r3, [r7, #28]
 80120e6:	e7fe      	b.n	80120e6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120e8:	f7ff fdae 	bl	8011c48 <vPortValidateInterruptPriority>
	__asm volatile
 80120ec:	f3ef 8211 	mrs	r2, BASEPRI
 80120f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f4:	b672      	cpsid	i
 80120f6:	f383 8811 	msr	BASEPRI, r3
 80120fa:	f3bf 8f6f 	isb	sy
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	b662      	cpsie	i
 8012104:	61ba      	str	r2, [r7, #24]
 8012106:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012108:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801210a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012114:	429a      	cmp	r2, r3
 8012116:	d302      	bcc.n	801211e <xQueueGenericSendFromISR+0xc6>
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	2b02      	cmp	r3, #2
 801211c:	d12c      	bne.n	8012178 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012128:	683a      	ldr	r2, [r7, #0]
 801212a:	68b9      	ldr	r1, [r7, #8]
 801212c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801212e:	f000 fb4e 	bl	80127ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012132:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801213a:	d112      	bne.n	8012162 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012140:	2b00      	cmp	r3, #0
 8012142:	d016      	beq.n	8012172 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	3324      	adds	r3, #36	; 0x24
 8012148:	4618      	mov	r0, r3
 801214a:	f001 f819 	bl	8013180 <xTaskRemoveFromEventList>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d00e      	beq.n	8012172 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00b      	beq.n	8012172 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2201      	movs	r2, #1
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	e007      	b.n	8012172 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012166:	3301      	adds	r3, #1
 8012168:	b2db      	uxtb	r3, r3
 801216a:	b25a      	sxtb	r2, r3
 801216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801216e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012172:	2301      	movs	r3, #1
 8012174:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012176:	e001      	b.n	801217c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012178:	2300      	movs	r3, #0
 801217a:	637b      	str	r3, [r7, #52]	; 0x34
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012188:	4618      	mov	r0, r3
 801218a:	3738      	adds	r7, #56	; 0x38
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08e      	sub	sp, #56	; 0x38
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d10b      	bne.n	80121bc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80121a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a8:	b672      	cpsid	i
 80121aa:	f383 8811 	msr	BASEPRI, r3
 80121ae:	f3bf 8f6f 	isb	sy
 80121b2:	f3bf 8f4f 	dsb	sy
 80121b6:	b662      	cpsie	i
 80121b8:	623b      	str	r3, [r7, #32]
 80121ba:	e7fe      	b.n	80121ba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80121bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00b      	beq.n	80121dc <xQueueGiveFromISR+0x4c>
 80121c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c8:	b672      	cpsid	i
 80121ca:	f383 8811 	msr	BASEPRI, r3
 80121ce:	f3bf 8f6f 	isb	sy
 80121d2:	f3bf 8f4f 	dsb	sy
 80121d6:	b662      	cpsie	i
 80121d8:	61fb      	str	r3, [r7, #28]
 80121da:	e7fe      	b.n	80121da <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80121dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d103      	bne.n	80121ec <xQueueGiveFromISR+0x5c>
 80121e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d101      	bne.n	80121f0 <xQueueGiveFromISR+0x60>
 80121ec:	2301      	movs	r3, #1
 80121ee:	e000      	b.n	80121f2 <xQueueGiveFromISR+0x62>
 80121f0:	2300      	movs	r3, #0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d10b      	bne.n	801220e <xQueueGiveFromISR+0x7e>
 80121f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fa:	b672      	cpsid	i
 80121fc:	f383 8811 	msr	BASEPRI, r3
 8012200:	f3bf 8f6f 	isb	sy
 8012204:	f3bf 8f4f 	dsb	sy
 8012208:	b662      	cpsie	i
 801220a:	61bb      	str	r3, [r7, #24]
 801220c:	e7fe      	b.n	801220c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801220e:	f7ff fd1b 	bl	8011c48 <vPortValidateInterruptPriority>
	__asm volatile
 8012212:	f3ef 8211 	mrs	r2, BASEPRI
 8012216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801221a:	b672      	cpsid	i
 801221c:	f383 8811 	msr	BASEPRI, r3
 8012220:	f3bf 8f6f 	isb	sy
 8012224:	f3bf 8f4f 	dsb	sy
 8012228:	b662      	cpsie	i
 801222a:	617a      	str	r2, [r7, #20]
 801222c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801222e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012230:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012236:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801223c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801223e:	429a      	cmp	r2, r3
 8012240:	d22b      	bcs.n	801229a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224e:	1c5a      	adds	r2, r3, #1
 8012250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012252:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012254:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225c:	d112      	bne.n	8012284 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012262:	2b00      	cmp	r3, #0
 8012264:	d016      	beq.n	8012294 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012268:	3324      	adds	r3, #36	; 0x24
 801226a:	4618      	mov	r0, r3
 801226c:	f000 ff88 	bl	8013180 <xTaskRemoveFromEventList>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d00e      	beq.n	8012294 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d00b      	beq.n	8012294 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	2201      	movs	r2, #1
 8012280:	601a      	str	r2, [r3, #0]
 8012282:	e007      	b.n	8012294 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012288:	3301      	adds	r3, #1
 801228a:	b2db      	uxtb	r3, r3
 801228c:	b25a      	sxtb	r2, r3
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012294:	2301      	movs	r3, #1
 8012296:	637b      	str	r3, [r7, #52]	; 0x34
 8012298:	e001      	b.n	801229e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801229a:	2300      	movs	r3, #0
 801229c:	637b      	str	r3, [r7, #52]	; 0x34
 801229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80122a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3738      	adds	r7, #56	; 0x38
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b08c      	sub	sp, #48	; 0x30
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80122c0:	2300      	movs	r3, #0
 80122c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d10b      	bne.n	80122e6 <xQueueReceive+0x32>
	__asm volatile
 80122ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d2:	b672      	cpsid	i
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	b662      	cpsie	i
 80122e2:	623b      	str	r3, [r7, #32]
 80122e4:	e7fe      	b.n	80122e4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d103      	bne.n	80122f4 <xQueueReceive+0x40>
 80122ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d101      	bne.n	80122f8 <xQueueReceive+0x44>
 80122f4:	2301      	movs	r3, #1
 80122f6:	e000      	b.n	80122fa <xQueueReceive+0x46>
 80122f8:	2300      	movs	r3, #0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d10b      	bne.n	8012316 <xQueueReceive+0x62>
 80122fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012302:	b672      	cpsid	i
 8012304:	f383 8811 	msr	BASEPRI, r3
 8012308:	f3bf 8f6f 	isb	sy
 801230c:	f3bf 8f4f 	dsb	sy
 8012310:	b662      	cpsie	i
 8012312:	61fb      	str	r3, [r7, #28]
 8012314:	e7fe      	b.n	8012314 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012316:	f001 f8d9 	bl	80134cc <xTaskGetSchedulerState>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d102      	bne.n	8012326 <xQueueReceive+0x72>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d101      	bne.n	801232a <xQueueReceive+0x76>
 8012326:	2301      	movs	r3, #1
 8012328:	e000      	b.n	801232c <xQueueReceive+0x78>
 801232a:	2300      	movs	r3, #0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d10b      	bne.n	8012348 <xQueueReceive+0x94>
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	b672      	cpsid	i
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	b662      	cpsie	i
 8012344:	61bb      	str	r3, [r7, #24]
 8012346:	e7fe      	b.n	8012346 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012348:	f7ff fb9e 	bl	8011a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012350:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012354:	2b00      	cmp	r3, #0
 8012356:	d01f      	beq.n	8012398 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012358:	68b9      	ldr	r1, [r7, #8]
 801235a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801235c:	f000 faa1 	bl	80128a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012362:	1e5a      	subs	r2, r3, #1
 8012364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012366:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236a:	691b      	ldr	r3, [r3, #16]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d00f      	beq.n	8012390 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012372:	3310      	adds	r3, #16
 8012374:	4618      	mov	r0, r3
 8012376:	f000 ff03 	bl	8013180 <xTaskRemoveFromEventList>
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d007      	beq.n	8012390 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012380:	4b3c      	ldr	r3, [pc, #240]	; (8012474 <xQueueReceive+0x1c0>)
 8012382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012390:	f7ff fbac 	bl	8011aec <vPortExitCritical>
				return pdPASS;
 8012394:	2301      	movs	r3, #1
 8012396:	e069      	b.n	801246c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d103      	bne.n	80123a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801239e:	f7ff fba5 	bl	8011aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123a2:	2300      	movs	r3, #0
 80123a4:	e062      	b.n	801246c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d106      	bne.n	80123ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123ac:	f107 0310 	add.w	r3, r7, #16
 80123b0:	4618      	mov	r0, r3
 80123b2:	f000 ff49 	bl	8013248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123b6:	2301      	movs	r3, #1
 80123b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123ba:	f7ff fb97 	bl	8011aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123be:	f000 fccd 	bl	8012d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123c2:	f7ff fb61 	bl	8011a88 <vPortEnterCritical>
 80123c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123cc:	b25b      	sxtb	r3, r3
 80123ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123d2:	d103      	bne.n	80123dc <xQueueReceive+0x128>
 80123d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d6:	2200      	movs	r2, #0
 80123d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123e2:	b25b      	sxtb	r3, r3
 80123e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e8:	d103      	bne.n	80123f2 <xQueueReceive+0x13e>
 80123ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ec:	2200      	movs	r2, #0
 80123ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123f2:	f7ff fb7b 	bl	8011aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123f6:	1d3a      	adds	r2, r7, #4
 80123f8:	f107 0310 	add.w	r3, r7, #16
 80123fc:	4611      	mov	r1, r2
 80123fe:	4618      	mov	r0, r3
 8012400:	f000 ff38 	bl	8013274 <xTaskCheckForTimeOut>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d123      	bne.n	8012452 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801240a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801240c:	f000 fac1 	bl	8012992 <prvIsQueueEmpty>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d017      	beq.n	8012446 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	3324      	adds	r3, #36	; 0x24
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	4611      	mov	r1, r2
 801241e:	4618      	mov	r0, r3
 8012420:	f000 fe88 	bl	8013134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012426:	f000 fa62 	bl	80128ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801242a:	f000 fca5 	bl	8012d78 <xTaskResumeAll>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d189      	bne.n	8012348 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012434:	4b0f      	ldr	r3, [pc, #60]	; (8012474 <xQueueReceive+0x1c0>)
 8012436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801243a:	601a      	str	r2, [r3, #0]
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	f3bf 8f6f 	isb	sy
 8012444:	e780      	b.n	8012348 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012448:	f000 fa51 	bl	80128ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801244c:	f000 fc94 	bl	8012d78 <xTaskResumeAll>
 8012450:	e77a      	b.n	8012348 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012454:	f000 fa4b 	bl	80128ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012458:	f000 fc8e 	bl	8012d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801245c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801245e:	f000 fa98 	bl	8012992 <prvIsQueueEmpty>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	f43f af6f 	beq.w	8012348 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801246a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801246c:	4618      	mov	r0, r3
 801246e:	3730      	adds	r7, #48	; 0x30
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	e000ed04 	.word	0xe000ed04

08012478 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b08e      	sub	sp, #56	; 0x38
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012482:	2300      	movs	r3, #0
 8012484:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801248a:	2300      	movs	r3, #0
 801248c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012490:	2b00      	cmp	r3, #0
 8012492:	d10b      	bne.n	80124ac <xQueueSemaphoreTake+0x34>
 8012494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012498:	b672      	cpsid	i
 801249a:	f383 8811 	msr	BASEPRI, r3
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	b662      	cpsie	i
 80124a8:	623b      	str	r3, [r7, #32]
 80124aa:	e7fe      	b.n	80124aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80124ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00b      	beq.n	80124cc <xQueueSemaphoreTake+0x54>
 80124b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b8:	b672      	cpsid	i
 80124ba:	f383 8811 	msr	BASEPRI, r3
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	f3bf 8f4f 	dsb	sy
 80124c6:	b662      	cpsie	i
 80124c8:	61fb      	str	r3, [r7, #28]
 80124ca:	e7fe      	b.n	80124ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124cc:	f000 fffe 	bl	80134cc <xTaskGetSchedulerState>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d102      	bne.n	80124dc <xQueueSemaphoreTake+0x64>
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d101      	bne.n	80124e0 <xQueueSemaphoreTake+0x68>
 80124dc:	2301      	movs	r3, #1
 80124de:	e000      	b.n	80124e2 <xQueueSemaphoreTake+0x6a>
 80124e0:	2300      	movs	r3, #0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10b      	bne.n	80124fe <xQueueSemaphoreTake+0x86>
 80124e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ea:	b672      	cpsid	i
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	b662      	cpsie	i
 80124fa:	61bb      	str	r3, [r7, #24]
 80124fc:	e7fe      	b.n	80124fc <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80124fe:	f7ff fac3 	bl	8011a88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012506:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	2b00      	cmp	r3, #0
 801250c:	d024      	beq.n	8012558 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012510:	1e5a      	subs	r2, r3, #1
 8012512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012514:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d104      	bne.n	8012528 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801251e:	f001 f9a3 	bl	8013868 <pvTaskIncrementMutexHeldCount>
 8012522:	4602      	mov	r2, r0
 8012524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012526:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00f      	beq.n	8012550 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	3310      	adds	r3, #16
 8012534:	4618      	mov	r0, r3
 8012536:	f000 fe23 	bl	8013180 <xTaskRemoveFromEventList>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d007      	beq.n	8012550 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012540:	4b54      	ldr	r3, [pc, #336]	; (8012694 <xQueueSemaphoreTake+0x21c>)
 8012542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012546:	601a      	str	r2, [r3, #0]
 8012548:	f3bf 8f4f 	dsb	sy
 801254c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012550:	f7ff facc 	bl	8011aec <vPortExitCritical>
				return pdPASS;
 8012554:	2301      	movs	r3, #1
 8012556:	e098      	b.n	801268a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d112      	bne.n	8012584 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00b      	beq.n	801257c <xQueueSemaphoreTake+0x104>
 8012564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012568:	b672      	cpsid	i
 801256a:	f383 8811 	msr	BASEPRI, r3
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	b662      	cpsie	i
 8012578:	617b      	str	r3, [r7, #20]
 801257a:	e7fe      	b.n	801257a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801257c:	f7ff fab6 	bl	8011aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012580:	2300      	movs	r3, #0
 8012582:	e082      	b.n	801268a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012586:	2b00      	cmp	r3, #0
 8012588:	d106      	bne.n	8012598 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801258a:	f107 030c 	add.w	r3, r7, #12
 801258e:	4618      	mov	r0, r3
 8012590:	f000 fe5a 	bl	8013248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012594:	2301      	movs	r3, #1
 8012596:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012598:	f7ff faa8 	bl	8011aec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801259c:	f000 fbde 	bl	8012d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125a0:	f7ff fa72 	bl	8011a88 <vPortEnterCritical>
 80125a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125aa:	b25b      	sxtb	r3, r3
 80125ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b0:	d103      	bne.n	80125ba <xQueueSemaphoreTake+0x142>
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	2200      	movs	r2, #0
 80125b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125c0:	b25b      	sxtb	r3, r3
 80125c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c6:	d103      	bne.n	80125d0 <xQueueSemaphoreTake+0x158>
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	2200      	movs	r2, #0
 80125cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80125d0:	f7ff fa8c 	bl	8011aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125d4:	463a      	mov	r2, r7
 80125d6:	f107 030c 	add.w	r3, r7, #12
 80125da:	4611      	mov	r1, r2
 80125dc:	4618      	mov	r0, r3
 80125de:	f000 fe49 	bl	8013274 <xTaskCheckForTimeOut>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d132      	bne.n	801264e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125ea:	f000 f9d2 	bl	8012992 <prvIsQueueEmpty>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d026      	beq.n	8012642 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80125f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d109      	bne.n	8012610 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80125fc:	f7ff fa44 	bl	8011a88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	4618      	mov	r0, r3
 8012606:	f000 ff7f 	bl	8013508 <xTaskPriorityInherit>
 801260a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801260c:	f7ff fa6e 	bl	8011aec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	3324      	adds	r3, #36	; 0x24
 8012614:	683a      	ldr	r2, [r7, #0]
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f000 fd8b 	bl	8013134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801261e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012620:	f000 f965 	bl	80128ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012624:	f000 fba8 	bl	8012d78 <xTaskResumeAll>
 8012628:	4603      	mov	r3, r0
 801262a:	2b00      	cmp	r3, #0
 801262c:	f47f af67 	bne.w	80124fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012630:	4b18      	ldr	r3, [pc, #96]	; (8012694 <xQueueSemaphoreTake+0x21c>)
 8012632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012636:	601a      	str	r2, [r3, #0]
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	e75d      	b.n	80124fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012644:	f000 f953 	bl	80128ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012648:	f000 fb96 	bl	8012d78 <xTaskResumeAll>
 801264c:	e757      	b.n	80124fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801264e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012650:	f000 f94d 	bl	80128ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012654:	f000 fb90 	bl	8012d78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801265a:	f000 f99a 	bl	8012992 <prvIsQueueEmpty>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	f43f af4c 	beq.w	80124fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00d      	beq.n	8012688 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801266c:	f7ff fa0c 	bl	8011a88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012672:	f000 f894 	bl	801279e <prvGetDisinheritPriorityAfterTimeout>
 8012676:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801267e:	4618      	mov	r0, r3
 8012680:	f001 f850 	bl	8013724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012684:	f7ff fa32 	bl	8011aec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801268a:	4618      	mov	r0, r3
 801268c:	3738      	adds	r7, #56	; 0x38
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	e000ed04 	.word	0xe000ed04

08012698 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b08e      	sub	sp, #56	; 0x38
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80126a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10b      	bne.n	80126c6 <xQueueReceiveFromISR+0x2e>
 80126ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b2:	b672      	cpsid	i
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	b662      	cpsie	i
 80126c2:	623b      	str	r3, [r7, #32]
 80126c4:	e7fe      	b.n	80126c4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d103      	bne.n	80126d4 <xQueueReceiveFromISR+0x3c>
 80126cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <xQueueReceiveFromISR+0x40>
 80126d4:	2301      	movs	r3, #1
 80126d6:	e000      	b.n	80126da <xQueueReceiveFromISR+0x42>
 80126d8:	2300      	movs	r3, #0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d10b      	bne.n	80126f6 <xQueueReceiveFromISR+0x5e>
 80126de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e2:	b672      	cpsid	i
 80126e4:	f383 8811 	msr	BASEPRI, r3
 80126e8:	f3bf 8f6f 	isb	sy
 80126ec:	f3bf 8f4f 	dsb	sy
 80126f0:	b662      	cpsie	i
 80126f2:	61fb      	str	r3, [r7, #28]
 80126f4:	e7fe      	b.n	80126f4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126f6:	f7ff faa7 	bl	8011c48 <vPortValidateInterruptPriority>
	__asm volatile
 80126fa:	f3ef 8211 	mrs	r2, BASEPRI
 80126fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012702:	b672      	cpsid	i
 8012704:	f383 8811 	msr	BASEPRI, r3
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	b662      	cpsie	i
 8012712:	61ba      	str	r2, [r7, #24]
 8012714:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012716:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012718:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801271e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012722:	2b00      	cmp	r3, #0
 8012724:	d02f      	beq.n	8012786 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801272c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012730:	68b9      	ldr	r1, [r7, #8]
 8012732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012734:	f000 f8b5 	bl	80128a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273a:	1e5a      	subs	r2, r3, #1
 801273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012748:	d112      	bne.n	8012770 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274c:	691b      	ldr	r3, [r3, #16]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d016      	beq.n	8012780 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	3310      	adds	r3, #16
 8012756:	4618      	mov	r0, r3
 8012758:	f000 fd12 	bl	8013180 <xTaskRemoveFromEventList>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00e      	beq.n	8012780 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00b      	beq.n	8012780 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2201      	movs	r2, #1
 801276c:	601a      	str	r2, [r3, #0]
 801276e:	e007      	b.n	8012780 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012774:	3301      	adds	r3, #1
 8012776:	b2db      	uxtb	r3, r3
 8012778:	b25a      	sxtb	r2, r3
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012780:	2301      	movs	r3, #1
 8012782:	637b      	str	r3, [r7, #52]	; 0x34
 8012784:	e001      	b.n	801278a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8012786:	2300      	movs	r3, #0
 8012788:	637b      	str	r3, [r7, #52]	; 0x34
 801278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012796:	4618      	mov	r0, r3
 8012798:	3738      	adds	r7, #56	; 0x38
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}

0801279e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801279e:	b480      	push	{r7}
 80127a0:	b085      	sub	sp, #20
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d006      	beq.n	80127bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f1c3 0307 	rsb	r3, r3, #7
 80127b8:	60fb      	str	r3, [r7, #12]
 80127ba:	e001      	b.n	80127c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80127bc:	2300      	movs	r3, #0
 80127be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80127c0:	68fb      	ldr	r3, [r7, #12]
	}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3714      	adds	r7, #20
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr

080127ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b086      	sub	sp, #24
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	60f8      	str	r0, [r7, #12]
 80127d6:	60b9      	str	r1, [r7, #8]
 80127d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80127da:	2300      	movs	r3, #0
 80127dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d10d      	bne.n	8012808 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d14d      	bne.n	8012890 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 ff0b 	bl	8013614 <xTaskPriorityDisinherit>
 80127fe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2200      	movs	r2, #0
 8012804:	605a      	str	r2, [r3, #4]
 8012806:	e043      	b.n	8012890 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d119      	bne.n	8012842 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	6898      	ldr	r0, [r3, #8]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012816:	461a      	mov	r2, r3
 8012818:	68b9      	ldr	r1, [r7, #8]
 801281a:	f012 f9c3 	bl	8024ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	689a      	ldr	r2, [r3, #8]
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012826:	441a      	add	r2, r3
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	689a      	ldr	r2, [r3, #8]
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	429a      	cmp	r2, r3
 8012836:	d32b      	bcc.n	8012890 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	609a      	str	r2, [r3, #8]
 8012840:	e026      	b.n	8012890 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	68d8      	ldr	r0, [r3, #12]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284a:	461a      	mov	r2, r3
 801284c:	68b9      	ldr	r1, [r7, #8]
 801284e:	f012 f9a9 	bl	8024ba4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	68da      	ldr	r2, [r3, #12]
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285a:	425b      	negs	r3, r3
 801285c:	441a      	add	r2, r3
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	68da      	ldr	r2, [r3, #12]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	429a      	cmp	r2, r3
 801286c:	d207      	bcs.n	801287e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012876:	425b      	negs	r3, r3
 8012878:	441a      	add	r2, r3
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d105      	bne.n	8012890 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d002      	beq.n	8012890 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	3b01      	subs	r3, #1
 801288e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	1c5a      	adds	r2, r3, #1
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012898:	697b      	ldr	r3, [r7, #20]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b082      	sub	sp, #8
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d018      	beq.n	80128e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	68da      	ldr	r2, [r3, #12]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128bc:	441a      	add	r2, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	68da      	ldr	r2, [r3, #12]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d303      	bcc.n	80128d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	68d9      	ldr	r1, [r3, #12]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128de:	461a      	mov	r2, r3
 80128e0:	6838      	ldr	r0, [r7, #0]
 80128e2:	f012 f95f 	bl	8024ba4 <memcpy>
	}
}
 80128e6:	bf00      	nop
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b084      	sub	sp, #16
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80128f6:	f7ff f8c7 	bl	8011a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012900:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012902:	e011      	b.n	8012928 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	2b00      	cmp	r3, #0
 801290a:	d012      	beq.n	8012932 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3324      	adds	r3, #36	; 0x24
 8012910:	4618      	mov	r0, r3
 8012912:	f000 fc35 	bl	8013180 <xTaskRemoveFromEventList>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d001      	beq.n	8012920 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801291c:	f000 fd0e 	bl	801333c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012920:	7bfb      	ldrb	r3, [r7, #15]
 8012922:	3b01      	subs	r3, #1
 8012924:	b2db      	uxtb	r3, r3
 8012926:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801292c:	2b00      	cmp	r3, #0
 801292e:	dce9      	bgt.n	8012904 <prvUnlockQueue+0x16>
 8012930:	e000      	b.n	8012934 <prvUnlockQueue+0x46>
					break;
 8012932:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	22ff      	movs	r2, #255	; 0xff
 8012938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801293c:	f7ff f8d6 	bl	8011aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012940:	f7ff f8a2 	bl	8011a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801294a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801294c:	e011      	b.n	8012972 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	691b      	ldr	r3, [r3, #16]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d012      	beq.n	801297c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3310      	adds	r3, #16
 801295a:	4618      	mov	r0, r3
 801295c:	f000 fc10 	bl	8013180 <xTaskRemoveFromEventList>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d001      	beq.n	801296a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012966:	f000 fce9 	bl	801333c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801296a:	7bbb      	ldrb	r3, [r7, #14]
 801296c:	3b01      	subs	r3, #1
 801296e:	b2db      	uxtb	r3, r3
 8012970:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012976:	2b00      	cmp	r3, #0
 8012978:	dce9      	bgt.n	801294e <prvUnlockQueue+0x60>
 801297a:	e000      	b.n	801297e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801297c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	22ff      	movs	r2, #255	; 0xff
 8012982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012986:	f7ff f8b1 	bl	8011aec <vPortExitCritical>
}
 801298a:	bf00      	nop
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b084      	sub	sp, #16
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801299a:	f7ff f875 	bl	8011a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d102      	bne.n	80129ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80129a6:	2301      	movs	r3, #1
 80129a8:	60fb      	str	r3, [r7, #12]
 80129aa:	e001      	b.n	80129b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80129ac:	2300      	movs	r3, #0
 80129ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80129b0:	f7ff f89c 	bl	8011aec <vPortExitCritical>

	return xReturn;
 80129b4:	68fb      	ldr	r3, [r7, #12]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b084      	sub	sp, #16
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80129c6:	f7ff f85f 	bl	8011a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d102      	bne.n	80129dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80129d6:	2301      	movs	r3, #1
 80129d8:	60fb      	str	r3, [r7, #12]
 80129da:	e001      	b.n	80129e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80129dc:	2300      	movs	r3, #0
 80129de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80129e0:	f7ff f884 	bl	8011aec <vPortExitCritical>

	return xReturn;
 80129e4:	68fb      	ldr	r3, [r7, #12]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b08c      	sub	sp, #48	; 0x30
 80129f2:	af04      	add	r7, sp, #16
 80129f4:	60f8      	str	r0, [r7, #12]
 80129f6:	60b9      	str	r1, [r7, #8]
 80129f8:	603b      	str	r3, [r7, #0]
 80129fa:	4613      	mov	r3, r2
 80129fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129fe:	88fb      	ldrh	r3, [r7, #6]
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fe fca0 	bl	8011348 <pvPortMalloc>
 8012a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00e      	beq.n	8012a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012a10:	2058      	movs	r0, #88	; 0x58
 8012a12:	f7fe fc99 	bl	8011348 <pvPortMalloc>
 8012a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d003      	beq.n	8012a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	697a      	ldr	r2, [r7, #20]
 8012a22:	631a      	str	r2, [r3, #48]	; 0x30
 8012a24:	e005      	b.n	8012a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012a26:	6978      	ldr	r0, [r7, #20]
 8012a28:	f7fe fd5a 	bl	80114e0 <vPortFree>
 8012a2c:	e001      	b.n	8012a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d013      	beq.n	8012a60 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012a38:	88fa      	ldrh	r2, [r7, #6]
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	9303      	str	r3, [sp, #12]
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	9302      	str	r3, [sp, #8]
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	68b9      	ldr	r1, [r7, #8]
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f000 f80e 	bl	8012a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a54:	69f8      	ldr	r0, [r7, #28]
 8012a56:	f000 f897 	bl	8012b88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	61bb      	str	r3, [r7, #24]
 8012a5e:	e002      	b.n	8012a66 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012a60:	f04f 33ff 	mov.w	r3, #4294967295
 8012a64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012a66:	69bb      	ldr	r3, [r7, #24]
	}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3720      	adds	r7, #32
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b088      	sub	sp, #32
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
 8012a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	461a      	mov	r2, r3
 8012a88:	21a5      	movs	r1, #165	; 0xa5
 8012a8a:	f012 f896 	bl	8024bba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a92:	6879      	ldr	r1, [r7, #4]
 8012a94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012a98:	440b      	add	r3, r1
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	4413      	add	r3, r2
 8012a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	f023 0307 	bic.w	r3, r3, #7
 8012aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	f003 0307 	and.w	r3, r3, #7
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00b      	beq.n	8012aca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8012ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab6:	b672      	cpsid	i
 8012ab8:	f383 8811 	msr	BASEPRI, r3
 8012abc:	f3bf 8f6f 	isb	sy
 8012ac0:	f3bf 8f4f 	dsb	sy
 8012ac4:	b662      	cpsie	i
 8012ac6:	617b      	str	r3, [r7, #20]
 8012ac8:	e7fe      	b.n	8012ac8 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012aca:	2300      	movs	r3, #0
 8012acc:	61fb      	str	r3, [r7, #28]
 8012ace:	e012      	b.n	8012af6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	7819      	ldrb	r1, [r3, #0]
 8012ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	4413      	add	r3, r2
 8012ade:	3334      	adds	r3, #52	; 0x34
 8012ae0:	460a      	mov	r2, r1
 8012ae2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	4413      	add	r3, r2
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d006      	beq.n	8012afe <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	3301      	adds	r3, #1
 8012af4:	61fb      	str	r3, [r7, #28]
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	2b0f      	cmp	r3, #15
 8012afa:	d9e9      	bls.n	8012ad0 <prvInitialiseNewTask+0x60>
 8012afc:	e000      	b.n	8012b00 <prvInitialiseNewTask+0x90>
		{
			break;
 8012afe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	2b06      	cmp	r3, #6
 8012b0c:	d901      	bls.n	8012b12 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012b0e:	2306      	movs	r3, #6
 8012b10:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	2200      	movs	r2, #0
 8012b22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b26:	3304      	adds	r3, #4
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fe fe11 	bl	8011750 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	3318      	adds	r3, #24
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fe fe0c 	bl	8011750 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b40:	f1c3 0207 	rsb	r2, r3, #7
 8012b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b50:	2200      	movs	r2, #0
 8012b52:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b56:	2200      	movs	r2, #0
 8012b58:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012b62:	683a      	ldr	r2, [r7, #0]
 8012b64:	68f9      	ldr	r1, [r7, #12]
 8012b66:	69b8      	ldr	r0, [r7, #24]
 8012b68:	f7fe fe86 	bl	8011878 <pxPortInitialiseStack>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b7e:	bf00      	nop
 8012b80:	3720      	adds	r7, #32
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
	...

08012b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012b90:	f7fe ff7a 	bl	8011a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012b94:	4b2a      	ldr	r3, [pc, #168]	; (8012c40 <prvAddNewTaskToReadyList+0xb8>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	4a29      	ldr	r2, [pc, #164]	; (8012c40 <prvAddNewTaskToReadyList+0xb8>)
 8012b9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012b9e:	4b29      	ldr	r3, [pc, #164]	; (8012c44 <prvAddNewTaskToReadyList+0xbc>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d109      	bne.n	8012bba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012ba6:	4a27      	ldr	r2, [pc, #156]	; (8012c44 <prvAddNewTaskToReadyList+0xbc>)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012bac:	4b24      	ldr	r3, [pc, #144]	; (8012c40 <prvAddNewTaskToReadyList+0xb8>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d110      	bne.n	8012bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012bb4:	f000 fbe8 	bl	8013388 <prvInitialiseTaskLists>
 8012bb8:	e00d      	b.n	8012bd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012bba:	4b23      	ldr	r3, [pc, #140]	; (8012c48 <prvAddNewTaskToReadyList+0xc0>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d109      	bne.n	8012bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012bc2:	4b20      	ldr	r3, [pc, #128]	; (8012c44 <prvAddNewTaskToReadyList+0xbc>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d802      	bhi.n	8012bd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012bd0:	4a1c      	ldr	r2, [pc, #112]	; (8012c44 <prvAddNewTaskToReadyList+0xbc>)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012bd6:	4b1d      	ldr	r3, [pc, #116]	; (8012c4c <prvAddNewTaskToReadyList+0xc4>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	3301      	adds	r3, #1
 8012bdc:	4a1b      	ldr	r2, [pc, #108]	; (8012c4c <prvAddNewTaskToReadyList+0xc4>)
 8012bde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be4:	2201      	movs	r2, #1
 8012be6:	409a      	lsls	r2, r3
 8012be8:	4b19      	ldr	r3, [pc, #100]	; (8012c50 <prvAddNewTaskToReadyList+0xc8>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4313      	orrs	r3, r2
 8012bee:	4a18      	ldr	r2, [pc, #96]	; (8012c50 <prvAddNewTaskToReadyList+0xc8>)
 8012bf0:	6013      	str	r3, [r2, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bf6:	4613      	mov	r3, r2
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	4413      	add	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4a15      	ldr	r2, [pc, #84]	; (8012c54 <prvAddNewTaskToReadyList+0xcc>)
 8012c00:	441a      	add	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	3304      	adds	r3, #4
 8012c06:	4619      	mov	r1, r3
 8012c08:	4610      	mov	r0, r2
 8012c0a:	f7fe fdae 	bl	801176a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012c0e:	f7fe ff6d 	bl	8011aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012c12:	4b0d      	ldr	r3, [pc, #52]	; (8012c48 <prvAddNewTaskToReadyList+0xc0>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00e      	beq.n	8012c38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012c1a:	4b0a      	ldr	r3, [pc, #40]	; (8012c44 <prvAddNewTaskToReadyList+0xbc>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d207      	bcs.n	8012c38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012c28:	4b0b      	ldr	r3, [pc, #44]	; (8012c58 <prvAddNewTaskToReadyList+0xd0>)
 8012c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c2e:	601a      	str	r2, [r3, #0]
 8012c30:	f3bf 8f4f 	dsb	sy
 8012c34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c38:	bf00      	nop
 8012c3a:	3708      	adds	r7, #8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	2000bac4 	.word	0x2000bac4
 8012c44:	2000b9c4 	.word	0x2000b9c4
 8012c48:	2000bad0 	.word	0x2000bad0
 8012c4c:	2000bae0 	.word	0x2000bae0
 8012c50:	2000bacc 	.word	0x2000bacc
 8012c54:	2000b9c8 	.word	0x2000b9c8
 8012c58:	e000ed04 	.word	0xe000ed04

08012c5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012c64:	2300      	movs	r3, #0
 8012c66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d018      	beq.n	8012ca0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012c6e:	4b14      	ldr	r3, [pc, #80]	; (8012cc0 <vTaskDelay+0x64>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d00b      	beq.n	8012c8e <vTaskDelay+0x32>
 8012c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7a:	b672      	cpsid	i
 8012c7c:	f383 8811 	msr	BASEPRI, r3
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	b662      	cpsie	i
 8012c8a:	60bb      	str	r3, [r7, #8]
 8012c8c:	e7fe      	b.n	8012c8c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8012c8e:	f000 f865 	bl	8012d5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012c92:	2100      	movs	r1, #0
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 fdfb 	bl	8013890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012c9a:	f000 f86d 	bl	8012d78 <xTaskResumeAll>
 8012c9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d107      	bne.n	8012cb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012ca6:	4b07      	ldr	r3, [pc, #28]	; (8012cc4 <vTaskDelay+0x68>)
 8012ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cac:	601a      	str	r2, [r3, #0]
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012cb6:	bf00      	nop
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	2000baec 	.word	0x2000baec
 8012cc4:	e000ed04 	.word	0xe000ed04

08012cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b086      	sub	sp, #24
 8012ccc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8012cce:	4b1d      	ldr	r3, [pc, #116]	; (8012d44 <vTaskStartScheduler+0x7c>)
 8012cd0:	9301      	str	r3, [sp, #4]
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	9300      	str	r3, [sp, #0]
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	2280      	movs	r2, #128	; 0x80
 8012cda:	491b      	ldr	r1, [pc, #108]	; (8012d48 <vTaskStartScheduler+0x80>)
 8012cdc:	481b      	ldr	r0, [pc, #108]	; (8012d4c <vTaskStartScheduler+0x84>)
 8012cde:	f7ff fe86 	bl	80129ee <xTaskCreate>
 8012ce2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d117      	bne.n	8012d1a <vTaskStartScheduler+0x52>
 8012cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cee:	b672      	cpsid	i
 8012cf0:	f383 8811 	msr	BASEPRI, r3
 8012cf4:	f3bf 8f6f 	isb	sy
 8012cf8:	f3bf 8f4f 	dsb	sy
 8012cfc:	b662      	cpsie	i
 8012cfe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012d00:	4b13      	ldr	r3, [pc, #76]	; (8012d50 <vTaskStartScheduler+0x88>)
 8012d02:	f04f 32ff 	mov.w	r2, #4294967295
 8012d06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012d08:	4b12      	ldr	r3, [pc, #72]	; (8012d54 <vTaskStartScheduler+0x8c>)
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012d0e:	4b12      	ldr	r3, [pc, #72]	; (8012d58 <vTaskStartScheduler+0x90>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012d14:	f7fe fe3c 	bl	8011990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012d18:	e00f      	b.n	8012d3a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d20:	d10b      	bne.n	8012d3a <vTaskStartScheduler+0x72>
 8012d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d26:	b672      	cpsid	i
 8012d28:	f383 8811 	msr	BASEPRI, r3
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	b662      	cpsie	i
 8012d36:	607b      	str	r3, [r7, #4]
 8012d38:	e7fe      	b.n	8012d38 <vTaskStartScheduler+0x70>
}
 8012d3a:	bf00      	nop
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	2000bae8 	.word	0x2000bae8
 8012d48:	08026548 	.word	0x08026548
 8012d4c:	08013355 	.word	0x08013355
 8012d50:	2000bae4 	.word	0x2000bae4
 8012d54:	2000bad0 	.word	0x2000bad0
 8012d58:	2000bac8 	.word	0x2000bac8

08012d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012d60:	4b04      	ldr	r3, [pc, #16]	; (8012d74 <vTaskSuspendAll+0x18>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	3301      	adds	r3, #1
 8012d66:	4a03      	ldr	r2, [pc, #12]	; (8012d74 <vTaskSuspendAll+0x18>)
 8012d68:	6013      	str	r3, [r2, #0]
}
 8012d6a:	bf00      	nop
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr
 8012d74:	2000baec 	.word	0x2000baec

08012d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012d82:	2300      	movs	r3, #0
 8012d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012d86:	4b42      	ldr	r3, [pc, #264]	; (8012e90 <xTaskResumeAll+0x118>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d10b      	bne.n	8012da6 <xTaskResumeAll+0x2e>
 8012d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d92:	b672      	cpsid	i
 8012d94:	f383 8811 	msr	BASEPRI, r3
 8012d98:	f3bf 8f6f 	isb	sy
 8012d9c:	f3bf 8f4f 	dsb	sy
 8012da0:	b662      	cpsie	i
 8012da2:	603b      	str	r3, [r7, #0]
 8012da4:	e7fe      	b.n	8012da4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012da6:	f7fe fe6f 	bl	8011a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012daa:	4b39      	ldr	r3, [pc, #228]	; (8012e90 <xTaskResumeAll+0x118>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	3b01      	subs	r3, #1
 8012db0:	4a37      	ldr	r2, [pc, #220]	; (8012e90 <xTaskResumeAll+0x118>)
 8012db2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012db4:	4b36      	ldr	r3, [pc, #216]	; (8012e90 <xTaskResumeAll+0x118>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d161      	bne.n	8012e80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012dbc:	4b35      	ldr	r3, [pc, #212]	; (8012e94 <xTaskResumeAll+0x11c>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d05d      	beq.n	8012e80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012dc4:	e02e      	b.n	8012e24 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012dc6:	4b34      	ldr	r3, [pc, #208]	; (8012e98 <xTaskResumeAll+0x120>)
 8012dc8:	68db      	ldr	r3, [r3, #12]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	3318      	adds	r3, #24
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fe fd26 	bl	8011824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	3304      	adds	r3, #4
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7fe fd21 	bl	8011824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012de6:	2201      	movs	r2, #1
 8012de8:	409a      	lsls	r2, r3
 8012dea:	4b2c      	ldr	r3, [pc, #176]	; (8012e9c <xTaskResumeAll+0x124>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4313      	orrs	r3, r2
 8012df0:	4a2a      	ldr	r2, [pc, #168]	; (8012e9c <xTaskResumeAll+0x124>)
 8012df2:	6013      	str	r3, [r2, #0]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012df8:	4613      	mov	r3, r2
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	4413      	add	r3, r2
 8012dfe:	009b      	lsls	r3, r3, #2
 8012e00:	4a27      	ldr	r2, [pc, #156]	; (8012ea0 <xTaskResumeAll+0x128>)
 8012e02:	441a      	add	r2, r3
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	3304      	adds	r3, #4
 8012e08:	4619      	mov	r1, r3
 8012e0a:	4610      	mov	r0, r2
 8012e0c:	f7fe fcad 	bl	801176a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e14:	4b23      	ldr	r3, [pc, #140]	; (8012ea4 <xTaskResumeAll+0x12c>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d302      	bcc.n	8012e24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012e1e:	4b22      	ldr	r3, [pc, #136]	; (8012ea8 <xTaskResumeAll+0x130>)
 8012e20:	2201      	movs	r2, #1
 8012e22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e24:	4b1c      	ldr	r3, [pc, #112]	; (8012e98 <xTaskResumeAll+0x120>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d1cc      	bne.n	8012dc6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d001      	beq.n	8012e36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012e32:	f000 fb25 	bl	8013480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012e36:	4b1d      	ldr	r3, [pc, #116]	; (8012eac <xTaskResumeAll+0x134>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d010      	beq.n	8012e64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012e42:	f000 f837 	bl	8012eb4 <xTaskIncrementTick>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d002      	beq.n	8012e52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012e4c:	4b16      	ldr	r3, [pc, #88]	; (8012ea8 <xTaskResumeAll+0x130>)
 8012e4e:	2201      	movs	r2, #1
 8012e50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d1f1      	bne.n	8012e42 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8012e5e:	4b13      	ldr	r3, [pc, #76]	; (8012eac <xTaskResumeAll+0x134>)
 8012e60:	2200      	movs	r2, #0
 8012e62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012e64:	4b10      	ldr	r3, [pc, #64]	; (8012ea8 <xTaskResumeAll+0x130>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d009      	beq.n	8012e80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012e70:	4b0f      	ldr	r3, [pc, #60]	; (8012eb0 <xTaskResumeAll+0x138>)
 8012e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e76:	601a      	str	r2, [r3, #0]
 8012e78:	f3bf 8f4f 	dsb	sy
 8012e7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012e80:	f7fe fe34 	bl	8011aec <vPortExitCritical>

	return xAlreadyYielded;
 8012e84:	68bb      	ldr	r3, [r7, #8]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	2000baec 	.word	0x2000baec
 8012e94:	2000bac4 	.word	0x2000bac4
 8012e98:	2000ba84 	.word	0x2000ba84
 8012e9c:	2000bacc 	.word	0x2000bacc
 8012ea0:	2000b9c8 	.word	0x2000b9c8
 8012ea4:	2000b9c4 	.word	0x2000b9c4
 8012ea8:	2000bad8 	.word	0x2000bad8
 8012eac:	2000bad4 	.word	0x2000bad4
 8012eb0:	e000ed04 	.word	0xe000ed04

08012eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ebe:	4b51      	ldr	r3, [pc, #324]	; (8013004 <xTaskIncrementTick+0x150>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f040 808e 	bne.w	8012fe4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012ec8:	4b4f      	ldr	r3, [pc, #316]	; (8013008 <xTaskIncrementTick+0x154>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	3301      	adds	r3, #1
 8012ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012ed0:	4a4d      	ldr	r2, [pc, #308]	; (8013008 <xTaskIncrementTick+0x154>)
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d121      	bne.n	8012f20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012edc:	4b4b      	ldr	r3, [pc, #300]	; (801300c <xTaskIncrementTick+0x158>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d00b      	beq.n	8012efe <xTaskIncrementTick+0x4a>
 8012ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eea:	b672      	cpsid	i
 8012eec:	f383 8811 	msr	BASEPRI, r3
 8012ef0:	f3bf 8f6f 	isb	sy
 8012ef4:	f3bf 8f4f 	dsb	sy
 8012ef8:	b662      	cpsie	i
 8012efa:	603b      	str	r3, [r7, #0]
 8012efc:	e7fe      	b.n	8012efc <xTaskIncrementTick+0x48>
 8012efe:	4b43      	ldr	r3, [pc, #268]	; (801300c <xTaskIncrementTick+0x158>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	4b42      	ldr	r3, [pc, #264]	; (8013010 <xTaskIncrementTick+0x15c>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4a40      	ldr	r2, [pc, #256]	; (801300c <xTaskIncrementTick+0x158>)
 8012f0a:	6013      	str	r3, [r2, #0]
 8012f0c:	4a40      	ldr	r2, [pc, #256]	; (8013010 <xTaskIncrementTick+0x15c>)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6013      	str	r3, [r2, #0]
 8012f12:	4b40      	ldr	r3, [pc, #256]	; (8013014 <xTaskIncrementTick+0x160>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	3301      	adds	r3, #1
 8012f18:	4a3e      	ldr	r2, [pc, #248]	; (8013014 <xTaskIncrementTick+0x160>)
 8012f1a:	6013      	str	r3, [r2, #0]
 8012f1c:	f000 fab0 	bl	8013480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012f20:	4b3d      	ldr	r3, [pc, #244]	; (8013018 <xTaskIncrementTick+0x164>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	693a      	ldr	r2, [r7, #16]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d34d      	bcc.n	8012fc6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f2a:	4b38      	ldr	r3, [pc, #224]	; (801300c <xTaskIncrementTick+0x158>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d101      	bne.n	8012f38 <xTaskIncrementTick+0x84>
 8012f34:	2301      	movs	r3, #1
 8012f36:	e000      	b.n	8012f3a <xTaskIncrementTick+0x86>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d004      	beq.n	8012f48 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f3e:	4b36      	ldr	r3, [pc, #216]	; (8013018 <xTaskIncrementTick+0x164>)
 8012f40:	f04f 32ff 	mov.w	r2, #4294967295
 8012f44:	601a      	str	r2, [r3, #0]
					break;
 8012f46:	e03e      	b.n	8012fc6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012f48:	4b30      	ldr	r3, [pc, #192]	; (801300c <xTaskIncrementTick+0x158>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	68db      	ldr	r3, [r3, #12]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012f58:	693a      	ldr	r2, [r7, #16]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d203      	bcs.n	8012f68 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012f60:	4a2d      	ldr	r2, [pc, #180]	; (8013018 <xTaskIncrementTick+0x164>)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6013      	str	r3, [r2, #0]
						break;
 8012f66:	e02e      	b.n	8012fc6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	3304      	adds	r3, #4
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fe fc59 	bl	8011824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d004      	beq.n	8012f84 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	3318      	adds	r3, #24
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fe fc50 	bl	8011824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f88:	2201      	movs	r2, #1
 8012f8a:	409a      	lsls	r2, r3
 8012f8c:	4b23      	ldr	r3, [pc, #140]	; (801301c <xTaskIncrementTick+0x168>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4313      	orrs	r3, r2
 8012f92:	4a22      	ldr	r2, [pc, #136]	; (801301c <xTaskIncrementTick+0x168>)
 8012f94:	6013      	str	r3, [r2, #0]
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	4a1f      	ldr	r2, [pc, #124]	; (8013020 <xTaskIncrementTick+0x16c>)
 8012fa4:	441a      	add	r2, r3
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	3304      	adds	r3, #4
 8012faa:	4619      	mov	r1, r3
 8012fac:	4610      	mov	r0, r2
 8012fae:	f7fe fbdc 	bl	801176a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fb6:	4b1b      	ldr	r3, [pc, #108]	; (8013024 <xTaskIncrementTick+0x170>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d3b4      	bcc.n	8012f2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012fc4:	e7b1      	b.n	8012f2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012fc6:	4b17      	ldr	r3, [pc, #92]	; (8013024 <xTaskIncrementTick+0x170>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fcc:	4914      	ldr	r1, [pc, #80]	; (8013020 <xTaskIncrementTick+0x16c>)
 8012fce:	4613      	mov	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d907      	bls.n	8012fee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	617b      	str	r3, [r7, #20]
 8012fe2:	e004      	b.n	8012fee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012fe4:	4b10      	ldr	r3, [pc, #64]	; (8013028 <xTaskIncrementTick+0x174>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	4a0f      	ldr	r2, [pc, #60]	; (8013028 <xTaskIncrementTick+0x174>)
 8012fec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012fee:	4b0f      	ldr	r3, [pc, #60]	; (801302c <xTaskIncrementTick+0x178>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d001      	beq.n	8012ffa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012ffa:	697b      	ldr	r3, [r7, #20]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3718      	adds	r7, #24
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	2000baec 	.word	0x2000baec
 8013008:	2000bac8 	.word	0x2000bac8
 801300c:	2000ba7c 	.word	0x2000ba7c
 8013010:	2000ba80 	.word	0x2000ba80
 8013014:	2000badc 	.word	0x2000badc
 8013018:	2000bae4 	.word	0x2000bae4
 801301c:	2000bacc 	.word	0x2000bacc
 8013020:	2000b9c8 	.word	0x2000b9c8
 8013024:	2000b9c4 	.word	0x2000b9c4
 8013028:	2000bad4 	.word	0x2000bad4
 801302c:	2000bad8 	.word	0x2000bad8

08013030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b088      	sub	sp, #32
 8013034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013036:	4b3a      	ldr	r3, [pc, #232]	; (8013120 <vTaskSwitchContext+0xf0>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d003      	beq.n	8013046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801303e:	4b39      	ldr	r3, [pc, #228]	; (8013124 <vTaskSwitchContext+0xf4>)
 8013040:	2201      	movs	r2, #1
 8013042:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013044:	e067      	b.n	8013116 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8013046:	4b37      	ldr	r3, [pc, #220]	; (8013124 <vTaskSwitchContext+0xf4>)
 8013048:	2200      	movs	r2, #0
 801304a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801304c:	4b36      	ldr	r3, [pc, #216]	; (8013128 <vTaskSwitchContext+0xf8>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013052:	61fb      	str	r3, [r7, #28]
 8013054:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8013058:	61bb      	str	r3, [r7, #24]
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	69ba      	ldr	r2, [r7, #24]
 8013060:	429a      	cmp	r2, r3
 8013062:	d111      	bne.n	8013088 <vTaskSwitchContext+0x58>
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	3304      	adds	r3, #4
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	69ba      	ldr	r2, [r7, #24]
 801306c:	429a      	cmp	r2, r3
 801306e:	d10b      	bne.n	8013088 <vTaskSwitchContext+0x58>
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	3308      	adds	r3, #8
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	69ba      	ldr	r2, [r7, #24]
 8013078:	429a      	cmp	r2, r3
 801307a:	d105      	bne.n	8013088 <vTaskSwitchContext+0x58>
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	330c      	adds	r3, #12
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	69ba      	ldr	r2, [r7, #24]
 8013084:	429a      	cmp	r2, r3
 8013086:	d008      	beq.n	801309a <vTaskSwitchContext+0x6a>
 8013088:	4b27      	ldr	r3, [pc, #156]	; (8013128 <vTaskSwitchContext+0xf8>)
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	4b26      	ldr	r3, [pc, #152]	; (8013128 <vTaskSwitchContext+0xf8>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	3334      	adds	r3, #52	; 0x34
 8013092:	4619      	mov	r1, r3
 8013094:	4610      	mov	r0, r2
 8013096:	f7ed fbba 	bl	800080e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801309a:	4b24      	ldr	r3, [pc, #144]	; (801312c <vTaskSwitchContext+0xfc>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	fab3 f383 	clz	r3, r3
 80130a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80130a8:	7afb      	ldrb	r3, [r7, #11]
 80130aa:	f1c3 031f 	rsb	r3, r3, #31
 80130ae:	617b      	str	r3, [r7, #20]
 80130b0:	491f      	ldr	r1, [pc, #124]	; (8013130 <vTaskSwitchContext+0x100>)
 80130b2:	697a      	ldr	r2, [r7, #20]
 80130b4:	4613      	mov	r3, r2
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	4413      	add	r3, r2
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	440b      	add	r3, r1
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10b      	bne.n	80130dc <vTaskSwitchContext+0xac>
	__asm volatile
 80130c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c8:	b672      	cpsid	i
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	b662      	cpsie	i
 80130d8:	607b      	str	r3, [r7, #4]
 80130da:	e7fe      	b.n	80130da <vTaskSwitchContext+0xaa>
 80130dc:	697a      	ldr	r2, [r7, #20]
 80130de:	4613      	mov	r3, r2
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	4413      	add	r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	4a12      	ldr	r2, [pc, #72]	; (8013130 <vTaskSwitchContext+0x100>)
 80130e8:	4413      	add	r3, r2
 80130ea:	613b      	str	r3, [r7, #16]
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	685a      	ldr	r2, [r3, #4]
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	605a      	str	r2, [r3, #4]
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	685a      	ldr	r2, [r3, #4]
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	3308      	adds	r3, #8
 80130fe:	429a      	cmp	r2, r3
 8013100:	d104      	bne.n	801310c <vTaskSwitchContext+0xdc>
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	685a      	ldr	r2, [r3, #4]
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	605a      	str	r2, [r3, #4]
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	4a05      	ldr	r2, [pc, #20]	; (8013128 <vTaskSwitchContext+0xf8>)
 8013114:	6013      	str	r3, [r2, #0]
}
 8013116:	bf00      	nop
 8013118:	3720      	adds	r7, #32
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	2000baec 	.word	0x2000baec
 8013124:	2000bad8 	.word	0x2000bad8
 8013128:	2000b9c4 	.word	0x2000b9c4
 801312c:	2000bacc 	.word	0x2000bacc
 8013130:	2000b9c8 	.word	0x2000b9c8

08013134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d10b      	bne.n	801315c <vTaskPlaceOnEventList+0x28>
 8013144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013148:	b672      	cpsid	i
 801314a:	f383 8811 	msr	BASEPRI, r3
 801314e:	f3bf 8f6f 	isb	sy
 8013152:	f3bf 8f4f 	dsb	sy
 8013156:	b662      	cpsie	i
 8013158:	60fb      	str	r3, [r7, #12]
 801315a:	e7fe      	b.n	801315a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801315c:	4b07      	ldr	r3, [pc, #28]	; (801317c <vTaskPlaceOnEventList+0x48>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	3318      	adds	r3, #24
 8013162:	4619      	mov	r1, r3
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7fe fb24 	bl	80117b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801316a:	2101      	movs	r1, #1
 801316c:	6838      	ldr	r0, [r7, #0]
 801316e:	f000 fb8f 	bl	8013890 <prvAddCurrentTaskToDelayedList>
}
 8013172:	bf00      	nop
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	2000b9c4 	.word	0x2000b9c4

08013180 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d10b      	bne.n	80131ae <xTaskRemoveFromEventList+0x2e>
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	b672      	cpsid	i
 801319c:	f383 8811 	msr	BASEPRI, r3
 80131a0:	f3bf 8f6f 	isb	sy
 80131a4:	f3bf 8f4f 	dsb	sy
 80131a8:	b662      	cpsie	i
 80131aa:	60fb      	str	r3, [r7, #12]
 80131ac:	e7fe      	b.n	80131ac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	3318      	adds	r3, #24
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fe fb36 	bl	8011824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131b8:	4b1d      	ldr	r3, [pc, #116]	; (8013230 <xTaskRemoveFromEventList+0xb0>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d11c      	bne.n	80131fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	3304      	adds	r3, #4
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fe fb2d 	bl	8011824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ce:	2201      	movs	r2, #1
 80131d0:	409a      	lsls	r2, r3
 80131d2:	4b18      	ldr	r3, [pc, #96]	; (8013234 <xTaskRemoveFromEventList+0xb4>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4313      	orrs	r3, r2
 80131d8:	4a16      	ldr	r2, [pc, #88]	; (8013234 <xTaskRemoveFromEventList+0xb4>)
 80131da:	6013      	str	r3, [r2, #0]
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131e0:	4613      	mov	r3, r2
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	4413      	add	r3, r2
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4a13      	ldr	r2, [pc, #76]	; (8013238 <xTaskRemoveFromEventList+0xb8>)
 80131ea:	441a      	add	r2, r3
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	3304      	adds	r3, #4
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f7fe fab9 	bl	801176a <vListInsertEnd>
 80131f8:	e005      	b.n	8013206 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	3318      	adds	r3, #24
 80131fe:	4619      	mov	r1, r3
 8013200:	480e      	ldr	r0, [pc, #56]	; (801323c <xTaskRemoveFromEventList+0xbc>)
 8013202:	f7fe fab2 	bl	801176a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801320a:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <xTaskRemoveFromEventList+0xc0>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013210:	429a      	cmp	r2, r3
 8013212:	d905      	bls.n	8013220 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013214:	2301      	movs	r3, #1
 8013216:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013218:	4b0a      	ldr	r3, [pc, #40]	; (8013244 <xTaskRemoveFromEventList+0xc4>)
 801321a:	2201      	movs	r2, #1
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	e001      	b.n	8013224 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013220:	2300      	movs	r3, #0
 8013222:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013224:	697b      	ldr	r3, [r7, #20]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3718      	adds	r7, #24
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	2000baec 	.word	0x2000baec
 8013234:	2000bacc 	.word	0x2000bacc
 8013238:	2000b9c8 	.word	0x2000b9c8
 801323c:	2000ba84 	.word	0x2000ba84
 8013240:	2000b9c4 	.word	0x2000b9c4
 8013244:	2000bad8 	.word	0x2000bad8

08013248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013248:	b480      	push	{r7}
 801324a:	b083      	sub	sp, #12
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013250:	4b06      	ldr	r3, [pc, #24]	; (801326c <vTaskInternalSetTimeOutState+0x24>)
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013258:	4b05      	ldr	r3, [pc, #20]	; (8013270 <vTaskInternalSetTimeOutState+0x28>)
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	605a      	str	r2, [r3, #4]
}
 8013260:	bf00      	nop
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr
 801326c:	2000badc 	.word	0x2000badc
 8013270:	2000bac8 	.word	0x2000bac8

08013274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b088      	sub	sp, #32
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10b      	bne.n	801329c <xTaskCheckForTimeOut+0x28>
 8013284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013288:	b672      	cpsid	i
 801328a:	f383 8811 	msr	BASEPRI, r3
 801328e:	f3bf 8f6f 	isb	sy
 8013292:	f3bf 8f4f 	dsb	sy
 8013296:	b662      	cpsie	i
 8013298:	613b      	str	r3, [r7, #16]
 801329a:	e7fe      	b.n	801329a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d10b      	bne.n	80132ba <xTaskCheckForTimeOut+0x46>
 80132a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a6:	b672      	cpsid	i
 80132a8:	f383 8811 	msr	BASEPRI, r3
 80132ac:	f3bf 8f6f 	isb	sy
 80132b0:	f3bf 8f4f 	dsb	sy
 80132b4:	b662      	cpsie	i
 80132b6:	60fb      	str	r3, [r7, #12]
 80132b8:	e7fe      	b.n	80132b8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80132ba:	f7fe fbe5 	bl	8011a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80132be:	4b1d      	ldr	r3, [pc, #116]	; (8013334 <xTaskCheckForTimeOut+0xc0>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	69ba      	ldr	r2, [r7, #24]
 80132ca:	1ad3      	subs	r3, r2, r3
 80132cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132d6:	d102      	bne.n	80132de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80132d8:	2300      	movs	r3, #0
 80132da:	61fb      	str	r3, [r7, #28]
 80132dc:	e023      	b.n	8013326 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	4b15      	ldr	r3, [pc, #84]	; (8013338 <xTaskCheckForTimeOut+0xc4>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d007      	beq.n	80132fa <xTaskCheckForTimeOut+0x86>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	69ba      	ldr	r2, [r7, #24]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d302      	bcc.n	80132fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80132f4:	2301      	movs	r3, #1
 80132f6:	61fb      	str	r3, [r7, #28]
 80132f8:	e015      	b.n	8013326 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	697a      	ldr	r2, [r7, #20]
 8013300:	429a      	cmp	r2, r3
 8013302:	d20b      	bcs.n	801331c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	1ad2      	subs	r2, r2, r3
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7ff ff99 	bl	8013248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013316:	2300      	movs	r3, #0
 8013318:	61fb      	str	r3, [r7, #28]
 801331a:	e004      	b.n	8013326 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	2200      	movs	r2, #0
 8013320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013322:	2301      	movs	r3, #1
 8013324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013326:	f7fe fbe1 	bl	8011aec <vPortExitCritical>

	return xReturn;
 801332a:	69fb      	ldr	r3, [r7, #28]
}
 801332c:	4618      	mov	r0, r3
 801332e:	3720      	adds	r7, #32
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	2000bac8 	.word	0x2000bac8
 8013338:	2000badc 	.word	0x2000badc

0801333c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801333c:	b480      	push	{r7}
 801333e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013340:	4b03      	ldr	r3, [pc, #12]	; (8013350 <vTaskMissedYield+0x14>)
 8013342:	2201      	movs	r2, #1
 8013344:	601a      	str	r2, [r3, #0]
}
 8013346:	bf00      	nop
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr
 8013350:	2000bad8 	.word	0x2000bad8

08013354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801335c:	f000 f854 	bl	8013408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013360:	4b07      	ldr	r3, [pc, #28]	; (8013380 <prvIdleTask+0x2c>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b01      	cmp	r3, #1
 8013366:	d907      	bls.n	8013378 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013368:	4b06      	ldr	r3, [pc, #24]	; (8013384 <prvIdleTask+0x30>)
 801336a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801336e:	601a      	str	r2, [r3, #0]
 8013370:	f3bf 8f4f 	dsb	sy
 8013374:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013378:	f7ed fa42 	bl	8000800 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801337c:	e7ee      	b.n	801335c <prvIdleTask+0x8>
 801337e:	bf00      	nop
 8013380:	2000b9c8 	.word	0x2000b9c8
 8013384:	e000ed04 	.word	0xe000ed04

08013388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801338e:	2300      	movs	r3, #0
 8013390:	607b      	str	r3, [r7, #4]
 8013392:	e00c      	b.n	80133ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	4613      	mov	r3, r2
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	4413      	add	r3, r2
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	4a12      	ldr	r2, [pc, #72]	; (80133e8 <prvInitialiseTaskLists+0x60>)
 80133a0:	4413      	add	r3, r2
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7fe f9b4 	bl	8011710 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3301      	adds	r3, #1
 80133ac:	607b      	str	r3, [r7, #4]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2b06      	cmp	r3, #6
 80133b2:	d9ef      	bls.n	8013394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80133b4:	480d      	ldr	r0, [pc, #52]	; (80133ec <prvInitialiseTaskLists+0x64>)
 80133b6:	f7fe f9ab 	bl	8011710 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80133ba:	480d      	ldr	r0, [pc, #52]	; (80133f0 <prvInitialiseTaskLists+0x68>)
 80133bc:	f7fe f9a8 	bl	8011710 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80133c0:	480c      	ldr	r0, [pc, #48]	; (80133f4 <prvInitialiseTaskLists+0x6c>)
 80133c2:	f7fe f9a5 	bl	8011710 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80133c6:	480c      	ldr	r0, [pc, #48]	; (80133f8 <prvInitialiseTaskLists+0x70>)
 80133c8:	f7fe f9a2 	bl	8011710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80133cc:	480b      	ldr	r0, [pc, #44]	; (80133fc <prvInitialiseTaskLists+0x74>)
 80133ce:	f7fe f99f 	bl	8011710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80133d2:	4b0b      	ldr	r3, [pc, #44]	; (8013400 <prvInitialiseTaskLists+0x78>)
 80133d4:	4a05      	ldr	r2, [pc, #20]	; (80133ec <prvInitialiseTaskLists+0x64>)
 80133d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80133d8:	4b0a      	ldr	r3, [pc, #40]	; (8013404 <prvInitialiseTaskLists+0x7c>)
 80133da:	4a05      	ldr	r2, [pc, #20]	; (80133f0 <prvInitialiseTaskLists+0x68>)
 80133dc:	601a      	str	r2, [r3, #0]
}
 80133de:	bf00      	nop
 80133e0:	3708      	adds	r7, #8
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	2000b9c8 	.word	0x2000b9c8
 80133ec:	2000ba54 	.word	0x2000ba54
 80133f0:	2000ba68 	.word	0x2000ba68
 80133f4:	2000ba84 	.word	0x2000ba84
 80133f8:	2000ba98 	.word	0x2000ba98
 80133fc:	2000bab0 	.word	0x2000bab0
 8013400:	2000ba7c 	.word	0x2000ba7c
 8013404:	2000ba80 	.word	0x2000ba80

08013408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801340e:	e019      	b.n	8013444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013410:	f7fe fb3a 	bl	8011a88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013414:	4b0f      	ldr	r3, [pc, #60]	; (8013454 <prvCheckTasksWaitingTermination+0x4c>)
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	3304      	adds	r3, #4
 8013420:	4618      	mov	r0, r3
 8013422:	f7fe f9ff 	bl	8011824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013426:	4b0c      	ldr	r3, [pc, #48]	; (8013458 <prvCheckTasksWaitingTermination+0x50>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	3b01      	subs	r3, #1
 801342c:	4a0a      	ldr	r2, [pc, #40]	; (8013458 <prvCheckTasksWaitingTermination+0x50>)
 801342e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013430:	4b0a      	ldr	r3, [pc, #40]	; (801345c <prvCheckTasksWaitingTermination+0x54>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	3b01      	subs	r3, #1
 8013436:	4a09      	ldr	r2, [pc, #36]	; (801345c <prvCheckTasksWaitingTermination+0x54>)
 8013438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801343a:	f7fe fb57 	bl	8011aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 f80e 	bl	8013460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013444:	4b05      	ldr	r3, [pc, #20]	; (801345c <prvCheckTasksWaitingTermination+0x54>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d1e1      	bne.n	8013410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801344c:	bf00      	nop
 801344e:	3708      	adds	r7, #8
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	2000ba98 	.word	0x2000ba98
 8013458:	2000bac4 	.word	0x2000bac4
 801345c:	2000baac 	.word	0x2000baac

08013460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801346c:	4618      	mov	r0, r3
 801346e:	f7fe f837 	bl	80114e0 <vPortFree>
			vPortFree( pxTCB );
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7fe f834 	bl	80114e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013478:	bf00      	nop
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013480:	b480      	push	{r7}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013486:	4b0f      	ldr	r3, [pc, #60]	; (80134c4 <prvResetNextTaskUnblockTime+0x44>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d101      	bne.n	8013494 <prvResetNextTaskUnblockTime+0x14>
 8013490:	2301      	movs	r3, #1
 8013492:	e000      	b.n	8013496 <prvResetNextTaskUnblockTime+0x16>
 8013494:	2300      	movs	r3, #0
 8013496:	2b00      	cmp	r3, #0
 8013498:	d004      	beq.n	80134a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801349a:	4b0b      	ldr	r3, [pc, #44]	; (80134c8 <prvResetNextTaskUnblockTime+0x48>)
 801349c:	f04f 32ff 	mov.w	r2, #4294967295
 80134a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80134a2:	e008      	b.n	80134b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80134a4:	4b07      	ldr	r3, [pc, #28]	; (80134c4 <prvResetNextTaskUnblockTime+0x44>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	4a05      	ldr	r2, [pc, #20]	; (80134c8 <prvResetNextTaskUnblockTime+0x48>)
 80134b4:	6013      	str	r3, [r2, #0]
}
 80134b6:	bf00      	nop
 80134b8:	370c      	adds	r7, #12
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr
 80134c2:	bf00      	nop
 80134c4:	2000ba7c 	.word	0x2000ba7c
 80134c8:	2000bae4 	.word	0x2000bae4

080134cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134d2:	4b0b      	ldr	r3, [pc, #44]	; (8013500 <xTaskGetSchedulerState+0x34>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d102      	bne.n	80134e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134da:	2301      	movs	r3, #1
 80134dc:	607b      	str	r3, [r7, #4]
 80134de:	e008      	b.n	80134f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134e0:	4b08      	ldr	r3, [pc, #32]	; (8013504 <xTaskGetSchedulerState+0x38>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d102      	bne.n	80134ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80134e8:	2302      	movs	r3, #2
 80134ea:	607b      	str	r3, [r7, #4]
 80134ec:	e001      	b.n	80134f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80134ee:	2300      	movs	r3, #0
 80134f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80134f2:	687b      	ldr	r3, [r7, #4]
	}
 80134f4:	4618      	mov	r0, r3
 80134f6:	370c      	adds	r7, #12
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr
 8013500:	2000bad0 	.word	0x2000bad0
 8013504:	2000baec 	.word	0x2000baec

08013508 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013514:	2300      	movs	r3, #0
 8013516:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d06e      	beq.n	80135fc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013522:	4b39      	ldr	r3, [pc, #228]	; (8013608 <xTaskPriorityInherit+0x100>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013528:	429a      	cmp	r2, r3
 801352a:	d25e      	bcs.n	80135ea <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	699b      	ldr	r3, [r3, #24]
 8013530:	2b00      	cmp	r3, #0
 8013532:	db06      	blt.n	8013542 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013534:	4b34      	ldr	r3, [pc, #208]	; (8013608 <xTaskPriorityInherit+0x100>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353a:	f1c3 0207 	rsb	r2, r3, #7
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	6959      	ldr	r1, [r3, #20]
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801354a:	4613      	mov	r3, r2
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4413      	add	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	4a2e      	ldr	r2, [pc, #184]	; (801360c <xTaskPriorityInherit+0x104>)
 8013554:	4413      	add	r3, r2
 8013556:	4299      	cmp	r1, r3
 8013558:	d101      	bne.n	801355e <xTaskPriorityInherit+0x56>
 801355a:	2301      	movs	r3, #1
 801355c:	e000      	b.n	8013560 <xTaskPriorityInherit+0x58>
 801355e:	2300      	movs	r3, #0
 8013560:	2b00      	cmp	r3, #0
 8013562:	d03a      	beq.n	80135da <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	3304      	adds	r3, #4
 8013568:	4618      	mov	r0, r3
 801356a:	f7fe f95b 	bl	8011824 <uxListRemove>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d115      	bne.n	80135a0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013578:	4924      	ldr	r1, [pc, #144]	; (801360c <xTaskPriorityInherit+0x104>)
 801357a:	4613      	mov	r3, r2
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	4413      	add	r3, r2
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	440b      	add	r3, r1
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d10a      	bne.n	80135a0 <xTaskPriorityInherit+0x98>
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358e:	2201      	movs	r2, #1
 8013590:	fa02 f303 	lsl.w	r3, r2, r3
 8013594:	43da      	mvns	r2, r3
 8013596:	4b1e      	ldr	r3, [pc, #120]	; (8013610 <xTaskPriorityInherit+0x108>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	4013      	ands	r3, r2
 801359c:	4a1c      	ldr	r2, [pc, #112]	; (8013610 <xTaskPriorityInherit+0x108>)
 801359e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135a0:	4b19      	ldr	r3, [pc, #100]	; (8013608 <xTaskPriorityInherit+0x100>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ae:	2201      	movs	r2, #1
 80135b0:	409a      	lsls	r2, r3
 80135b2:	4b17      	ldr	r3, [pc, #92]	; (8013610 <xTaskPriorityInherit+0x108>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	4313      	orrs	r3, r2
 80135b8:	4a15      	ldr	r2, [pc, #84]	; (8013610 <xTaskPriorityInherit+0x108>)
 80135ba:	6013      	str	r3, [r2, #0]
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135c0:	4613      	mov	r3, r2
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	4413      	add	r3, r2
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	4a10      	ldr	r2, [pc, #64]	; (801360c <xTaskPriorityInherit+0x104>)
 80135ca:	441a      	add	r2, r3
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	3304      	adds	r3, #4
 80135d0:	4619      	mov	r1, r3
 80135d2:	4610      	mov	r0, r2
 80135d4:	f7fe f8c9 	bl	801176a <vListInsertEnd>
 80135d8:	e004      	b.n	80135e4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135da:	4b0b      	ldr	r3, [pc, #44]	; (8013608 <xTaskPriorityInherit+0x100>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80135e4:	2301      	movs	r3, #1
 80135e6:	60fb      	str	r3, [r7, #12]
 80135e8:	e008      	b.n	80135fc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135ee:	4b06      	ldr	r3, [pc, #24]	; (8013608 <xTaskPriorityInherit+0x100>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d201      	bcs.n	80135fc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80135f8:	2301      	movs	r3, #1
 80135fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135fc:	68fb      	ldr	r3, [r7, #12]
	}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	2000b9c4 	.word	0x2000b9c4
 801360c:	2000b9c8 	.word	0x2000b9c8
 8013610:	2000bacc 	.word	0x2000bacc

08013614 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013614:	b580      	push	{r7, lr}
 8013616:	b086      	sub	sp, #24
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013620:	2300      	movs	r3, #0
 8013622:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d070      	beq.n	801370c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801362a:	4b3b      	ldr	r3, [pc, #236]	; (8013718 <xTaskPriorityDisinherit+0x104>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	693a      	ldr	r2, [r7, #16]
 8013630:	429a      	cmp	r2, r3
 8013632:	d00b      	beq.n	801364c <xTaskPriorityDisinherit+0x38>
 8013634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013638:	b672      	cpsid	i
 801363a:	f383 8811 	msr	BASEPRI, r3
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	f3bf 8f4f 	dsb	sy
 8013646:	b662      	cpsie	i
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	e7fe      	b.n	801364a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013650:	2b00      	cmp	r3, #0
 8013652:	d10b      	bne.n	801366c <xTaskPriorityDisinherit+0x58>
 8013654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013658:	b672      	cpsid	i
 801365a:	f383 8811 	msr	BASEPRI, r3
 801365e:	f3bf 8f6f 	isb	sy
 8013662:	f3bf 8f4f 	dsb	sy
 8013666:	b662      	cpsie	i
 8013668:	60bb      	str	r3, [r7, #8]
 801366a:	e7fe      	b.n	801366a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013670:	1e5a      	subs	r2, r3, #1
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801367e:	429a      	cmp	r2, r3
 8013680:	d044      	beq.n	801370c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013686:	2b00      	cmp	r3, #0
 8013688:	d140      	bne.n	801370c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	3304      	adds	r3, #4
 801368e:	4618      	mov	r0, r3
 8013690:	f7fe f8c8 	bl	8011824 <uxListRemove>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d115      	bne.n	80136c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369e:	491f      	ldr	r1, [pc, #124]	; (801371c <xTaskPriorityDisinherit+0x108>)
 80136a0:	4613      	mov	r3, r2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4413      	add	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	440b      	add	r3, r1
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d10a      	bne.n	80136c6 <xTaskPriorityDisinherit+0xb2>
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b4:	2201      	movs	r2, #1
 80136b6:	fa02 f303 	lsl.w	r3, r2, r3
 80136ba:	43da      	mvns	r2, r3
 80136bc:	4b18      	ldr	r3, [pc, #96]	; (8013720 <xTaskPriorityDisinherit+0x10c>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	4013      	ands	r3, r2
 80136c2:	4a17      	ldr	r2, [pc, #92]	; (8013720 <xTaskPriorityDisinherit+0x10c>)
 80136c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d2:	f1c3 0207 	rsb	r2, r3, #7
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136de:	2201      	movs	r2, #1
 80136e0:	409a      	lsls	r2, r3
 80136e2:	4b0f      	ldr	r3, [pc, #60]	; (8013720 <xTaskPriorityDisinherit+0x10c>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4313      	orrs	r3, r2
 80136e8:	4a0d      	ldr	r2, [pc, #52]	; (8013720 <xTaskPriorityDisinherit+0x10c>)
 80136ea:	6013      	str	r3, [r2, #0]
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136f0:	4613      	mov	r3, r2
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	4413      	add	r3, r2
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	4a08      	ldr	r2, [pc, #32]	; (801371c <xTaskPriorityDisinherit+0x108>)
 80136fa:	441a      	add	r2, r3
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	3304      	adds	r3, #4
 8013700:	4619      	mov	r1, r3
 8013702:	4610      	mov	r0, r2
 8013704:	f7fe f831 	bl	801176a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013708:	2301      	movs	r3, #1
 801370a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801370c:	697b      	ldr	r3, [r7, #20]
	}
 801370e:	4618      	mov	r0, r3
 8013710:	3718      	adds	r7, #24
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	2000b9c4 	.word	0x2000b9c4
 801371c:	2000b9c8 	.word	0x2000b9c8
 8013720:	2000bacc 	.word	0x2000bacc

08013724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013732:	2301      	movs	r3, #1
 8013734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	f000 808a 	beq.w	8013852 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013742:	2b00      	cmp	r3, #0
 8013744:	d10b      	bne.n	801375e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8013746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801374a:	b672      	cpsid	i
 801374c:	f383 8811 	msr	BASEPRI, r3
 8013750:	f3bf 8f6f 	isb	sy
 8013754:	f3bf 8f4f 	dsb	sy
 8013758:	b662      	cpsie	i
 801375a:	60fb      	str	r3, [r7, #12]
 801375c:	e7fe      	b.n	801375c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013762:	683a      	ldr	r2, [r7, #0]
 8013764:	429a      	cmp	r2, r3
 8013766:	d902      	bls.n	801376e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	61fb      	str	r3, [r7, #28]
 801376c:	e002      	b.n	8013774 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801376e:	69bb      	ldr	r3, [r7, #24]
 8013770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013772:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013778:	69fa      	ldr	r2, [r7, #28]
 801377a:	429a      	cmp	r2, r3
 801377c:	d069      	beq.n	8013852 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013782:	697a      	ldr	r2, [r7, #20]
 8013784:	429a      	cmp	r2, r3
 8013786:	d164      	bne.n	8013852 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013788:	4b34      	ldr	r3, [pc, #208]	; (801385c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	69ba      	ldr	r2, [r7, #24]
 801378e:	429a      	cmp	r2, r3
 8013790:	d10b      	bne.n	80137aa <vTaskPriorityDisinheritAfterTimeout+0x86>
 8013792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013796:	b672      	cpsid	i
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	b662      	cpsie	i
 80137a6:	60bb      	str	r3, [r7, #8]
 80137a8:	e7fe      	b.n	80137a8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	69fa      	ldr	r2, [r7, #28]
 80137b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	699b      	ldr	r3, [r3, #24]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	db04      	blt.n	80137c8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137be:	69fb      	ldr	r3, [r7, #28]
 80137c0:	f1c3 0207 	rsb	r2, r3, #7
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	6959      	ldr	r1, [r3, #20]
 80137cc:	693a      	ldr	r2, [r7, #16]
 80137ce:	4613      	mov	r3, r2
 80137d0:	009b      	lsls	r3, r3, #2
 80137d2:	4413      	add	r3, r2
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	4a22      	ldr	r2, [pc, #136]	; (8013860 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137d8:	4413      	add	r3, r2
 80137da:	4299      	cmp	r1, r3
 80137dc:	d101      	bne.n	80137e2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80137de:	2301      	movs	r3, #1
 80137e0:	e000      	b.n	80137e4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80137e2:	2300      	movs	r3, #0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d034      	beq.n	8013852 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	3304      	adds	r3, #4
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fe f819 	bl	8011824 <uxListRemove>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d115      	bne.n	8013824 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fc:	4918      	ldr	r1, [pc, #96]	; (8013860 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137fe:	4613      	mov	r3, r2
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	440b      	add	r3, r1
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10a      	bne.n	8013824 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801380e:	69bb      	ldr	r3, [r7, #24]
 8013810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013812:	2201      	movs	r2, #1
 8013814:	fa02 f303 	lsl.w	r3, r2, r3
 8013818:	43da      	mvns	r2, r3
 801381a:	4b12      	ldr	r3, [pc, #72]	; (8013864 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	4013      	ands	r3, r2
 8013820:	4a10      	ldr	r2, [pc, #64]	; (8013864 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013822:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013828:	2201      	movs	r2, #1
 801382a:	409a      	lsls	r2, r3
 801382c:	4b0d      	ldr	r3, [pc, #52]	; (8013864 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4313      	orrs	r3, r2
 8013832:	4a0c      	ldr	r2, [pc, #48]	; (8013864 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013834:	6013      	str	r3, [r2, #0]
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801383a:	4613      	mov	r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	4413      	add	r3, r2
 8013840:	009b      	lsls	r3, r3, #2
 8013842:	4a07      	ldr	r2, [pc, #28]	; (8013860 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013844:	441a      	add	r2, r3
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	3304      	adds	r3, #4
 801384a:	4619      	mov	r1, r3
 801384c:	4610      	mov	r0, r2
 801384e:	f7fd ff8c 	bl	801176a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013852:	bf00      	nop
 8013854:	3720      	adds	r7, #32
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	2000b9c4 	.word	0x2000b9c4
 8013860:	2000b9c8 	.word	0x2000b9c8
 8013864:	2000bacc 	.word	0x2000bacc

08013868 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013868:	b480      	push	{r7}
 801386a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801386c:	4b07      	ldr	r3, [pc, #28]	; (801388c <pvTaskIncrementMutexHeldCount+0x24>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d004      	beq.n	801387e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013874:	4b05      	ldr	r3, [pc, #20]	; (801388c <pvTaskIncrementMutexHeldCount+0x24>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801387a:	3201      	adds	r2, #1
 801387c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801387e:	4b03      	ldr	r3, [pc, #12]	; (801388c <pvTaskIncrementMutexHeldCount+0x24>)
 8013880:	681b      	ldr	r3, [r3, #0]
	}
 8013882:	4618      	mov	r0, r3
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr
 801388c:	2000b9c4 	.word	0x2000b9c4

08013890 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b084      	sub	sp, #16
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801389a:	4b29      	ldr	r3, [pc, #164]	; (8013940 <prvAddCurrentTaskToDelayedList+0xb0>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138a0:	4b28      	ldr	r3, [pc, #160]	; (8013944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	3304      	adds	r3, #4
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7fd ffbc 	bl	8011824 <uxListRemove>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d10b      	bne.n	80138ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80138b2:	4b24      	ldr	r3, [pc, #144]	; (8013944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b8:	2201      	movs	r2, #1
 80138ba:	fa02 f303 	lsl.w	r3, r2, r3
 80138be:	43da      	mvns	r2, r3
 80138c0:	4b21      	ldr	r3, [pc, #132]	; (8013948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	4013      	ands	r3, r2
 80138c6:	4a20      	ldr	r2, [pc, #128]	; (8013948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80138c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d0:	d10a      	bne.n	80138e8 <prvAddCurrentTaskToDelayedList+0x58>
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d007      	beq.n	80138e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138d8:	4b1a      	ldr	r3, [pc, #104]	; (8013944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	3304      	adds	r3, #4
 80138de:	4619      	mov	r1, r3
 80138e0:	481a      	ldr	r0, [pc, #104]	; (801394c <prvAddCurrentTaskToDelayedList+0xbc>)
 80138e2:	f7fd ff42 	bl	801176a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80138e6:	e026      	b.n	8013936 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	4413      	add	r3, r2
 80138ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80138f0:	4b14      	ldr	r3, [pc, #80]	; (8013944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80138f8:	68ba      	ldr	r2, [r7, #8]
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d209      	bcs.n	8013914 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013900:	4b13      	ldr	r3, [pc, #76]	; (8013950 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	4b0f      	ldr	r3, [pc, #60]	; (8013944 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	3304      	adds	r3, #4
 801390a:	4619      	mov	r1, r3
 801390c:	4610      	mov	r0, r2
 801390e:	f7fd ff50 	bl	80117b2 <vListInsert>
}
 8013912:	e010      	b.n	8013936 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013914:	4b0f      	ldr	r3, [pc, #60]	; (8013954 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	4b0a      	ldr	r3, [pc, #40]	; (8013944 <prvAddCurrentTaskToDelayedList+0xb4>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	3304      	adds	r3, #4
 801391e:	4619      	mov	r1, r3
 8013920:	4610      	mov	r0, r2
 8013922:	f7fd ff46 	bl	80117b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013926:	4b0c      	ldr	r3, [pc, #48]	; (8013958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	68ba      	ldr	r2, [r7, #8]
 801392c:	429a      	cmp	r2, r3
 801392e:	d202      	bcs.n	8013936 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013930:	4a09      	ldr	r2, [pc, #36]	; (8013958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	6013      	str	r3, [r2, #0]
}
 8013936:	bf00      	nop
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	2000bac8 	.word	0x2000bac8
 8013944:	2000b9c4 	.word	0x2000b9c4
 8013948:	2000bacc 	.word	0x2000bacc
 801394c:	2000bab0 	.word	0x2000bab0
 8013950:	2000ba80 	.word	0x2000ba80
 8013954:	2000ba7c 	.word	0x2000ba7c
 8013958:	2000bae4 	.word	0x2000bae4

0801395c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013994 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013960:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013962:	e003      	b.n	801396c <LoopCopyDataInit>

08013964 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013964:	4b0c      	ldr	r3, [pc, #48]	; (8013998 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013966:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013968:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801396a:	3104      	adds	r1, #4

0801396c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801396c:	480b      	ldr	r0, [pc, #44]	; (801399c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801396e:	4b0c      	ldr	r3, [pc, #48]	; (80139a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013970:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013972:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013974:	d3f6      	bcc.n	8013964 <CopyDataInit>
  ldr  r2, =_sbss
 8013976:	4a0b      	ldr	r2, [pc, #44]	; (80139a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013978:	e002      	b.n	8013980 <LoopFillZerobss>

0801397a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801397a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801397c:	f842 3b04 	str.w	r3, [r2], #4

08013980 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013980:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013982:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013984:	d3f9      	bcc.n	801397a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8013986:	f7f5 ff39 	bl	80097fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801398a:	f011 f8d7 	bl	8024b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801398e:	f7ec ffb1 	bl	80008f4 <main>
  bx  lr    
 8013992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013994:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8013998:	0802b658 	.word	0x0802b658
  ldr  r0, =_sdata
 801399c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80139a0:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
 80139a4:	2000011c 	.word	0x2000011c
  ldr  r3, = _ebss
 80139a8:	2000c2d0 	.word	0x2000c2d0

080139ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80139ac:	e7fe      	b.n	80139ac <ADC_IRQHandler>

080139ae <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80139ae:	8880      	ldrh	r0, [r0, #4]
 80139b0:	4770      	bx	lr

080139b2 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80139b2:	2300      	movs	r3, #0
 80139b4:	8083      	strh	r3, [r0, #4]
 80139b6:	4770      	bx	lr

080139b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80139b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ba:	6803      	ldr	r3, [r0, #0]
 80139bc:	460e      	mov	r6, r1
 80139be:	2100      	movs	r1, #0
 80139c0:	4605      	mov	r5, r0
 80139c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c4:	4798      	blx	r3
 80139c6:	4604      	mov	r4, r0
 80139c8:	682b      	ldr	r3, [r5, #0]
 80139ca:	4628      	mov	r0, r5
 80139cc:	1b34      	subs	r4, r6, r4
 80139ce:	6a1b      	ldr	r3, [r3, #32]
 80139d0:	b2a4      	uxth	r4, r4
 80139d2:	4798      	blx	r3
 80139d4:	88ab      	ldrh	r3, [r5, #4]
 80139d6:	fbb4 f4f0 	udiv	r4, r4, r0
 80139da:	42a3      	cmp	r3, r4
 80139dc:	d805      	bhi.n	80139ea <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80139de:	4b0e      	ldr	r3, [pc, #56]	; (8013a18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80139e0:	211e      	movs	r1, #30
 80139e2:	4a0e      	ldr	r2, [pc, #56]	; (8013a1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80139e4:	480e      	ldr	r0, [pc, #56]	; (8013a20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80139e6:	f011 f865 	bl	8024ab4 <__assert_func>
 80139ea:	682b      	ldr	r3, [r5, #0]
 80139ec:	2100      	movs	r1, #0
 80139ee:	4628      	mov	r0, r5
 80139f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f2:	4798      	blx	r3
 80139f4:	682b      	ldr	r3, [r5, #0]
 80139f6:	4607      	mov	r7, r0
 80139f8:	4628      	mov	r0, r5
 80139fa:	6a1b      	ldr	r3, [r3, #32]
 80139fc:	4798      	blx	r3
 80139fe:	1bf3      	subs	r3, r6, r7
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	fbb3 f2f0 	udiv	r2, r3, r0
 8013a06:	fb02 3010 	mls	r0, r2, r0, r3
 8013a0a:	b118      	cbz	r0, 8013a14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8013a0c:	4b05      	ldr	r3, [pc, #20]	; (8013a24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8013a0e:	211f      	movs	r1, #31
 8013a10:	4a02      	ldr	r2, [pc, #8]	; (8013a1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013a12:	e7e7      	b.n	80139e4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8013a14:	4620      	mov	r0, r4
 8013a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a18:	08027800 	.word	0x08027800
 8013a1c:	0802796e 	.word	0x0802796e
 8013a20:	08027815 	.word	0x08027815
 8013a24:	08027843 	.word	0x08027843

08013a28 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013a28:	b538      	push	{r3, r4, r5, lr}
 8013a2a:	6803      	ldr	r3, [r0, #0]
 8013a2c:	460d      	mov	r5, r1
 8013a2e:	4604      	mov	r4, r0
 8013a30:	6a1b      	ldr	r3, [r3, #32]
 8013a32:	4798      	blx	r3
 8013a34:	4285      	cmp	r5, r0
 8013a36:	d905      	bls.n	8013a44 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8013a38:	4b0c      	ldr	r3, [pc, #48]	; (8013a6c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8013a3a:	212f      	movs	r1, #47	; 0x2f
 8013a3c:	4a0c      	ldr	r2, [pc, #48]	; (8013a70 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013a3e:	480d      	ldr	r0, [pc, #52]	; (8013a74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8013a40:	f011 f838 	bl	8024ab4 <__assert_func>
 8013a44:	6823      	ldr	r3, [r4, #0]
 8013a46:	4620      	mov	r0, r4
 8013a48:	88a5      	ldrh	r5, [r4, #4]
 8013a4a:	69db      	ldr	r3, [r3, #28]
 8013a4c:	4798      	blx	r3
 8013a4e:	4285      	cmp	r5, r0
 8013a50:	d303      	bcc.n	8013a5a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8013a52:	4b09      	ldr	r3, [pc, #36]	; (8013a78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8013a54:	2130      	movs	r1, #48	; 0x30
 8013a56:	4a06      	ldr	r2, [pc, #24]	; (8013a70 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013a58:	e7f1      	b.n	8013a3e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8013a5a:	6823      	ldr	r3, [r4, #0]
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	88a1      	ldrh	r1, [r4, #4]
 8013a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a62:	4798      	blx	r3
 8013a64:	88a3      	ldrh	r3, [r4, #4]
 8013a66:	3301      	adds	r3, #1
 8013a68:	80a3      	strh	r3, [r4, #4]
 8013a6a:	bd38      	pop	{r3, r4, r5, pc}
 8013a6c:	080278bd 	.word	0x080278bd
 8013a70:	080279b1 	.word	0x080279b1
 8013a74:	08027815 	.word	0x08027815
 8013a78:	080278d4 	.word	0x080278d4

08013a7c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013a7c:	b570      	push	{r4, r5, r6, lr}
 8013a7e:	6803      	ldr	r3, [r0, #0]
 8013a80:	4616      	mov	r6, r2
 8013a82:	4604      	mov	r4, r0
 8013a84:	460d      	mov	r5, r1
 8013a86:	6a1b      	ldr	r3, [r3, #32]
 8013a88:	4798      	blx	r3
 8013a8a:	4286      	cmp	r6, r0
 8013a8c:	d905      	bls.n	8013a9a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8013a8e:	4b06      	ldr	r3, [pc, #24]	; (8013aa8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8013a90:	2139      	movs	r1, #57	; 0x39
 8013a92:	4a06      	ldr	r2, [pc, #24]	; (8013aac <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8013a94:	4806      	ldr	r0, [pc, #24]	; (8013ab0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8013a96:	f011 f80d 	bl	8024ab4 <__assert_func>
 8013a9a:	6823      	ldr	r3, [r4, #0]
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013aa6:	4718      	bx	r3
 8013aa8:	080278bd 	.word	0x080278bd
 8013aac:	08027924 	.word	0x08027924
 8013ab0:	08027815 	.word	0x08027815

08013ab4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013ab4:	4770      	bx	lr
	...

08013ab8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013ab8:	4a02      	ldr	r2, [pc, #8]	; (8013ac4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013aba:	6002      	str	r2, [r0, #0]
 8013abc:	2200      	movs	r2, #0
 8013abe:	8082      	strh	r2, [r0, #4]
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	080278f8 	.word	0x080278f8

08013ac8 <_ZNK8touchgfx12DrawableList13getHorizontalEv>:
 8013ac8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8013acc:	4770      	bx	lr

08013ace <_ZNK8touchgfx12DrawableList11getCircularEv>:
 8013ace:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8013ad2:	4770      	bx	lr

08013ad4 <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
 8013ad4:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 8013ad8:	4770      	bx	lr

08013ada <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:
 8013ada:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013adc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8013ade:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8013ae2:	b200      	sxth	r0, r0
 8013ae4:	4770      	bx	lr

08013ae6 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:
 8013ae6:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 8013aea:	4770      	bx	lr

08013aec <_ZN8touchgfx12DrawableListC1Ev>:
 8013aec:	2101      	movs	r1, #1
 8013aee:	2200      	movs	r2, #0
 8013af0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013af4:	490f      	ldr	r1, [pc, #60]	; (8013b34 <_ZN8touchgfx12DrawableListC1Ev+0x48>)
 8013af6:	8082      	strh	r2, [r0, #4]
 8013af8:	80c2      	strh	r2, [r0, #6]
 8013afa:	8102      	strh	r2, [r0, #8]
 8013afc:	8142      	strh	r2, [r0, #10]
 8013afe:	8182      	strh	r2, [r0, #12]
 8013b00:	81c2      	strh	r2, [r0, #14]
 8013b02:	8202      	strh	r2, [r0, #16]
 8013b04:	8242      	strh	r2, [r0, #18]
 8013b06:	61c2      	str	r2, [r0, #28]
 8013b08:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013b0c:	6282      	str	r2, [r0, #40]	; 0x28
 8013b0e:	6001      	str	r1, [r0, #0]
 8013b10:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8013b14:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8013b18:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8013b1c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8013b20:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013b24:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8013b28:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8013b2c:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	080279f8 	.word	0x080279f8

08013b38 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:
 8013b38:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8013b3c:	86c2      	strh	r2, [r0, #54]	; 0x36
 8013b3e:	8681      	strh	r1, [r0, #52]	; 0x34
 8013b40:	4770      	bx	lr

08013b42 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:
 8013b42:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8013b46:	4770      	bx	lr

08013b48 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:
 8013b48:	b538      	push	{r3, r4, r5, lr}
 8013b4a:	4605      	mov	r5, r0
 8013b4c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8013b4e:	b308      	cbz	r0, 8013b94 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>
 8013b50:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8013b54:	2a00      	cmp	r2, #0
 8013b56:	dd21      	ble.n	8013b9c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x54>
 8013b58:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013b5c:	b1db      	cbz	r3, 8013b96 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4e>
 8013b5e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8013b62:	1e63      	subs	r3, r4, #1
 8013b64:	1e54      	subs	r4, r2, #1
 8013b66:	441c      	add	r4, r3
 8013b68:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8013b6c:	fb94 f4f2 	sdiv	r4, r4, r2
 8013b70:	3401      	adds	r4, #1
 8013b72:	b224      	sxth	r4, r4
 8013b74:	b923      	cbnz	r3, 8013b80 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x38>
 8013b76:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
 8013b7a:	429c      	cmp	r4, r3
 8013b7c:	bfa8      	it	ge
 8013b7e:	461c      	movge	r4, r3
 8013b80:	6803      	ldr	r3, [r0, #0]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	4798      	blx	r3
 8013b86:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
 8013b8a:	1ac0      	subs	r0, r0, r3
 8013b8c:	42a0      	cmp	r0, r4
 8013b8e:	bfa8      	it	ge
 8013b90:	4620      	movge	r0, r4
 8013b92:	b200      	sxth	r0, r0
 8013b94:	bd38      	pop	{r3, r4, r5, pc}
 8013b96:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 8013b9a:	e7e2      	b.n	8013b62 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	e7f9      	b.n	8013b94 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>

08013ba0 <_ZN8touchgfx12DrawableList9setOffsetEl>:
 8013ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	460d      	mov	r5, r1
 8013ba8:	6321      	str	r1, [r4, #48]	; 0x30
 8013baa:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f000 80ec 	beq.w	8013d8c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8013bb4:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 80e7 	beq.w	8013d8c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8013bbe:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	; 0x34
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	f000 80e2 	beq.w	8013d8c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8013bc8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	f000 80de 	beq.w	8013d8c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8013bd0:	6803      	ldr	r3, [r0, #0]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	4798      	blx	r3
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	f000 80d8 	beq.w	8013d8c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8013bdc:	2d00      	cmp	r5, #0
 8013bde:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8013be2:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8013be6:	bfd8      	it	le
 8013be8:	2300      	movle	r3, #0
 8013bea:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 8013bee:	bfc1      	itttt	gt
 8013bf0:	fb95 f2f1 	sdivgt	r2, r5, r1
 8013bf4:	3201      	addgt	r2, #1
 8013bf6:	4253      	neggt	r3, r2
 8013bf8:	fb01 5512 	mlsgt	r5, r1, r2, r5
 8013bfc:	f1c1 0200 	rsb	r2, r1, #0
 8013c00:	bfc8      	it	gt
 8013c02:	b21b      	sxthgt	r3, r3
 8013c04:	42aa      	cmp	r2, r5
 8013c06:	bfa1      	itttt	ge
 8013c08:	fb95 f2f1 	sdivge	r2, r5, r1
 8013c0c:	1a9b      	subge	r3, r3, r2
 8013c0e:	fb01 5512 	mlsge	r5, r1, r2, r5
 8013c12:	b21b      	sxthge	r3, r3
 8013c14:	b167      	cbz	r7, 8013c30 <_ZN8touchgfx12DrawableList9setOffsetEl+0x90>
 8013c16:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8013c1a:	fb93 f2f1 	sdiv	r2, r3, r1
 8013c1e:	fb01 3312 	mls	r3, r1, r2, r3
 8013c22:	440b      	add	r3, r1
 8013c24:	fb93 f2f1 	sdiv	r2, r3, r1
 8013c28:	fb01 3312 	mls	r3, r1, r2, r3
 8013c2c:	b21b      	sxth	r3, r3
 8013c2e:	e004      	b.n	8013c3a <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	da64      	bge.n	8013cfe <_ZN8touchgfx12DrawableList9setOffsetEl+0x15e>
 8013c34:	fb01 5513 	mls	r5, r1, r3, r5
 8013c38:	463b      	mov	r3, r7
 8013c3a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
 8013c3e:	b1be      	cbz	r6, 8013c70 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8013c40:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
 8013c44:	459e      	cmp	lr, r3
 8013c46:	d068      	beq.n	8013d1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x17a>
 8013c48:	2601      	movs	r6, #1
 8013c4a:	4286      	cmp	r6, r0
 8013c4c:	da67      	bge.n	8013d1e <_ZN8touchgfx12DrawableList9setOffsetEl+0x17e>
 8013c4e:	eb0e 0106 	add.w	r1, lr, r6
 8013c52:	199a      	adds	r2, r3, r6
 8013c54:	b14f      	cbz	r7, 8013c6a <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 8013c56:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	; 0x38
 8013c5a:	fb91 f8fc 	sdiv	r8, r1, ip
 8013c5e:	fb0c 1118 	mls	r1, ip, r8, r1
 8013c62:	fb92 f8fc 	sdiv	r8, r2, ip
 8013c66:	fb0c 2218 	mls	r2, ip, r8, r2
 8013c6a:	428b      	cmp	r3, r1
 8013c6c:	d151      	bne.n	8013d12 <_ZN8touchgfx12DrawableList9setOffsetEl+0x172>
 8013c6e:	4276      	negs	r6, r6
 8013c70:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8013c74:	2700      	movs	r7, #0
 8013c76:	b2ad      	uxth	r5, r5
 8013c78:	f04f 0b01 	mov.w	fp, #1
 8013c7c:	1b92      	subs	r2, r2, r6
 8013c7e:	46ba      	mov	sl, r7
 8013c80:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8013c82:	4402      	add	r2, r0
 8013c84:	fb92 f1f0 	sdiv	r1, r2, r0
 8013c88:	fb00 2011 	mls	r0, r0, r1, r2
 8013c8c:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8013c8e:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8013c92:	42ba      	cmp	r2, r7
 8013c94:	dd77      	ble.n	8013d86 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 8013c96:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8013c9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013c9c:	443b      	add	r3, r7
 8013c9e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8013ca2:	fb93 f8f2 	sdiv	r8, r3, r2
 8013ca6:	fb02 3818 	mls	r8, r2, r8, r3
 8013caa:	6803      	ldr	r3, [r0, #0]
 8013cac:	fa1f f888 	uxth.w	r8, r8
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	4441      	add	r1, r8
 8013cb4:	b209      	sxth	r1, r1
 8013cb6:	4798      	blx	r3
 8013cb8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013cbc:	4681      	mov	r9, r0
 8013cbe:	fa1f fe87 	uxth.w	lr, r7
 8013cc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013cc4:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 8013cc8:	6802      	ldr	r2, [r0, #0]
 8013cca:	b351      	cbz	r1, 8013d22 <_ZN8touchgfx12DrawableList9setOffsetEl+0x182>
 8013ccc:	18e9      	adds	r1, r5, r3
 8013cce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	fb1c 110e 	smlabb	r1, ip, lr, r1
 8013cd6:	b209      	sxth	r1, r1
 8013cd8:	4798      	blx	r3
 8013cda:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8013cde:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013ce2:	443b      	add	r3, r7
 8013ce4:	b322      	cbz	r2, 8013d30 <_ZN8touchgfx12DrawableList9setOffsetEl+0x190>
 8013ce6:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8013cea:	fb93 f1f2 	sdiv	r1, r3, r2
 8013cee:	fb02 3311 	mls	r3, r2, r1, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	da22      	bge.n	8013d3c <_ZN8touchgfx12DrawableList9setOffsetEl+0x19c>
 8013cf6:	f889 a025 	strb.w	sl, [r9, #37]	; 0x25
 8013cfa:	3701      	adds	r7, #1
 8013cfc:	e7c7      	b.n	8013c8e <_ZN8touchgfx12DrawableList9setOffsetEl+0xee>
 8013cfe:	18c6      	adds	r6, r0, r3
 8013d00:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8013d04:	4296      	cmp	r6, r2
 8013d06:	dd98      	ble.n	8013c3a <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 8013d08:	1b92      	subs	r2, r2, r6
 8013d0a:	fb01 5502 	mla	r5, r1, r2, r5
 8013d0e:	4413      	add	r3, r2
 8013d10:	e78c      	b.n	8013c2c <_ZN8touchgfx12DrawableList9setOffsetEl+0x8c>
 8013d12:	4596      	cmp	lr, r2
 8013d14:	d0ac      	beq.n	8013c70 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8013d16:	3601      	adds	r6, #1
 8013d18:	e797      	b.n	8013c4a <_ZN8touchgfx12DrawableList9setOffsetEl+0xaa>
 8013d1a:	2600      	movs	r6, #0
 8013d1c:	e7a8      	b.n	8013c70 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8013d1e:	4606      	mov	r6, r0
 8013d20:	e7a6      	b.n	8013c70 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8013d22:	442b      	add	r3, r5
 8013d24:	fb1c 3c0e 	smlabb	ip, ip, lr, r3
 8013d28:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013d2a:	fa0f f28c 	sxth.w	r2, ip
 8013d2e:	e7d3      	b.n	8013cd8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x138>
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	dbe0      	blt.n	8013cf6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 8013d34:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	dadc      	bge.n	8013cf6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 8013d3c:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 8013d40:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8013d44:	b132      	cbz	r2, 8013d54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 8013d46:	42be      	cmp	r6, r7
 8013d48:	dc04      	bgt.n	8013d54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 8013d4a:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8013d4e:	4432      	add	r2, r6
 8013d50:	4297      	cmp	r7, r2
 8013d52:	dbd2      	blt.n	8013cfa <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 8013d54:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	6802      	ldr	r2, [r0, #0]
 8013d5a:	68d2      	ldr	r2, [r2, #12]
 8013d5c:	4790      	blx	r2
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	d0cb      	beq.n	8013cfa <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 8013d62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013d64:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8013d68:	6801      	ldr	r1, [r0, #0]
 8013d6a:	9b01      	ldr	r3, [sp, #4]
 8013d6c:	4442      	add	r2, r8
 8013d6e:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8013d72:	b21b      	sxth	r3, r3
 8013d74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013d76:	b212      	sxth	r2, r2
 8013d78:	47c0      	blx	r8
 8013d7a:	f8d9 3000 	ldr.w	r3, [r9]
 8013d7e:	4648      	mov	r0, r9
 8013d80:	695b      	ldr	r3, [r3, #20]
 8013d82:	4798      	blx	r3
 8013d84:	e7b9      	b.n	8013cfa <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 8013d86:	2301      	movs	r3, #1
 8013d88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8013d8c:	b003      	add	sp, #12
 8013d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d92 <_ZNK8touchgfx12DrawableList9getOffsetEv>:
 8013d92:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013d94:	4770      	bx	lr

08013d96 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>:
 8013d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d98:	1c54      	adds	r4, r2, #1
 8013d9a:	db2f      	blt.n	8013dfc <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013d9c:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 8013da0:	4294      	cmp	r4, r2
 8013da2:	dd2b      	ble.n	8013dfc <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013da4:	b354      	cbz	r4, 8013dfc <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013da6:	f9b0 6038 	ldrsh.w	r6, [r0, #56]	; 0x38
 8013daa:	b33e      	cbz	r6, 8013dfc <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013dac:	1c53      	adds	r3, r2, #1
 8013dae:	d008      	beq.n	8013dc2 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2c>
 8013db0:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
 8013db4:	1ad2      	subs	r2, r2, r3
 8013db6:	4422      	add	r2, r4
 8013db8:	fb92 f3f4 	sdiv	r3, r2, r4
 8013dbc:	fb04 2213 	mls	r2, r4, r3, r2
 8013dc0:	b212      	sxth	r2, r2
 8013dc2:	3201      	adds	r2, #1
 8013dc4:	b212      	sxth	r2, r2
 8013dc6:	4294      	cmp	r4, r2
 8013dc8:	dd18      	ble.n	8013dfc <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013dca:	b295      	uxth	r5, r2
 8013dcc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8013dce:	f890 702d 	ldrb.w	r7, [r0, #45]	; 0x2d
 8013dd2:	442b      	add	r3, r5
 8013dd4:	b21b      	sxth	r3, r3
 8013dd6:	b127      	cbz	r7, 8013de2 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x4c>
 8013dd8:	fb93 f7f6 	sdiv	r7, r3, r6
 8013ddc:	fb06 3317 	mls	r3, r6, r7, r3
 8013de0:	b21b      	sxth	r3, r3
 8013de2:	428b      	cmp	r3, r1
 8013de4:	d108      	bne.n	8013df8 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x62>
 8013de6:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 8013dea:	4402      	add	r2, r0
 8013dec:	fb92 f0f4 	sdiv	r0, r2, r4
 8013df0:	fb04 2010 	mls	r0, r4, r0, r2
 8013df4:	b200      	sxth	r0, r0
 8013df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df8:	1c6a      	adds	r2, r5, #1
 8013dfa:	e7e3      	b.n	8013dc4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2e>
 8013dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013e00:	e7f9      	b.n	8013df6 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x60>

08013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:
 8013e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e04:	2500      	movs	r5, #0
 8013e06:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8013e08:	4604      	mov	r4, r0
 8013e0a:	8745      	strh	r5, [r0, #58]	; 0x3a
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d03c      	beq.n	8013e8a <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x88>
 8013e10:	f7ff fe9a 	bl	8013b48 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 8013e14:	8760      	strh	r0, [r4, #58]	; 0x3a
 8013e16:	4620      	mov	r0, r4
 8013e18:	f000 fcc7 	bl	80147aa <_ZN8touchgfx9Container9removeAllEv>
 8013e1c:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
 8013e20:	42ab      	cmp	r3, r5
 8013e22:	dd27      	ble.n	8013e74 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x72>
 8013e24:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013e26:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8013e2a:	6803      	ldr	r3, [r0, #0]
 8013e2c:	4429      	add	r1, r5
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	b209      	sxth	r1, r1
 8013e32:	4798      	blx	r3
 8013e34:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013e38:	4606      	mov	r6, r0
 8013e3a:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8013e3e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8013e40:	6807      	ldr	r7, [r0, #0]
 8013e42:	b17a      	cbz	r2, 8013e64 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x62>
 8013e44:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013e48:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	b20b      	sxth	r3, r1
 8013e52:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8013e54:	4611      	mov	r1, r2
 8013e56:	3501      	adds	r5, #1
 8013e58:	47b8      	blx	r7
 8013e5a:	4631      	mov	r1, r6
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	f000 fd31 	bl	80148c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013e62:	e7db      	b.n	8013e1c <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x1a>
 8013e64:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8013e68:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013e6c:	b209      	sxth	r1, r1
 8013e6e:	9100      	str	r1, [sp, #0]
 8013e70:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8013e72:	e7ef      	b.n	8013e54 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x52>
 8013e74:	2300      	movs	r3, #0
 8013e76:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8013e7e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013e80:	b003      	add	sp, #12
 8013e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013e86:	f7ff be8b 	b.w	8013ba0 <_ZN8touchgfx12DrawableList9setOffsetEl>
 8013e8a:	b003      	add	sp, #12
 8013e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e8e <_ZN8touchgfx12DrawableList8setWidthEs>:
 8013e8e:	8101      	strh	r1, [r0, #8]
 8013e90:	f7ff bfb7 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08013e94 <_ZN8touchgfx12DrawableList9setHeightEs>:
 8013e94:	8141      	strh	r1, [r0, #10]
 8013e96:	f7ff bfb4 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08013e9a <_ZN8touchgfx12DrawableList13setHorizontalEb>:
 8013e9a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013e9e:	b121      	cbz	r1, 8013eaa <_ZN8touchgfx12DrawableList13setHorizontalEb+0x10>
 8013ea0:	b92b      	cbnz	r3, 8013eae <_ZN8touchgfx12DrawableList13setHorizontalEb+0x14>
 8013ea2:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8013ea6:	f7ff bfac 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d1f9      	bne.n	8013ea2 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x8>
 8013eae:	4770      	bx	lr

08013eb0 <_ZN8touchgfx12DrawableList11setCircularEb>:
 8013eb0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8013eb4:	b121      	cbz	r1, 8013ec0 <_ZN8touchgfx12DrawableList11setCircularEb+0x10>
 8013eb6:	b92b      	cbnz	r3, 8013ec4 <_ZN8touchgfx12DrawableList11setCircularEb+0x14>
 8013eb8:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8013ebc:	f7ff bfa1 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d1f9      	bne.n	8013eb8 <_ZN8touchgfx12DrawableList11setCircularEb+0x8>
 8013ec4:	4770      	bx	lr

08013ec6 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:
 8013ec6:	b410      	push	{r4}
 8013ec8:	6441      	str	r1, [r0, #68]	; 0x44
 8013eca:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8013ece:	6483      	str	r3, [r0, #72]	; 0x48
 8013ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ed4:	f7ff bf95 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08013ed8 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:
 8013ed8:	8701      	strh	r1, [r0, #56]	; 0x38
 8013eda:	f7ff bf92 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08013ede <_ZN8touchgfx12DrawableList11itemChangedEs>:
 8013ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8013ee4:	460e      	mov	r6, r1
 8013ee6:	b1c0      	cbz	r0, 8013f1a <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8013ee8:	6803      	ldr	r3, [r0, #0]
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	4798      	blx	r3
 8013eee:	b1a0      	cbz	r0, 8013f1a <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8013ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8013ef4:	462a      	mov	r2, r5
 8013ef6:	4631      	mov	r1, r6
 8013ef8:	4620      	mov	r0, r4
 8013efa:	f7ff ff4c 	bl	8013d96 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>
 8013efe:	1c43      	adds	r3, r0, #1
 8013f00:	4605      	mov	r5, r0
 8013f02:	d00a      	beq.n	8013f1a <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8013f04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013f06:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8013f0a:	6803      	ldr	r3, [r0, #0]
 8013f0c:	442a      	add	r2, r5
 8013f0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013f10:	689f      	ldr	r7, [r3, #8]
 8013f12:	4633      	mov	r3, r6
 8013f14:	b212      	sxth	r2, r2
 8013f16:	47b8      	blx	r7
 8013f18:	e7ec      	b.n	8013ef4 <_ZN8touchgfx12DrawableList11itemChangedEs+0x16>
 8013f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f1c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE>:
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	790b      	ldrb	r3, [r1, #4]
 8013f22:	4604      	mov	r4, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d165      	bne.n	8013ff4 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xd8>
 8013f28:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013f2c:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
 8013f30:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8013f34:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
 8013f38:	6803      	ldr	r3, [r0, #0]
 8013f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013f3e:	4798      	blx	r3
 8013f40:	6823      	ldr	r3, [r4, #0]
 8013f42:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8013f46:	4601      	mov	r1, r0
 8013f48:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013f52:	4798      	blx	r3
 8013f54:	4601      	mov	r1, r0
 8013f56:	4620      	mov	r0, r4
 8013f58:	47a8      	blx	r5
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f62:	4798      	blx	r3
 8013f64:	2800      	cmp	r0, #0
 8013f66:	d03b      	beq.n	8013fe0 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xc4>
 8013f68:	f9b4 50b0 	ldrsh.w	r5, [r4, #176]	; 0xb0
 8013f6c:	6823      	ldr	r3, [r4, #0]
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 8013f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013f78:	4798      	blx	r3
 8013f7a:	1b41      	subs	r1, r0, r5
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	47b0      	blx	r6
 8013f80:	6823      	ldr	r3, [r4, #0]
 8013f82:	b285      	uxth	r5, r0
 8013f84:	4620      	mov	r0, r4
 8013f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013f8a:	4798      	blx	r3
 8013f8c:	f8b4 607c 	ldrh.w	r6, [r4, #124]	; 0x7c
 8013f90:	6823      	ldr	r3, [r4, #0]
 8013f92:	fb16 f600 	smulbb	r6, r6, r0
 8013f96:	4620      	mov	r0, r4
 8013f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f9c:	b2b6      	uxth	r6, r6
 8013f9e:	b237      	sxth	r7, r6
 8013fa0:	4798      	blx	r3
 8013fa2:	bb00      	cbnz	r0, 8013fe6 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xca>
 8013fa4:	426d      	negs	r5, r5
 8013fa6:	b22d      	sxth	r5, r5
 8013fa8:	2d00      	cmp	r5, #0
 8013faa:	f2c0 808a 	blt.w	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8013fae:	42bd      	cmp	r5, r7
 8013fb0:	f280 8087 	bge.w	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8013fb4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	f000 8082 	beq.w	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8013fbe:	6803      	ldr	r3, [r0, #0]
 8013fc0:	f9b4 607c 	ldrsh.w	r6, [r4, #124]	; 0x7c
 8013fc4:	68db      	ldr	r3, [r3, #12]
 8013fc6:	4798      	blx	r3
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	d07a      	beq.n	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8013fcc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8013fd0:	6803      	ldr	r3, [r0, #0]
 8013fd2:	fb95 f1f6 	sdiv	r1, r5, r6
 8013fd6:	689b      	ldr	r3, [r3, #8]
 8013fd8:	b209      	sxth	r1, r1
 8013fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fde:	4718      	bx	r3
 8013fe0:	f9b4 50b2 	ldrsh.w	r5, [r4, #178]	; 0xb2
 8013fe4:	e7c2      	b.n	8013f6c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x50>
 8013fe6:	1b75      	subs	r5, r6, r5
 8013fe8:	b22e      	sxth	r6, r5
 8013fea:	fb96 f5f7 	sdiv	r5, r6, r7
 8013fee:	fb07 6515 	mls	r5, r7, r5, r6
 8013ff2:	e7d8      	b.n	8013fa6 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x8a>
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d164      	bne.n	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8013ff8:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d14d      	bne.n	801409c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x180>
 8014000:	6803      	ldr	r3, [r0, #0]
 8014002:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8014006:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 801400a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801400e:	4798      	blx	r3
 8014010:	4601      	mov	r1, r0
 8014012:	4620      	mov	r0, r4
 8014014:	47b0      	blx	r6
 8014016:	4601      	mov	r1, r0
 8014018:	4620      	mov	r0, r4
 801401a:	47a8      	blx	r5
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	4620      	mov	r0, r4
 8014020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014024:	4798      	blx	r3
 8014026:	b378      	cbz	r0, 8014088 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x16c>
 8014028:	f9b4 50b0 	ldrsh.w	r5, [r4, #176]	; 0xb0
 801402c:	6823      	ldr	r3, [r4, #0]
 801402e:	4620      	mov	r0, r4
 8014030:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 8014034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014038:	4798      	blx	r3
 801403a:	1b41      	subs	r1, r0, r5
 801403c:	4620      	mov	r0, r4
 801403e:	47b0      	blx	r6
 8014040:	6823      	ldr	r3, [r4, #0]
 8014042:	b285      	uxth	r5, r0
 8014044:	4620      	mov	r0, r4
 8014046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801404a:	4798      	blx	r3
 801404c:	f8b4 607c 	ldrh.w	r6, [r4, #124]	; 0x7c
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	fb16 f600 	smulbb	r6, r6, r0
 8014056:	4620      	mov	r0, r4
 8014058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801405c:	b2b6      	uxth	r6, r6
 801405e:	b237      	sxth	r7, r6
 8014060:	4798      	blx	r3
 8014062:	b9a0      	cbnz	r0, 801408e <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x172>
 8014064:	426d      	negs	r5, r5
 8014066:	b22d      	sxth	r5, r5
 8014068:	2d00      	cmp	r5, #0
 801406a:	db2a      	blt.n	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 801406c:	42bd      	cmp	r5, r7
 801406e:	da28      	bge.n	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8014070:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8014074:	b328      	cbz	r0, 80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8014076:	6803      	ldr	r3, [r0, #0]
 8014078:	f9b4 607c 	ldrsh.w	r6, [r4, #124]	; 0x7c
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	4798      	blx	r3
 8014080:	b1f8      	cbz	r0, 80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8014082:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8014086:	e7a3      	b.n	8013fd0 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xb4>
 8014088:	f9b4 50b2 	ldrsh.w	r5, [r4, #178]	; 0xb2
 801408c:	e7ce      	b.n	801402c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x110>
 801408e:	1b75      	subs	r5, r6, r5
 8014090:	b22e      	sxth	r6, r5
 8014092:	fb96 f5f7 	sdiv	r5, r6, r7
 8014096:	fb07 6515 	mls	r5, r7, r5, r6
 801409a:	e7e4      	b.n	8014066 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x14a>
 801409c:	2b02      	cmp	r3, #2
 801409e:	d110      	bne.n	80140c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 80140a0:	6803      	ldr	r3, [r0, #0]
 80140a2:	e9d3 6530 	ldrd	r6, r5, [r3, #192]	; 0xc0
 80140a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80140aa:	4798      	blx	r3
 80140ac:	4601      	mov	r1, r0
 80140ae:	4620      	mov	r0, r4
 80140b0:	47b0      	blx	r6
 80140b2:	462b      	mov	r3, r5
 80140b4:	4601      	mov	r1, r0
 80140b6:	f04f 32ff 	mov.w	r2, #4294967295
 80140ba:	4620      	mov	r0, r4
 80140bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140c0:	4718      	bx	r3
 80140c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140c6 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls>:
 80140c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ca:	6803      	ldr	r3, [r0, #0]
 80140cc:	4605      	mov	r5, r0
 80140ce:	460e      	mov	r6, r1
 80140d0:	4617      	mov	r7, r2
 80140d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140d6:	4798      	blx	r3
 80140d8:	4604      	mov	r4, r0
 80140da:	b9d8      	cbnz	r0, 8014114 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x4e>
 80140dc:	682b      	ldr	r3, [r5, #0]
 80140de:	42be      	cmp	r6, r7
 80140e0:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 80140e4:	4628      	mov	r0, r5
 80140e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80140ea:	bfa8      	it	ge
 80140ec:	463e      	movge	r6, r7
 80140ee:	4798      	blx	r3
 80140f0:	4580      	cmp	r8, r0
 80140f2:	da07      	bge.n	8014104 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x3e>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	4628      	mov	r0, r5
 80140f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80140fc:	4798      	blx	r3
 80140fe:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8014102:	1b04      	subs	r4, r0, r4
 8014104:	f9b5 107c 	ldrsh.w	r1, [r5, #124]	; 0x7c
 8014108:	434c      	muls	r4, r1
 801410a:	4264      	negs	r4, r4
 801410c:	1be1      	subs	r1, r4, r7
 801410e:	428e      	cmp	r6, r1
 8014110:	bfb8      	it	lt
 8014112:	460e      	movlt	r6, r1
 8014114:	4630      	mov	r0, r6
 8014116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801411a <_ZN8touchgfx10ScrollList12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:
 801411a:	b570      	push	{r4, r5, r6, lr}
 801411c:	460d      	mov	r5, r1
 801411e:	4604      	mov	r4, r0
 8014120:	4616      	mov	r6, r2
 8014122:	f000 fa21 	bl	8014568 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8014126:	682b      	ldr	r3, [r5, #0]
 8014128:	4628      	mov	r0, r5
 801412a:	68db      	ldr	r3, [r3, #12]
 801412c:	4798      	blx	r3
 801412e:	4633      	mov	r3, r6
 8014130:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
 8014134:	4629      	mov	r1, r5
 8014136:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801413a:	2200      	movs	r2, #0
 801413c:	f7ff fec3 	bl	8013ec6 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
 8014140:	6823      	ldr	r3, [r4, #0]
 8014142:	4620      	mov	r0, r4
 8014144:	2100      	movs	r1, #0
 8014146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801414a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801414e:	4718      	bx	r3

08014150 <_ZN8touchgfx10ScrollList18getPositionForItemEs>:
 8014150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014154:	6803      	ldr	r3, [r0, #0]
 8014156:	4604      	mov	r4, r0
 8014158:	460f      	mov	r7, r1
 801415a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801415e:	4798      	blx	r3
 8014160:	4601      	mov	r1, r0
 8014162:	4620      	mov	r0, r4
 8014164:	f000 fa4d 	bl	8014602 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8014168:	2f00      	cmp	r7, #0
 801416a:	4606      	mov	r6, r0
 801416c:	db6b      	blt.n	8014246 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 801416e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8014172:	4648      	mov	r0, r9
 8014174:	f7ff fce5 	bl	8013b42 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 8014178:	42b8      	cmp	r0, r7
 801417a:	dd64      	ble.n	8014246 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 801417c:	f9b4 507c 	ldrsh.w	r5, [r4, #124]	; 0x7c
 8014180:	2d00      	cmp	r5, #0
 8014182:	d060      	beq.n	8014246 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8014184:	4278      	negs	r0, r7
 8014186:	6823      	ldr	r3, [r4, #0]
 8014188:	4345      	muls	r5, r0
 801418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801418e:	4620      	mov	r0, r4
 8014190:	4798      	blx	r3
 8014192:	2800      	cmp	r0, #0
 8014194:	d05a      	beq.n	801424c <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xfc>
 8014196:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801419a:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
 801419e:	4648      	mov	r0, r9
 80141a0:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 80141a4:	4419      	add	r1, r3
 80141a6:	eba8 0801 	sub.w	r8, r8, r1
 80141aa:	fa0f f888 	sxth.w	r8, r8
 80141ae:	f7ff fc8e 	bl	8013ace <_ZNK8touchgfx12DrawableList11getCircularEv>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d051      	beq.n	801425a <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x10a>
 80141b6:	46b2      	mov	sl, r6
 80141b8:	4651      	mov	r1, sl
 80141ba:	4620      	mov	r0, r4
 80141bc:	f000 fa21 	bl	8014602 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 80141c0:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 80141c4:	4240      	negs	r0, r0
 80141c6:	fb90 f0f3 	sdiv	r0, r0, r3
 80141ca:	b200      	sxth	r0, r0
 80141cc:	4287      	cmp	r7, r0
 80141ce:	d03a      	beq.n	8014246 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 80141d0:	ebaa 0a03 	sub.w	sl, sl, r3
 80141d4:	eba8 0303 	sub.w	r3, r8, r3
 80141d8:	1af3      	subs	r3, r6, r3
 80141da:	4553      	cmp	r3, sl
 80141dc:	ddec      	ble.n	80141b8 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x68>
 80141de:	4648      	mov	r0, r9
 80141e0:	eba5 0906 	sub.w	r9, r5, r6
 80141e4:	f7ff fcad 	bl	8013b42 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 80141e8:	f9b4 107c 	ldrsh.w	r1, [r4, #124]	; 0x7c
 80141ec:	fb00 f701 	mul.w	r7, r0, r1
 80141f0:	eba8 0101 	sub.w	r1, r8, r1
 80141f4:	4620      	mov	r0, r4
 80141f6:	eb05 0a07 	add.w	sl, r5, r7
 80141fa:	1a71      	subs	r1, r6, r1
 80141fc:	f000 fa01 	bl	8014602 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8014200:	1beb      	subs	r3, r5, r7
 8014202:	ebaa 0a06 	sub.w	sl, sl, r6
 8014206:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 801420a:	1ac3      	subs	r3, r0, r3
 801420c:	ea8a 71ea 	eor.w	r1, sl, sl, asr #31
 8014210:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 8014214:	eba1 71ea 	sub.w	r1, r1, sl, asr #31
 8014218:	4291      	cmp	r1, r2
 801421a:	bfb8      	it	lt
 801421c:	46d1      	movlt	r9, sl
 801421e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8014222:	1b45      	subs	r5, r0, r5
 8014224:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8014228:	d52f      	bpl.n	801428a <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x13a>
 801422a:	4269      	negs	r1, r5
 801422c:	4291      	cmp	r1, r2
 801422e:	dd10      	ble.n	8014252 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x102>
 8014230:	2b00      	cmp	r3, #0
 8014232:	da10      	bge.n	8014256 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x106>
 8014234:	425d      	negs	r5, r3
 8014236:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 801423a:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 801423e:	4295      	cmp	r5, r2
 8014240:	bfb4      	ite	lt
 8014242:	1af6      	sublt	r6, r6, r3
 8014244:	444e      	addge	r6, r9
 8014246:	4630      	mov	r0, r6
 8014248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801424c:	f9b4 800a 	ldrsh.w	r8, [r4, #10]
 8014250:	e7a3      	b.n	801419a <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x4a>
 8014252:	462b      	mov	r3, r5
 8014254:	e7ee      	b.n	8014234 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe4>
 8014256:	461d      	mov	r5, r3
 8014258:	e7ed      	b.n	8014236 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe6>
 801425a:	42ae      	cmp	r6, r5
 801425c:	db13      	blt.n	8014286 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x136>
 801425e:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 8014262:	fb98 f3f2 	sdiv	r3, r8, r2
 8014266:	b21b      	sxth	r3, r3
 8014268:	2b00      	cmp	r3, #0
 801426a:	dd05      	ble.n	8014278 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x128>
 801426c:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 8014270:	b131      	cbz	r1, 8014280 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x130>
 8014272:	3b01      	subs	r3, #1
 8014274:	fb02 5503 	mla	r5, r2, r3, r5
 8014278:	42ae      	cmp	r6, r5
 801427a:	bfa8      	it	ge
 801427c:	462e      	movge	r6, r5
 801427e:	e7e2      	b.n	8014246 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8014280:	4445      	add	r5, r8
 8014282:	1aad      	subs	r5, r5, r2
 8014284:	e7f8      	b.n	8014278 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x128>
 8014286:	462e      	mov	r6, r5
 8014288:	e7dd      	b.n	8014246 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 801428a:	4295      	cmp	r5, r2
 801428c:	dcd0      	bgt.n	8014230 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe0>
 801428e:	462b      	mov	r3, r5
 8014290:	e7d1      	b.n	8014236 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe6>

08014292 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl>:
 8014292:	b570      	push	{r4, r5, r6, lr}
 8014294:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 8014298:	4604      	mov	r4, r0
 801429a:	460d      	mov	r5, r1
 801429c:	b11b      	cbz	r3, 80142a6 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x14>
 801429e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142a2:	f000 b87c 	b.w	801439e <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>
 80142a6:	6803      	ldr	r3, [r0, #0]
 80142a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142ac:	4798      	blx	r3
 80142ae:	4602      	mov	r2, r0
 80142b0:	b938      	cbnz	r0, 80142c2 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x30>
 80142b2:	6823      	ldr	r3, [r4, #0]
 80142b4:	4629      	mov	r1, r5
 80142b6:	4620      	mov	r0, r4
 80142b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80142bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142c0:	4718      	bx	r3
 80142c2:	4628      	mov	r0, r5
 80142c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080142c8 <_ZN8touchgfx10ScrollListC1Ev>:
 80142c8:	b510      	push	{r4, lr}
 80142ca:	4604      	mov	r4, r0
 80142cc:	f000 f9fc 	bl	80146c8 <_ZN8touchgfx10ScrollBaseC1Ev>
 80142d0:	4b05      	ldr	r3, [pc, #20]	; (80142e8 <_ZN8touchgfx10ScrollListC1Ev+0x20>)
 80142d2:	4620      	mov	r0, r4
 80142d4:	6023      	str	r3, [r4, #0]
 80142d6:	2300      	movs	r3, #0
 80142d8:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 80142dc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80142e0:	2301      	movs	r3, #1
 80142e2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80142e6:	bd10      	pop	{r4, pc}
 80142e8:	08027aa4 	.word	0x08027aa4

080142ec <_ZN8touchgfx10ScrollList10setPaddingEss>:
 80142ec:	b570      	push	{r4, r5, r6, lr}
 80142ee:	6803      	ldr	r3, [r0, #0]
 80142f0:	4604      	mov	r4, r0
 80142f2:	460e      	mov	r6, r1
 80142f4:	4615      	mov	r5, r2
 80142f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80142fa:	4798      	blx	r3
 80142fc:	6823      	ldr	r3, [r4, #0]
 80142fe:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
 8014302:	b201      	sxth	r1, r0
 8014304:	f8a4 50ba 	strh.w	r5, [r4, #186]	; 0xba
 8014308:	4620      	mov	r0, r4
 801430a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801430e:	4798      	blx	r3
 8014310:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8014314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014318:	f7ff bd73 	b.w	8013e02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0801431c <_ZN8touchgfx10ScrollList11setSnappingEb>:
 801431c:	b570      	push	{r4, r5, r6, lr}
 801431e:	4604      	mov	r4, r0
 8014320:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
 8014324:	b181      	cbz	r1, 8014348 <_ZN8touchgfx10ScrollList11setSnappingEb+0x2c>
 8014326:	6803      	ldr	r3, [r0, #0]
 8014328:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 801432c:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 8014330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014334:	4798      	blx	r3
 8014336:	4601      	mov	r1, r0
 8014338:	4620      	mov	r0, r4
 801433a:	47b0      	blx	r6
 801433c:	462b      	mov	r3, r5
 801433e:	4601      	mov	r1, r0
 8014340:	4620      	mov	r0, r4
 8014342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014346:	4718      	bx	r3
 8014348:	bd70      	pop	{r4, r5, r6, pc}

0801434a <_ZN8touchgfx10ScrollBase13animateToItemEss>:
 801434a:	b570      	push	{r4, r5, r6, lr}
 801434c:	6803      	ldr	r3, [r0, #0]
 801434e:	4615      	mov	r5, r2
 8014350:	4604      	mov	r4, r0
 8014352:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014356:	4798      	blx	r3
 8014358:	2d00      	cmp	r5, #0
 801435a:	6823      	ldr	r3, [r4, #0]
 801435c:	4601      	mov	r1, r0
 801435e:	bfb8      	it	lt
 8014360:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 8014364:	4620      	mov	r0, r4
 8014366:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801436a:	462a      	mov	r2, r5
 801436c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014370:	4718      	bx	r3

08014372 <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:
 8014372:	302c      	adds	r0, #44	; 0x2c
 8014374:	f7ff bbe5 	b.w	8013b42 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>

08014378 <_ZN8touchgfx10ScrollBase11itemChangedEi>:
 8014378:	b209      	sxth	r1, r1
 801437a:	302c      	adds	r0, #44	; 0x2c
 801437c:	f7ff bdaf 	b.w	8013ede <_ZN8touchgfx12DrawableList11itemChangedEs>

08014380 <_ZN8touchgfx10ScrollBase9setOffsetEl>:
 8014380:	f9b0 307a 	ldrsh.w	r3, [r0, #122]	; 0x7a
 8014384:	302c      	adds	r0, #44	; 0x2c
 8014386:	4419      	add	r1, r3
 8014388:	f7ff bc0a 	b.w	8013ba0 <_ZN8touchgfx12DrawableList9setOffsetEl>

0801438c <_ZNK8touchgfx10ScrollBase9getOffsetEv>:
 801438c:	b510      	push	{r4, lr}
 801438e:	4604      	mov	r4, r0
 8014390:	302c      	adds	r0, #44	; 0x2c
 8014392:	f7ff fcfe 	bl	8013d92 <_ZNK8touchgfx12DrawableList9getOffsetEv>
 8014396:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
 801439a:	1ac0      	subs	r0, r0, r3
 801439c:	bd10      	pop	{r4, pc}

0801439e <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:
 801439e:	b538      	push	{r3, r4, r5, lr}
 80143a0:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 80143a4:	4605      	mov	r5, r0
 80143a6:	460c      	mov	r4, r1
 80143a8:	b18b      	cbz	r3, 80143ce <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>
 80143aa:	6803      	ldr	r3, [r0, #0]
 80143ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143b0:	4798      	blx	r3
 80143b2:	4602      	mov	r2, r0
 80143b4:	b168      	cbz	r0, 80143d2 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x34>
 80143b6:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 80143ba:	2102      	movs	r1, #2
 80143bc:	2c00      	cmp	r4, #0
 80143be:	fb93 f1f1 	sdiv	r1, r3, r1
 80143c2:	bfb4      	ite	lt
 80143c4:	1a64      	sublt	r4, r4, r1
 80143c6:	1864      	addge	r4, r4, r1
 80143c8:	fb94 f4f3 	sdiv	r4, r4, r3
 80143cc:	435c      	muls	r4, r3
 80143ce:	4620      	mov	r0, r4
 80143d0:	bd38      	pop	{r3, r4, r5, pc}
 80143d2:	682b      	ldr	r3, [r5, #0]
 80143d4:	4621      	mov	r1, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80143dc:	4798      	blx	r3
 80143de:	f9b5 407c 	ldrsh.w	r4, [r5, #124]	; 0x7c
 80143e2:	2302      	movs	r3, #2
 80143e4:	fb94 f3f3 	sdiv	r3, r4, r3
 80143e8:	1ac0      	subs	r0, r0, r3
 80143ea:	fb90 f0f4 	sdiv	r0, r0, r4
 80143ee:	4344      	muls	r4, r0
 80143f0:	e7ed      	b.n	80143ce <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>

080143f2 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:
 80143f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f6:	6803      	ldr	r3, [r0, #0]
 80143f8:	460d      	mov	r5, r1
 80143fa:	4604      	mov	r4, r0
 80143fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014400:	4798      	blx	r3
 8014402:	42a8      	cmp	r0, r5
 8014404:	d020      	beq.n	8014448 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 8014406:	4629      	mov	r1, r5
 8014408:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801440c:	f7ff fd64 	bl	8013ed8 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
 8014410:	6823      	ldr	r3, [r4, #0]
 8014412:	4620      	mov	r0, r4
 8014414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014418:	4798      	blx	r3
 801441a:	4605      	mov	r5, r0
 801441c:	b9a0      	cbnz	r0, 8014448 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 801441e:	6823      	ldr	r3, [r4, #0]
 8014420:	4620      	mov	r0, r4
 8014422:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
 8014426:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
 801442a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801442e:	4798      	blx	r3
 8014430:	462a      	mov	r2, r5
 8014432:	4601      	mov	r1, r0
 8014434:	4620      	mov	r0, r4
 8014436:	47b8      	blx	r7
 8014438:	4633      	mov	r3, r6
 801443a:	4601      	mov	r1, r0
 801443c:	f04f 32ff 	mov.w	r2, #4294967295
 8014440:	4620      	mov	r0, r4
 8014442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014446:	4718      	bx	r3
 8014448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801444c <_ZN8touchgfx10ScrollBase17animateToPositionEls>:
 801444c:	b570      	push	{r4, r5, r6, lr}
 801444e:	6803      	ldr	r3, [r0, #0]
 8014450:	4615      	mov	r5, r2
 8014452:	4604      	mov	r4, r0
 8014454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014458:	4798      	blx	r3
 801445a:	2d00      	cmp	r5, #0
 801445c:	4606      	mov	r6, r0
 801445e:	6823      	ldr	r3, [r4, #0]
 8014460:	bfb8      	it	lt
 8014462:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 8014466:	2d00      	cmp	r5, #0
 8014468:	dc06      	bgt.n	8014478 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x2c>
 801446a:	4601      	mov	r1, r0
 801446c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014470:	4620      	mov	r0, r4
 8014472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014476:	4718      	bx	r3
 8014478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801447c:	4620      	mov	r0, r4
 801447e:	4798      	blx	r3
 8014480:	2300      	movs	r3, #0
 8014482:	e9c4 3528 	strd	r3, r5, [r4, #160]	; 0xa0
 8014486:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 801448a:	2b01      	cmp	r3, #1
 801448c:	e9c4 062a 	strd	r0, r6, [r4, #168]	; 0xa8
 8014490:	d007      	beq.n	80144a2 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x56>
 8014492:	f004 f901 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8014496:	4621      	mov	r1, r4
 8014498:	f004 f904 	bl	80186a4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801449c:	2301      	movs	r3, #1
 801449e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 80144a2:	bd70      	pop	{r4, r5, r6, pc}

080144a4 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:
 80144a4:	b570      	push	{r4, r5, r6, lr}
 80144a6:	6803      	ldr	r3, [r0, #0]
 80144a8:	4605      	mov	r5, r0
 80144aa:	790e      	ldrb	r6, [r1, #4]
 80144ac:	460c      	mov	r4, r1
 80144ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144b2:	4798      	blx	r3
 80144b4:	f080 0001 	eor.w	r0, r0, #1
 80144b8:	b2c0      	uxtb	r0, r0
 80144ba:	42b0      	cmp	r0, r6
 80144bc:	d140      	bne.n	8014540 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x9c>
 80144be:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80144c2:	4628      	mov	r0, r5
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	bfbb      	ittet	lt
 80144c8:	425b      	neglt	r3, r3
 80144ca:	f04f 36ff 	movlt.w	r6, #4294967295
 80144ce:	2601      	movge	r6, #1
 80144d0:	b21b      	sxthlt	r3, r3
 80144d2:	2b04      	cmp	r3, #4
 80144d4:	bfc9      	itett	gt
 80144d6:	3b04      	subgt	r3, #4
 80144d8:	2407      	movle	r4, #7
 80144da:	ebc3 03c3 	rsbgt	r3, r3, r3, lsl #3
 80144de:	b21c      	sxthgt	r4, r3
 80144e0:	682b      	ldr	r3, [r5, #0]
 80144e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80144e6:	4366      	muls	r6, r4
 80144e8:	4798      	blx	r3
 80144ea:	f8b5 107e 	ldrh.w	r1, [r5, #126]	; 0x7e
 80144ee:	230a      	movs	r3, #10
 80144f0:	4371      	muls	r1, r6
 80144f2:	fb91 f1f3 	sdiv	r1, r1, r3
 80144f6:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
 80144fa:	4401      	add	r1, r0
 80144fc:	b163      	cbz	r3, 8014518 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x74>
 80144fe:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	; 0x7c
 8014502:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 8014506:	4343      	muls	r3, r0
 8014508:	18d0      	adds	r0, r2, r3
 801450a:	4281      	cmp	r1, r0
 801450c:	bfa8      	it	ge
 801450e:	4601      	movge	r1, r0
 8014510:	1ad0      	subs	r0, r2, r3
 8014512:	4281      	cmp	r1, r0
 8014514:	bfb8      	it	lt
 8014516:	4601      	movlt	r1, r0
 8014518:	682b      	ldr	r3, [r5, #0]
 801451a:	2200      	movs	r2, #0
 801451c:	4628      	mov	r0, r5
 801451e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014522:	4798      	blx	r3
 8014524:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
 8014528:	682b      	ldr	r3, [r5, #0]
 801452a:	4601      	mov	r1, r0
 801452c:	42a2      	cmp	r2, r4
 801452e:	4628      	mov	r0, r5
 8014530:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014534:	bfa8      	it	ge
 8014536:	4622      	movge	r2, r4
 8014538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801453c:	b212      	sxth	r2, r2
 801453e:	4718      	bx	r3
 8014540:	bd70      	pop	{r4, r5, r6, pc}

08014542 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:
 8014542:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8014546:	302c      	adds	r0, #44	; 0x2c
 8014548:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801454c:	f7ff baf4 	b.w	8013b38 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>

08014550 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:
 8014550:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8014554:	4770      	bx	lr

08014556 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
 8014556:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
 801455a:	4770      	bx	lr

0801455c <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
 801455c:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
 8014560:	4770      	bx	lr

08014562 <_ZN8touchgfx10ScrollBase23setItemSelectedCallbackERNS_15GenericCallbackIsvvEE>:
 8014562:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8014566:	4770      	bx	lr

08014568 <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
 8014568:	b510      	push	{r4, lr}
 801456a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 801456e:	4604      	mov	r4, r0
 8014570:	2b01      	cmp	r3, #1
 8014572:	d10b      	bne.n	801458c <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x24>
 8014574:	f004 f890 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8014578:	4621      	mov	r1, r4
 801457a:	f004 f8c5 	bl	8018708 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8014584:	4620      	mov	r0, r4
 8014586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801458a:	4798      	blx	r3
 801458c:	2300      	movs	r3, #0
 801458e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8014592:	bd10      	pop	{r4, pc}

08014594 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:
 8014594:	b570      	push	{r4, r5, r6, lr}
 8014596:	4604      	mov	r4, r0
 8014598:	460e      	mov	r6, r1
 801459a:	f7ff ffe5 	bl	8014568 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 801459e:	2302      	movs	r3, #2
 80145a0:	4620      	mov	r0, r4
 80145a2:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 80145a6:	6823      	ldr	r3, [r4, #0]
 80145a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80145ac:	4798      	blx	r3
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	4605      	mov	r5, r0
 80145b2:	4620      	mov	r0, r4
 80145b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145b8:	4798      	blx	r3
 80145ba:	b1f8      	cbz	r0, 80145fc <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x68>
 80145bc:	8973      	ldrh	r3, [r6, #10]
 80145be:	88f1      	ldrh	r1, [r6, #6]
 80145c0:	1a5b      	subs	r3, r3, r1
 80145c2:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 80145c6:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 80145ca:	4620      	mov	r0, r4
 80145cc:	b21b      	sxth	r3, r3
 80145ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80145d2:	434b      	muls	r3, r1
 80145d4:	210a      	movs	r1, #10
 80145d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80145da:	2104      	movs	r1, #4
 80145dc:	fb92 f2f1 	sdiv	r2, r2, r1
 80145e0:	6821      	ldr	r1, [r4, #0]
 80145e2:	b212      	sxth	r2, r2
 80145e4:	f8d1 60bc 	ldr.w	r6, [r1, #188]	; 0xbc
 80145e8:	1959      	adds	r1, r3, r5
 80145ea:	47b0      	blx	r6
 80145ec:	6823      	ldr	r3, [r4, #0]
 80145ee:	4601      	mov	r1, r0
 80145f0:	4620      	mov	r0, r4
 80145f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80145f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145fa:	4718      	bx	r3
 80145fc:	89b3      	ldrh	r3, [r6, #12]
 80145fe:	8931      	ldrh	r1, [r6, #8]
 8014600:	e7de      	b.n	80145c0 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x2c>

08014602 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:
 8014602:	b538      	push	{r3, r4, r5, lr}
 8014604:	6803      	ldr	r3, [r0, #0]
 8014606:	4605      	mov	r5, r0
 8014608:	460c      	mov	r4, r1
 801460a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801460e:	4798      	blx	r3
 8014610:	b150      	cbz	r0, 8014628 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 8014612:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 8014616:	b13b      	cbz	r3, 8014628 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 8014618:	4358      	muls	r0, r3
 801461a:	fb94 f3f0 	sdiv	r3, r4, r0
 801461e:	fb00 4413 	mls	r4, r0, r3, r4
 8014622:	2c00      	cmp	r4, #0
 8014624:	bfc8      	it	gt
 8014626:	1a24      	subgt	r4, r4, r0
 8014628:	4620      	mov	r0, r4
 801462a:	bd38      	pop	{r3, r4, r5, pc}

0801462c <_ZN8touchgfx10ScrollBase15handleTickEventEv>:
 801462c:	b570      	push	{r4, r5, r6, lr}
 801462e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8014632:	4604      	mov	r4, r0
 8014634:	2b01      	cmp	r3, #1
 8014636:	d13d      	bne.n	80146b4 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8014638:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 801463c:	2100      	movs	r1, #0
 801463e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8014642:	3001      	adds	r0, #1
 8014644:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8014648:	e9d4 622a 	ldrd	r6, r2, [r4, #168]	; 0xa8
 801464c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8014650:	b280      	uxth	r0, r0
 8014652:	1b92      	subs	r2, r2, r6
 8014654:	b212      	sxth	r2, r2
 8014656:	47a8      	blx	r5
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	1981      	adds	r1, r0, r6
 801465c:	4620      	mov	r0, r4
 801465e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014662:	4798      	blx	r3
 8014664:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
 8014668:	429a      	cmp	r2, r3
 801466a:	dd23      	ble.n	80146b4 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 801466c:	2300      	movs	r3, #0
 801466e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8014672:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8014676:	f004 f80f 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 801467a:	4621      	mov	r1, r4
 801467c:	f004 f844 	bl	8018708 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8014680:	6823      	ldr	r3, [r4, #0]
 8014682:	4620      	mov	r0, r4
 8014684:	e9d3 532c 	ldrd	r5, r3, [r3, #176]	; 0xb0
 8014688:	4798      	blx	r3
 801468a:	4601      	mov	r1, r0
 801468c:	4620      	mov	r0, r4
 801468e:	f7ff ffb8 	bl	8014602 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8014692:	4601      	mov	r1, r0
 8014694:	4620      	mov	r0, r4
 8014696:	47a8      	blx	r5
 8014698:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801469c:	b150      	cbz	r0, 80146b4 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 801469e:	6803      	ldr	r3, [r0, #0]
 80146a0:	68db      	ldr	r3, [r3, #12]
 80146a2:	4798      	blx	r3
 80146a4:	b130      	cbz	r0, 80146b4 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 80146a6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80146aa:	6803      	ldr	r3, [r0, #0]
 80146ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146b0:	689b      	ldr	r3, [r3, #8]
 80146b2:	4718      	bx	r3
 80146b4:	bd70      	pop	{r4, r5, r6, pc}

080146b6 <_ZN8touchgfx10ScrollBase13setHorizontalEb>:
 80146b6:	f081 0301 	eor.w	r3, r1, #1
 80146ba:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 80146be:	302c      	adds	r0, #44	; 0x2c
 80146c0:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 80146c4:	f7ff bbe9 	b.w	8013e9a <_ZN8touchgfx12DrawableList13setHorizontalEb>

080146c8 <_ZN8touchgfx10ScrollBaseC1Ev>:
 80146c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ca:	2500      	movs	r5, #0
 80146cc:	4606      	mov	r6, r0
 80146ce:	2701      	movs	r7, #1
 80146d0:	4b23      	ldr	r3, [pc, #140]	; (8014760 <_ZN8touchgfx10ScrollBaseC1Ev+0x98>)
 80146d2:	4604      	mov	r4, r0
 80146d4:	8085      	strh	r5, [r0, #4]
 80146d6:	80c5      	strh	r5, [r0, #6]
 80146d8:	8105      	strh	r5, [r0, #8]
 80146da:	8145      	strh	r5, [r0, #10]
 80146dc:	8185      	strh	r5, [r0, #12]
 80146de:	81c5      	strh	r5, [r0, #14]
 80146e0:	8205      	strh	r5, [r0, #16]
 80146e2:	8245      	strh	r5, [r0, #18]
 80146e4:	61c5      	str	r5, [r0, #28]
 80146e6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80146ea:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 80146ee:	6285      	str	r5, [r0, #40]	; 0x28
 80146f0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80146f4:	f846 3b2c 	str.w	r3, [r6], #44
 80146f8:	4630      	mov	r0, r6
 80146fa:	f7ff f9f7 	bl	8013aec <_ZN8touchgfx12DrawableListC1Ev>
 80146fe:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8014702:	230a      	movs	r3, #10
 8014704:	4631      	mov	r1, r6
 8014706:	4620      	mov	r0, r4
 8014708:	67a5      	str	r5, [r4, #120]	; 0x78
 801470a:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 801470e:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 8014712:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 8014716:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 801471a:	4b12      	ldr	r3, [pc, #72]	; (8014764 <_ZN8touchgfx10ScrollBaseC1Ev+0x9c>)
 801471c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8014720:	231e      	movs	r3, #30
 8014722:	e9c4 5523 	strd	r5, r5, [r4, #140]	; 0x8c
 8014726:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 801472a:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
 801472e:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
 8014732:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8014736:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
 801473a:	f000 f8c3 	bl	80148c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801473e:	462a      	mov	r2, r5
 8014740:	4629      	mov	r1, r5
 8014742:	4630      	mov	r0, r6
 8014744:	f7f0 f919 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
 8014748:	4629      	mov	r1, r5
 801474a:	4630      	mov	r0, r6
 801474c:	f7ff fba5 	bl	8013e9a <_ZN8touchgfx12DrawableList13setHorizontalEb>
 8014750:	4630      	mov	r0, r6
 8014752:	4629      	mov	r1, r5
 8014754:	f7ff fbac 	bl	8013eb0 <_ZN8touchgfx12DrawableList11setCircularEb>
 8014758:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 801475c:	4620      	mov	r0, r4
 801475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014760:	08027b78 	.word	0x08027b78
 8014764:	080199c9 	.word	0x080199c9

08014768 <_ZN8touchgfx10ScrollBase11setCircularEb>:
 8014768:	302c      	adds	r0, #44	; 0x2c
 801476a:	f7ff bba1 	b.w	8013eb0 <_ZN8touchgfx12DrawableList11setCircularEb>

0801476e <_ZN8touchgfx10ScrollBase8setWidthEs>:
 801476e:	8101      	strh	r1, [r0, #8]
 8014770:	302c      	adds	r0, #44	; 0x2c
 8014772:	f7ff bb8c 	b.w	8013e8e <_ZN8touchgfx12DrawableList8setWidthEs>

08014776 <_ZN8touchgfx10ScrollBase9setHeightEs>:
 8014776:	8141      	strh	r1, [r0, #10]
 8014778:	302c      	adds	r0, #44	; 0x2c
 801477a:	f7ff bb8b 	b.w	8013e94 <_ZN8touchgfx12DrawableList9setHeightEs>

0801477e <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:
 801477e:	302c      	adds	r0, #44	; 0x2c
 8014780:	f7ff b9a2 	b.w	8013ac8 <_ZNK8touchgfx12DrawableList13getHorizontalEv>

08014784 <_ZNK8touchgfx10ScrollBase11getCircularEv>:
 8014784:	302c      	adds	r0, #44	; 0x2c
 8014786:	f7ff b9a2 	b.w	8013ace <_ZNK8touchgfx12DrawableList11getCircularEv>

0801478a <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:
 801478a:	302c      	adds	r0, #44	; 0x2c
 801478c:	f7ff b9a5 	b.w	8013ada <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>

08014790 <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:
 8014790:	302c      	adds	r0, #44	; 0x2c
 8014792:	f7ff b9a8 	b.w	8013ae6 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>

08014796 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014796:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014798:	2000      	movs	r0, #0
 801479a:	b12b      	cbz	r3, 80147a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801479c:	b920      	cbnz	r0, 80147a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801479e:	1a5a      	subs	r2, r3, r1
 80147a0:	699b      	ldr	r3, [r3, #24]
 80147a2:	4250      	negs	r0, r2
 80147a4:	4150      	adcs	r0, r2
 80147a6:	e7f8      	b.n	801479a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80147a8:	4770      	bx	lr

080147aa <_ZN8touchgfx9Container9removeAllEv>:
 80147aa:	2200      	movs	r2, #0
 80147ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80147ae:	b123      	cbz	r3, 80147ba <_ZN8touchgfx9Container9removeAllEv+0x10>
 80147b0:	6999      	ldr	r1, [r3, #24]
 80147b2:	6281      	str	r1, [r0, #40]	; 0x28
 80147b4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80147b8:	e7f8      	b.n	80147ac <_ZN8touchgfx9Container9removeAllEv+0x2>
 80147ba:	4770      	bx	lr

080147bc <_ZN8touchgfx9Container6unlinkEv>:
 80147bc:	2300      	movs	r3, #0
 80147be:	6283      	str	r3, [r0, #40]	; 0x28
 80147c0:	4770      	bx	lr

080147c2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80147c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147c6:	461f      	mov	r7, r3
 80147c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80147cc:	460d      	mov	r5, r1
 80147ce:	4616      	mov	r6, r2
 80147d0:	b103      	cbz	r3, 80147d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80147d2:	6038      	str	r0, [r7, #0]
 80147d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80147d6:	b314      	cbz	r4, 801481e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80147d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80147dc:	b1eb      	cbz	r3, 801481a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80147de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80147e2:	428d      	cmp	r5, r1
 80147e4:	db19      	blt.n	801481a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80147e6:	b289      	uxth	r1, r1
 80147e8:	8923      	ldrh	r3, [r4, #8]
 80147ea:	440b      	add	r3, r1
 80147ec:	b21b      	sxth	r3, r3
 80147ee:	429d      	cmp	r5, r3
 80147f0:	da13      	bge.n	801481a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80147f2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80147f6:	4296      	cmp	r6, r2
 80147f8:	db0f      	blt.n	801481a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80147fa:	b292      	uxth	r2, r2
 80147fc:	8963      	ldrh	r3, [r4, #10]
 80147fe:	4413      	add	r3, r2
 8014800:	b21b      	sxth	r3, r3
 8014802:	429e      	cmp	r6, r3
 8014804:	da09      	bge.n	801481a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014806:	6823      	ldr	r3, [r4, #0]
 8014808:	1ab2      	subs	r2, r6, r2
 801480a:	1a69      	subs	r1, r5, r1
 801480c:	4620      	mov	r0, r4
 801480e:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8014812:	b212      	sxth	r2, r2
 8014814:	463b      	mov	r3, r7
 8014816:	b209      	sxth	r1, r1
 8014818:	47c0      	blx	r8
 801481a:	69a4      	ldr	r4, [r4, #24]
 801481c:	e7db      	b.n	80147d6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801481e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014822 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014822:	2200      	movs	r2, #0
 8014824:	8002      	strh	r2, [r0, #0]
 8014826:	8042      	strh	r2, [r0, #2]
 8014828:	8082      	strh	r2, [r0, #4]
 801482a:	80c2      	strh	r2, [r0, #6]
 801482c:	4770      	bx	lr

0801482e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801482e:	b570      	push	{r4, r5, r6, lr}
 8014830:	460d      	mov	r5, r1
 8014832:	4616      	mov	r6, r2
 8014834:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014836:	b13c      	cbz	r4, 8014848 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014838:	6823      	ldr	r3, [r4, #0]
 801483a:	4620      	mov	r0, r4
 801483c:	4632      	mov	r2, r6
 801483e:	4629      	mov	r1, r5
 8014840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014842:	4798      	blx	r3
 8014844:	69a4      	ldr	r4, [r4, #24]
 8014846:	e7f6      	b.n	8014836 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014848:	bd70      	pop	{r4, r5, r6, pc}

0801484a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801484a:	b538      	push	{r3, r4, r5, lr}
 801484c:	460d      	mov	r5, r1
 801484e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014850:	b134      	cbz	r4, 8014860 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014852:	682b      	ldr	r3, [r5, #0]
 8014854:	4621      	mov	r1, r4
 8014856:	4628      	mov	r0, r5
 8014858:	689b      	ldr	r3, [r3, #8]
 801485a:	4798      	blx	r3
 801485c:	69a4      	ldr	r4, [r4, #24]
 801485e:	e7f7      	b.n	8014850 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014860:	bd38      	pop	{r3, r4, r5, pc}

08014862 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014862:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014864:	b19b      	cbz	r3, 801488e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014866:	428b      	cmp	r3, r1
 8014868:	d109      	bne.n	801487e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801486a:	699a      	ldr	r2, [r3, #24]
 801486c:	2100      	movs	r1, #0
 801486e:	6159      	str	r1, [r3, #20]
 8014870:	6282      	str	r2, [r0, #40]	; 0x28
 8014872:	b902      	cbnz	r2, 8014876 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014874:	4770      	bx	lr
 8014876:	6199      	str	r1, [r3, #24]
 8014878:	4770      	bx	lr
 801487a:	4613      	mov	r3, r2
 801487c:	b13a      	cbz	r2, 801488e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801487e:	699a      	ldr	r2, [r3, #24]
 8014880:	428a      	cmp	r2, r1
 8014882:	d1fa      	bne.n	801487a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014884:	698a      	ldr	r2, [r1, #24]
 8014886:	619a      	str	r2, [r3, #24]
 8014888:	2300      	movs	r3, #0
 801488a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801488e:	4770      	bx	lr

08014890 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014890:	b410      	push	{r4}
 8014892:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014894:	4604      	mov	r4, r0
 8014896:	b92b      	cbnz	r3, 80148a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014898:	6803      	ldr	r3, [r0, #0]
 801489a:	4611      	mov	r1, r2
 801489c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80148a2:	4718      	bx	r3
 80148a4:	b941      	cbnz	r1, 80148b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80148a6:	6193      	str	r3, [r2, #24]
 80148a8:	6282      	str	r2, [r0, #40]	; 0x28
 80148aa:	6154      	str	r4, [r2, #20]
 80148ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148b0:	4770      	bx	lr
 80148b2:	4603      	mov	r3, r0
 80148b4:	2800      	cmp	r0, #0
 80148b6:	d0f9      	beq.n	80148ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80148b8:	4299      	cmp	r1, r3
 80148ba:	6998      	ldr	r0, [r3, #24]
 80148bc:	d1f9      	bne.n	80148b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80148be:	6190      	str	r0, [r2, #24]
 80148c0:	618a      	str	r2, [r1, #24]
 80148c2:	e7f2      	b.n	80148aa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080148c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80148c4:	4288      	cmp	r0, r1
 80148c6:	b508      	push	{r3, lr}
 80148c8:	d105      	bne.n	80148d6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80148ca:	4b11      	ldr	r3, [pc, #68]	; (8014910 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80148cc:	2123      	movs	r1, #35	; 0x23
 80148ce:	4a11      	ldr	r2, [pc, #68]	; (8014914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80148d0:	4811      	ldr	r0, [pc, #68]	; (8014918 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80148d2:	f010 f8ef 	bl	8024ab4 <__assert_func>
 80148d6:	694b      	ldr	r3, [r1, #20]
 80148d8:	b11b      	cbz	r3, 80148e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80148da:	4b10      	ldr	r3, [pc, #64]	; (801491c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80148dc:	2124      	movs	r1, #36	; 0x24
 80148de:	4a0d      	ldr	r2, [pc, #52]	; (8014914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80148e0:	e7f6      	b.n	80148d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80148e2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80148e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80148e8:	b913      	cbnz	r3, 80148f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80148ea:	6281      	str	r1, [r0, #40]	; 0x28
 80148ec:	bd08      	pop	{r3, pc}
 80148ee:	4613      	mov	r3, r2
 80148f0:	699a      	ldr	r2, [r3, #24]
 80148f2:	b12a      	cbz	r2, 8014900 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80148f4:	428b      	cmp	r3, r1
 80148f6:	d1fa      	bne.n	80148ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80148f8:	4b09      	ldr	r3, [pc, #36]	; (8014920 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80148fa:	2135      	movs	r1, #53	; 0x35
 80148fc:	4a05      	ldr	r2, [pc, #20]	; (8014914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80148fe:	e7e7      	b.n	80148d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014900:	428b      	cmp	r3, r1
 8014902:	d103      	bne.n	801490c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014904:	4b06      	ldr	r3, [pc, #24]	; (8014920 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014906:	2138      	movs	r1, #56	; 0x38
 8014908:	4a02      	ldr	r2, [pc, #8]	; (8014914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801490a:	e7e1      	b.n	80148d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801490c:	6199      	str	r1, [r3, #24]
 801490e:	e7ed      	b.n	80148ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014910:	08027c40 	.word	0x08027c40
 8014914:	08027d94 	.word	0x08027d94
 8014918:	08027c6c 	.word	0x08027c6c
 801491c:	08027c9f 	.word	0x08027c9f
 8014920:	08027cd5 	.word	0x08027cd5

08014924 <_ZN8touchgfx4RectaNERKS0_>:
 8014924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014928:	888b      	ldrh	r3, [r1, #4]
 801492a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801492e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014932:	444b      	add	r3, r9
 8014934:	b29b      	uxth	r3, r3
 8014936:	fa0f f883 	sxth.w	r8, r3
 801493a:	45c2      	cmp	sl, r8
 801493c:	da30      	bge.n	80149a0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801493e:	8882      	ldrh	r2, [r0, #4]
 8014940:	4452      	add	r2, sl
 8014942:	b292      	uxth	r2, r2
 8014944:	fa0f fe82 	sxth.w	lr, r2
 8014948:	45f1      	cmp	r9, lr
 801494a:	da29      	bge.n	80149a0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801494c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014950:	88cc      	ldrh	r4, [r1, #6]
 8014952:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014956:	442c      	add	r4, r5
 8014958:	b224      	sxth	r4, r4
 801495a:	42a6      	cmp	r6, r4
 801495c:	da20      	bge.n	80149a0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801495e:	88c7      	ldrh	r7, [r0, #6]
 8014960:	4437      	add	r7, r6
 8014962:	b2bf      	uxth	r7, r7
 8014964:	fa0f fc87 	sxth.w	ip, r7
 8014968:	4565      	cmp	r5, ip
 801496a:	da19      	bge.n	80149a0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801496c:	45ca      	cmp	sl, r9
 801496e:	4654      	mov	r4, sl
 8014970:	bfb8      	it	lt
 8014972:	464c      	movlt	r4, r9
 8014974:	42b5      	cmp	r5, r6
 8014976:	bfb8      	it	lt
 8014978:	4635      	movlt	r5, r6
 801497a:	45f0      	cmp	r8, lr
 801497c:	bfc8      	it	gt
 801497e:	4613      	movgt	r3, r2
 8014980:	1b1b      	subs	r3, r3, r4
 8014982:	8083      	strh	r3, [r0, #4]
 8014984:	88ca      	ldrh	r2, [r1, #6]
 8014986:	884b      	ldrh	r3, [r1, #2]
 8014988:	8004      	strh	r4, [r0, #0]
 801498a:	4413      	add	r3, r2
 801498c:	8045      	strh	r5, [r0, #2]
 801498e:	b29b      	uxth	r3, r3
 8014990:	b21a      	sxth	r2, r3
 8014992:	4594      	cmp	ip, r2
 8014994:	bfb8      	it	lt
 8014996:	463b      	movlt	r3, r7
 8014998:	1b5b      	subs	r3, r3, r5
 801499a:	80c3      	strh	r3, [r0, #6]
 801499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149a0:	2300      	movs	r3, #0
 80149a2:	8003      	strh	r3, [r0, #0]
 80149a4:	8043      	strh	r3, [r0, #2]
 80149a6:	8083      	strh	r3, [r0, #4]
 80149a8:	80c3      	strh	r3, [r0, #6]
 80149aa:	e7f7      	b.n	801499c <_ZN8touchgfx4RectaNERKS0_+0x78>

080149ac <_ZNK8touchgfx4Rect7isEmptyEv>:
 80149ac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80149b0:	b12b      	cbz	r3, 80149be <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80149b2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80149b6:	fab0 f080 	clz	r0, r0
 80149ba:	0940      	lsrs	r0, r0, #5
 80149bc:	4770      	bx	lr
 80149be:	2001      	movs	r0, #1
 80149c0:	4770      	bx	lr

080149c2 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80149c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c6:	2300      	movs	r3, #0
 80149c8:	4604      	mov	r4, r0
 80149ca:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80149cc:	8003      	strh	r3, [r0, #0]
 80149ce:	8043      	strh	r3, [r0, #2]
 80149d0:	8083      	strh	r3, [r0, #4]
 80149d2:	80c3      	strh	r3, [r0, #6]
 80149d4:	2d00      	cmp	r5, #0
 80149d6:	d040      	beq.n	8014a5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80149d8:	1d28      	adds	r0, r5, #4
 80149da:	f7ff ffe7 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 80149de:	b988      	cbnz	r0, 8014a04 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80149e0:	4620      	mov	r0, r4
 80149e2:	f7ff ffe3 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 80149e6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80149ea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80149ee:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80149f2:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80149f6:	b138      	cbz	r0, 8014a08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80149f8:	8022      	strh	r2, [r4, #0]
 80149fa:	8063      	strh	r3, [r4, #2]
 80149fc:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014a00:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014a04:	69ad      	ldr	r5, [r5, #24]
 8014a06:	e7e5      	b.n	80149d4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014a08:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014a0c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014a10:	4290      	cmp	r0, r2
 8014a12:	4607      	mov	r7, r0
 8014a14:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014a18:	460e      	mov	r6, r1
 8014a1a:	bfa8      	it	ge
 8014a1c:	4617      	movge	r7, r2
 8014a1e:	4299      	cmp	r1, r3
 8014a20:	4472      	add	r2, lr
 8014a22:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014a26:	bfa8      	it	ge
 8014a28:	461e      	movge	r6, r3
 8014a2a:	4440      	add	r0, r8
 8014a2c:	4471      	add	r1, lr
 8014a2e:	4463      	add	r3, ip
 8014a30:	b200      	sxth	r0, r0
 8014a32:	8027      	strh	r7, [r4, #0]
 8014a34:	b212      	sxth	r2, r2
 8014a36:	8066      	strh	r6, [r4, #2]
 8014a38:	b209      	sxth	r1, r1
 8014a3a:	b21b      	sxth	r3, r3
 8014a3c:	4290      	cmp	r0, r2
 8014a3e:	bfac      	ite	ge
 8014a40:	ebc7 0200 	rsbge	r2, r7, r0
 8014a44:	ebc7 0202 	rsblt	r2, r7, r2
 8014a48:	4299      	cmp	r1, r3
 8014a4a:	bfac      	ite	ge
 8014a4c:	ebc6 0301 	rsbge	r3, r6, r1
 8014a50:	ebc6 0303 	rsblt	r3, r6, r3
 8014a54:	80a2      	strh	r2, [r4, #4]
 8014a56:	80e3      	strh	r3, [r4, #6]
 8014a58:	e7d4      	b.n	8014a04 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a60 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014a64:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014a68:	b383      	cbz	r3, 8014acc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014a6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014a6c:	b374      	cbz	r4, 8014acc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014a6e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014a72:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014a76:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014a7a:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014a7e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014a82:	b303      	cbz	r3, 8014ac6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014a84:	4668      	mov	r0, sp
 8014a86:	1d21      	adds	r1, r4, #4
 8014a88:	f8ad 5000 	strh.w	r5, [sp]
 8014a8c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014a90:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014a94:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014a98:	f7ff ff44 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8014a9c:	4668      	mov	r0, sp
 8014a9e:	f7ff ff85 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8014aa2:	b980      	cbnz	r0, 8014ac6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014aa4:	f8bd 3000 	ldrh.w	r3, [sp]
 8014aa8:	4669      	mov	r1, sp
 8014aaa:	88a2      	ldrh	r2, [r4, #4]
 8014aac:	4620      	mov	r0, r4
 8014aae:	1a9b      	subs	r3, r3, r2
 8014ab0:	88e2      	ldrh	r2, [r4, #6]
 8014ab2:	f8ad 3000 	strh.w	r3, [sp]
 8014ab6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014aba:	1a9b      	subs	r3, r3, r2
 8014abc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014ac0:	6823      	ldr	r3, [r4, #0]
 8014ac2:	689b      	ldr	r3, [r3, #8]
 8014ac4:	4798      	blx	r3
 8014ac6:	69a4      	ldr	r4, [r4, #24]
 8014ac8:	2c00      	cmp	r4, #0
 8014aca:	d1d8      	bne.n	8014a7e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014acc:	b002      	add	sp, #8
 8014ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ad2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ad4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014ad8:	460d      	mov	r5, r1
 8014ada:	4616      	mov	r6, r2
 8014adc:	b323      	cbz	r3, 8014b28 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014ade:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014ae0:	b314      	cbz	r4, 8014b28 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014ae2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014ae6:	b1eb      	cbz	r3, 8014b24 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014ae8:	6828      	ldr	r0, [r5, #0]
 8014aea:	466b      	mov	r3, sp
 8014aec:	6869      	ldr	r1, [r5, #4]
 8014aee:	c303      	stmia	r3!, {r0, r1}
 8014af0:	4668      	mov	r0, sp
 8014af2:	1d21      	adds	r1, r4, #4
 8014af4:	f7ff ff16 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8014af8:	4668      	mov	r0, sp
 8014afa:	f7ff ff57 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8014afe:	b988      	cbnz	r0, 8014b24 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014b00:	f8bd 3000 	ldrh.w	r3, [sp]
 8014b04:	4669      	mov	r1, sp
 8014b06:	88a2      	ldrh	r2, [r4, #4]
 8014b08:	4620      	mov	r0, r4
 8014b0a:	1a9b      	subs	r3, r3, r2
 8014b0c:	88e2      	ldrh	r2, [r4, #6]
 8014b0e:	f8ad 3000 	strh.w	r3, [sp]
 8014b12:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014b16:	1a9b      	subs	r3, r3, r2
 8014b18:	4632      	mov	r2, r6
 8014b1a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014b1e:	6823      	ldr	r3, [r4, #0]
 8014b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b22:	4798      	blx	r3
 8014b24:	69a4      	ldr	r4, [r4, #24]
 8014b26:	e7db      	b.n	8014ae0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014b28:	b002      	add	sp, #8
 8014b2a:	bd70      	pop	{r4, r5, r6, pc}

08014b2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014b2c:	6803      	ldr	r3, [r0, #0]
 8014b2e:	b513      	push	{r0, r1, r4, lr}
 8014b30:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8014b34:	2300      	movs	r3, #0
 8014b36:	e9cd 3300 	strd	r3, r3, [sp]
 8014b3a:	466b      	mov	r3, sp
 8014b3c:	47a0      	blx	r4
 8014b3e:	b002      	add	sp, #8
 8014b40:	bd10      	pop	{r4, pc}

08014b42 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014b42:	2301      	movs	r3, #1
 8014b44:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014b48:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014b4c:	4770      	bx	lr

08014b4e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014b4e:	2301      	movs	r3, #1
 8014b50:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014b54:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014b58:	4770      	bx	lr

08014b5a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014b5a:	6843      	ldr	r3, [r0, #4]
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	725a      	strb	r2, [r3, #9]
 8014b60:	6840      	ldr	r0, [r0, #4]
 8014b62:	6803      	ldr	r3, [r0, #0]
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	4718      	bx	r3

08014b68 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014b68:	6840      	ldr	r0, [r0, #4]
 8014b6a:	6803      	ldr	r3, [r0, #0]
 8014b6c:	689b      	ldr	r3, [r3, #8]
 8014b6e:	4718      	bx	r3

08014b70 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014b70:	4b04      	ldr	r3, [pc, #16]	; (8014b84 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014b72:	781b      	ldrb	r3, [r3, #0]
 8014b74:	b123      	cbz	r3, 8014b80 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014b76:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014b7a:	f080 0001 	eor.w	r0, r0, #1
 8014b7e:	4770      	bx	lr
 8014b80:	2001      	movs	r0, #1
 8014b82:	4770      	bx	lr
 8014b84:	2000bafa 	.word	0x2000bafa

08014b88 <_ZN8touchgfx3HAL8endFrameEv>:
 8014b88:	b510      	push	{r4, lr}
 8014b8a:	4604      	mov	r4, r0
 8014b8c:	6840      	ldr	r0, [r0, #4]
 8014b8e:	6803      	ldr	r3, [r0, #0]
 8014b90:	689b      	ldr	r3, [r3, #8]
 8014b92:	4798      	blx	r3
 8014b94:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014b98:	b113      	cbz	r3, 8014ba0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014ba0:	bd10      	pop	{r4, pc}

08014ba2 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014ba2:	b508      	push	{r3, lr}
 8014ba4:	6803      	ldr	r3, [r0, #0]
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014baa:	4798      	blx	r3
 8014bac:	6823      	ldr	r3, [r4, #0]
 8014bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	4798      	blx	r3
 8014bb4:	f7ed ffe2 	bl	8002b7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014bb8:	6823      	ldr	r3, [r4, #0]
 8014bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bbc:	e7f8      	b.n	8014bb0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014bc0 <_ZN8touchgfx3HAL4tickEv>:
 8014bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014bc2:	6803      	ldr	r3, [r0, #0]
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	4d5c      	ldr	r5, [pc, #368]	; (8014d38 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014bcc:	4798      	blx	r3
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	f000 8097 	beq.w	8014d02 <_ZN8touchgfx3HAL4tickEv+0x142>
 8014bd4:	2001      	movs	r0, #1
 8014bd6:	2600      	movs	r6, #0
 8014bd8:	f7ed fc46 	bl	8002468 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014bdc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014be0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014be4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014be8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014bec:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014bf0:	b133      	cbz	r3, 8014c00 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014bf2:	6823      	ldr	r3, [r4, #0]
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014bfa:	4798      	blx	r3
 8014bfc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014c00:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014c04:	2601      	movs	r6, #1
 8014c06:	6862      	ldr	r2, [r4, #4]
 8014c08:	f083 0301 	eor.w	r3, r3, #1
 8014c0c:	702e      	strb	r6, [r5, #0]
 8014c0e:	7253      	strb	r3, [r2, #9]
 8014c10:	f003 fd42 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8014c14:	6803      	ldr	r3, [r0, #0]
 8014c16:	4631      	mov	r1, r6
 8014c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c1a:	4798      	blx	r3
 8014c1c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014c20:	b90b      	cbnz	r3, 8014c26 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014c22:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014c26:	f003 fd37 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	695b      	ldr	r3, [r3, #20]
 8014c2e:	4798      	blx	r3
 8014c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c32:	6803      	ldr	r3, [r0, #0]
 8014c34:	691b      	ldr	r3, [r3, #16]
 8014c36:	4798      	blx	r3
 8014c38:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014c3c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014c40:	3b01      	subs	r3, #1
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014c48:	b10a      	cbz	r2, 8014c4e <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1eb      	bne.n	8014c26 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014c4e:	4a3b      	ldr	r2, [pc, #236]	; (8014d3c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014c50:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014c54:	7813      	ldrb	r3, [r2, #0]
 8014c56:	3301      	adds	r3, #1
 8014c58:	b25b      	sxtb	r3, r3
 8014c5a:	4299      	cmp	r1, r3
 8014c5c:	7013      	strb	r3, [r2, #0]
 8014c5e:	dc10      	bgt.n	8014c82 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014c60:	2300      	movs	r3, #0
 8014c62:	68e0      	ldr	r0, [r4, #12]
 8014c64:	a902      	add	r1, sp, #8
 8014c66:	7013      	strb	r3, [r2, #0]
 8014c68:	aa03      	add	r2, sp, #12
 8014c6a:	6803      	ldr	r3, [r0, #0]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	4798      	blx	r3
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	2800      	cmp	r0, #0
 8014c74:	d051      	beq.n	8014d1a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014c80:	4798      	blx	r3
 8014c82:	2300      	movs	r3, #0
 8014c84:	6960      	ldr	r0, [r4, #20]
 8014c86:	f88d 3007 	strb.w	r3, [sp, #7]
 8014c8a:	b158      	cbz	r0, 8014ca4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014c8c:	6803      	ldr	r3, [r0, #0]
 8014c8e:	f10d 0107 	add.w	r1, sp, #7
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	4798      	blx	r3
 8014c96:	b128      	cbz	r0, 8014ca4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014c9e:	6803      	ldr	r3, [r0, #0]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	4798      	blx	r3
 8014ca4:	f104 001c 	add.w	r0, r4, #28
 8014ca8:	f00e fa38 	bl	802311c <_ZN8touchgfx8Gestures4tickEv>
 8014cac:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014cb0:	b30b      	cbz	r3, 8014cf6 <_ZN8touchgfx3HAL4tickEv+0x136>
 8014cb2:	6920      	ldr	r0, [r4, #16]
 8014cb4:	6803      	ldr	r3, [r0, #0]
 8014cb6:	691b      	ldr	r3, [r3, #16]
 8014cb8:	4798      	blx	r3
 8014cba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014cbc:	4606      	mov	r6, r0
 8014cbe:	b903      	cbnz	r3, 8014cc2 <_ZN8touchgfx3HAL4tickEv+0x102>
 8014cc0:	6720      	str	r0, [r4, #112]	; 0x70
 8014cc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014cc4:	4a1e      	ldr	r2, [pc, #120]	; (8014d40 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8014cc6:	1af3      	subs	r3, r6, r3
 8014cc8:	4293      	cmp	r3, r2
 8014cca:	d914      	bls.n	8014cf6 <_ZN8touchgfx3HAL4tickEv+0x136>
 8014ccc:	6920      	ldr	r0, [r4, #16]
 8014cce:	6803      	ldr	r3, [r0, #0]
 8014cd0:	699b      	ldr	r3, [r3, #24]
 8014cd2:	4798      	blx	r3
 8014cd4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014cd6:	2264      	movs	r2, #100	; 0x64
 8014cd8:	1af3      	subs	r3, r6, r3
 8014cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cde:	fbb0 f0f3 	udiv	r0, r0, r3
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	dc1e      	bgt.n	8014d24 <_ZN8touchgfx3HAL4tickEv+0x164>
 8014ce6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8014cea:	6920      	ldr	r0, [r4, #16]
 8014cec:	2100      	movs	r1, #0
 8014cee:	6803      	ldr	r3, [r0, #0]
 8014cf0:	69db      	ldr	r3, [r3, #28]
 8014cf2:	4798      	blx	r3
 8014cf4:	6726      	str	r6, [r4, #112]	; 0x70
 8014cf6:	f003 fccf 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8014cfa:	6803      	ldr	r3, [r0, #0]
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d00:	4798      	blx	r3
 8014d02:	6823      	ldr	r3, [r4, #0]
 8014d04:	4620      	mov	r0, r4
 8014d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d0a:	4798      	blx	r3
 8014d0c:	2001      	movs	r0, #1
 8014d0e:	f7ed fbb6 	bl	800247e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014d12:	2300      	movs	r3, #0
 8014d14:	702b      	strb	r3, [r5, #0]
 8014d16:	b004      	add	sp, #16
 8014d18:	bd70      	pop	{r4, r5, r6, pc}
 8014d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014d1e:	4620      	mov	r0, r4
 8014d20:	4798      	blx	r3
 8014d22:	e7ae      	b.n	8014c82 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014d24:	2863      	cmp	r0, #99	; 0x63
 8014d26:	bfcb      	itete	gt
 8014d28:	2300      	movgt	r3, #0
 8014d2a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014d2e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8014d32:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014d36:	e7d8      	b.n	8014cea <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014d38:	2000bb00 	.word	0x2000bb00
 8014d3c:	2000bb01 	.word	0x2000bb01
 8014d40:	05f5e100 	.word	0x05f5e100

08014d44 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014d44:	f7ed beba 	b.w	8002abc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014d48 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014d48:	6581      	str	r1, [r0, #88]	; 0x58
 8014d4a:	301c      	adds	r0, #28
 8014d4c:	f00e b9e4 	b.w	8023118 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014d50 <_ZN8touchgfx3HAL5touchEll>:
 8014d50:	b530      	push	{r4, r5, lr}
 8014d52:	b087      	sub	sp, #28
 8014d54:	4604      	mov	r4, r0
 8014d56:	a804      	add	r0, sp, #16
 8014d58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014d5c:	f003 fa5a 	bl	8018214 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014d60:	9b04      	ldr	r3, [sp, #16]
 8014d62:	a906      	add	r1, sp, #24
 8014d64:	a803      	add	r0, sp, #12
 8014d66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014d6a:	9b05      	ldr	r3, [sp, #20]
 8014d6c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014d70:	f003 fa9e 	bl	80182b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014d74:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014d78:	f104 001c 	add.w	r0, r4, #28
 8014d7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014d80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014d84:	b189      	cbz	r1, 8014daa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014d86:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014d8a:	9300      	str	r3, [sp, #0]
 8014d8c:	4613      	mov	r3, r2
 8014d8e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8014d92:	462a      	mov	r2, r5
 8014d94:	f00e f9d0 	bl	8023138 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014d98:	b128      	cbz	r0, 8014da6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014d9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014d9e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014da0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014da4:	6623      	str	r3, [r4, #96]	; 0x60
 8014da6:	b007      	add	sp, #28
 8014da8:	bd30      	pop	{r4, r5, pc}
 8014daa:	f00e fa09 	bl	80231c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014dae:	2301      	movs	r3, #1
 8014db0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014db4:	e7f1      	b.n	8014d9a <_ZN8touchgfx3HAL5touchEll+0x4a>

08014db6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014db6:	b570      	push	{r4, r5, r6, lr}
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d050      	beq.n	8014e5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014dbc:	ea81 0002 	eor.w	r0, r1, r2
 8014dc0:	07c6      	lsls	r6, r0, #31
 8014dc2:	d508      	bpl.n	8014dd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014dc4:	3a01      	subs	r2, #1
 8014dc6:	18cc      	adds	r4, r1, r3
 8014dc8:	42a1      	cmp	r1, r4
 8014dca:	d048      	beq.n	8014e5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014dcc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014dd0:	f801 0b01 	strb.w	r0, [r1], #1
 8014dd4:	e7f8      	b.n	8014dc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014dd6:	07d5      	lsls	r5, r2, #31
 8014dd8:	bf42      	ittt	mi
 8014dda:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014dde:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014de2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d915      	bls.n	8014e16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014dea:	ea82 0001 	eor.w	r0, r2, r1
 8014dee:	0784      	lsls	r4, r0, #30
 8014df0:	d02d      	beq.n	8014e4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8014df2:	1e94      	subs	r4, r2, #2
 8014df4:	4608      	mov	r0, r1
 8014df6:	18ce      	adds	r6, r1, r3
 8014df8:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8014dfc:	f820 5b02 	strh.w	r5, [r0], #2
 8014e00:	1a35      	subs	r5, r6, r0
 8014e02:	2d01      	cmp	r5, #1
 8014e04:	d8f8      	bhi.n	8014df8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8014e06:	1e98      	subs	r0, r3, #2
 8014e08:	f003 0301 	and.w	r3, r3, #1
 8014e0c:	f020 0001 	bic.w	r0, r0, #1
 8014e10:	3002      	adds	r0, #2
 8014e12:	4401      	add	r1, r0
 8014e14:	4402      	add	r2, r0
 8014e16:	1f14      	subs	r4, r2, #4
 8014e18:	4608      	mov	r0, r1
 8014e1a:	18ce      	adds	r6, r1, r3
 8014e1c:	1a35      	subs	r5, r6, r0
 8014e1e:	2d03      	cmp	r5, #3
 8014e20:	d810      	bhi.n	8014e44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8014e22:	089c      	lsrs	r4, r3, #2
 8014e24:	00a0      	lsls	r0, r4, #2
 8014e26:	4401      	add	r1, r0
 8014e28:	3801      	subs	r0, #1
 8014e2a:	4402      	add	r2, r0
 8014e2c:	f06f 0003 	mvn.w	r0, #3
 8014e30:	fb00 3404 	mla	r4, r0, r4, r3
 8014e34:	440c      	add	r4, r1
 8014e36:	42a1      	cmp	r1, r4
 8014e38:	d011      	beq.n	8014e5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014e3a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014e3e:	f801 3b01 	strb.w	r3, [r1], #1
 8014e42:	e7f8      	b.n	8014e36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8014e44:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8014e48:	f840 5b04 	str.w	r5, [r0], #4
 8014e4c:	e7e6      	b.n	8014e1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8014e4e:	0790      	lsls	r0, r2, #30
 8014e50:	d0e1      	beq.n	8014e16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014e52:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014e56:	3b02      	subs	r3, #2
 8014e58:	f821 0b02 	strh.w	r0, [r1], #2
 8014e5c:	e7db      	b.n	8014e16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014e5e:	2001      	movs	r0, #1
 8014e60:	bd70      	pop	{r4, r5, r6, pc}

08014e62 <_ZN8touchgfx3HAL7noTouchEv>:
 8014e62:	b510      	push	{r4, lr}
 8014e64:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014e68:	4604      	mov	r4, r0
 8014e6a:	b153      	cbz	r3, 8014e82 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014e6c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014e70:	2101      	movs	r1, #1
 8014e72:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014e76:	301c      	adds	r0, #28
 8014e78:	f00e f9a2 	bl	80231c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014e82:	bd10      	pop	{r4, pc}

08014e84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e88:	4605      	mov	r5, r0
 8014e8a:	6980      	ldr	r0, [r0, #24]
 8014e8c:	b085      	sub	sp, #20
 8014e8e:	460f      	mov	r7, r1
 8014e90:	4690      	mov	r8, r2
 8014e92:	4699      	mov	r9, r3
 8014e94:	b930      	cbnz	r0, 8014ea4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8014e96:	4b1f      	ldr	r3, [pc, #124]	; (8014f14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8014e98:	f44f 7198 	mov.w	r1, #304	; 0x130
 8014e9c:	4a1e      	ldr	r2, [pc, #120]	; (8014f18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8014e9e:	481f      	ldr	r0, [pc, #124]	; (8014f1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8014ea0:	f00f fe08 	bl	8024ab4 <__assert_func>
 8014ea4:	ac04      	add	r4, sp, #16
 8014ea6:	2600      	movs	r6, #0
 8014ea8:	f844 6d04 	str.w	r6, [r4, #-4]!
 8014eac:	6806      	ldr	r6, [r0, #0]
 8014eae:	9401      	str	r4, [sp, #4]
 8014eb0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8014eb4:	9400      	str	r4, [sp, #0]
 8014eb6:	6834      	ldr	r4, [r6, #0]
 8014eb8:	47a0      	blx	r4
 8014eba:	4c19      	ldr	r4, [pc, #100]	; (8014f20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8014ebc:	4606      	mov	r6, r0
 8014ebe:	f8a4 9000 	strh.w	r9, [r4]
 8014ec2:	f7ed fb27 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8014ec6:	6803      	ldr	r3, [r0, #0]
 8014ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eca:	4798      	blx	r3
 8014ecc:	280c      	cmp	r0, #12
 8014ece:	d80f      	bhi.n	8014ef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8014ed0:	e8df f000 	tbb	[pc, r0]
 8014ed4:	1b1b1207 	.word	0x1b1b1207
 8014ed8:	1b1b1b1b 	.word	0x1b1b1b1b
 8014edc:	1b1b1b1b 	.word	0x1b1b1b1b
 8014ee0:	1b          	.byte	0x1b
 8014ee1:	00          	.byte	0x00
 8014ee2:	8823      	ldrh	r3, [r4, #0]
 8014ee4:	fb08 7203 	mla	r2, r8, r3, r7
 8014ee8:	9b03      	ldr	r3, [sp, #12]
 8014eea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014eee:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	b005      	add	sp, #20
 8014ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef8:	8822      	ldrh	r2, [r4, #0]
 8014efa:	9b03      	ldr	r3, [sp, #12]
 8014efc:	fb08 7202 	mla	r2, r8, r2, r7
 8014f00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014f04:	1a9a      	subs	r2, r3, r2
 8014f06:	63ea      	str	r2, [r5, #60]	; 0x3c
 8014f08:	e7f2      	b.n	8014ef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8014f0a:	4b06      	ldr	r3, [pc, #24]	; (8014f24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8014f0c:	f240 114d 	movw	r1, #333	; 0x14d
 8014f10:	4a01      	ldr	r2, [pc, #4]	; (8014f18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8014f12:	e7c4      	b.n	8014e9e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8014f14:	08027e3d 	.word	0x08027e3d
 8014f18:	0802814e 	.word	0x0802814e
 8014f1c:	08027e82 	.word	0x08027e82
 8014f20:	2000baf6 	.word	0x2000baf6
 8014f24:	08027ea8 	.word	0x08027ea8

08014f28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8014f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f2c:	4698      	mov	r8, r3
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	b087      	sub	sp, #28
 8014f32:	460e      	mov	r6, r1
 8014f34:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8014f36:	4617      	mov	r7, r2
 8014f38:	4b0d      	ldr	r3, [pc, #52]	; (8014f70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	f8b3 9000 	ldrh.w	r9, [r3]
 8014f40:	f7ed fae8 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8014f44:	6803      	ldr	r3, [r0, #0]
 8014f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f48:	4798      	blx	r3
 8014f4a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014f4e:	463a      	mov	r2, r7
 8014f50:	4631      	mov	r1, r6
 8014f52:	9302      	str	r3, [sp, #8]
 8014f54:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014f58:	9301      	str	r3, [sp, #4]
 8014f5a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014f5e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8014f62:	9300      	str	r3, [sp, #0]
 8014f64:	4620      	mov	r0, r4
 8014f66:	4643      	mov	r3, r8
 8014f68:	47a8      	blx	r5
 8014f6a:	b007      	add	sp, #28
 8014f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f70:	2000baf6 	.word	0x2000baf6

08014f74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f78:	4606      	mov	r6, r0
 8014f7a:	b089      	sub	sp, #36	; 0x24
 8014f7c:	4610      	mov	r0, r2
 8014f7e:	460c      	mov	r4, r1
 8014f80:	4691      	mov	r9, r2
 8014f82:	4698      	mov	r8, r3
 8014f84:	f005 ff84 	bl	801ae90 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	f000 8092 	beq.w	80150b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8014f8e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80150cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8014f92:	ad08      	add	r5, sp, #32
 8014f94:	f8df b138 	ldr.w	fp, [pc, #312]	; 80150d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8014f98:	f8da 0000 	ldr.w	r0, [sl]
 8014f9c:	4f4a      	ldr	r7, [pc, #296]	; (80150c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8014f9e:	6802      	ldr	r2, [r0, #0]
 8014fa0:	6a12      	ldr	r2, [r2, #32]
 8014fa2:	4790      	blx	r2
 8014fa4:	f8da 0000 	ldr.w	r0, [sl]
 8014fa8:	6802      	ldr	r2, [r0, #0]
 8014faa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014fac:	4790      	blx	r2
 8014fae:	f8bb 3000 	ldrh.w	r3, [fp]
 8014fb2:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	9300      	str	r3, [sp, #0]
 8014fba:	883b      	ldrh	r3, [r7, #0]
 8014fbc:	9301      	str	r3, [sp, #4]
 8014fbe:	f006 f827 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014fc2:	f8ab 0000 	strh.w	r0, [fp]
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f006 f85c 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014fcc:	f8da b000 	ldr.w	fp, [sl]
 8014fd0:	8038      	strh	r0, [r7, #0]
 8014fd2:	4648      	mov	r0, r9
 8014fd4:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8014fd8:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8014fdc:	9302      	str	r3, [sp, #8]
 8014fde:	f005 ff57 	bl	801ae90 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014fe2:	f8da 2000 	ldr.w	r2, [sl]
 8014fe6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8014fea:	63d0      	str	r0, [r2, #60]	; 0x3c
 8014fec:	4620      	mov	r0, r4
 8014fee:	6822      	ldr	r2, [r4, #0]
 8014ff0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8014ff4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8014ffc:	4611      	mov	r1, r2
 8014ffe:	4798      	blx	r3
 8015000:	2201      	movs	r2, #1
 8015002:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015006:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801500a:	1d22      	adds	r2, r4, #4
 801500c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8015010:	2900      	cmp	r1, #0
 8015012:	d051      	beq.n	80150b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015014:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015018:	2900      	cmp	r1, #0
 801501a:	d04d      	beq.n	80150b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801501c:	6810      	ldr	r0, [r2, #0]
 801501e:	f10d 0c18 	add.w	ip, sp, #24
 8015022:	6851      	ldr	r1, [r2, #4]
 8015024:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015028:	4641      	mov	r1, r8
 801502a:	a806      	add	r0, sp, #24
 801502c:	f7ff fc7a 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8015030:	4628      	mov	r0, r5
 8015032:	f006 f979 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015036:	4680      	mov	r8, r0
 8015038:	f7ed fa6c 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 801503c:	6802      	ldr	r2, [r0, #0]
 801503e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015040:	4790      	blx	r2
 8015042:	4580      	cmp	r8, r0
 8015044:	d03d      	beq.n	80150c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015046:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015048:	b150      	cbz	r0, 8015060 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801504a:	4628      	mov	r0, r5
 801504c:	f006 f96c 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015050:	4605      	mov	r5, r0
 8015052:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015054:	6803      	ldr	r3, [r0, #0]
 8015056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015058:	4798      	blx	r3
 801505a:	1a2b      	subs	r3, r5, r0
 801505c:	4258      	negs	r0, r3
 801505e:	4158      	adcs	r0, r3
 8015060:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015064:	2500      	movs	r5, #0
 8015066:	6963      	ldr	r3, [r4, #20]
 8015068:	4620      	mov	r0, r4
 801506a:	6822      	ldr	r2, [r4, #0]
 801506c:	a906      	add	r1, sp, #24
 801506e:	6165      	str	r5, [r4, #20]
 8015070:	9303      	str	r3, [sp, #12]
 8015072:	6892      	ldr	r2, [r2, #8]
 8015074:	4790      	blx	r2
 8015076:	9b03      	ldr	r3, [sp, #12]
 8015078:	4620      	mov	r0, r4
 801507a:	4652      	mov	r2, sl
 801507c:	6163      	str	r3, [r4, #20]
 801507e:	4649      	mov	r1, r9
 8015080:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015084:	6823      	ldr	r3, [r4, #0]
 8015086:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801508a:	4c10      	ldr	r4, [pc, #64]	; (80150cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801508e:	4798      	blx	r3
 8015090:	6820      	ldr	r0, [r4, #0]
 8015092:	9b02      	ldr	r3, [sp, #8]
 8015094:	9a00      	ldr	r2, [sp, #0]
 8015096:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801509a:	4b0d      	ldr	r3, [pc, #52]	; (80150d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801509c:	801a      	strh	r2, [r3, #0]
 801509e:	4b0a      	ldr	r3, [pc, #40]	; (80150c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80150a0:	9a01      	ldr	r2, [sp, #4]
 80150a2:	801a      	strh	r2, [r3, #0]
 80150a4:	6803      	ldr	r3, [r0, #0]
 80150a6:	6a1b      	ldr	r3, [r3, #32]
 80150a8:	4798      	blx	r3
 80150aa:	6820      	ldr	r0, [r4, #0]
 80150ac:	6803      	ldr	r3, [r0, #0]
 80150ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b0:	4798      	blx	r3
 80150b2:	b009      	add	sp, #36	; 0x24
 80150b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150b8:	ab06      	add	r3, sp, #24
 80150ba:	6810      	ldr	r0, [r2, #0]
 80150bc:	6851      	ldr	r1, [r2, #4]
 80150be:	c303      	stmia	r3!, {r0, r1}
 80150c0:	e7b6      	b.n	8015030 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80150c2:	2000      	movs	r0, #0
 80150c4:	e7cc      	b.n	8015060 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80150c6:	bf00      	nop
 80150c8:	2000baf8 	.word	0x2000baf8
 80150cc:	2000bafc 	.word	0x2000bafc
 80150d0:	2000baf6 	.word	0x2000baf6

080150d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80150d4:	4b07      	ldr	r3, [pc, #28]	; (80150f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80150d6:	b510      	push	{r4, lr}
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	4604      	mov	r4, r0
 80150dc:	b13b      	cbz	r3, 80150ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80150de:	6803      	ldr	r3, [r0, #0]
 80150e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150e2:	4798      	blx	r3
 80150e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80150e6:	4283      	cmp	r3, r0
 80150e8:	d101      	bne.n	80150ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80150ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80150ec:	bd10      	pop	{r4, pc}
 80150ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80150f0:	e7fc      	b.n	80150ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80150f2:	bf00      	nop
 80150f4:	2000bafa 	.word	0x2000bafa

080150f8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80150f8:	4b0b      	ldr	r3, [pc, #44]	; (8015128 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80150fa:	b510      	push	{r4, lr}
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	4604      	mov	r4, r0
 8015100:	b95b      	cbnz	r3, 801511a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015102:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015106:	2b02      	cmp	r3, #2
 8015108:	d007      	beq.n	801511a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801510a:	6840      	ldr	r0, [r0, #4]
 801510c:	f000 fbc8 	bl	80158a0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015110:	b118      	cbz	r0, 801511a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015112:	6862      	ldr	r2, [r4, #4]
 8015114:	7a53      	ldrb	r3, [r2, #9]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d0fc      	beq.n	8015114 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801511a:	f7ed fcc1 	bl	8002aa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801511e:	4620      	mov	r0, r4
 8015120:	f7ff ffd8 	bl	80150d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015124:	bd10      	pop	{r4, pc}
 8015126:	bf00      	nop
 8015128:	2000bafa 	.word	0x2000bafa

0801512c <_ZN8touchgfx3HAL10initializeEv>:
 801512c:	b510      	push	{r4, lr}
 801512e:	4604      	mov	r4, r0
 8015130:	f7ed fc92 	bl	8002a58 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015134:	6860      	ldr	r0, [r4, #4]
 8015136:	6803      	ldr	r3, [r0, #0]
 8015138:	68db      	ldr	r3, [r3, #12]
 801513a:	4798      	blx	r3
 801513c:	68e0      	ldr	r0, [r4, #12]
 801513e:	6803      	ldr	r3, [r0, #0]
 8015140:	689b      	ldr	r3, [r3, #8]
 8015142:	4798      	blx	r3
 8015144:	6823      	ldr	r3, [r4, #0]
 8015146:	4620      	mov	r0, r4
 8015148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801514a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801514e:	4718      	bx	r3

08015150 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015150:	b508      	push	{r3, lr}
 8015152:	290c      	cmp	r1, #12
 8015154:	d817      	bhi.n	8015186 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015156:	e8df f001 	tbb	[pc, r1]
 801515a:	090b      	.short	0x090b
 801515c:	0d0d0d07 	.word	0x0d0d0d07
 8015160:	1414140d 	.word	0x1414140d
 8015164:	1414      	.short	0x1414
 8015166:	0d          	.byte	0x0d
 8015167:	00          	.byte	0x00
 8015168:	2020      	movs	r0, #32
 801516a:	bd08      	pop	{r3, pc}
 801516c:	2018      	movs	r0, #24
 801516e:	e7fc      	b.n	801516a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015170:	2010      	movs	r0, #16
 8015172:	e7fa      	b.n	801516a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015174:	4b05      	ldr	r3, [pc, #20]	; (801518c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015176:	f44f 710c 	mov.w	r1, #560	; 0x230
 801517a:	4a05      	ldr	r2, [pc, #20]	; (8015190 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801517c:	4805      	ldr	r0, [pc, #20]	; (8015194 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801517e:	f00f fc99 	bl	8024ab4 <__assert_func>
 8015182:	2008      	movs	r0, #8
 8015184:	e7f1      	b.n	801516a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015186:	2000      	movs	r0, #0
 8015188:	e7ef      	b.n	801516a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801518a:	bf00      	nop
 801518c:	08027f7b 	.word	0x08027f7b
 8015190:	08028310 	.word	0x08028310
 8015194:	08027e82 	.word	0x08027e82

08015198 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015198:	b570      	push	{r4, r5, r6, lr}
 801519a:	460d      	mov	r5, r1
 801519c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80151a0:	4616      	mov	r6, r2
 80151a2:	461c      	mov	r4, r3
 80151a4:	f7ff ffd4 	bl	8015150 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80151a8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80151ac:	10c0      	asrs	r0, r0, #3
 80151ae:	fb06 5101 	mla	r1, r6, r1, r5
 80151b2:	fb00 4001 	mla	r0, r0, r1, r4
 80151b6:	bd70      	pop	{r4, r5, r6, pc}

080151b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80151b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151bc:	b08a      	sub	sp, #40	; 0x28
 80151be:	f04f 0c00 	mov.w	ip, #0
 80151c2:	4604      	mov	r4, r0
 80151c4:	469a      	mov	sl, r3
 80151c6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80151ca:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80151ce:	f1b8 0f02 	cmp.w	r8, #2
 80151d2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80151d6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80151da:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80151de:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80151e2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80151e6:	f8cd c020 	str.w	ip, [sp, #32]
 80151ea:	d030      	beq.n	801524e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80151ec:	2bff      	cmp	r3, #255	; 0xff
 80151ee:	d12c      	bne.n	801524a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80151f0:	4560      	cmp	r0, ip
 80151f2:	bf14      	ite	ne
 80151f4:	2004      	movne	r0, #4
 80151f6:	2001      	moveq	r0, #1
 80151f8:	9204      	str	r2, [sp, #16]
 80151fa:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80151fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015202:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015206:	f8ad 6018 	strh.w	r6, [sp, #24]
 801520a:	f8ad 501a 	strh.w	r5, [sp, #26]
 801520e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015212:	4620      	mov	r0, r4
 8015214:	f7ff ff5e 	bl	80150d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015218:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801521c:	4603      	mov	r3, r0
 801521e:	4651      	mov	r1, sl
 8015220:	4620      	mov	r0, r4
 8015222:	e9cd 9700 	strd	r9, r7, [sp]
 8015226:	f7ff ffb7 	bl	8015198 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801522a:	f8ad 901e 	strh.w	r9, [sp, #30]
 801522e:	9005      	str	r0, [sp, #20]
 8015230:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015234:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015238:	b106      	cbz	r6, 801523c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801523a:	b98d      	cbnz	r5, 8015260 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801523c:	4b12      	ldr	r3, [pc, #72]	; (8015288 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801523e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015242:	4a12      	ldr	r2, [pc, #72]	; (801528c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015244:	4812      	ldr	r0, [pc, #72]	; (8015290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015246:	f00f fc35 	bl	8024ab4 <__assert_func>
 801524a:	2004      	movs	r0, #4
 801524c:	e7d4      	b.n	80151f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801524e:	2bff      	cmp	r3, #255	; 0xff
 8015250:	d104      	bne.n	801525c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015252:	2800      	cmp	r0, #0
 8015254:	bf14      	ite	ne
 8015256:	2040      	movne	r0, #64	; 0x40
 8015258:	2020      	moveq	r0, #32
 801525a:	e7cd      	b.n	80151f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801525c:	2040      	movs	r0, #64	; 0x40
 801525e:	e7cb      	b.n	80151f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015260:	6823      	ldr	r3, [r4, #0]
 8015262:	4620      	mov	r0, r4
 8015264:	9d02      	ldr	r5, [sp, #8]
 8015266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015268:	4798      	blx	r3
 801526a:	4228      	tst	r0, r5
 801526c:	d104      	bne.n	8015278 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801526e:	4b09      	ldr	r3, [pc, #36]	; (8015294 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015270:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015274:	4a05      	ldr	r2, [pc, #20]	; (801528c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015276:	e7e5      	b.n	8015244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015278:	6860      	ldr	r0, [r4, #4]
 801527a:	a902      	add	r1, sp, #8
 801527c:	6803      	ldr	r3, [r0, #0]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	4798      	blx	r3
 8015282:	b00a      	add	sp, #40	; 0x28
 8015284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015288:	08027efe 	.word	0x08027efe
 801528c:	080281b2 	.word	0x080281b2
 8015290:	08027e82 	.word	0x08027e82
 8015294:	08027f36 	.word	0x08027f36

08015298 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015298:	b510      	push	{r4, lr}
 801529a:	b08a      	sub	sp, #40	; 0x28
 801529c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80152a0:	9408      	str	r4, [sp, #32]
 80152a2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80152a6:	9407      	str	r4, [sp, #28]
 80152a8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80152ac:	9406      	str	r4, [sp, #24]
 80152ae:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80152b2:	9405      	str	r4, [sp, #20]
 80152b4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80152b8:	9404      	str	r4, [sp, #16]
 80152ba:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80152be:	9403      	str	r4, [sp, #12]
 80152c0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80152c4:	9402      	str	r4, [sp, #8]
 80152c6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80152ca:	e9cd 3400 	strd	r3, r4, [sp]
 80152ce:	4613      	mov	r3, r2
 80152d0:	2200      	movs	r2, #0
 80152d2:	f7ff ff71 	bl	80151b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80152d6:	b00a      	add	sp, #40	; 0x28
 80152d8:	bd10      	pop	{r4, pc}
	...

080152dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80152dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152de:	b08b      	sub	sp, #44	; 0x2c
 80152e0:	4616      	mov	r6, r2
 80152e2:	460d      	mov	r5, r1
 80152e4:	461f      	mov	r7, r3
 80152e6:	4604      	mov	r4, r0
 80152e8:	f7ed f914 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 80152ec:	6803      	ldr	r3, [r0, #0]
 80152ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152f0:	4798      	blx	r3
 80152f2:	4b0e      	ldr	r3, [pc, #56]	; (801532c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	4629      	mov	r1, r5
 80152f8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	4620      	mov	r0, r4
 8015300:	9306      	str	r3, [sp, #24]
 8015302:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015306:	9305      	str	r3, [sp, #20]
 8015308:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801530c:	9304      	str	r3, [sp, #16]
 801530e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015312:	9303      	str	r3, [sp, #12]
 8015314:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015318:	9302      	str	r3, [sp, #8]
 801531a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801531e:	e9cd 7300 	strd	r7, r3, [sp]
 8015322:	4633      	mov	r3, r6
 8015324:	f7ff ff48 	bl	80151b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015328:	b00b      	add	sp, #44	; 0x2c
 801532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801532c:	2000baf6 	.word	0x2000baf6

08015330 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015334:	461f      	mov	r7, r3
 8015336:	4b14      	ldr	r3, [pc, #80]	; (8015388 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015338:	b08a      	sub	sp, #40	; 0x28
 801533a:	4616      	mov	r6, r2
 801533c:	f8b3 8000 	ldrh.w	r8, [r3]
 8015340:	460d      	mov	r5, r1
 8015342:	4604      	mov	r4, r0
 8015344:	f7ed f8e6 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015348:	6803      	ldr	r3, [r0, #0]
 801534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801534c:	4798      	blx	r3
 801534e:	2302      	movs	r3, #2
 8015350:	9008      	str	r0, [sp, #32]
 8015352:	2200      	movs	r2, #0
 8015354:	4629      	mov	r1, r5
 8015356:	4620      	mov	r0, r4
 8015358:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801535c:	2301      	movs	r3, #1
 801535e:	9305      	str	r3, [sp, #20]
 8015360:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015364:	9304      	str	r3, [sp, #16]
 8015366:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801536a:	9303      	str	r3, [sp, #12]
 801536c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015370:	9302      	str	r3, [sp, #8]
 8015372:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015376:	e9cd 7300 	strd	r7, r3, [sp]
 801537a:	4633      	mov	r3, r6
 801537c:	f7ff ff1c 	bl	80151b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015380:	b00a      	add	sp, #40	; 0x28
 8015382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015386:	bf00      	nop
 8015388:	2000baf6 	.word	0x2000baf6

0801538c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	b08b      	sub	sp, #44	; 0x2c
 8015392:	469b      	mov	fp, r3
 8015394:	4604      	mov	r4, r0
 8015396:	4692      	mov	sl, r2
 8015398:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801539c:	2600      	movs	r6, #0
 801539e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80153a2:	4689      	mov	r9, r1
 80153a4:	2fff      	cmp	r7, #255	; 0xff
 80153a6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80153aa:	9608      	str	r6, [sp, #32]
 80153ac:	bf14      	ite	ne
 80153ae:	2308      	movne	r3, #8
 80153b0:	2302      	moveq	r3, #2
 80153b2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80153b6:	f7ff fe8d 	bl	80150d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153ba:	465a      	mov	r2, fp
 80153bc:	4603      	mov	r3, r0
 80153be:	4651      	mov	r1, sl
 80153c0:	4620      	mov	r0, r4
 80153c2:	e9cd 8500 	strd	r8, r5, [sp]
 80153c6:	f7ff fee7 	bl	8015198 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80153ca:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80153ce:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80153d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80153d6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80153da:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80153de:	f8ad 301a 	strh.w	r3, [sp, #26]
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	9d02      	ldr	r5, [sp, #8]
 80153e6:	9005      	str	r0, [sp, #20]
 80153e8:	4620      	mov	r0, r4
 80153ea:	f8ad 601c 	strh.w	r6, [sp, #28]
 80153ee:	f8ad 801e 	strh.w	r8, [sp, #30]
 80153f2:	f8cd 9020 	str.w	r9, [sp, #32]
 80153f6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80153fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fc:	4798      	blx	r3
 80153fe:	4228      	tst	r0, r5
 8015400:	d106      	bne.n	8015410 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015402:	4b07      	ldr	r3, [pc, #28]	; (8015420 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015404:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015408:	4a06      	ldr	r2, [pc, #24]	; (8015424 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801540a:	4807      	ldr	r0, [pc, #28]	; (8015428 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801540c:	f00f fb52 	bl	8024ab4 <__assert_func>
 8015410:	6860      	ldr	r0, [r4, #4]
 8015412:	a902      	add	r1, sp, #8
 8015414:	6803      	ldr	r3, [r0, #0]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	4798      	blx	r3
 801541a:	b00b      	add	sp, #44	; 0x2c
 801541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015420:	08027f36 	.word	0x08027f36
 8015424:	0802827b 	.word	0x0802827b
 8015428:	08027e82 	.word	0x08027e82

0801542c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801542c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015430:	461f      	mov	r7, r3
 8015432:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015434:	460d      	mov	r5, r1
 8015436:	4616      	mov	r6, r2
 8015438:	f8b3 8000 	ldrh.w	r8, [r3]
 801543c:	4604      	mov	r4, r0
 801543e:	f7ed f869 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015442:	6803      	ldr	r3, [r0, #0]
 8015444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015446:	4798      	blx	r3
 8015448:	463b      	mov	r3, r7
 801544a:	4632      	mov	r2, r6
 801544c:	4629      	mov	r1, r5
 801544e:	e9cd 8000 	strd	r8, r0, [sp]
 8015452:	4620      	mov	r0, r4
 8015454:	f7ff fea0 	bl	8015198 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015458:	b002      	add	sp, #8
 801545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801545e:	bf00      	nop
 8015460:	2000baf6 	.word	0x2000baf6

08015464 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015468:	4698      	mov	r8, r3
 801546a:	b088      	sub	sp, #32
 801546c:	2300      	movs	r3, #0
 801546e:	4617      	mov	r7, r2
 8015470:	4604      	mov	r4, r0
 8015472:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015476:	9306      	str	r3, [sp, #24]
 8015478:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801547c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015480:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015484:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015488:	e9cd 3100 	strd	r3, r1, [sp]
 801548c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015490:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015494:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015498:	f88d 301c 	strb.w	r3, [sp, #28]
 801549c:	f7ff fe1a 	bl	80150d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80154a0:	4642      	mov	r2, r8
 80154a2:	4603      	mov	r3, r0
 80154a4:	4639      	mov	r1, r7
 80154a6:	4620      	mov	r0, r4
 80154a8:	f7ff ffc0 	bl	801542c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80154ac:	4b16      	ldr	r3, [pc, #88]	; (8015508 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80154ae:	9003      	str	r0, [sp, #12]
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80154b6:	f7ed f82d 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 80154ba:	6803      	ldr	r3, [r0, #0]
 80154bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154be:	4798      	blx	r3
 80154c0:	f88d 001e 	strb.w	r0, [sp, #30]
 80154c4:	f88d 001d 	strb.w	r0, [sp, #29]
 80154c8:	b106      	cbz	r6, 80154cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80154ca:	b935      	cbnz	r5, 80154da <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80154cc:	4b0f      	ldr	r3, [pc, #60]	; (801550c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80154ce:	f240 11cd 	movw	r1, #461	; 0x1cd
 80154d2:	4a0f      	ldr	r2, [pc, #60]	; (8015510 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80154d4:	480f      	ldr	r0, [pc, #60]	; (8015514 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80154d6:	f00f faed 	bl	8024ab4 <__assert_func>
 80154da:	6823      	ldr	r3, [r4, #0]
 80154dc:	4620      	mov	r0, r4
 80154de:	9d00      	ldr	r5, [sp, #0]
 80154e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154e2:	4798      	blx	r3
 80154e4:	4228      	tst	r0, r5
 80154e6:	d104      	bne.n	80154f2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80154e8:	4b0b      	ldr	r3, [pc, #44]	; (8015518 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80154ea:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80154ee:	4a08      	ldr	r2, [pc, #32]	; (8015510 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80154f0:	e7f0      	b.n	80154d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80154f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154f4:	4669      	mov	r1, sp
 80154f6:	6860      	ldr	r0, [r4, #4]
 80154f8:	9306      	str	r3, [sp, #24]
 80154fa:	6803      	ldr	r3, [r0, #0]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	4798      	blx	r3
 8015500:	b008      	add	sp, #32
 8015502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015506:	bf00      	nop
 8015508:	2000baf6 	.word	0x2000baf6
 801550c:	08027efe 	.word	0x08027efe
 8015510:	08028064 	.word	0x08028064
 8015514:	08027e82 	.word	0x08027e82
 8015518:	08027f36 	.word	0x08027f36

0801551c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801551c:	b570      	push	{r4, r5, r6, lr}
 801551e:	b08a      	sub	sp, #40	; 0x28
 8015520:	4604      	mov	r4, r0
 8015522:	466b      	mov	r3, sp
 8015524:	e883 0006 	stmia.w	r3, {r1, r2}
 8015528:	4b1f      	ldr	r3, [pc, #124]	; (80155a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	b933      	cbnz	r3, 801553c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801552e:	4b1f      	ldr	r3, [pc, #124]	; (80155ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015530:	f240 11f9 	movw	r1, #505	; 0x1f9
 8015534:	4a1e      	ldr	r2, [pc, #120]	; (80155b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015536:	481f      	ldr	r0, [pc, #124]	; (80155b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015538:	f00f fabc 	bl	8024ab4 <__assert_func>
 801553c:	2300      	movs	r3, #0
 801553e:	f8bd 5000 	ldrh.w	r5, [sp]
 8015542:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015546:	9308      	str	r3, [sp, #32]
 8015548:	2301      	movs	r3, #1
 801554a:	9302      	str	r3, [sp, #8]
 801554c:	6803      	ldr	r3, [r0, #0]
 801554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015550:	4798      	blx	r3
 8015552:	4632      	mov	r2, r6
 8015554:	4629      	mov	r1, r5
 8015556:	4603      	mov	r3, r0
 8015558:	4620      	mov	r0, r4
 801555a:	f7ff ff67 	bl	801542c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801555e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015560:	9003      	str	r0, [sp, #12]
 8015562:	9305      	str	r3, [sp, #20]
 8015564:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015568:	f8ad 3018 	strh.w	r3, [sp, #24]
 801556c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015570:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015574:	4b10      	ldr	r3, [pc, #64]	; (80155b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015576:	881b      	ldrh	r3, [r3, #0]
 8015578:	f8ad 301c 	strh.w	r3, [sp, #28]
 801557c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015580:	f7ec ffc8 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015584:	6803      	ldr	r3, [r0, #0]
 8015586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015588:	4798      	blx	r3
 801558a:	23ff      	movs	r3, #255	; 0xff
 801558c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015590:	a902      	add	r1, sp, #8
 8015592:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015596:	6860      	ldr	r0, [r4, #4]
 8015598:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801559c:	6803      	ldr	r3, [r0, #0]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	4798      	blx	r3
 80155a2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80155a4:	b00a      	add	sp, #40	; 0x28
 80155a6:	bd70      	pop	{r4, r5, r6, pc}
 80155a8:	2000bafb 	.word	0x2000bafb
 80155ac:	08027dcf 	.word	0x08027dcf
 80155b0:	08028108 	.word	0x08028108
 80155b4:	08027e82 	.word	0x08027e82
 80155b8:	2000baf6 	.word	0x2000baf6

080155bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80155bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155be:	b08b      	sub	sp, #44	; 0x2c
 80155c0:	4604      	mov	r4, r0
 80155c2:	466d      	mov	r5, sp
 80155c4:	e885 0006 	stmia.w	r5, {r1, r2}
 80155c8:	461d      	mov	r5, r3
 80155ca:	2300      	movs	r3, #0
 80155cc:	f8bd 6000 	ldrh.w	r6, [sp]
 80155d0:	9308      	str	r3, [sp, #32]
 80155d2:	2301      	movs	r3, #1
 80155d4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80155d8:	9302      	str	r3, [sp, #8]
 80155da:	6803      	ldr	r3, [r0, #0]
 80155dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155de:	4798      	blx	r3
 80155e0:	463a      	mov	r2, r7
 80155e2:	4631      	mov	r1, r6
 80155e4:	4603      	mov	r3, r0
 80155e6:	4620      	mov	r0, r4
 80155e8:	f7ff ff20 	bl	801542c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80155ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80155f0:	9003      	str	r0, [sp, #12]
 80155f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80155f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80155fa:	9505      	str	r5, [sp, #20]
 80155fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015600:	4b0d      	ldr	r3, [pc, #52]	; (8015638 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8015602:	881b      	ldrh	r3, [r3, #0]
 8015604:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801560a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801560e:	f7ec ff81 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015612:	6803      	ldr	r3, [r0, #0]
 8015614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015616:	4798      	blx	r3
 8015618:	23ff      	movs	r3, #255	; 0xff
 801561a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801561e:	a902      	add	r1, sp, #8
 8015620:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015624:	6860      	ldr	r0, [r4, #4]
 8015626:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801562a:	6803      	ldr	r3, [r0, #0]
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	4798      	blx	r3
 8015630:	4628      	mov	r0, r5
 8015632:	b00b      	add	sp, #44	; 0x2c
 8015634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015636:	bf00      	nop
 8015638:	2000baf6 	.word	0x2000baf6

0801563c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801563c:	b570      	push	{r4, r5, r6, lr}
 801563e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015642:	4604      	mov	r4, r0
 8015644:	b19b      	cbz	r3, 801566e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015646:	2002      	movs	r0, #2
 8015648:	f7ec ff24 	bl	8002494 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801564c:	2300      	movs	r3, #0
 801564e:	4620      	mov	r0, r4
 8015650:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015654:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015658:	6823      	ldr	r3, [r4, #0]
 801565a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801565e:	f7ff fd39 	bl	80150d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015662:	4601      	mov	r1, r0
 8015664:	4620      	mov	r0, r4
 8015666:	462b      	mov	r3, r5
 8015668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801566c:	4718      	bx	r3
 801566e:	bd70      	pop	{r4, r5, r6, pc}

08015670 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015670:	4770      	bx	lr

08015672 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015672:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015676:	1a13      	subs	r3, r2, r0
 8015678:	4258      	negs	r0, r3
 801567a:	4158      	adcs	r0, r3
 801567c:	4770      	bx	lr

0801567e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801567e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015682:	1a9b      	subs	r3, r3, r2
 8015684:	2b00      	cmp	r3, #0
 8015686:	bfdc      	itt	le
 8015688:	6882      	ldrle	r2, [r0, #8]
 801568a:	189b      	addle	r3, r3, r2
 801568c:	2b01      	cmp	r3, #1
 801568e:	bfcc      	ite	gt
 8015690:	2000      	movgt	r0, #0
 8015692:	2001      	movle	r0, #1
 8015694:	4770      	bx	lr

08015696 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015696:	6902      	ldr	r2, [r0, #16]
 8015698:	6840      	ldr	r0, [r0, #4]
 801569a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801569e:	4770      	bx	lr

080156a0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80156a0:	6803      	ldr	r3, [r0, #0]
 80156a2:	691b      	ldr	r3, [r3, #16]
 80156a4:	4718      	bx	r3

080156a6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80156a6:	4770      	bx	lr

080156a8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80156a8:	4770      	bx	lr
	...

080156ac <_ZN8touchgfx13DMA_Interface7executeEv>:
 80156ac:	2301      	movs	r3, #1
 80156ae:	b570      	push	{r4, r5, r6, lr}
 80156b0:	7203      	strb	r3, [r0, #8]
 80156b2:	4604      	mov	r4, r0
 80156b4:	6840      	ldr	r0, [r0, #4]
 80156b6:	6803      	ldr	r3, [r0, #0]
 80156b8:	699b      	ldr	r3, [r3, #24]
 80156ba:	4798      	blx	r3
 80156bc:	6803      	ldr	r3, [r0, #0]
 80156be:	4605      	mov	r5, r0
 80156c0:	2b08      	cmp	r3, #8
 80156c2:	d01e      	beq.n	8015702 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80156c4:	d80b      	bhi.n	80156de <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80156c6:	2b02      	cmp	r3, #2
 80156c8:	d027      	beq.n	801571a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80156ca:	2b04      	cmp	r3, #4
 80156cc:	d011      	beq.n	80156f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d028      	beq.n	8015724 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80156d2:	4b17      	ldr	r3, [pc, #92]	; (8015730 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80156d4:	218b      	movs	r1, #139	; 0x8b
 80156d6:	4a17      	ldr	r2, [pc, #92]	; (8015734 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80156d8:	4817      	ldr	r0, [pc, #92]	; (8015738 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80156da:	f00f f9eb 	bl	8024ab4 <__assert_func>
 80156de:	2b40      	cmp	r3, #64	; 0x40
 80156e0:	d020      	beq.n	8015724 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80156e2:	d801      	bhi.n	80156e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80156e4:	2b20      	cmp	r3, #32
 80156e6:	e7f3      	b.n	80156d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80156e8:	2b80      	cmp	r3, #128	; 0x80
 80156ea:	d01b      	beq.n	8015724 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80156ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156f0:	e7ee      	b.n	80156d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80156f2:	6823      	ldr	r3, [r4, #0]
 80156f4:	7f01      	ldrb	r1, [r0, #28]
 80156f6:	4620      	mov	r0, r4
 80156f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156fa:	4798      	blx	r3
 80156fc:	6823      	ldr	r3, [r4, #0]
 80156fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015700:	e006      	b.n	8015710 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015702:	6823      	ldr	r3, [r4, #0]
 8015704:	7f01      	ldrb	r1, [r0, #28]
 8015706:	4620      	mov	r0, r4
 8015708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801570a:	4798      	blx	r3
 801570c:	6823      	ldr	r3, [r4, #0]
 801570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015710:	4629      	mov	r1, r5
 8015712:	4620      	mov	r0, r4
 8015714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015718:	4718      	bx	r3
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	4620      	mov	r0, r4
 801571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015720:	4798      	blx	r3
 8015722:	e7f3      	b.n	801570c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8015724:	6823      	ldr	r3, [r4, #0]
 8015726:	4620      	mov	r0, r4
 8015728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801572a:	4798      	blx	r3
 801572c:	e7e6      	b.n	80156fc <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801572e:	bf00      	nop
 8015730:	08028359 	.word	0x08028359
 8015734:	08028468 	.word	0x08028468
 8015738:	0802837e 	.word	0x0802837e

0801573c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	4604      	mov	r4, r0
 8015740:	460e      	mov	r6, r1
 8015742:	6860      	ldr	r0, [r4, #4]
 8015744:	6803      	ldr	r3, [r0, #0]
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	4798      	blx	r3
 801574a:	2800      	cmp	r0, #0
 801574c:	d1f9      	bne.n	8015742 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801574e:	4d0b      	ldr	r5, [pc, #44]	; (801577c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8015750:	6828      	ldr	r0, [r5, #0]
 8015752:	6803      	ldr	r3, [r0, #0]
 8015754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015756:	4798      	blx	r3
 8015758:	f7ed f9be 	bl	8002ad8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801575c:	6860      	ldr	r0, [r4, #4]
 801575e:	4631      	mov	r1, r6
 8015760:	6803      	ldr	r3, [r0, #0]
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	4798      	blx	r3
 8015766:	6823      	ldr	r3, [r4, #0]
 8015768:	4620      	mov	r0, r4
 801576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801576c:	4798      	blx	r3
 801576e:	6828      	ldr	r0, [r5, #0]
 8015770:	6803      	ldr	r3, [r0, #0]
 8015772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015778:	4718      	bx	r3
 801577a:	bf00      	nop
 801577c:	2000bafc 	.word	0x2000bafc

08015780 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015780:	b508      	push	{r3, lr}
 8015782:	f7ed f98d 	bl	8002aa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801578a:	f7ed b997 	b.w	8002abc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801578e <_ZN8touchgfx13DMA_Interface5startEv>:
 801578e:	b510      	push	{r4, lr}
 8015790:	4604      	mov	r4, r0
 8015792:	6840      	ldr	r0, [r0, #4]
 8015794:	6803      	ldr	r3, [r0, #0]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	4798      	blx	r3
 801579a:	b948      	cbnz	r0, 80157b0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801579c:	7a63      	ldrb	r3, [r4, #9]
 801579e:	b13b      	cbz	r3, 80157b0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80157a0:	7a23      	ldrb	r3, [r4, #8]
 80157a2:	b92b      	cbnz	r3, 80157b0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80157a4:	6823      	ldr	r3, [r4, #0]
 80157a6:	4620      	mov	r0, r4
 80157a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157ae:	4718      	bx	r3
 80157b0:	bd10      	pop	{r4, pc}
	...

080157b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80157b4:	b510      	push	{r4, lr}
 80157b6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80157ba:	1b12      	subs	r2, r2, r4
 80157bc:	2a00      	cmp	r2, #0
 80157be:	bfdc      	itt	le
 80157c0:	6883      	ldrle	r3, [r0, #8]
 80157c2:	18d2      	addle	r2, r2, r3
 80157c4:	2a01      	cmp	r2, #1
 80157c6:	dd18      	ble.n	80157fa <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80157c8:	6843      	ldr	r3, [r0, #4]
 80157ca:	f101 021c 	add.w	r2, r1, #28
 80157ce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80157d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80157d6:	4291      	cmp	r1, r2
 80157d8:	f843 4b04 	str.w	r4, [r3], #4
 80157dc:	d1f9      	bne.n	80157d2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80157de:	880a      	ldrh	r2, [r1, #0]
 80157e0:	801a      	strh	r2, [r3, #0]
 80157e2:	788a      	ldrb	r2, [r1, #2]
 80157e4:	709a      	strb	r2, [r3, #2]
 80157e6:	68c3      	ldr	r3, [r0, #12]
 80157e8:	6882      	ldr	r2, [r0, #8]
 80157ea:	f3bf 8f5b 	dmb	ish
 80157ee:	3301      	adds	r3, #1
 80157f0:	429a      	cmp	r2, r3
 80157f2:	bfd8      	it	le
 80157f4:	1a9b      	suble	r3, r3, r2
 80157f6:	60c3      	str	r3, [r0, #12]
 80157f8:	bd10      	pop	{r4, pc}
 80157fa:	4b03      	ldr	r3, [pc, #12]	; (8015808 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80157fc:	2139      	movs	r1, #57	; 0x39
 80157fe:	4a03      	ldr	r2, [pc, #12]	; (801580c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015800:	4803      	ldr	r0, [pc, #12]	; (8015810 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015802:	f00f f957 	bl	8024ab4 <__assert_func>
 8015806:	bf00      	nop
 8015808:	080283a4 	.word	0x080283a4
 801580c:	08028498 	.word	0x08028498
 8015810:	0802837e 	.word	0x0802837e

08015814 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015814:	b510      	push	{r4, lr}
 8015816:	6803      	ldr	r3, [r0, #0]
 8015818:	4604      	mov	r4, r0
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	4798      	blx	r3
 801581e:	b128      	cbz	r0, 801582c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8015820:	4b07      	ldr	r3, [pc, #28]	; (8015840 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8015822:	213f      	movs	r1, #63	; 0x3f
 8015824:	4a07      	ldr	r2, [pc, #28]	; (8015844 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015826:	4808      	ldr	r0, [pc, #32]	; (8015848 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015828:	f00f f944 	bl	8024ab4 <__assert_func>
 801582c:	6923      	ldr	r3, [r4, #16]
 801582e:	68a2      	ldr	r2, [r4, #8]
 8015830:	f3bf 8f5b 	dmb	ish
 8015834:	3301      	adds	r3, #1
 8015836:	429a      	cmp	r2, r3
 8015838:	bfd8      	it	le
 801583a:	1a9b      	suble	r3, r3, r2
 801583c:	6123      	str	r3, [r4, #16]
 801583e:	bd10      	pop	{r4, pc}
 8015840:	080283c7 	.word	0x080283c7
 8015844:	080284e6 	.word	0x080284e6
 8015848:	0802837e 	.word	0x0802837e

0801584c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801584c:	b570      	push	{r4, r5, r6, lr}
 801584e:	4604      	mov	r4, r0
 8015850:	6840      	ldr	r0, [r0, #4]
 8015852:	6803      	ldr	r3, [r0, #0]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	4798      	blx	r3
 8015858:	4605      	mov	r5, r0
 801585a:	b930      	cbnz	r0, 801586a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801585c:	7a23      	ldrb	r3, [r4, #8]
 801585e:	b123      	cbz	r3, 801586a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015860:	6860      	ldr	r0, [r4, #4]
 8015862:	6803      	ldr	r3, [r0, #0]
 8015864:	695b      	ldr	r3, [r3, #20]
 8015866:	4798      	blx	r3
 8015868:	7225      	strb	r5, [r4, #8]
 801586a:	6860      	ldr	r0, [r4, #4]
 801586c:	6803      	ldr	r3, [r0, #0]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	4798      	blx	r3
 8015872:	b928      	cbnz	r0, 8015880 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015874:	6823      	ldr	r3, [r4, #0]
 8015876:	4620      	mov	r0, r4
 8015878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801587a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801587e:	4718      	bx	r3
 8015880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015884:	f7ed b934 	b.w	8002af0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015888 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015888:	b510      	push	{r4, lr}
 801588a:	6082      	str	r2, [r0, #8]
 801588c:	2200      	movs	r2, #0
 801588e:	4c03      	ldr	r4, [pc, #12]	; (801589c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015890:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015894:	e9c0 4100 	strd	r4, r1, [r0]
 8015898:	bd10      	pop	{r4, pc}
 801589a:	bf00      	nop
 801589c:	0802844c 	.word	0x0802844c

080158a0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80158a0:	6840      	ldr	r0, [r0, #4]
 80158a2:	6803      	ldr	r3, [r0, #0]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4718      	bx	r3

080158a8 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 80158a8:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80158ac:	4602      	mov	r2, r0
 80158ae:	cb03      	ldmia	r3!, {r0, r1}
 80158b0:	6010      	str	r0, [r2, #0]
 80158b2:	4610      	mov	r0, r2
 80158b4:	6051      	str	r1, [r2, #4]
 80158b6:	4770      	bx	lr

080158b8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80158b8:	b507      	push	{r0, r1, r2, lr}
 80158ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80158be:	ab01      	add	r3, sp, #4
 80158c0:	6809      	ldr	r1, [r1, #0]
 80158c2:	6800      	ldr	r0, [r0, #0]
 80158c4:	f003 fcc7 	bl	8019256 <_ZN8touchgfx6muldivElllRl>
 80158c8:	b003      	add	sp, #12
 80158ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080158d0 <_ZN8touchgfx7CWRUtil4sineEi>:
 80158d0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80158d4:	fb90 f3f2 	sdiv	r3, r0, r2
 80158d8:	fb03 0312 	mls	r3, r3, r2, r0
 80158dc:	4413      	add	r3, r2
 80158de:	fb93 f0f2 	sdiv	r0, r3, r2
 80158e2:	fb02 3010 	mls	r0, r2, r0, r3
 80158e6:	4b0a      	ldr	r3, [pc, #40]	; (8015910 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80158e8:	285a      	cmp	r0, #90	; 0x5a
 80158ea:	dc02      	bgt.n	80158f2 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80158ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80158f0:	4770      	bx	lr
 80158f2:	28b4      	cmp	r0, #180	; 0xb4
 80158f4:	dc02      	bgt.n	80158fc <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80158f6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80158fa:	e7f7      	b.n	80158ec <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80158fc:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8015900:	bfd4      	ite	le
 8015902:	38b4      	suble	r0, #180	; 0xb4
 8015904:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8015908:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801590c:	4240      	negs	r0, r0
 801590e:	4770      	bx	lr
 8015910:	08028516 	.word	0x08028516

08015914 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8015914:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8015918:	fb90 f3f2 	sdiv	r3, r0, r2
 801591c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801591e:	fb03 0012 	mls	r0, r3, r2, r0
 8015922:	4410      	add	r0, r2
 8015924:	fb90 f4f2 	sdiv	r4, r0, r2
 8015928:	fb02 0414 	mls	r4, r2, r4, r0
 801592c:	f004 061f 	and.w	r6, r4, #31
 8015930:	1164      	asrs	r4, r4, #5
 8015932:	4620      	mov	r0, r4
 8015934:	f7ff ffcc 	bl	80158d0 <_ZN8touchgfx7CWRUtil4sineEi>
 8015938:	4605      	mov	r5, r0
 801593a:	b90e      	cbnz	r6, 8015940 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 801593c:	b002      	add	sp, #8
 801593e:	bd70      	pop	{r4, r5, r6, pc}
 8015940:	1c60      	adds	r0, r4, #1
 8015942:	f7ff ffc5 	bl	80158d0 <_ZN8touchgfx7CWRUtil4sineEi>
 8015946:	ab01      	add	r3, sp, #4
 8015948:	2220      	movs	r2, #32
 801594a:	4631      	mov	r1, r6
 801594c:	1b40      	subs	r0, r0, r5
 801594e:	f003 fc82 	bl	8019256 <_ZN8touchgfx6muldivElllRl>
 8015952:	4428      	add	r0, r5
 8015954:	e7f2      	b.n	801593c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08015956 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8015956:	b507      	push	{r0, r1, r2, lr}
 8015958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801595c:	ab01      	add	r3, sp, #4
 801595e:	0140      	lsls	r0, r0, #5
 8015960:	f003 fc79 	bl	8019256 <_ZN8touchgfx6muldivElllRl>
 8015964:	2320      	movs	r3, #32
 8015966:	fb90 f0f3 	sdiv	r0, r0, r3
 801596a:	b003      	add	sp, #12
 801596c:	f85d fb04 	ldr.w	pc, [sp], #4

08015970 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8015970:	b510      	push	{r4, lr}
 8015972:	4604      	mov	r4, r0
 8015974:	f000 fb4c 	bl	8016010 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8015978:	4b07      	ldr	r3, [pc, #28]	; (8015998 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 801597a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801597e:	4620      	mov	r0, r4
 8015980:	6023      	str	r3, [r4, #0]
 8015982:	2300      	movs	r3, #0
 8015984:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
 8015988:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801598c:	63a3      	str	r3, [r4, #56]	; 0x38
 801598e:	60a3      	str	r3, [r4, #8]
 8015990:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8015994:	bd10      	pop	{r4, pc}
 8015996:	bf00      	nop
 8015998:	080285d4 	.word	0x080285d4

0801599c <_ZN8touchgfx13AbstractShapeD1Ev>:
 801599c:	4b03      	ldr	r3, [pc, #12]	; (80159ac <_ZN8touchgfx13AbstractShapeD1Ev+0x10>)
 801599e:	b510      	push	{r4, lr}
 80159a0:	4604      	mov	r4, r0
 80159a2:	6003      	str	r3, [r0, #0]
 80159a4:	f000 fb52 	bl	801604c <_ZN8touchgfx12CanvasWidgetD1Ev>
 80159a8:	4620      	mov	r0, r4
 80159aa:	bd10      	pop	{r4, pc}
 80159ac:	080285d4 	.word	0x080285d4

080159b0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 80159b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b4:	2500      	movs	r5, #0
 80159b6:	6803      	ldr	r3, [r0, #0]
 80159b8:	b087      	sub	sp, #28
 80159ba:	4604      	mov	r4, r0
 80159bc:	462e      	mov	r6, r5
 80159be:	46a8      	mov	r8, r5
 80159c0:	462f      	mov	r7, r5
 80159c2:	46a9      	mov	r9, r5
 80159c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159c6:	4798      	blx	r3
 80159c8:	9000      	str	r0, [sp, #0]
 80159ca:	9b00      	ldr	r3, [sp, #0]
 80159cc:	429d      	cmp	r5, r3
 80159ce:	da7f      	bge.n	8015ad0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x120>
 80159d0:	6823      	ldr	r3, [r4, #0]
 80159d2:	4629      	mov	r1, r5
 80159d4:	4620      	mov	r0, r4
 80159d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159da:	4798      	blx	r3
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	4682      	mov	sl, r0
 80159e0:	4629      	mov	r1, r5
 80159e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159e6:	4620      	mov	r0, r4
 80159e8:	4798      	blx	r3
 80159ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80159ec:	4683      	mov	fp, r0
 80159ee:	4650      	mov	r0, sl
 80159f0:	f7ff ffb1 	bl	8015956 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80159f4:	9002      	str	r0, [sp, #8]
 80159f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80159f8:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80159fc:	f7ff ff8a 	bl	8015914 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015a00:	a903      	add	r1, sp, #12
 8015a02:	9003      	str	r0, [sp, #12]
 8015a04:	a802      	add	r0, sp, #8
 8015a06:	f7ff ff57 	bl	80158b8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015a0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015a0e:	4402      	add	r2, r0
 8015a10:	4658      	mov	r0, fp
 8015a12:	9201      	str	r2, [sp, #4]
 8015a14:	f7ff ff9f 	bl	8015956 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8015a18:	9004      	str	r0, [sp, #16]
 8015a1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015a1c:	f7ff ff7a 	bl	8015914 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015a20:	a905      	add	r1, sp, #20
 8015a22:	9005      	str	r0, [sp, #20]
 8015a24:	a804      	add	r0, sp, #16
 8015a26:	f7ff ff47 	bl	80158b8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a2a:	9a01      	ldr	r2, [sp, #4]
 8015a2c:	1a12      	subs	r2, r2, r0
 8015a2e:	b125      	cbz	r5, 8015a3a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8a>
 8015a30:	2320      	movs	r3, #32
 8015a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a36:	429f      	cmp	r7, r3
 8015a38:	da03      	bge.n	8015a42 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x92>
 8015a3a:	2720      	movs	r7, #32
 8015a3c:	fb92 f7f7 	sdiv	r7, r2, r7
 8015a40:	b125      	cbz	r5, 8015a4c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x9c>
 8015a42:	2320      	movs	r3, #32
 8015a44:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a48:	4599      	cmp	r9, r3
 8015a4a:	dd03      	ble.n	8015a54 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa4>
 8015a4c:	f04f 0920 	mov.w	r9, #32
 8015a50:	fb92 f9f9 	sdiv	r9, r2, r9
 8015a54:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015a56:	4658      	mov	r0, fp
 8015a58:	9201      	str	r2, [sp, #4]
 8015a5a:	f7ff ff7c 	bl	8015956 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8015a5e:	9002      	str	r0, [sp, #8]
 8015a60:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015a62:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8015a66:	f7ff ff55 	bl	8015914 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015a6a:	a903      	add	r1, sp, #12
 8015a6c:	9003      	str	r0, [sp, #12]
 8015a6e:	a802      	add	r0, sp, #8
 8015a70:	f7ff ff22 	bl	80158b8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015a78:	eb00 0b03 	add.w	fp, r0, r3
 8015a7c:	4650      	mov	r0, sl
 8015a7e:	f7ff ff6a 	bl	8015956 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8015a82:	9004      	str	r0, [sp, #16]
 8015a84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015a86:	f7ff ff45 	bl	8015914 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015a8a:	a905      	add	r1, sp, #20
 8015a8c:	9005      	str	r0, [sp, #20]
 8015a8e:	a804      	add	r0, sp, #16
 8015a90:	f7ff ff12 	bl	80158b8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a94:	9a01      	ldr	r2, [sp, #4]
 8015a96:	eb00 030b 	add.w	r3, r0, fp
 8015a9a:	b125      	cbz	r5, 8015aa6 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf6>
 8015a9c:	2120      	movs	r1, #32
 8015a9e:	fb93 f1f1 	sdiv	r1, r3, r1
 8015aa2:	428e      	cmp	r6, r1
 8015aa4:	da03      	bge.n	8015aae <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfe>
 8015aa6:	2620      	movs	r6, #32
 8015aa8:	fb93 f6f6 	sdiv	r6, r3, r6
 8015aac:	b125      	cbz	r5, 8015ab8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x108>
 8015aae:	2120      	movs	r1, #32
 8015ab0:	fb93 f1f1 	sdiv	r1, r3, r1
 8015ab4:	4588      	cmp	r8, r1
 8015ab6:	dd03      	ble.n	8015ac0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x110>
 8015ab8:	f04f 0820 	mov.w	r8, #32
 8015abc:	fb93 f8f8 	sdiv	r8, r3, r8
 8015ac0:	6821      	ldr	r1, [r4, #0]
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	f8d1 a088 	ldr.w	sl, [r1, #136]	; 0x88
 8015ac8:	4629      	mov	r1, r5
 8015aca:	47d0      	blx	sl
 8015acc:	3501      	adds	r5, #1
 8015ace:	e77c      	b.n	80159ca <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8015ad0:	3701      	adds	r7, #1
 8015ad2:	3601      	adds	r6, #1
 8015ad4:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8015ad8:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 8015adc:	eba7 0909 	sub.w	r9, r7, r9
 8015ae0:	eba6 0808 	sub.w	r8, r6, r8
 8015ae4:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
 8015ae8:	f8a4 804a 	strh.w	r8, [r4, #74]	; 0x4a
 8015aec:	b007      	add	sp, #28
 8015aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015af2 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 8015af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015af4:	b0af      	sub	sp, #188	; 0xbc
 8015af6:	4604      	mov	r4, r0
 8015af8:	460a      	mov	r2, r1
 8015afa:	4601      	mov	r1, r0
 8015afc:	4668      	mov	r0, sp
 8015afe:	f00d fc0d 	bl	802331c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8015b02:	6823      	ldr	r3, [r4, #0]
 8015b04:	4620      	mov	r0, r4
 8015b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015b08:	4798      	blx	r3
 8015b0a:	4606      	mov	r6, r0
 8015b0c:	b390      	cbz	r0, 8015b74 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 8015b0e:	6823      	ldr	r3, [r4, #0]
 8015b10:	2100      	movs	r1, #0
 8015b12:	4620      	mov	r0, r4
 8015b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b18:	4798      	blx	r3
 8015b1a:	6823      	ldr	r3, [r4, #0]
 8015b1c:	4605      	mov	r5, r0
 8015b1e:	2100      	movs	r1, #0
 8015b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b24:	4620      	mov	r0, r4
 8015b26:	4798      	blx	r3
 8015b28:	4629      	mov	r1, r5
 8015b2a:	2501      	movs	r5, #1
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	4668      	mov	r0, sp
 8015b30:	f00d fdbd 	bl	80236ae <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015b34:	42b5      	cmp	r5, r6
 8015b36:	da13      	bge.n	8015b60 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x6e>
 8015b38:	6823      	ldr	r3, [r4, #0]
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b42:	4798      	blx	r3
 8015b44:	6823      	ldr	r3, [r4, #0]
 8015b46:	4607      	mov	r7, r0
 8015b48:	4629      	mov	r1, r5
 8015b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b4e:	4620      	mov	r0, r4
 8015b50:	4798      	blx	r3
 8015b52:	4639      	mov	r1, r7
 8015b54:	4602      	mov	r2, r0
 8015b56:	4668      	mov	r0, sp
 8015b58:	f00d fd38 	bl	80235cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015b5c:	3501      	adds	r5, #1
 8015b5e:	e7e9      	b.n	8015b34 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x42>
 8015b60:	4668      	mov	r0, sp
 8015b62:	f00d fea8 	bl	80238b6 <_ZN8touchgfx6Canvas6renderEv>
 8015b66:	4604      	mov	r4, r0
 8015b68:	4668      	mov	r0, sp
 8015b6a:	f00d fee5 	bl	8023938 <_ZN8touchgfx6CanvasD1Ev>
 8015b6e:	4620      	mov	r0, r4
 8015b70:	b02f      	add	sp, #188	; 0xbc
 8015b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b74:	2401      	movs	r4, #1
 8015b76:	e7f7      	b.n	8015b68 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x76>

08015b78 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8015b78:	2001      	movs	r0, #1
 8015b7a:	4770      	bx	lr

08015b7c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8015b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b80:	460d      	mov	r5, r1
 8015b82:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015b86:	b085      	sub	sp, #20
 8015b88:	4690      	mov	r8, r2
 8015b8a:	4411      	add	r1, r2
 8015b8c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015b90:	4699      	mov	r9, r3
 8015b92:	6803      	ldr	r3, [r0, #0]
 8015b94:	60c1      	str	r1, [r0, #12]
 8015b96:	4604      	mov	r4, r0
 8015b98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b9a:	440a      	add	r2, r1
 8015b9c:	6102      	str	r2, [r0, #16]
 8015b9e:	68db      	ldr	r3, [r3, #12]
 8015ba0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8015ba4:	4798      	blx	r3
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d039      	beq.n	8015c1e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8015baa:	44c8      	add	r8, r9
 8015bac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015bb0:	4445      	add	r5, r8
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	f10d 020f 	add.w	r2, sp, #15
 8015bb8:	a903      	add	r1, sp, #12
 8015bba:	4620      	mov	r0, r4
 8015bbc:	9200      	str	r2, [sp, #0]
 8015bbe:	f10d 020d 	add.w	r2, sp, #13
 8015bc2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8015bc6:	f10d 030e 	add.w	r3, sp, #14
 8015bca:	47c0      	blx	r8
 8015bcc:	b1f8      	cbz	r0, 8015c0e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8015bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015bd2:	7a20      	ldrb	r0, [r4, #8]
 8015bd4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015bd8:	4358      	muls	r0, r3
 8015bda:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8015bde:	1c43      	adds	r3, r0, #1
 8015be0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8015be4:	f817 0b01 	ldrb.w	r0, [r7], #1
 8015be8:	121b      	asrs	r3, r3, #8
 8015bea:	fb10 f003 	smulbb	r0, r0, r3
 8015bee:	b283      	uxth	r3, r0
 8015bf0:	1c58      	adds	r0, r3, #1
 8015bf2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015bf6:	6823      	ldr	r3, [r4, #0]
 8015bf8:	1200      	asrs	r0, r0, #8
 8015bfa:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8015bfe:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015c02:	28ff      	cmp	r0, #255	; 0xff
 8015c04:	d10e      	bne.n	8015c24 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8015c06:	9100      	str	r1, [sp, #0]
 8015c08:	4629      	mov	r1, r5
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	47c0      	blx	r8
 8015c0e:	68e3      	ldr	r3, [r4, #12]
 8015c10:	3e01      	subs	r6, #1
 8015c12:	f105 0503 	add.w	r5, r5, #3
 8015c16:	f103 0301 	add.w	r3, r3, #1
 8015c1a:	60e3      	str	r3, [r4, #12]
 8015c1c:	d1c9      	bne.n	8015bb2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8015c1e:	b005      	add	sp, #20
 8015c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c24:	fa1f fc80 	uxth.w	ip, r0
 8015c28:	43c0      	mvns	r0, r0
 8015c2a:	f895 e002 	ldrb.w	lr, [r5, #2]
 8015c2e:	fb12 f20c 	smulbb	r2, r2, ip
 8015c32:	b2c0      	uxtb	r0, r0
 8015c34:	fb13 f30c 	smulbb	r3, r3, ip
 8015c38:	fb0e 2200 	mla	r2, lr, r0, r2
 8015c3c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8015c40:	fb11 f10c 	smulbb	r1, r1, ip
 8015c44:	fb0e 3300 	mla	r3, lr, r0, r3
 8015c48:	f895 e000 	ldrb.w	lr, [r5]
 8015c4c:	b292      	uxth	r2, r2
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	fb0e 1000 	mla	r0, lr, r0, r1
 8015c54:	1c59      	adds	r1, r3, #1
 8015c56:	b280      	uxth	r0, r0
 8015c58:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015c5c:	1c51      	adds	r1, r2, #1
 8015c5e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015c62:	1c41      	adds	r1, r0, #1
 8015c64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015c68:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8015c6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015c70:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015c74:	9000      	str	r0, [sp, #0]
 8015c76:	e7c7      	b.n	8015c08 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08015c78 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8015c78:	f89d 0000 	ldrb.w	r0, [sp]
 8015c7c:	704b      	strb	r3, [r1, #1]
 8015c7e:	7008      	strb	r0, [r1, #0]
 8015c80:	708a      	strb	r2, [r1, #2]
 8015c82:	4770      	bx	lr

08015c84 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8015c84:	4413      	add	r3, r2
 8015c86:	7dc2      	ldrb	r2, [r0, #23]
 8015c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c8c:	4419      	add	r1, r3
 8015c8e:	7a03      	ldrb	r3, [r0, #8]
 8015c90:	435a      	muls	r2, r3
 8015c92:	1c53      	adds	r3, r2, #1
 8015c94:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015c98:	121b      	asrs	r3, r3, #8
 8015c9a:	2bff      	cmp	r3, #255	; 0xff
 8015c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c9e:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8015ca2:	d13e      	bne.n	8015d22 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8015ca4:	4427      	add	r7, r4
 8015ca6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015caa:	3103      	adds	r1, #3
 8015cac:	7d86      	ldrb	r6, [r0, #22]
 8015cae:	2bff      	cmp	r3, #255	; 0xff
 8015cb0:	d10a      	bne.n	8015cc8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8015cb2:	f801 6c03 	strb.w	r6, [r1, #-3]
 8015cb6:	7d43      	ldrb	r3, [r0, #21]
 8015cb8:	f801 3c02 	strb.w	r3, [r1, #-2]
 8015cbc:	7d03      	ldrb	r3, [r0, #20]
 8015cbe:	f801 3c01 	strb.w	r3, [r1, #-1]
 8015cc2:	42a7      	cmp	r7, r4
 8015cc4:	d1ef      	bne.n	8015ca6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8015cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	43db      	mvns	r3, r3
 8015ccc:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8015cd0:	fb16 f602 	smulbb	r6, r6, r2
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	fb05 6503 	mla	r5, r5, r3, r6
 8015cda:	b2ad      	uxth	r5, r5
 8015cdc:	1c6e      	adds	r6, r5, #1
 8015cde:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015ce2:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8015ce6:	fb16 f603 	smulbb	r6, r6, r3
 8015cea:	122d      	asrs	r5, r5, #8
 8015cec:	f801 5c03 	strb.w	r5, [r1, #-3]
 8015cf0:	7d45      	ldrb	r5, [r0, #21]
 8015cf2:	fb05 6502 	mla	r5, r5, r2, r6
 8015cf6:	b2ad      	uxth	r5, r5
 8015cf8:	1c6e      	adds	r6, r5, #1
 8015cfa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015cfe:	122d      	asrs	r5, r5, #8
 8015d00:	f801 5c02 	strb.w	r5, [r1, #-2]
 8015d04:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015d08:	7d06      	ldrb	r6, [r0, #20]
 8015d0a:	fb15 f303 	smulbb	r3, r5, r3
 8015d0e:	fb06 3202 	mla	r2, r6, r2, r3
 8015d12:	b292      	uxth	r2, r2
 8015d14:	1c53      	adds	r3, r2, #1
 8015d16:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015d1a:	1212      	asrs	r2, r2, #8
 8015d1c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8015d20:	e7cf      	b.n	8015cc2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8015d22:	b2de      	uxtb	r6, r3
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d0ce      	beq.n	8015cc6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8015d28:	3103      	adds	r1, #3
 8015d2a:	4427      	add	r7, r4
 8015d2c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8015d30:	3103      	adds	r1, #3
 8015d32:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8015d36:	fb02 f306 	mul.w	r3, r2, r6
 8015d3a:	42bc      	cmp	r4, r7
 8015d3c:	f103 0201 	add.w	r2, r3, #1
 8015d40:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015d44:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015d48:	b295      	uxth	r5, r2
 8015d4a:	ea6f 0202 	mvn.w	r2, r2
 8015d4e:	b2d3      	uxtb	r3, r2
 8015d50:	7d82      	ldrb	r2, [r0, #22]
 8015d52:	fb1c fc03 	smulbb	ip, ip, r3
 8015d56:	fb02 c205 	mla	r2, r2, r5, ip
 8015d5a:	b292      	uxth	r2, r2
 8015d5c:	f102 0c01 	add.w	ip, r2, #1
 8015d60:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015d64:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8015d68:	fb1c fc03 	smulbb	ip, ip, r3
 8015d6c:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015d70:	f801 2c06 	strb.w	r2, [r1, #-6]
 8015d74:	7d42      	ldrb	r2, [r0, #21]
 8015d76:	fb02 c205 	mla	r2, r2, r5, ip
 8015d7a:	b292      	uxth	r2, r2
 8015d7c:	f102 0c01 	add.w	ip, r2, #1
 8015d80:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015d84:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015d88:	f801 2c05 	strb.w	r2, [r1, #-5]
 8015d8c:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8015d90:	f890 c014 	ldrb.w	ip, [r0, #20]
 8015d94:	fb12 f303 	smulbb	r3, r2, r3
 8015d98:	fb0c 3305 	mla	r3, ip, r5, r3
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	f103 0201 	add.w	r2, r3, #1
 8015da2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015da6:	ea4f 2323 	mov.w	r3, r3, asr #8
 8015daa:	f801 3c04 	strb.w	r3, [r1, #-4]
 8015dae:	d1bd      	bne.n	8015d2c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8015db0:	e789      	b.n	8015cc6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08015db2 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8015db2:	b510      	push	{r4, lr}
 8015db4:	7d04      	ldrb	r4, [r0, #20]
 8015db6:	700c      	strb	r4, [r1, #0]
 8015db8:	7d41      	ldrb	r1, [r0, #21]
 8015dba:	7011      	strb	r1, [r2, #0]
 8015dbc:	7d82      	ldrb	r2, [r0, #22]
 8015dbe:	701a      	strb	r2, [r3, #0]
 8015dc0:	9b02      	ldr	r3, [sp, #8]
 8015dc2:	7dc2      	ldrb	r2, [r0, #23]
 8015dc4:	2001      	movs	r0, #1
 8015dc6:	701a      	strb	r2, [r3, #0]
 8015dc8:	bd10      	pop	{r4, pc}

08015dca <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8015dca:	b570      	push	{r4, r5, r6, lr}
 8015dcc:	4616      	mov	r6, r2
 8015dce:	4604      	mov	r4, r0
 8015dd0:	460d      	mov	r5, r1
 8015dd2:	f7ec fb9f 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015dd6:	6803      	ldr	r3, [r0, #0]
 8015dd8:	4629      	mov	r1, r5
 8015dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ddc:	4798      	blx	r3
 8015dde:	7520      	strb	r0, [r4, #20]
 8015de0:	f7ec fb98 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015de4:	6803      	ldr	r3, [r0, #0]
 8015de6:	4629      	mov	r1, r5
 8015de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dea:	4798      	blx	r3
 8015dec:	7560      	strb	r0, [r4, #21]
 8015dee:	f7ec fb91 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015df2:	6803      	ldr	r3, [r0, #0]
 8015df4:	4629      	mov	r1, r5
 8015df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015df8:	4798      	blx	r3
 8015dfa:	75e6      	strb	r6, [r4, #23]
 8015dfc:	75a0      	strb	r0, [r4, #22]
 8015dfe:	bd70      	pop	{r4, r5, r6, pc}

08015e00 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8015e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e02:	460e      	mov	r6, r1
 8015e04:	4617      	mov	r7, r2
 8015e06:	4604      	mov	r4, r0
 8015e08:	f000 f832 	bl	8015e70 <_ZN8touchgfx15AbstractPainterC1Ev>
 8015e0c:	4b12      	ldr	r3, [pc, #72]	; (8015e58 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8015e0e:	6023      	str	r3, [r4, #0]
 8015e10:	f7ec fb80 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8015e14:	6803      	ldr	r3, [r0, #0]
 8015e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e18:	4798      	blx	r3
 8015e1a:	1e43      	subs	r3, r0, #1
 8015e1c:	425d      	negs	r5, r3
 8015e1e:	415d      	adcs	r5, r3
 8015e20:	4b0e      	ldr	r3, [pc, #56]	; (8015e5c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015e26:	b130      	cbz	r0, 8015e36 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8015e28:	6803      	ldr	r3, [r0, #0]
 8015e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e2c:	4798      	blx	r3
 8015e2e:	2801      	cmp	r0, #1
 8015e30:	bf08      	it	eq
 8015e32:	f045 0501 	orreq.w	r5, r5, #1
 8015e36:	b92d      	cbnz	r5, 8015e44 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8015e38:	4b09      	ldr	r3, [pc, #36]	; (8015e60 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8015e3a:	2129      	movs	r1, #41	; 0x29
 8015e3c:	4a09      	ldr	r2, [pc, #36]	; (8015e64 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8015e3e:	480a      	ldr	r0, [pc, #40]	; (8015e68 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8015e40:	f00e fe38 	bl	8024ab4 <__assert_func>
 8015e44:	4b09      	ldr	r3, [pc, #36]	; (8015e6c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8015e46:	4620      	mov	r0, r4
 8015e48:	463a      	mov	r2, r7
 8015e4a:	4631      	mov	r1, r6
 8015e4c:	6023      	str	r3, [r4, #0]
 8015e4e:	f7ff ffbc 	bl	8015dca <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8015e52:	4620      	mov	r0, r4
 8015e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e56:	bf00      	nop
 8015e58:	08028670 	.word	0x08028670
 8015e5c:	2000bafc 	.word	0x2000bafc
 8015e60:	08028688 	.word	0x08028688
 8015e64:	0802874c 	.word	0x0802874c
 8015e68:	080286e6 	.word	0x080286e6
 8015e6c:	08028734 	.word	0x08028734

08015e70 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8015e70:	4a03      	ldr	r2, [pc, #12]	; (8015e80 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8015e72:	6002      	str	r2, [r0, #0]
 8015e74:	2200      	movs	r2, #0
 8015e76:	6042      	str	r2, [r0, #4]
 8015e78:	22ff      	movs	r2, #255	; 0xff
 8015e7a:	7202      	strb	r2, [r0, #8]
 8015e7c:	4770      	bx	lr
 8015e7e:	bf00      	nop
 8015e80:	08028790 	.word	0x08028790

08015e84 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8015e84:	4770      	bx	lr

08015e86 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8015e86:	8081      	strh	r1, [r0, #4]
 8015e88:	80c2      	strh	r2, [r0, #6]
 8015e8a:	4770      	bx	lr

08015e8c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8015e8c:	7201      	strb	r1, [r0, #8]
 8015e8e:	4770      	bx	lr

08015e90 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8015e90:	6281      	str	r1, [r0, #40]	; 0x28
 8015e92:	4770      	bx	lr

08015e94 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015e94:	b513      	push	{r0, r1, r4, lr}
 8015e96:	6803      	ldr	r3, [r0, #0]
 8015e98:	4604      	mov	r4, r0
 8015e9a:	4601      	mov	r1, r0
 8015e9c:	4668      	mov	r0, sp
 8015e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ea0:	4798      	blx	r3
 8015ea2:	6823      	ldr	r3, [r4, #0]
 8015ea4:	4669      	mov	r1, sp
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	691b      	ldr	r3, [r3, #16]
 8015eaa:	4798      	blx	r3
 8015eac:	b002      	add	sp, #8
 8015eae:	bd10      	pop	{r4, pc}

08015eb0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8015eb0:	b510      	push	{r4, lr}
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015eb8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015ebc:	8002      	strh	r2, [r0, #0]
 8015ebe:	8042      	strh	r2, [r0, #2]
 8015ec0:	8084      	strh	r4, [r0, #4]
 8015ec2:	80c1      	strh	r1, [r0, #6]
 8015ec4:	bd10      	pop	{r4, pc}

08015ec6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	8002      	strh	r2, [r0, #0]
 8015eca:	8042      	strh	r2, [r0, #2]
 8015ecc:	8082      	strh	r2, [r0, #4]
 8015ece:	80c2      	strh	r2, [r0, #6]
 8015ed0:	4770      	bx	lr
	...

08015ed4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8015ed4:	b508      	push	{r3, lr}
 8015ed6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015ed8:	b928      	cbnz	r0, 8015ee6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8015eda:	4b03      	ldr	r3, [pc, #12]	; (8015ee8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8015edc:	2127      	movs	r1, #39	; 0x27
 8015ede:	4a03      	ldr	r2, [pc, #12]	; (8015eec <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8015ee0:	4803      	ldr	r0, [pc, #12]	; (8015ef0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8015ee2:	f00e fde7 	bl	8024ab4 <__assert_func>
 8015ee6:	bd08      	pop	{r3, pc}
 8015ee8:	0802879c 	.word	0x0802879c
 8015eec:	08028880 	.word	0x08028880
 8015ef0:	080287c3 	.word	0x080287c3

08015ef4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef8:	b089      	sub	sp, #36	; 0x24
 8015efa:	4604      	mov	r4, r0
 8015efc:	6808      	ldr	r0, [r1, #0]
 8015efe:	f04f 0a00 	mov.w	sl, #0
 8015f02:	6849      	ldr	r1, [r1, #4]
 8015f04:	ab02      	add	r3, sp, #8
 8015f06:	f04f 0b01 	mov.w	fp, #1
 8015f0a:	c303      	stmia	r3!, {r0, r1}
 8015f0c:	4b3f      	ldr	r3, [pc, #252]	; (801600c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8015f0e:	4621      	mov	r1, r4
 8015f10:	a804      	add	r0, sp, #16
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	2b01      	cmp	r3, #1
 8015f16:	6823      	ldr	r3, [r4, #0]
 8015f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f1a:	bf1f      	itttt	ne
 8015f1c:	f10d 0906 	addne.w	r9, sp, #6
 8015f20:	ae03      	addne	r6, sp, #12
 8015f22:	f10d 050e 	addne.w	r5, sp, #14
 8015f26:	f10d 080a 	addne.w	r8, sp, #10
 8015f2a:	bf01      	itttt	eq
 8015f2c:	f10d 090e 	addeq.w	r9, sp, #14
 8015f30:	f10d 0606 	addeq.w	r6, sp, #6
 8015f34:	ad03      	addeq	r5, sp, #12
 8015f36:	f10d 0808 	addeq.w	r8, sp, #8
 8015f3a:	4798      	blx	r3
 8015f3c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015f40:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d056      	beq.n	8015ff6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	bfa8      	it	ge
 8015f4c:	4613      	movge	r3, r2
 8015f4e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015f52:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8015f56:	2f00      	cmp	r7, #0
 8015f58:	dd34      	ble.n	8015fc4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8015f5a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8015f5e:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8015f62:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8015f66:	4484      	add	ip, r0
 8015f68:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015f6c:	f9b6 e000 	ldrsh.w	lr, [r6]
 8015f70:	fa0f fc8c 	sxth.w	ip, ip
 8015f74:	f9b9 1000 	ldrsh.w	r1, [r9]
 8015f78:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015f7c:	4562      	cmp	r2, ip
 8015f7e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f82:	f8ad e01c 	strh.w	lr, [sp, #28]
 8015f86:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015f8a:	da29      	bge.n	8015fe0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f8c:	4472      	add	r2, lr
 8015f8e:	b212      	sxth	r2, r2
 8015f90:	4290      	cmp	r0, r2
 8015f92:	da25      	bge.n	8015fe0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f94:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8015f98:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015f9c:	4402      	add	r2, r0
 8015f9e:	b212      	sxth	r2, r2
 8015fa0:	4293      	cmp	r3, r2
 8015fa2:	da1d      	bge.n	8015fe0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015fa4:	440b      	add	r3, r1
 8015fa6:	b21b      	sxth	r3, r3
 8015fa8:	4298      	cmp	r0, r3
 8015faa:	da19      	bge.n	8015fe0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	a906      	add	r1, sp, #24
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fb4:	4798      	blx	r3
 8015fb6:	b998      	cbnz	r0, 8015fe0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015fb8:	107f      	asrs	r7, r7, #1
 8015fba:	f04f 0a01 	mov.w	sl, #1
 8015fbe:	f8ad 7006 	strh.w	r7, [sp, #6]
 8015fc2:	e7c6      	b.n	8015f52 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015fc4:	d10c      	bne.n	8015fe0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015fc6:	f8ad b006 	strh.w	fp, [sp, #6]
 8015fca:	f8b8 2000 	ldrh.w	r2, [r8]
 8015fce:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8015fd2:	440a      	add	r2, r1
 8015fd4:	f8a8 2000 	strh.w	r2, [r8]
 8015fd8:	882b      	ldrh	r3, [r5, #0]
 8015fda:	1a5b      	subs	r3, r3, r1
 8015fdc:	802b      	strh	r3, [r5, #0]
 8015fde:	e7ad      	b.n	8015f3c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015fe0:	f1ba 0f00 	cmp.w	sl, #0
 8015fe4:	d0f1      	beq.n	8015fca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8015fe6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015fea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	bf08      	it	eq
 8015ff2:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8015ff4:	e7e9      	b.n	8015fca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8015ff6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	bf04      	itt	eq
 8015ffe:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016002:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016004:	b009      	add	sp, #36	; 0x24
 8016006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801600a:	bf00      	nop
 801600c:	2000baf4 	.word	0x2000baf4

08016010 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016010:	2200      	movs	r2, #0
 8016012:	2101      	movs	r1, #1
 8016014:	8082      	strh	r2, [r0, #4]
 8016016:	80c2      	strh	r2, [r0, #6]
 8016018:	8102      	strh	r2, [r0, #8]
 801601a:	8142      	strh	r2, [r0, #10]
 801601c:	8182      	strh	r2, [r0, #12]
 801601e:	81c2      	strh	r2, [r0, #14]
 8016020:	8202      	strh	r2, [r0, #16]
 8016022:	8242      	strh	r2, [r0, #18]
 8016024:	61c2      	str	r2, [r0, #28]
 8016026:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801602a:	6282      	str	r2, [r0, #40]	; 0x28
 801602c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016030:	4905      	ldr	r1, [pc, #20]	; (8016048 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016032:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016036:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801603a:	6001      	str	r1, [r0, #0]
 801603c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801603e:	22ff      	movs	r2, #255	; 0xff
 8016040:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016044:	4770      	bx	lr
 8016046:	bf00      	nop
 8016048:	08028808 	.word	0x08028808

0801604c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801604c:	4770      	bx	lr

0801604e <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801604e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016052:	4770      	bx	lr

08016054 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8016054:	b570      	push	{r4, r5, r6, lr}
 8016056:	790b      	ldrb	r3, [r1, #4]
 8016058:	4604      	mov	r4, r0
 801605a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801605e:	460e      	mov	r6, r1
 8016060:	2b00      	cmp	r3, #0
 8016062:	bf0c      	ite	eq
 8016064:	2301      	moveq	r3, #1
 8016066:	2300      	movne	r3, #0
 8016068:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801606c:	d110      	bne.n	8016090 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801606e:	b185      	cbz	r5, 8016092 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8016070:	7933      	ldrb	r3, [r6, #4]
 8016072:	2b01      	cmp	r3, #1
 8016074:	d113      	bne.n	801609e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8016076:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016078:	b188      	cbz	r0, 801609e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801607a:	6803      	ldr	r3, [r0, #0]
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	4798      	blx	r3
 8016080:	b168      	cbz	r0, 801609e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8016082:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016084:	4621      	mov	r1, r4
 8016086:	6803      	ldr	r3, [r0, #0]
 8016088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801608c:	689b      	ldr	r3, [r3, #8]
 801608e:	4718      	bx	r3
 8016090:	b12d      	cbz	r5, 801609e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8016092:	6823      	ldr	r3, [r4, #0]
 8016094:	4620      	mov	r0, r4
 8016096:	695b      	ldr	r3, [r3, #20]
 8016098:	4798      	blx	r3
 801609a:	2d00      	cmp	r5, #0
 801609c:	d1e8      	bne.n	8016070 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801609e:	bd70      	pop	{r4, r5, r6, pc}

080160a0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80160a0:	b570      	push	{r4, r5, r6, lr}
 80160a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160a6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80160a8:	4604      	mov	r4, r0
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d00c      	beq.n	80160c8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80160ae:	f850 3b26 	ldr.w	r3, [r0], #38
 80160b2:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80160b4:	f7f0 f9bc 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 80160b8:	2300      	movs	r3, #0
 80160ba:	4601      	mov	r1, r0
 80160bc:	46ac      	mov	ip, r5
 80160be:	4620      	mov	r0, r4
 80160c0:	461a      	mov	r2, r3
 80160c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160c6:	4760      	bx	ip
 80160c8:	2000      	movs	r0, #0
 80160ca:	bd70      	pop	{r4, r5, r6, pc}

080160cc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80160cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160d2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d016      	beq.n	8016106 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 80160d8:	f100 0426 	add.w	r4, r0, #38	; 0x26
 80160dc:	4620      	mov	r0, r4
 80160de:	f7ef fa2f 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 80160e2:	6803      	ldr	r3, [r0, #0]
 80160e4:	4605      	mov	r5, r0
 80160e6:	4620      	mov	r0, r4
 80160e8:	69de      	ldr	r6, [r3, #28]
 80160ea:	f7ef fa45 	bl	8005578 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80160ee:	4607      	mov	r7, r0
 80160f0:	4620      	mov	r0, r4
 80160f2:	f7f0 f99d 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 80160f6:	2300      	movs	r3, #0
 80160f8:	4602      	mov	r2, r0
 80160fa:	4639      	mov	r1, r7
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	4628      	mov	r0, r5
 8016100:	47b0      	blx	r6
 8016102:	b003      	add	sp, #12
 8016104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016106:	2000      	movs	r0, #0
 8016108:	e7fb      	b.n	8016102 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801610a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801610a:	b40e      	push	{r1, r2, r3}
 801610c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016116:	b09b      	sub	sp, #108	; 0x6c
 8016118:	4604      	mov	r4, r0
 801611a:	429a      	cmp	r2, r3
 801611c:	d03f      	beq.n	801619e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801611e:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8016122:	ab22      	add	r3, sp, #136	; 0x88
 8016124:	4638      	mov	r0, r7
 8016126:	9303      	str	r3, [sp, #12]
 8016128:	f7ef fa0a 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 801612c:	6803      	ldr	r3, [r0, #0]
 801612e:	4680      	mov	r8, r0
 8016130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016132:	4798      	blx	r3
 8016134:	4606      	mov	r6, r0
 8016136:	b205      	sxth	r5, r0
 8016138:	a804      	add	r0, sp, #16
 801613a:	f004 f9a3 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 801613e:	f8d8 3000 	ldr.w	r3, [r8]
 8016142:	4640      	mov	r0, r8
 8016144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016146:	4798      	blx	r3
 8016148:	9a03      	ldr	r2, [sp, #12]
 801614a:	4603      	mov	r3, r0
 801614c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801614e:	a804      	add	r0, sp, #16
 8016150:	f004 f9b5 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016154:	4638      	mov	r0, r7
 8016156:	f7ef fa0f 	bl	8005578 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801615a:	4680      	mov	r8, r0
 801615c:	4638      	mov	r0, r7
 801615e:	f7ef f9ef 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 8016162:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016166:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801616a:	4642      	mov	r2, r8
 801616c:	9300      	str	r3, [sp, #0]
 801616e:	4603      	mov	r3, r0
 8016170:	a804      	add	r0, sp, #16
 8016172:	f001 fdbd 	bl	8017cf0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016176:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801617a:	b203      	sxth	r3, r0
 801617c:	18a9      	adds	r1, r5, r2
 801617e:	2900      	cmp	r1, #0
 8016180:	dd0b      	ble.n	801619a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8016182:	3b01      	subs	r3, #1
 8016184:	fb13 f302 	smulbb	r3, r3, r2
 8016188:	fb16 3300 	smlabb	r3, r6, r0, r3
 801618c:	b21d      	sxth	r5, r3
 801618e:	4628      	mov	r0, r5
 8016190:	b01b      	add	sp, #108	; 0x6c
 8016192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016196:	b003      	add	sp, #12
 8016198:	4770      	bx	lr
 801619a:	2b00      	cmp	r3, #0
 801619c:	dcf7      	bgt.n	801618e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801619e:	2500      	movs	r5, #0
 80161a0:	e7f5      	b.n	801618e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

080161a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80161a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80161ac:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80161ae:	b08d      	sub	sp, #52	; 0x34
 80161b0:	4604      	mov	r4, r0
 80161b2:	429e      	cmp	r6, r3
 80161b4:	4688      	mov	r8, r1
 80161b6:	d04b      	beq.n	8016250 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80161b8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80161bc:	4628      	mov	r0, r5
 80161be:	f7ef f9bf 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 80161c2:	4607      	mov	r7, r0
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d043      	beq.n	8016250 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80161c8:	4628      	mov	r0, r5
 80161ca:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80161ce:	f7ef f9eb 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
 80161d2:	4b21      	ldr	r3, [pc, #132]	; (8016258 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 80161d4:	4628      	mov	r0, r5
 80161d6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80161e0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80161e4:	785e      	ldrb	r6, [r3, #1]
 80161e6:	f7ef f9c7 	bl	8005578 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80161ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80161ec:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80161f0:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80161f4:	9309      	str	r3, [sp, #36]	; 0x24
 80161f6:	4b19      	ldr	r3, [pc, #100]	; (801625c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 80161f8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016202:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016206:	9707      	str	r7, [sp, #28]
 8016208:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801620c:	f88d 6020 	strb.w	r6, [sp, #32]
 8016210:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016214:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016218:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801621c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016220:	b10a      	cbz	r2, 8016226 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8016222:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016224:	b906      	cbnz	r6, 8016228 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8016226:	689e      	ldr	r6, [r3, #8]
 8016228:	af05      	add	r7, sp, #20
 801622a:	4621      	mov	r1, r4
 801622c:	4638      	mov	r0, r7
 801622e:	f002 ff78 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016232:	4628      	mov	r0, r5
 8016234:	f7f0 f8fc 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 8016238:	2300      	movs	r3, #0
 801623a:	9001      	str	r0, [sp, #4]
 801623c:	4630      	mov	r0, r6
 801623e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016242:	ab07      	add	r3, sp, #28
 8016244:	9300      	str	r3, [sp, #0]
 8016246:	4643      	mov	r3, r8
 8016248:	e897 0006 	ldmia.w	r7, {r1, r2}
 801624c:	f000 ff74 	bl	8017138 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016250:	b00d      	add	sp, #52	; 0x34
 8016252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016256:	bf00      	nop
 8016258:	2000bb8c 	.word	0x2000bb8c
 801625c:	2000bafc 	.word	0x2000bafc

08016260 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016260:	b570      	push	{r4, r5, r6, lr}
 8016262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016266:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016268:	4604      	mov	r4, r0
 801626a:	429a      	cmp	r2, r3
 801626c:	d021      	beq.n	80162b2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801626e:	6803      	ldr	r3, [r0, #0]
 8016270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016272:	4798      	blx	r3
 8016274:	6823      	ldr	r3, [r4, #0]
 8016276:	4605      	mov	r5, r0
 8016278:	4620      	mov	r0, r4
 801627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801627c:	4798      	blx	r3
 801627e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016282:	4606      	mov	r6, r0
 8016284:	b22d      	sxth	r5, r5
 8016286:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801628a:	6823      	ldr	r3, [r4, #0]
 801628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801628e:	d109      	bne.n	80162a4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8016290:	4629      	mov	r1, r5
 8016292:	4620      	mov	r0, r4
 8016294:	4798      	blx	r3
 8016296:	6823      	ldr	r3, [r4, #0]
 8016298:	4631      	mov	r1, r6
 801629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801629c:	4620      	mov	r0, r4
 801629e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162a2:	4718      	bx	r3
 80162a4:	4601      	mov	r1, r0
 80162a6:	4620      	mov	r0, r4
 80162a8:	4798      	blx	r3
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	4629      	mov	r1, r5
 80162ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162b0:	e7f4      	b.n	801629c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 80162b2:	bd70      	pop	{r4, r5, r6, pc}

080162b4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80162b4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80162b8:	84c1      	strh	r1, [r0, #38]	; 0x26
 80162ba:	b922      	cbnz	r2, 80162c6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80162bc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80162c0:	b90b      	cbnz	r3, 80162c6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80162c2:	f7ff bfcd 	b.w	8016260 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80162c6:	4770      	bx	lr

080162c8 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	6803      	ldr	r3, [r0, #0]
 80162cc:	4604      	mov	r4, r0
 80162ce:	4615      	mov	r5, r2
 80162d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162d2:	4798      	blx	r3
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	4629      	mov	r1, r5
 80162d8:	4620      	mov	r0, r4
 80162da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162e0:	4718      	bx	r3

080162e2 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 80162e2:	b570      	push	{r4, r5, r6, lr}
 80162e4:	6803      	ldr	r3, [r0, #0]
 80162e6:	4604      	mov	r4, r0
 80162e8:	460e      	mov	r6, r1
 80162ea:	4615      	mov	r5, r2
 80162ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80162ee:	4798      	blx	r3
 80162f0:	8030      	strh	r0, [r6, #0]
 80162f2:	6823      	ldr	r3, [r4, #0]
 80162f4:	4620      	mov	r0, r4
 80162f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162f8:	4798      	blx	r3
 80162fa:	8028      	strh	r0, [r5, #0]
 80162fc:	bd70      	pop	{r4, r5, r6, pc}

080162fe <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 80162fe:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8016302:	4770      	bx	lr

08016304 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8016304:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8016308:	4770      	bx	lr

0801630a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801630a:	b510      	push	{r4, lr}
 801630c:	4604      	mov	r4, r0
 801630e:	f000 fb77 	bl	8016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	4620      	mov	r0, r4
 8016316:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801631a:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801631e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016324:	4718      	bx	r3

08016326 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8016326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016328:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801632c:	4605      	mov	r5, r0
 801632e:	8541      	strh	r1, [r0, #42]	; 0x2a
 8016330:	4630      	mov	r0, r6
 8016332:	f004 fe6d 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016336:	b1a0      	cbz	r0, 8016362 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8016338:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801633c:	4630      	mov	r0, r6
 801633e:	f004 fe67 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016342:	fb97 f4f0 	sdiv	r4, r7, r0
 8016346:	fb04 7410 	mls	r4, r4, r0, r7
 801634a:	4630      	mov	r0, r6
 801634c:	f004 fe60 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016350:	4404      	add	r4, r0
 8016352:	4630      	mov	r0, r6
 8016354:	f004 fe5c 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016358:	fb94 f3f0 	sdiv	r3, r4, r0
 801635c:	fb03 4010 	mls	r0, r3, r0, r4
 8016360:	8568      	strh	r0, [r5, #42]	; 0x2a
 8016362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016364 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8016364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016366:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801636a:	4605      	mov	r5, r0
 801636c:	8581      	strh	r1, [r0, #44]	; 0x2c
 801636e:	4630      	mov	r0, r6
 8016370:	f004 fe88 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016374:	b1a0      	cbz	r0, 80163a0 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8016376:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801637a:	4630      	mov	r0, r6
 801637c:	f004 fe82 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016380:	fb97 f4f0 	sdiv	r4, r7, r0
 8016384:	fb04 7410 	mls	r4, r4, r0, r7
 8016388:	4630      	mov	r0, r6
 801638a:	f004 fe7b 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801638e:	4404      	add	r4, r0
 8016390:	4630      	mov	r0, r6
 8016392:	f004 fe77 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016396:	fb94 f3f0 	sdiv	r3, r4, r0
 801639a:	fb03 4010 	mls	r0, r3, r0, r4
 801639e:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80163a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080163a4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80163a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80163ac:	b093      	sub	sp, #76	; 0x4c
 80163ae:	4607      	mov	r7, r0
 80163b0:	460e      	mov	r6, r1
 80163b2:	4658      	mov	r0, fp
 80163b4:	f004 fe2c 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80163b8:	4605      	mov	r5, r0
 80163ba:	4658      	mov	r0, fp
 80163bc:	f004 fe62 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80163c0:	4680      	mov	r8, r0
 80163c2:	2d00      	cmp	r5, #0
 80163c4:	f000 80c5 	beq.w	8016552 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	f000 80c2 	beq.w	8016552 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80163ce:	2300      	movs	r3, #0
 80163d0:	a90e      	add	r1, sp, #56	; 0x38
 80163d2:	4638      	mov	r0, r7
 80163d4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163dc:	4798      	blx	r3
 80163de:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80163e2:	f9b6 3000 	ldrsh.w	r3, [r6]
 80163e6:	88b1      	ldrh	r1, [r6, #4]
 80163e8:	189c      	adds	r4, r3, r2
 80163ea:	440b      	add	r3, r1
 80163ec:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80163f0:	fa02 f383 	sxtah	r3, r2, r3
 80163f4:	3b01      	subs	r3, #1
 80163f6:	fb93 f3f5 	sdiv	r3, r3, r5
 80163fa:	fb94 f4f5 	sdiv	r4, r4, r5
 80163fe:	fb13 f305 	smulbb	r3, r3, r5
 8016402:	fb14 f405 	smulbb	r4, r4, r5
 8016406:	b21b      	sxth	r3, r3
 8016408:	1aa4      	subs	r4, r4, r2
 801640a:	930b      	str	r3, [sp, #44]	; 0x2c
 801640c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016410:	b2a4      	uxth	r4, r4
 8016412:	185a      	adds	r2, r3, r1
 8016414:	fb92 f2f8 	sdiv	r2, r2, r8
 8016418:	fb12 f208 	smulbb	r2, r2, r8
 801641c:	1a52      	subs	r2, r2, r1
 801641e:	b212      	sxth	r2, r2
 8016420:	920c      	str	r2, [sp, #48]	; 0x30
 8016422:	88f2      	ldrh	r2, [r6, #6]
 8016424:	4413      	add	r3, r2
 8016426:	fa01 f383 	sxtah	r3, r1, r3
 801642a:	3b01      	subs	r3, #1
 801642c:	fb93 f3f8 	sdiv	r3, r3, r8
 8016430:	fb13 f308 	smulbb	r3, r3, r8
 8016434:	b21b      	sxth	r3, r3
 8016436:	930d      	str	r3, [sp, #52]	; 0x34
 8016438:	1963      	adds	r3, r4, r5
 801643a:	fa1f fa83 	uxth.w	sl, r3
 801643e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016440:	b223      	sxth	r3, r4
 8016442:	4293      	cmp	r3, r2
 8016444:	9305      	str	r3, [sp, #20]
 8016446:	f300 8084 	bgt.w	8016552 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801644a:	fa0f f38a 	sxth.w	r3, sl
 801644e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016452:	9309      	str	r3, [sp, #36]	; 0x24
 8016454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016456:	4599      	cmp	r9, r3
 8016458:	dd04      	ble.n	8016464 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801645a:	442c      	add	r4, r5
 801645c:	eb05 030a 	add.w	r3, r5, sl
 8016460:	b2a4      	uxth	r4, r4
 8016462:	e7ea      	b.n	801643a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8016464:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016468:	88b2      	ldrh	r2, [r6, #4]
 801646a:	4462      	add	r2, ip
 801646c:	b292      	uxth	r2, r2
 801646e:	b213      	sxth	r3, r2
 8016470:	9308      	str	r3, [sp, #32]
 8016472:	fa1f f389 	uxth.w	r3, r9
 8016476:	eb08 0103 	add.w	r1, r8, r3
 801647a:	9307      	str	r3, [sp, #28]
 801647c:	b289      	uxth	r1, r1
 801647e:	b208      	sxth	r0, r1
 8016480:	9006      	str	r0, [sp, #24]
 8016482:	9805      	ldr	r0, [sp, #20]
 8016484:	4603      	mov	r3, r0
 8016486:	9808      	ldr	r0, [sp, #32]
 8016488:	4283      	cmp	r3, r0
 801648a:	da5e      	bge.n	801654a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801648c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801648e:	4584      	cmp	ip, r0
 8016490:	da5b      	bge.n	801654a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016492:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8016496:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801649a:	4486      	add	lr, r0
 801649c:	fa1f fe8e 	uxth.w	lr, lr
 80164a0:	fa0f f38e 	sxth.w	r3, lr
 80164a4:	4599      	cmp	r9, r3
 80164a6:	930a      	str	r3, [sp, #40]	; 0x28
 80164a8:	da4f      	bge.n	801654a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80164aa:	9b06      	ldr	r3, [sp, #24]
 80164ac:	4298      	cmp	r0, r3
 80164ae:	da4c      	bge.n	801654a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80164b0:	9b05      	ldr	r3, [sp, #20]
 80164b2:	459c      	cmp	ip, r3
 80164b4:	bfb8      	it	lt
 80164b6:	469c      	movlt	ip, r3
 80164b8:	4548      	cmp	r0, r9
 80164ba:	9b08      	ldr	r3, [sp, #32]
 80164bc:	bfb8      	it	lt
 80164be:	4648      	movlt	r0, r9
 80164c0:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80164c4:	4699      	mov	r9, r3
 80164c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80164cc:	4599      	cmp	r9, r3
 80164ce:	bfc8      	it	gt
 80164d0:	4652      	movgt	r2, sl
 80164d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164d4:	eba2 020c 	sub.w	r2, r2, ip
 80164d8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80164dc:	9a06      	ldr	r2, [sp, #24]
 80164de:	4293      	cmp	r3, r2
 80164e0:	bfd8      	it	le
 80164e2:	4671      	movle	r1, lr
 80164e4:	1a09      	subs	r1, r1, r0
 80164e6:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80164ea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80164ee:	9b07      	ldr	r3, [sp, #28]
 80164f0:	1b12      	subs	r2, r2, r4
 80164f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80164f6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80164fa:	1ad2      	subs	r2, r2, r3
 80164fc:	4b16      	ldr	r3, [pc, #88]	; (8016558 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 80164fe:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8016508:	b109      	cbz	r1, 801650e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801650a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801650c:	b900      	cbnz	r0, 8016510 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801650e:	6890      	ldr	r0, [r2, #8]
 8016510:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016514:	f04f 0c01 	mov.w	ip, #1
 8016518:	9b07      	ldr	r3, [sp, #28]
 801651a:	6801      	ldr	r1, [r0, #0]
 801651c:	4413      	add	r3, r2
 801651e:	f8cd c008 	str.w	ip, [sp, #8]
 8016522:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016526:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801652a:	b21b      	sxth	r3, r3
 801652c:	4422      	add	r2, r4
 801652e:	f8cd c004 	str.w	ip, [sp, #4]
 8016532:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016536:	b212      	sxth	r2, r2
 8016538:	f8cd c000 	str.w	ip, [sp]
 801653c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8016540:	4659      	mov	r1, fp
 8016542:	47c8      	blx	r9
 8016544:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016548:	e784      	b.n	8016454 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801654a:	2300      	movs	r3, #0
 801654c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8016550:	e7cb      	b.n	80164ea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8016552:	b013      	add	sp, #76	; 0x4c
 8016554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016558:	2000bafc 	.word	0x2000bafc

0801655c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801655c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016560:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016564:	4606      	mov	r6, r0
 8016566:	4689      	mov	r9, r1
 8016568:	2bff      	cmp	r3, #255	; 0xff
 801656a:	d008      	beq.n	801657e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801656c:	2300      	movs	r3, #0
 801656e:	8003      	strh	r3, [r0, #0]
 8016570:	8043      	strh	r3, [r0, #2]
 8016572:	8083      	strh	r3, [r0, #4]
 8016574:	4630      	mov	r0, r6
 8016576:	80f3      	strh	r3, [r6, #6]
 8016578:	b003      	add	sp, #12
 801657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801657e:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 8016582:	4668      	mov	r0, sp
 8016584:	4659      	mov	r1, fp
 8016586:	f004 fdb7 	bl	801b0f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801658a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801658e:	4658      	mov	r0, fp
 8016590:	f9bd 7000 	ldrsh.w	r7, [sp]
 8016594:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8016598:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801659c:	f004 fd38 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80165a0:	4284      	cmp	r4, r0
 80165a2:	d10d      	bne.n	80165c0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80165a4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80165a8:	4658      	mov	r0, fp
 80165aa:	f004 fd6b 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80165ae:	4580      	cmp	r8, r0
 80165b0:	d12a      	bne.n	8016608 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80165b2:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80165b6:	8037      	strh	r7, [r6, #0]
 80165b8:	f8a6 a002 	strh.w	sl, [r6, #2]
 80165bc:	80b5      	strh	r5, [r6, #4]
 80165be:	e7d9      	b.n	8016574 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80165c0:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80165c4:	4658      	mov	r0, fp
 80165c6:	f004 fd23 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80165ca:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80165ce:	1b7f      	subs	r7, r7, r5
 80165d0:	b2a3      	uxth	r3, r4
 80165d2:	b2bd      	uxth	r5, r7
 80165d4:	b22f      	sxth	r7, r5
 80165d6:	4428      	add	r0, r5
 80165d8:	2f00      	cmp	r7, #0
 80165da:	b280      	uxth	r0, r0
 80165dc:	bfb8      	it	lt
 80165de:	18ed      	addlt	r5, r5, r3
 80165e0:	4403      	add	r3, r0
 80165e2:	bfac      	ite	ge
 80165e4:	4625      	movge	r5, r4
 80165e6:	2700      	movlt	r7, #0
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	bfb8      	it	lt
 80165ec:	b22d      	sxthlt	r5, r5
 80165ee:	b219      	sxth	r1, r3
 80165f0:	bfb8      	it	lt
 80165f2:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 80165f6:	4291      	cmp	r1, r2
 80165f8:	bfc4      	itt	gt
 80165fa:	1a9c      	subgt	r4, r3, r2
 80165fc:	b224      	sxthgt	r4, r4
 80165fe:	42ac      	cmp	r4, r5
 8016600:	bfc4      	itt	gt
 8016602:	b207      	sxthgt	r7, r0
 8016604:	4625      	movgt	r5, r4
 8016606:	e7cf      	b.n	80165a8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8016608:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801660c:	4658      	mov	r0, fp
 801660e:	f004 fd39 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016612:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8016616:	ebaa 0404 	sub.w	r4, sl, r4
 801661a:	fa1f f288 	uxth.w	r2, r8
 801661e:	b2a4      	uxth	r4, r4
 8016620:	fa0f fa84 	sxth.w	sl, r4
 8016624:	4420      	add	r0, r4
 8016626:	f1ba 0f00 	cmp.w	sl, #0
 801662a:	b280      	uxth	r0, r0
 801662c:	bfb8      	it	lt
 801662e:	18a3      	addlt	r3, r4, r2
 8016630:	4402      	add	r2, r0
 8016632:	bfac      	ite	ge
 8016634:	4643      	movge	r3, r8
 8016636:	f04f 0a00 	movlt.w	sl, #0
 801663a:	b292      	uxth	r2, r2
 801663c:	bfb8      	it	lt
 801663e:	b21b      	sxthlt	r3, r3
 8016640:	b214      	sxth	r4, r2
 8016642:	bfb8      	it	lt
 8016644:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016648:	428c      	cmp	r4, r1
 801664a:	bfc4      	itt	gt
 801664c:	eba2 0801 	subgt.w	r8, r2, r1
 8016650:	fa0f f888 	sxthgt.w	r8, r8
 8016654:	4543      	cmp	r3, r8
 8016656:	bfbc      	itt	lt
 8016658:	fa0f fa80 	sxthlt.w	sl, r0
 801665c:	4643      	movlt	r3, r8
 801665e:	e7aa      	b.n	80165b6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08016660 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	880b      	ldrh	r3, [r1, #0]
 8016664:	4605      	mov	r5, r0
 8016666:	4604      	mov	r4, r0
 8016668:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801666a:	8813      	ldrh	r3, [r2, #0]
 801666c:	f825 3f30 	strh.w	r3, [r5, #48]!
 8016670:	4628      	mov	r0, r5
 8016672:	f004 fccd 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016676:	8120      	strh	r0, [r4, #8]
 8016678:	4628      	mov	r0, r5
 801667a:	f004 fd03 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801667e:	8160      	strh	r0, [r4, #10]
 8016680:	bd38      	pop	{r3, r4, r5, pc}

08016682 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016682:	b510      	push	{r4, lr}
 8016684:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8016688:	4604      	mov	r4, r0
 801668a:	2bff      	cmp	r3, #255	; 0xff
 801668c:	d006      	beq.n	801669c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801668e:	2300      	movs	r3, #0
 8016690:	8003      	strh	r3, [r0, #0]
 8016692:	8043      	strh	r3, [r0, #2]
 8016694:	8083      	strh	r3, [r0, #4]
 8016696:	80c3      	strh	r3, [r0, #6]
 8016698:	4620      	mov	r0, r4
 801669a:	bd10      	pop	{r4, pc}
 801669c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80166a0:	b11b      	cbz	r3, 80166aa <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80166a2:	3130      	adds	r1, #48	; 0x30
 80166a4:	f004 fd28 	bl	801b0f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80166a8:	e7f6      	b.n	8016698 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80166aa:	312e      	adds	r1, #46	; 0x2e
 80166ac:	e7fa      	b.n	80166a4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

080166b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80166b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80166b8:	b08b      	sub	sp, #44	; 0x2c
 80166ba:	4604      	mov	r4, r0
 80166bc:	4689      	mov	r9, r1
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d043      	beq.n	801674a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 80166c2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80166c4:	a805      	add	r0, sp, #20
 80166c6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166ca:	f004 fca1 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80166ce:	4607      	mov	r7, r0
 80166d0:	fa0f f880 	sxth.w	r8, r0
 80166d4:	a805      	add	r0, sp, #20
 80166d6:	f004 fcd5 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80166da:	f9b9 6000 	ldrsh.w	r6, [r9]
 80166de:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80166e2:	2300      	movs	r3, #0
 80166e4:	fa0f fc80 	sxth.w	ip, r0
 80166e8:	4432      	add	r2, r6
 80166ea:	9306      	str	r3, [sp, #24]
 80166ec:	b292      	uxth	r2, r2
 80166ee:	fa0f fe82 	sxth.w	lr, r2
 80166f2:	459e      	cmp	lr, r3
 80166f4:	dd2b      	ble.n	801674e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80166f6:	45b0      	cmp	r8, r6
 80166f8:	dd29      	ble.n	801674e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80166fa:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 80166fe:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8016702:	442b      	add	r3, r5
 8016704:	b29b      	uxth	r3, r3
 8016706:	b219      	sxth	r1, r3
 8016708:	2900      	cmp	r1, #0
 801670a:	dd20      	ble.n	801674e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801670c:	45ac      	cmp	ip, r5
 801670e:	dd1e      	ble.n	801674e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8016710:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8016714:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8016718:	45f0      	cmp	r8, lr
 801671a:	bfb8      	it	lt
 801671c:	463a      	movlt	r2, r7
 801671e:	458c      	cmp	ip, r1
 8016720:	bfb8      	it	lt
 8016722:	4603      	movlt	r3, r0
 8016724:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016728:	1b92      	subs	r2, r2, r6
 801672a:	1b5b      	subs	r3, r3, r5
 801672c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016730:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016734:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016738:	4b1d      	ldr	r3, [pc, #116]	; (80167b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	b953      	cbnz	r3, 8016754 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801673e:	4b1d      	ldr	r3, [pc, #116]	; (80167b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 8016740:	21b8      	movs	r1, #184	; 0xb8
 8016742:	4a1d      	ldr	r2, [pc, #116]	; (80167b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8016744:	481d      	ldr	r0, [pc, #116]	; (80167bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8016746:	f00e f9b5 	bl	8024ab4 <__assert_func>
 801674a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801674c:	e7ba      	b.n	80166c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801674e:	2300      	movs	r3, #0
 8016750:	9307      	str	r3, [sp, #28]
 8016752:	e7f1      	b.n	8016738 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 8016754:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801675c:	429a      	cmp	r2, r3
 801675e:	d024      	beq.n	80167aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8016760:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016764:	b30b      	cbz	r3, 80167aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8016766:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801676a:	b1f3      	cbz	r3, 80167aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801676c:	2300      	movs	r3, #0
 801676e:	a908      	add	r1, sp, #32
 8016770:	4620      	mov	r0, r4
 8016772:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016776:	6823      	ldr	r3, [r4, #0]
 8016778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801677a:	4798      	blx	r3
 801677c:	4b10      	ldr	r3, [pc, #64]	; (80167c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016784:	b10a      	cbz	r2, 801678a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016786:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016788:	b900      	cbnz	r0, 801678c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 801678a:	6898      	ldr	r0, [r3, #8]
 801678c:	2501      	movs	r5, #1
 801678e:	6801      	ldr	r1, [r0, #0]
 8016790:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016794:	9502      	str	r5, [sp, #8]
 8016796:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801679a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801679e:	9401      	str	r4, [sp, #4]
 80167a0:	ac06      	add	r4, sp, #24
 80167a2:	9400      	str	r4, [sp, #0]
 80167a4:	68cc      	ldr	r4, [r1, #12]
 80167a6:	a905      	add	r1, sp, #20
 80167a8:	47a0      	blx	r4
 80167aa:	b00b      	add	sp, #44	; 0x2c
 80167ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167b0:	2000bbc4 	.word	0x2000bbc4
 80167b4:	08028a3c 	.word	0x08028a3c
 80167b8:	08028b10 	.word	0x08028b10
 80167bc:	08028a78 	.word	0x08028a78
 80167c0:	2000bafc 	.word	0x2000bafc

080167c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80167c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80167c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167cc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80167ce:	4604      	mov	r4, r0
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d018      	beq.n	8016806 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80167d4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80167d8:	4628      	mov	r0, r5
 80167da:	f7ee feb1 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 80167de:	6803      	ldr	r3, [r0, #0]
 80167e0:	4606      	mov	r6, r0
 80167e2:	4628      	mov	r0, r5
 80167e4:	69df      	ldr	r7, [r3, #28]
 80167e6:	f7ee fec7 	bl	8005578 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80167ea:	4680      	mov	r8, r0
 80167ec:	4628      	mov	r0, r5
 80167ee:	f7ef fe1f 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 80167f2:	2300      	movs	r3, #0
 80167f4:	4602      	mov	r2, r0
 80167f6:	4641      	mov	r1, r8
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	4630      	mov	r0, r6
 80167fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167fe:	47b8      	blx	r7
 8016800:	b002      	add	sp, #8
 8016802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016806:	2000      	movs	r0, #0
 8016808:	e7fa      	b.n	8016800 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801680a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801680a:	b570      	push	{r4, r5, r6, lr}
 801680c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016810:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016812:	4604      	mov	r4, r0
 8016814:	429a      	cmp	r2, r3
 8016816:	d00c      	beq.n	8016832 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8016818:	f850 3b26 	ldr.w	r3, [r0], #38
 801681c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801681e:	f7ef fe07 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 8016822:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016824:	4601      	mov	r1, r0
 8016826:	46ac      	mov	ip, r5
 8016828:	4620      	mov	r0, r4
 801682a:	2300      	movs	r3, #0
 801682c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016830:	4760      	bx	ip
 8016832:	2000      	movs	r0, #0
 8016834:	bd70      	pop	{r4, r5, r6, pc}
	...

08016838 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8016838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801683c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016840:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016842:	b08d      	sub	sp, #52	; 0x34
 8016844:	4604      	mov	r4, r0
 8016846:	429e      	cmp	r6, r3
 8016848:	460f      	mov	r7, r1
 801684a:	d048      	beq.n	80168de <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801684c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016850:	4628      	mov	r0, r5
 8016852:	f7ee fe75 	bl	8005540 <_ZNK8touchgfx9TypedText7getFontEv>
 8016856:	4680      	mov	r8, r0
 8016858:	2800      	cmp	r0, #0
 801685a:	d040      	beq.n	80168de <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801685c:	4628      	mov	r0, r5
 801685e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016862:	f7ee fea1 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016866:	4b1f      	ldr	r3, [pc, #124]	; (80168e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8016868:	4628      	mov	r0, r5
 801686a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016874:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016878:	785e      	ldrb	r6, [r3, #1]
 801687a:	f7ee fe7d 	bl	8005578 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801687e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016882:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016888:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801688c:	f88d 6020 	strb.w	r6, [sp, #32]
 8016890:	ae05      	add	r6, sp, #20
 8016892:	9309      	str	r3, [sp, #36]	; 0x24
 8016894:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016898:	f8cd 801c 	str.w	r8, [sp, #28]
 801689c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80168a0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80168a4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80168a8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80168ac:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80168b0:	f7eb fe30 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 80168b4:	4621      	mov	r1, r4
 80168b6:	4680      	mov	r8, r0
 80168b8:	4630      	mov	r0, r6
 80168ba:	f002 fc32 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80168be:	4628      	mov	r0, r5
 80168c0:	f7ef fdb6 	bl	8006430 <_ZNK8touchgfx9TypedText7getTextEv>
 80168c4:	2300      	movs	r3, #0
 80168c6:	9303      	str	r3, [sp, #12]
 80168c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168ca:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80168ce:	ab07      	add	r3, sp, #28
 80168d0:	4640      	mov	r0, r8
 80168d2:	9300      	str	r3, [sp, #0]
 80168d4:	463b      	mov	r3, r7
 80168d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80168da:	f000 fc2d 	bl	8017138 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80168de:	b00d      	add	sp, #52	; 0x34
 80168e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168e4:	2000bb8c 	.word	0x2000bb8c

080168e8 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 80168e8:	2300      	movs	r3, #0
 80168ea:	8083      	strh	r3, [r0, #4]
 80168ec:	80c3      	strh	r3, [r0, #6]
 80168ee:	8003      	strh	r3, [r0, #0]
 80168f0:	8043      	strh	r3, [r0, #2]
 80168f2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80168f6:	2bff      	cmp	r3, #255	; 0xff
 80168f8:	bf01      	itttt	eq
 80168fa:	890b      	ldrheq	r3, [r1, #8]
 80168fc:	8083      	strheq	r3, [r0, #4]
 80168fe:	894b      	ldrheq	r3, [r1, #10]
 8016900:	80c3      	strheq	r3, [r0, #6]
 8016902:	4770      	bx	lr

08016904 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8016904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016908:	4604      	mov	r4, r0
 801690a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801690e:	460e      	mov	r6, r1
 8016910:	b08c      	sub	sp, #48	; 0x30
 8016912:	8962      	ldrh	r2, [r4, #10]
 8016914:	b218      	sxth	r0, r3
 8016916:	8921      	ldrh	r1, [r4, #8]
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801691e:	1ac9      	subs	r1, r1, r3
 8016920:	1ad3      	subs	r3, r2, r3
 8016922:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016926:	f8ad 1014 	strh.w	r1, [sp, #20]
 801692a:	6830      	ldr	r0, [r6, #0]
 801692c:	6871      	ldr	r1, [r6, #4]
 801692e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016932:	466b      	mov	r3, sp
 8016934:	c303      	stmia	r3!, {r0, r1}
 8016936:	a904      	add	r1, sp, #16
 8016938:	4668      	mov	r0, sp
 801693a:	f7fd fff3 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 801693e:	6823      	ldr	r3, [r4, #0]
 8016940:	4669      	mov	r1, sp
 8016942:	4620      	mov	r0, r4
 8016944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016946:	4798      	blx	r3
 8016948:	f7eb fde4 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 801694c:	6803      	ldr	r3, [r0, #0]
 801694e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016950:	4669      	mov	r1, sp
 8016952:	69dd      	ldr	r5, [r3, #28]
 8016954:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016958:	47a8      	blx	r5
 801695a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801695e:	2a00      	cmp	r2, #0
 8016960:	d04b      	beq.n	80169fa <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 8016962:	b211      	sxth	r1, r2
 8016964:	8963      	ldrh	r3, [r4, #10]
 8016966:	b292      	uxth	r2, r2
 8016968:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801696c:	2500      	movs	r5, #0
 801696e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016972:	1a9f      	subs	r7, r3, r2
 8016974:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016978:	1a82      	subs	r2, r0, r2
 801697a:	9504      	str	r5, [sp, #16]
 801697c:	b21b      	sxth	r3, r3
 801697e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8016982:	af02      	add	r7, sp, #8
 8016984:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016988:	f8ad 5018 	strh.w	r5, [sp, #24]
 801698c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8016990:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016994:	f8ad 5020 	strh.w	r5, [sp, #32]
 8016998:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801699c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80169a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80169a4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80169a8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 80169ac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80169b0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80169b4:	ab04      	add	r3, sp, #16
 80169b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80169ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80169be:	e887 0003 	stmia.w	r7, {r0, r1}
 80169c2:	4631      	mov	r1, r6
 80169c4:	4638      	mov	r0, r7
 80169c6:	f7fd ffad 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 80169ca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80169ce:	b18b      	cbz	r3, 80169f4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80169d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80169d4:	b173      	cbz	r3, 80169f4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80169d6:	6823      	ldr	r3, [r4, #0]
 80169d8:	4639      	mov	r1, r7
 80169da:	4620      	mov	r0, r4
 80169dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169de:	4798      	blx	r3
 80169e0:	f7eb fd98 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 80169e4:	6803      	ldr	r3, [r0, #0]
 80169e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80169e8:	4639      	mov	r1, r7
 80169ea:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80169ee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80169f2:	47c0      	blx	r8
 80169f4:	3501      	adds	r5, #1
 80169f6:	2d04      	cmp	r5, #4
 80169f8:	d1dc      	bne.n	80169b4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 80169fa:	b00c      	add	sp, #48	; 0x30
 80169fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016a00:	b570      	push	{r4, r5, r6, lr}
 8016a02:	4605      	mov	r5, r0
 8016a04:	880b      	ldrh	r3, [r1, #0]
 8016a06:	4604      	mov	r4, r0
 8016a08:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016a0a:	f855 3b26 	ldr.w	r3, [r5], #38
 8016a0e:	4628      	mov	r0, r5
 8016a10:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8016a12:	f004 fafd 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016a16:	b201      	sxth	r1, r0
 8016a18:	4620      	mov	r0, r4
 8016a1a:	47b0      	blx	r6
 8016a1c:	6823      	ldr	r3, [r4, #0]
 8016a1e:	4628      	mov	r0, r5
 8016a20:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8016a22:	f004 fb2f 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016a26:	b201      	sxth	r1, r0
 8016a28:	4620      	mov	r0, r4
 8016a2a:	47b0      	blx	r6
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	f004 fbbd 	bl	801b1ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8016a32:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8016a36:	bd70      	pop	{r4, r5, r6, pc}

08016a38 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016a38:	b510      	push	{r4, lr}
 8016a3a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016a3e:	4604      	mov	r4, r0
 8016a40:	2bff      	cmp	r3, #255	; 0xff
 8016a42:	d006      	beq.n	8016a52 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016a44:	2300      	movs	r3, #0
 8016a46:	8003      	strh	r3, [r0, #0]
 8016a48:	8043      	strh	r3, [r0, #2]
 8016a4a:	8083      	strh	r3, [r0, #4]
 8016a4c:	80c3      	strh	r3, [r0, #6]
 8016a4e:	4620      	mov	r0, r4
 8016a50:	bd10      	pop	{r4, pc}
 8016a52:	3126      	adds	r1, #38	; 0x26
 8016a54:	f004 fb50 	bl	801b0f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016a58:	e7f9      	b.n	8016a4e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08016a5c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a60:	4604      	mov	r4, r0
 8016a62:	b088      	sub	sp, #32
 8016a64:	2500      	movs	r5, #0
 8016a66:	460f      	mov	r7, r1
 8016a68:	f854 3b26 	ldr.w	r3, [r4], #38
 8016a6c:	a904      	add	r1, sp, #16
 8016a6e:	4606      	mov	r6, r0
 8016a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a76:	4798      	blx	r3
 8016a78:	4620      	mov	r0, r4
 8016a7a:	f004 fac9 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016a7e:	4680      	mov	r8, r0
 8016a80:	4620      	mov	r0, r4
 8016a82:	f004 faff 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016a86:	9506      	str	r5, [sp, #24]
 8016a88:	ad06      	add	r5, sp, #24
 8016a8a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016a8e:	4639      	mov	r1, r7
 8016a90:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016a94:	4628      	mov	r0, r5
 8016a96:	f7fd ff45 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8016a9a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016a9e:	b1c3      	cbz	r3, 8016ad2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8016aa0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016aa4:	b1ab      	cbz	r3, 8016ad2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8016aa6:	4b0c      	ldr	r3, [pc, #48]	; (8016ad8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016aae:	b10a      	cbz	r2, 8016ab4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8016ab0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016ab2:	b900      	cbnz	r0, 8016ab6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8016ab4:	6898      	ldr	r0, [r3, #8]
 8016ab6:	2701      	movs	r7, #1
 8016ab8:	6801      	ldr	r1, [r0, #0]
 8016aba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016abe:	9702      	str	r7, [sp, #8]
 8016ac0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8016ac4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016ac8:	e9cd 5600 	strd	r5, r6, [sp]
 8016acc:	68cd      	ldr	r5, [r1, #12]
 8016ace:	4621      	mov	r1, r4
 8016ad0:	47a8      	blx	r5
 8016ad2:	b008      	add	sp, #32
 8016ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad8:	2000bafc 	.word	0x2000bafc

08016adc <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8016adc:	b510      	push	{r4, lr}
 8016ade:	4604      	mov	r4, r0
 8016ae0:	f7ff fdcf 	bl	8016682 <_ZNK8touchgfx6Button12getSolidRectEv>
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	bd10      	pop	{r4, pc}

08016ae8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8016ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aec:	4604      	mov	r4, r0
 8016aee:	b08f      	sub	sp, #60	; 0x3c
 8016af0:	4688      	mov	r8, r1
 8016af2:	f7ff fddd 	bl	80166b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8016af6:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8016af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016afc:	429f      	cmp	r7, r3
 8016afe:	f000 809a 	beq.w	8016c36 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8016b02:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8016b06:	4e54      	ldr	r6, [pc, #336]	; (8016c58 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8016b08:	4628      	mov	r0, r5
 8016b0a:	f7ee fd4d 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016b0e:	6833      	ldr	r3, [r6, #0]
 8016b10:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
 8016b14:	f04f 0c02 	mov.w	ip, #2
 8016b18:	f813 2017 	ldrb.w	r2, [r3, r7, lsl #1]
 8016b1c:	4b4f      	ldr	r3, [pc, #316]	; (8016c5c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8016b1e:	f1be 0f01 	cmp.w	lr, #1
 8016b22:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	b208      	sxth	r0, r1
 8016b2a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016b2e:	f04f 0300 	mov.w	r3, #0
 8016b32:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016b36:	9305      	str	r3, [sp, #20]
 8016b38:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016b3c:	d07e      	beq.n	8016c3c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8016b3e:	f1be 0f03 	cmp.w	lr, #3
 8016b42:	d07b      	beq.n	8016c3c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8016b44:	1a52      	subs	r2, r2, r1
 8016b46:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016b4a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016b4e:	fb92 f2fc 	sdiv	r2, r2, ip
 8016b52:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016b56:	f10d 0914 	add.w	r9, sp, #20
 8016b5a:	f10d 0a1c 	add.w	sl, sp, #28
 8016b5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016b62:	e88a 0003 	stmia.w	sl, {r0, r1}
 8016b66:	4641      	mov	r1, r8
 8016b68:	4650      	mov	r0, sl
 8016b6a:	f7fd fedb 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8016b6e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d05f      	beq.n	8016c36 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8016b76:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d05b      	beq.n	8016c36 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8016b7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016b82:	4649      	mov	r1, r9
 8016b84:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016b88:	4620      	mov	r0, r4
 8016b8a:	1a9b      	subs	r3, r3, r2
 8016b8c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016b90:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016b94:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016b98:	1a9b      	subs	r3, r3, r2
 8016b9a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016b9e:	6823      	ldr	r3, [r4, #0]
 8016ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba2:	4798      	blx	r3
 8016ba4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d051      	beq.n	8016c50 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 8016bac:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
 8016bb0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	9303      	str	r3, [sp, #12]
 8016bb8:	f7ee fcf6 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016bbc:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8016bc0:	4628      	mov	r0, r5
 8016bc2:	6832      	ldr	r2, [r6, #0]
 8016bc4:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8016bc8:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 8016bcc:	7856      	ldrb	r6, [r2, #1]
 8016bce:	f3c6 0201 	ubfx	r2, r6, #0, #2
 8016bd2:	f3c6 0681 	ubfx	r6, r6, #2, #2
 8016bd6:	9202      	str	r2, [sp, #8]
 8016bd8:	f7ee fce6 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016bdc:	9b03      	ldr	r3, [sp, #12]
 8016bde:	9a02      	ldr	r2, [sp, #8]
 8016be0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8016be4:	2300      	movs	r3, #0
 8016be6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8016bea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8016bee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8016bf2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8016bf6:	4b1a      	ldr	r3, [pc, #104]	; (8016c60 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8016bf8:	9709      	str	r7, [sp, #36]	; 0x24
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016c00:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016c04:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8016c08:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
 8016c0c:	b10a      	cbz	r2, 8016c12 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x12a>
 8016c0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016c10:	b904      	cbnz	r4, 8016c14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x12c>
 8016c12:	689c      	ldr	r4, [r3, #8]
 8016c14:	4628      	mov	r0, r5
 8016c16:	f7ee fcc7 	bl	80055a8 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016c1a:	4b12      	ldr	r3, [pc, #72]	; (8016c64 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8016c1c:	4641      	mov	r1, r8
 8016c1e:	6818      	ldr	r0, [r3, #0]
 8016c20:	f7f1 fbd2 	bl	80083c8 <_ZNK8touchgfx5Texts7getTextEt>
 8016c24:	ab09      	add	r3, sp, #36	; 0x24
 8016c26:	9001      	str	r0, [sp, #4]
 8016c28:	4620      	mov	r0, r4
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	4653      	mov	r3, sl
 8016c2e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016c32:	f000 fa81 	bl	8017138 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016c36:	b00f      	add	sp, #60	; 0x3c
 8016c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c3c:	1a5b      	subs	r3, r3, r1
 8016c3e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8016c42:	f8ad 201a 	strh.w	r2, [sp, #26]
 8016c46:	fb93 f3fc 	sdiv	r3, r3, ip
 8016c4a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c4e:	e782      	b.n	8016b56 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x6e>
 8016c50:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
 8016c54:	e7ac      	b.n	8016bb0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xc8>
 8016c56:	bf00      	nop
 8016c58:	2000bb8c 	.word	0x2000bb8c
 8016c5c:	2000bb94 	.word	0x2000bb94
 8016c60:	2000bafc 	.word	0x2000bafc
 8016c64:	2000bb98 	.word	0x2000bb98

08016c68 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8016c68:	2101      	movs	r1, #1
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	b510      	push	{r4, lr}
 8016c6e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016c72:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8016c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016c7a:	4c0e      	ldr	r4, [pc, #56]	; (8016cb4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x4c>)
 8016c7c:	8082      	strh	r2, [r0, #4]
 8016c7e:	80c2      	strh	r2, [r0, #6]
 8016c80:	8102      	strh	r2, [r0, #8]
 8016c82:	8142      	strh	r2, [r0, #10]
 8016c84:	8182      	strh	r2, [r0, #12]
 8016c86:	81c2      	strh	r2, [r0, #14]
 8016c88:	8202      	strh	r2, [r0, #16]
 8016c8a:	8242      	strh	r2, [r0, #18]
 8016c8c:	61c2      	str	r2, [r0, #28]
 8016c8e:	6282      	str	r2, [r0, #40]	; 0x28
 8016c90:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8016c94:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8016c96:	8601      	strh	r1, [r0, #48]	; 0x30
 8016c98:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8016c9c:	6004      	str	r4, [r0, #0]
 8016c9e:	8681      	strh	r1, [r0, #52]	; 0x34
 8016ca0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8016ca4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8016ca8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016cac:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8016cb0:	bd10      	pop	{r4, pc}
 8016cb2:	bf00      	nop
 8016cb4:	08028c9c 	.word	0x08028c9c

08016cb8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016cb8:	4b02      	ldr	r3, [pc, #8]	; (8016cc4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016cba:	6018      	str	r0, [r3, #0]
 8016cbc:	4b02      	ldr	r3, [pc, #8]	; (8016cc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016cbe:	6019      	str	r1, [r3, #0]
 8016cc0:	4770      	bx	lr
 8016cc2:	bf00      	nop
 8016cc4:	2000bb04 	.word	0x2000bb04
 8016cc8:	2000bb18 	.word	0x2000bb18

08016ccc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	4c2b      	ldr	r4, [pc, #172]	; (8016d7c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8016cd0:	4b2b      	ldr	r3, [pc, #172]	; (8016d80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8016cd2:	6821      	ldr	r1, [r4, #0]
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	4281      	cmp	r1, r0
 8016cd8:	4d2a      	ldr	r5, [pc, #168]	; (8016d84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8016cda:	492b      	ldr	r1, [pc, #172]	; (8016d88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8016cdc:	d108      	bne.n	8016cf0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8016cde:	682b      	ldr	r3, [r5, #0]
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	d105      	bne.n	8016cf0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8016ce4:	6808      	ldr	r0, [r1, #0]
 8016ce6:	280f      	cmp	r0, #15
 8016ce8:	bf94      	ite	ls
 8016cea:	2000      	movls	r0, #0
 8016cec:	2001      	movhi	r0, #1
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	4b26      	ldr	r3, [pc, #152]	; (8016d8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8016cf2:	6020      	str	r0, [r4, #0]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	602a      	str	r2, [r5, #0]
 8016cf8:	4298      	cmp	r0, r3
 8016cfa:	d905      	bls.n	8016d08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8016cfc:	4b24      	ldr	r3, [pc, #144]	; (8016d90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016cfe:	2137      	movs	r1, #55	; 0x37
 8016d00:	4a24      	ldr	r2, [pc, #144]	; (8016d94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016d02:	4825      	ldr	r0, [pc, #148]	; (8016d98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8016d04:	f00d fed6 	bl	8024ab4 <__assert_func>
 8016d08:	f010 0403 	ands.w	r4, r0, #3
 8016d0c:	bf1f      	itttt	ne
 8016d0e:	f1c4 0504 	rsbne	r5, r4, #4
 8016d12:	3b04      	subne	r3, #4
 8016d14:	1952      	addne	r2, r2, r5
 8016d16:	191b      	addne	r3, r3, r4
 8016d18:	4d20      	ldr	r5, [pc, #128]	; (8016d9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8016d1a:	4402      	add	r2, r0
 8016d1c:	1a1b      	subs	r3, r3, r0
 8016d1e:	3001      	adds	r0, #1
 8016d20:	602a      	str	r2, [r5, #0]
 8016d22:	f020 0401 	bic.w	r4, r0, #1
 8016d26:	42a3      	cmp	r3, r4
 8016d28:	d203      	bcs.n	8016d32 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8016d2a:	4b19      	ldr	r3, [pc, #100]	; (8016d90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016d2c:	214a      	movs	r1, #74	; 0x4a
 8016d2e:	4a19      	ldr	r2, [pc, #100]	; (8016d94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016d30:	e7e7      	b.n	8016d02 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016d32:	f010 0002 	ands.w	r0, r0, #2
 8016d36:	bf1f      	itttt	ne
 8016d38:	f1c0 0504 	rsbne	r5, r0, #4
 8016d3c:	1952      	addne	r2, r2, r5
 8016d3e:	1f05      	subne	r5, r0, #4
 8016d40:	195b      	addne	r3, r3, r5
 8016d42:	4422      	add	r2, r4
 8016d44:	4d16      	ldr	r5, [pc, #88]	; (8016da0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8016d46:	1b1b      	subs	r3, r3, r4
 8016d48:	602a      	str	r2, [r5, #0]
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d903      	bls.n	8016d56 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8016d4e:	4b10      	ldr	r3, [pc, #64]	; (8016d90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016d50:	215d      	movs	r1, #93	; 0x5d
 8016d52:	4a10      	ldr	r2, [pc, #64]	; (8016d94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016d54:	e7d5      	b.n	8016d02 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016d56:	b120      	cbz	r0, 8016d62 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8016d58:	f1c0 0504 	rsb	r5, r0, #4
 8016d5c:	3804      	subs	r0, #4
 8016d5e:	442a      	add	r2, r5
 8016d60:	4403      	add	r3, r0
 8016d62:	1b1b      	subs	r3, r3, r4
 8016d64:	4422      	add	r2, r4
 8016d66:	480f      	ldr	r0, [pc, #60]	; (8016da4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8016d68:	2b0f      	cmp	r3, #15
 8016d6a:	600b      	str	r3, [r1, #0]
 8016d6c:	6002      	str	r2, [r0, #0]
 8016d6e:	d803      	bhi.n	8016d78 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8016d70:	4b0d      	ldr	r3, [pc, #52]	; (8016da8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8016d72:	2170      	movs	r1, #112	; 0x70
 8016d74:	4a07      	ldr	r2, [pc, #28]	; (8016d94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016d76:	e7c4      	b.n	8016d02 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016d78:	2001      	movs	r0, #1
 8016d7a:	e7b8      	b.n	8016cee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8016d7c:	2000bb0c 	.word	0x2000bb0c
 8016d80:	2000bb04 	.word	0x2000bb04
 8016d84:	2000bb14 	.word	0x2000bb14
 8016d88:	2000bb1c 	.word	0x2000bb1c
 8016d8c:	2000bb18 	.word	0x2000bb18
 8016d90:	08028d04 	.word	0x08028d04
 8016d94:	08028dcc 	.word	0x08028dcc
 8016d98:	08028d3d 	.word	0x08028d3d
 8016d9c:	2000bb20 	.word	0x2000bb20
 8016da0:	2000bb10 	.word	0x2000bb10
 8016da4:	2000bb08 	.word	0x2000bb08
 8016da8:	08028d87 	.word	0x08028d87

08016dac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8016dac:	4b04      	ldr	r3, [pc, #16]	; (8016dc0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8016dae:	6818      	ldr	r0, [r3, #0]
 8016db0:	b120      	cbz	r0, 8016dbc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8016db2:	4b04      	ldr	r3, [pc, #16]	; (8016dc4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8016db4:	6818      	ldr	r0, [r3, #0]
 8016db6:	3000      	adds	r0, #0
 8016db8:	bf18      	it	ne
 8016dba:	2001      	movne	r0, #1
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	2000bb04 	.word	0x2000bb04
 8016dc4:	2000bb18 	.word	0x2000bb18

08016dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8016dc8:	4b01      	ldr	r3, [pc, #4]	; (8016dd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8016dca:	6818      	ldr	r0, [r3, #0]
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	2000bb0c 	.word	0x2000bb0c

08016dd4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8016dd4:	4b01      	ldr	r3, [pc, #4]	; (8016ddc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8016dd6:	6818      	ldr	r0, [r3, #0]
 8016dd8:	4770      	bx	lr
 8016dda:	bf00      	nop
 8016ddc:	2000bb14 	.word	0x2000bb14

08016de0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8016de0:	4b01      	ldr	r3, [pc, #4]	; (8016de8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8016de2:	6818      	ldr	r0, [r3, #0]
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop
 8016de8:	2000bb20 	.word	0x2000bb20

08016dec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8016dec:	4b01      	ldr	r3, [pc, #4]	; (8016df4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8016dee:	6818      	ldr	r0, [r3, #0]
 8016df0:	4770      	bx	lr
 8016df2:	bf00      	nop
 8016df4:	2000bb10 	.word	0x2000bb10

08016df8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016df8:	4b01      	ldr	r3, [pc, #4]	; (8016e00 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016dfa:	6818      	ldr	r0, [r3, #0]
 8016dfc:	4770      	bx	lr
 8016dfe:	bf00      	nop
 8016e00:	2000bb08 	.word	0x2000bb08

08016e04 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016e04:	4b01      	ldr	r3, [pc, #4]	; (8016e0c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016e06:	6818      	ldr	r0, [r3, #0]
 8016e08:	4770      	bx	lr
 8016e0a:	bf00      	nop
 8016e0c:	2000bb1c 	.word	0x2000bb1c

08016e10 <_ZN8touchgfx3LCD4initEv>:
 8016e10:	4770      	bx	lr

08016e12 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016e12:	2000      	movs	r0, #0
 8016e14:	4770      	bx	lr

08016e16 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e1a:	b091      	sub	sp, #68	; 0x44
 8016e1c:	4699      	mov	r9, r3
 8016e1e:	4617      	mov	r7, r2
 8016e20:	2500      	movs	r5, #0
 8016e22:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8016e26:	4680      	mov	r8, r0
 8016e28:	a80e      	add	r0, sp, #56	; 0x38
 8016e2a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8016e2c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8016e30:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8016e34:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016e38:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016e3c:	910d      	str	r1, [sp, #52]	; 0x34
 8016e3e:	950e      	str	r5, [sp, #56]	; 0x38
 8016e40:	f001 faa4 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016e44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016e46:	f8d9 6000 	ldr.w	r6, [r9]
 8016e4a:	6818      	ldr	r0, [r3, #0]
 8016e4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016e4e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8016e52:	1b80      	subs	r0, r0, r6
 8016e54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e58:	eb02 0c06 	add.w	ip, r2, r6
 8016e5c:	ebab 0e0c 	sub.w	lr, fp, ip
 8016e60:	4570      	cmp	r0, lr
 8016e62:	f340 80bc 	ble.w	8016fde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016e66:	88a1      	ldrh	r1, [r4, #4]
 8016e68:	4459      	add	r1, fp
 8016e6a:	b209      	sxth	r1, r1
 8016e6c:	458c      	cmp	ip, r1
 8016e6e:	f300 80b6 	bgt.w	8016fde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016e72:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8016e76:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8016e7a:	4283      	cmp	r3, r0
 8016e7c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8016e80:	edd9 6a07 	vldr	s13, [r9, #28]
 8016e84:	bfa8      	it	ge
 8016e86:	4603      	movge	r3, r0
 8016e88:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8016e8c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8016e90:	45e3      	cmp	fp, ip
 8016e92:	ee07 3a90 	vmov	s15, r3
 8016e96:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016e9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016e9e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016ea2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016ea6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016eaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016eae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016eb2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016eb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016eba:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016ebe:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016ec2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016ec6:	f340 808d 	ble.w	8016fe4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8016eca:	fb9e f5f3 	sdiv	r5, lr, r3
 8016ece:	ee07 5a10 	vmov	s14, r5
 8016ed2:	2d00      	cmp	r5, #0
 8016ed4:	fb03 e415 	mls	r4, r3, r5, lr
 8016ed8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016edc:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016ee0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016ee4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016ee8:	dd12      	ble.n	8016f10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8016eea:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016eee:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016ef2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016ef6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016efe:	bf14      	ite	ne
 8016f00:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016f04:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016f08:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016f0c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016f10:	fb05 f703 	mul.w	r7, r5, r3
 8016f14:	1bc0      	subs	r0, r0, r7
 8016f16:	443e      	add	r6, r7
 8016f18:	1997      	adds	r7, r2, r6
 8016f1a:	4407      	add	r7, r0
 8016f1c:	42b9      	cmp	r1, r7
 8016f1e:	bfbc      	itt	lt
 8016f20:	1a88      	sublt	r0, r1, r2
 8016f22:	1b80      	sublt	r0, r0, r6
 8016f24:	2800      	cmp	r0, #0
 8016f26:	dd5a      	ble.n	8016fde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016f28:	fb90 f1f3 	sdiv	r1, r0, r3
 8016f2c:	fb03 0211 	mls	r2, r3, r1, r0
 8016f30:	b90a      	cbnz	r2, 8016f36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8016f32:	3901      	subs	r1, #1
 8016f34:	461a      	mov	r2, r3
 8016f36:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016f3a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8016f3e:	44a4      	add	ip, r4
 8016f40:	2900      	cmp	r1, #0
 8016f42:	bfcc      	ite	gt
 8016f44:	469e      	movgt	lr, r3
 8016f46:	4696      	movle	lr, r2
 8016f48:	fb03 c505 	mla	r5, r3, r5, ip
 8016f4c:	eef0 6a42 	vmov.f32	s13, s4
 8016f50:	eeb0 7a61 	vmov.f32	s14, s3
 8016f54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f58:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016f5c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016f60:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016f64:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016f68:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016f6c:	ee17 0a90 	vmov	r0, s15
 8016f70:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016f74:	fb90 f6f3 	sdiv	r6, r0, r3
 8016f78:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016f7c:	ee17 0a90 	vmov	r0, s15
 8016f80:	fb90 f7f3 	sdiv	r7, r0, r3
 8016f84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016f88:	f8d0 8000 	ldr.w	r8, [r0]
 8016f8c:	900c      	str	r0, [sp, #48]	; 0x30
 8016f8e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016f90:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016f94:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8016f98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016f9c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8016fa0:	f8cd a020 	str.w	sl, [sp, #32]
 8016fa4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8016fa8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016faa:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8016fae:	9603      	str	r6, [sp, #12]
 8016fb0:	44ca      	add	sl, r9
 8016fb2:	9506      	str	r5, [sp, #24]
 8016fb4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8016fb8:	ee16 0a90 	vmov	r0, s13
 8016fbc:	f8cd a01c 	str.w	sl, [sp, #28]
 8016fc0:	fb07 0704 	mla	r7, r7, r4, r0
 8016fc4:	ee17 0a10 	vmov	r0, s14
 8016fc8:	fb06 0604 	mla	r6, r6, r4, r0
 8016fcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016fce:	9702      	str	r7, [sp, #8]
 8016fd0:	e9cd 3600 	strd	r3, r6, [sp]
 8016fd4:	ebae 0304 	sub.w	r3, lr, r4
 8016fd8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016fdc:	47a8      	blx	r5
 8016fde:	b011      	add	sp, #68	; 0x44
 8016fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fe4:	462c      	mov	r4, r5
 8016fe6:	e797      	b.n	8016f18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08016fe8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8016fe8:	b570      	push	{r4, r5, r6, lr}
 8016fea:	4604      	mov	r4, r0
 8016fec:	2500      	movs	r5, #0
 8016fee:	9804      	ldr	r0, [sp, #16]
 8016ff0:	7223      	strb	r3, [r4, #8]
 8016ff2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016ff6:	8025      	strh	r5, [r4, #0]
 8016ff8:	6061      	str	r1, [r4, #4]
 8016ffa:	7263      	strb	r3, [r4, #9]
 8016ffc:	60e0      	str	r0, [r4, #12]
 8016ffe:	8222      	strh	r2, [r4, #16]
 8017000:	8265      	strh	r5, [r4, #18]
 8017002:	82a5      	strh	r5, [r4, #20]
 8017004:	82e5      	strh	r5, [r4, #22]
 8017006:	8325      	strh	r5, [r4, #24]
 8017008:	8365      	strh	r5, [r4, #26]
 801700a:	83a5      	strh	r5, [r4, #28]
 801700c:	77a5      	strb	r5, [r4, #30]
 801700e:	6803      	ldr	r3, [r0, #0]
 8017010:	695b      	ldr	r3, [r3, #20]
 8017012:	4798      	blx	r3
 8017014:	4606      	mov	r6, r0
 8017016:	b1f8      	cbz	r0, 8017058 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017018:	68e0      	ldr	r0, [r4, #12]
 801701a:	4631      	mov	r1, r6
 801701c:	6803      	ldr	r3, [r0, #0]
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	4798      	blx	r3
 8017022:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017026:	4605      	mov	r5, r0
 8017028:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801702c:	7a83      	ldrb	r3, [r0, #10]
 801702e:	4313      	orrs	r3, r2
 8017030:	83a3      	strh	r3, [r4, #28]
 8017032:	7a63      	ldrb	r3, [r4, #9]
 8017034:	2b04      	cmp	r3, #4
 8017036:	d10f      	bne.n	8017058 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017038:	68e0      	ldr	r0, [r4, #12]
 801703a:	462a      	mov	r2, r5
 801703c:	4631      	mov	r1, r6
 801703e:	6803      	ldr	r3, [r0, #0]
 8017040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017042:	4798      	blx	r3
 8017044:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017048:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801704c:	7aab      	ldrb	r3, [r5, #10]
 801704e:	4313      	orrs	r3, r2
 8017050:	4418      	add	r0, r3
 8017052:	8ba3      	ldrh	r3, [r4, #28]
 8017054:	4418      	add	r0, r3
 8017056:	83a0      	strh	r0, [r4, #28]
 8017058:	4620      	mov	r0, r4
 801705a:	bd70      	pop	{r4, r5, r6, pc}

0801705c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017060:	2400      	movs	r4, #0
 8017062:	b085      	sub	sp, #20
 8017064:	4681      	mov	r9, r0
 8017066:	460f      	mov	r7, r1
 8017068:	4692      	mov	sl, r2
 801706a:	469b      	mov	fp, r3
 801706c:	46a0      	mov	r8, r4
 801706e:	4626      	mov	r6, r4
 8017070:	4554      	cmp	r4, sl
 8017072:	da21      	bge.n	80170b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017074:	2300      	movs	r3, #0
 8017076:	463a      	mov	r2, r7
 8017078:	4659      	mov	r1, fp
 801707a:	4648      	mov	r0, r9
 801707c:	9303      	str	r3, [sp, #12]
 801707e:	ab03      	add	r3, sp, #12
 8017080:	f003 fb82 	bl	801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017084:	4605      	mov	r5, r0
 8017086:	b1b8      	cbz	r0, 80170b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017088:	280a      	cmp	r0, #10
 801708a:	d015      	beq.n	80170b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801708c:	9a03      	ldr	r2, [sp, #12]
 801708e:	b182      	cbz	r2, 80170b2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8017090:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017094:	4641      	mov	r1, r8
 8017096:	7a93      	ldrb	r3, [r2, #10]
 8017098:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801709c:	8895      	ldrh	r5, [r2, #4]
 801709e:	4303      	orrs	r3, r0
 80170a0:	4638      	mov	r0, r7
 80170a2:	9301      	str	r3, [sp, #4]
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170a8:	4798      	blx	r3
 80170aa:	9b01      	ldr	r3, [sp, #4]
 80170ac:	4418      	add	r0, r3
 80170ae:	4406      	add	r6, r0
 80170b0:	b2b6      	uxth	r6, r6
 80170b2:	3401      	adds	r4, #1
 80170b4:	46a8      	mov	r8, r5
 80170b6:	e7db      	b.n	8017070 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80170b8:	4630      	mov	r0, r6
 80170ba:	b005      	add	sp, #20
 80170bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170c0 <_ZN8touchgfx3LCD23drawStringWidthInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 80170c0:	b510      	push	{r4, lr}
 80170c2:	460c      	mov	r4, r1
 80170c4:	4611      	mov	r1, r2
 80170c6:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 80170ca:	f7ff ffc7 	bl	801705c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80170ce:	8823      	ldrh	r3, [r4, #0]
 80170d0:	4418      	add	r0, r3
 80170d2:	8020      	strh	r0, [r4, #0]
 80170d4:	bd10      	pop	{r4, pc}

080170d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80170d6:	2a02      	cmp	r2, #2
 80170d8:	b530      	push	{r4, r5, lr}
 80170da:	d011      	beq.n	8017100 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80170dc:	2a03      	cmp	r2, #3
 80170de:	d01c      	beq.n	801711a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80170e0:	2a01      	cmp	r2, #1
 80170e2:	d10c      	bne.n	80170fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80170e4:	888b      	ldrh	r3, [r1, #4]
 80170e6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80170ea:	8801      	ldrh	r1, [r0, #0]
 80170ec:	1a9b      	subs	r3, r3, r2
 80170ee:	8844      	ldrh	r4, [r0, #2]
 80170f0:	1a5b      	subs	r3, r3, r1
 80170f2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80170f6:	8004      	strh	r4, [r0, #0]
 80170f8:	8043      	strh	r3, [r0, #2]
 80170fa:	8081      	strh	r1, [r0, #4]
 80170fc:	80c2      	strh	r2, [r0, #6]
 80170fe:	bd30      	pop	{r4, r5, pc}
 8017100:	88cb      	ldrh	r3, [r1, #6]
 8017102:	88c2      	ldrh	r2, [r0, #6]
 8017104:	1a9b      	subs	r3, r3, r2
 8017106:	8842      	ldrh	r2, [r0, #2]
 8017108:	1a9b      	subs	r3, r3, r2
 801710a:	888a      	ldrh	r2, [r1, #4]
 801710c:	8881      	ldrh	r1, [r0, #4]
 801710e:	8043      	strh	r3, [r0, #2]
 8017110:	1a52      	subs	r2, r2, r1
 8017112:	8801      	ldrh	r1, [r0, #0]
 8017114:	1a52      	subs	r2, r2, r1
 8017116:	8002      	strh	r2, [r0, #0]
 8017118:	e7f1      	b.n	80170fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801711a:	88cb      	ldrh	r3, [r1, #6]
 801711c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017120:	8841      	ldrh	r1, [r0, #2]
 8017122:	1a9b      	subs	r3, r3, r2
 8017124:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017128:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801712c:	1a5b      	subs	r3, r3, r1
 801712e:	8045      	strh	r5, [r0, #2]
 8017130:	8082      	strh	r2, [r0, #4]
 8017132:	8003      	strh	r3, [r0, #0]
 8017134:	80c4      	strh	r4, [r0, #6]
 8017136:	e7e2      	b.n	80170fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017138 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	b086      	sub	sp, #24
 801713c:	ac02      	add	r4, sp, #8
 801713e:	e884 0006 	stmia.w	r4, {r1, r2}
 8017142:	461a      	mov	r2, r3
 8017144:	ab0c      	add	r3, sp, #48	; 0x30
 8017146:	9305      	str	r3, [sp, #20]
 8017148:	4b0a      	ldr	r3, [pc, #40]	; (8017174 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801714a:	685d      	ldr	r5, [r3, #4]
 801714c:	1069      	asrs	r1, r5, #1
 801714e:	07ed      	lsls	r5, r5, #31
 8017150:	eb00 0601 	add.w	r6, r0, r1
 8017154:	bf46      	itte	mi
 8017156:	681b      	ldrmi	r3, [r3, #0]
 8017158:	5841      	ldrmi	r1, [r0, r1]
 801715a:	681d      	ldrpl	r5, [r3, #0]
 801715c:	4630      	mov	r0, r6
 801715e:	bf48      	it	mi
 8017160:	58cd      	ldrmi	r5, [r1, r3]
 8017162:	4621      	mov	r1, r4
 8017164:	9b05      	ldr	r3, [sp, #20]
 8017166:	9301      	str	r3, [sp, #4]
 8017168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801716a:	9300      	str	r3, [sp, #0]
 801716c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801716e:	47a8      	blx	r5
 8017170:	b006      	add	sp, #24
 8017172:	bd70      	pop	{r4, r5, r6, pc}
 8017174:	20000014 	.word	0x20000014

08017178 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>:
 8017178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801717c:	b08f      	sub	sp, #60	; 0x3c
 801717e:	4617      	mov	r7, r2
 8017180:	4680      	mov	r8, r0
 8017182:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8017186:	9105      	str	r1, [sp, #20]
 8017188:	920c      	str	r2, [sp, #48]	; 0x30
 801718a:	9308      	str	r3, [sp, #32]
 801718c:	e9dd 421b 	ldrd	r4, r2, [sp, #108]	; 0x6c
 8017190:	ea4f 0b62 	mov.w	fp, r2, asr #1
 8017194:	9206      	str	r2, [sp, #24]
 8017196:	eb00 050b 	add.w	r5, r0, fp
 801719a:	2b00      	cmp	r3, #0
 801719c:	f040 814e 	bne.w	801743c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c4>
 80171a0:	461a      	mov	r2, r3
 80171a2:	4699      	mov	r9, r3
 80171a4:	9307      	str	r3, [sp, #28]
 80171a6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80171aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ac:	991d      	ldr	r1, [sp, #116]	; 0x74
 80171ae:	428b      	cmp	r3, r1
 80171b0:	f280 80b1 	bge.w	8017316 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 80171b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80171b6:	881b      	ldrh	r3, [r3, #0]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	f000 80ac 	beq.w	8017316 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 80171be:	2b0a      	cmp	r3, #10
 80171c0:	f000 80a9 	beq.w	8017316 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 80171c4:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80171c8:	f023 0c20 	bic.w	ip, r3, #32
 80171cc:	2901      	cmp	r1, #1
 80171ce:	fa1f fc8c 	uxth.w	ip, ip
 80171d2:	d92c      	bls.n	801722e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 80171d4:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 80171d8:	d029      	beq.n	801722e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 80171da:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80171de:	d026      	beq.n	801722e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 80171e0:	f023 0002 	bic.w	r0, r3, #2
 80171e4:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 80171e8:	4270      	negs	r0, r6
 80171ea:	4170      	adcs	r0, r6
 80171ec:	f5a3 61a0 	sub.w	r1, r3, #1280	; 0x500
 80171f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80171f4:	d31d      	bcc.n	8017232 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xba>
 80171f6:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 80171fa:	f240 36af 	movw	r6, #943	; 0x3af
 80171fe:	b289      	uxth	r1, r1
 8017200:	42b1      	cmp	r1, r6
 8017202:	bf8c      	ite	hi
 8017204:	2100      	movhi	r1, #0
 8017206:	2101      	movls	r1, #1
 8017208:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801720c:	f1bc 0f19 	cmp.w	ip, #25
 8017210:	f240 82c4 	bls.w	801779c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 8017214:	2b7f      	cmp	r3, #127	; 0x7f
 8017216:	f240 82ad 	bls.w	8017774 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 801721a:	2900      	cmp	r1, #0
 801721c:	f040 82aa 	bne.w	8017774 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017220:	f1b9 0f03 	cmp.w	r9, #3
 8017224:	d83f      	bhi.n	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017226:	e8df f009 	tbb	[pc, r9]
 801722a:	2138      	.short	0x2138
 801722c:	5125      	.short	0x5125
 801722e:	2001      	movs	r0, #1
 8017230:	e7dc      	b.n	80171ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x74>
 8017232:	2101      	movs	r1, #1
 8017234:	e7e8      	b.n	8017208 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x90>
 8017236:	2201      	movs	r2, #1
 8017238:	2900      	cmp	r1, #0
 801723a:	d02f      	beq.n	801729c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x124>
 801723c:	f04f 0902 	mov.w	r9, #2
 8017240:	e031      	b.n	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017242:	b199      	cbz	r1, 801726c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf4>
 8017244:	9b06      	ldr	r3, [sp, #24]
 8017246:	9905      	ldr	r1, [sp, #20]
 8017248:	07d8      	lsls	r0, r3, #31
 801724a:	4628      	mov	r0, r5
 801724c:	bf4a      	itet	mi
 801724e:	682b      	ldrmi	r3, [r5, #0]
 8017250:	46a1      	movpl	r9, r4
 8017252:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017256:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017258:	9303      	str	r3, [sp, #12]
 801725a:	2300      	movs	r3, #0
 801725c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017260:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017262:	9200      	str	r2, [sp, #0]
 8017264:	463a      	mov	r2, r7
 8017266:	47c8      	blx	r9
 8017268:	2201      	movs	r2, #1
 801726a:	e7e7      	b.n	801723c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 801726c:	3201      	adds	r2, #1
 801726e:	f04f 0901 	mov.w	r9, #1
 8017272:	e018      	b.n	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017274:	9b06      	ldr	r3, [sp, #24]
 8017276:	4628      	mov	r0, r5
 8017278:	07d9      	lsls	r1, r3, #31
 801727a:	9905      	ldr	r1, [sp, #20]
 801727c:	bf4a      	itet	mi
 801727e:	682b      	ldrmi	r3, [r5, #0]
 8017280:	46a1      	movpl	r9, r4
 8017282:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017286:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017288:	9303      	str	r3, [sp, #12]
 801728a:	2300      	movs	r3, #0
 801728c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017290:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017292:	463a      	mov	r2, r7
 8017294:	9300      	str	r3, [sp, #0]
 8017296:	2301      	movs	r3, #1
 8017298:	47c8      	blx	r9
 801729a:	2201      	movs	r2, #1
 801729c:	4691      	mov	r9, r2
 801729e:	e002      	b.n	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 80172a0:	2900      	cmp	r1, #0
 80172a2:	d030      	beq.n	8017306 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x18e>
 80172a4:	3201      	adds	r2, #1
 80172a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a8:	2100      	movs	r1, #0
 80172aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80172ac:	f1b9 0f01 	cmp.w	r9, #1
 80172b0:	bf08      	it	eq
 80172b2:	f043 0301 	orreq.w	r3, r3, #1
 80172b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80172b8:	930a      	str	r3, [sp, #40]	; 0x28
 80172ba:	f003 fa25 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80172be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80172c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80172c2:	8018      	strh	r0, [r3, #0]
 80172c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172c6:	3301      	adds	r3, #1
 80172c8:	9309      	str	r3, [sp, #36]	; 0x24
 80172ca:	e76e      	b.n	80171aa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x32>
 80172cc:	2001      	movs	r0, #1
 80172ce:	9b07      	ldr	r3, [sp, #28]
 80172d0:	f103 0901 	add.w	r9, r3, #1
 80172d4:	b109      	cbz	r1, 80172da <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x162>
 80172d6:	444a      	add	r2, r9
 80172d8:	e7b0      	b.n	801723c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 80172da:	b1c8      	cbz	r0, 8017310 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x198>
 80172dc:	9b06      	ldr	r3, [sp, #24]
 80172de:	4628      	mov	r0, r5
 80172e0:	9905      	ldr	r1, [sp, #20]
 80172e2:	07db      	lsls	r3, r3, #31
 80172e4:	bf4a      	itet	mi
 80172e6:	682b      	ldrmi	r3, [r5, #0]
 80172e8:	46a2      	movpl	sl, r4
 80172ea:	f853 a004 	ldrmi.w	sl, [r3, r4]
 80172ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172f0:	9303      	str	r3, [sp, #12]
 80172f2:	2300      	movs	r3, #0
 80172f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80172f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80172fa:	463a      	mov	r2, r7
 80172fc:	9300      	str	r3, [sp, #0]
 80172fe:	2301      	movs	r3, #1
 8017300:	47d0      	blx	sl
 8017302:	464a      	mov	r2, r9
 8017304:	e7b3      	b.n	801726e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf6>
 8017306:	2301      	movs	r3, #1
 8017308:	9307      	str	r3, [sp, #28]
 801730a:	f04f 0903 	mov.w	r9, #3
 801730e:	e7ca      	b.n	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017310:	f8cd 901c 	str.w	r9, [sp, #28]
 8017314:	e7f9      	b.n	801730a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x192>
 8017316:	f1b9 0f01 	cmp.w	r9, #1
 801731a:	d10f      	bne.n	801733c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1c4>
 801731c:	9b06      	ldr	r3, [sp, #24]
 801731e:	07d8      	lsls	r0, r3, #31
 8017320:	bf4a      	itet	mi
 8017322:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017326:	46a1      	movpl	r9, r4
 8017328:	f853 9004 	ldrmi.w	r9, [r3, r4]
 801732c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801732e:	9303      	str	r3, [sp, #12]
 8017330:	2300      	movs	r3, #0
 8017332:	9302      	str	r3, [sp, #8]
 8017334:	9201      	str	r2, [sp, #4]
 8017336:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017338:	9200      	str	r2, [sp, #0]
 801733a:	e078      	b.n	801742e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2b6>
 801733c:	f1b9 0f02 	cmp.w	r9, #2
 8017340:	d10c      	bne.n	801735c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1e4>
 8017342:	9b06      	ldr	r3, [sp, #24]
 8017344:	07de      	lsls	r6, r3, #31
 8017346:	bf4a      	itet	mi
 8017348:	f858 300b 	ldrmi.w	r3, [r8, fp]
 801734c:	46a1      	movpl	r9, r4
 801734e:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017352:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017354:	9303      	str	r3, [sp, #12]
 8017356:	2300      	movs	r3, #0
 8017358:	9302      	str	r3, [sp, #8]
 801735a:	e064      	b.n	8017426 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2ae>
 801735c:	f1b9 0f03 	cmp.w	r9, #3
 8017360:	d12d      	bne.n	80173be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8017362:	9b06      	ldr	r3, [sp, #24]
 8017364:	f003 0a01 	and.w	sl, r3, #1
 8017368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801736a:	2b00      	cmp	r3, #0
 801736c:	d04e      	beq.n	801740c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x294>
 801736e:	f1ba 0f00 	cmp.w	sl, #0
 8017372:	d047      	beq.n	8017404 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x28c>
 8017374:	f858 300b 	ldr.w	r3, [r8, fp]
 8017378:	591b      	ldr	r3, [r3, r4]
 801737a:	461e      	mov	r6, r3
 801737c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801737e:	f04f 0900 	mov.w	r9, #0
 8017382:	9905      	ldr	r1, [sp, #20]
 8017384:	4628      	mov	r0, r5
 8017386:	9303      	str	r3, [sp, #12]
 8017388:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801738a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 801738e:	9300      	str	r3, [sp, #0]
 8017390:	463a      	mov	r2, r7
 8017392:	2301      	movs	r3, #1
 8017394:	47b0      	blx	r6
 8017396:	464b      	mov	r3, r9
 8017398:	f1ba 0f00 	cmp.w	sl, #0
 801739c:	d034      	beq.n	8017408 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x290>
 801739e:	f858 200b 	ldr.w	r2, [r8, fp]
 80173a2:	f852 a004 	ldr.w	sl, [r2, r4]
 80173a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80173a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80173ac:	9b07      	ldr	r3, [sp, #28]
 80173ae:	9301      	str	r3, [sp, #4]
 80173b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	2300      	movs	r3, #0
 80173b6:	463a      	mov	r2, r7
 80173b8:	9905      	ldr	r1, [sp, #20]
 80173ba:	4628      	mov	r0, r5
 80173bc:	47d0      	blx	sl
 80173be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173c0:	b18b      	cbz	r3, 80173e6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x26e>
 80173c2:	9b06      	ldr	r3, [sp, #24]
 80173c4:	2201      	movs	r2, #1
 80173c6:	4628      	mov	r0, r5
 80173c8:	07d9      	lsls	r1, r3, #31
 80173ca:	9905      	ldr	r1, [sp, #20]
 80173cc:	bf44      	itt	mi
 80173ce:	f858 300b 	ldrmi.w	r3, [r8, fp]
 80173d2:	591c      	ldrmi	r4, [r3, r4]
 80173d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80173d6:	9303      	str	r3, [sp, #12]
 80173d8:	2300      	movs	r3, #0
 80173da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80173de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80173e0:	9200      	str	r2, [sp, #0]
 80173e2:	463a      	mov	r2, r7
 80173e4:	47a0      	blx	r4
 80173e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80173e8:	881b      	ldrh	r3, [r3, #0]
 80173ea:	2b0a      	cmp	r3, #10
 80173ec:	f040 81c0 	bne.w	8017770 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f8>
 80173f0:	9908      	ldr	r1, [sp, #32]
 80173f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80173f4:	f003 f988 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80173f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80173fa:	8018      	strh	r0, [r3, #0]
 80173fc:	2001      	movs	r0, #1
 80173fe:	b00f      	add	sp, #60	; 0x3c
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017404:	4626      	mov	r6, r4
 8017406:	e7b9      	b.n	801737c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x204>
 8017408:	46a2      	mov	sl, r4
 801740a:	e7cc      	b.n	80173a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x22e>
 801740c:	f1ba 0f00 	cmp.w	sl, #0
 8017410:	d012      	beq.n	8017438 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c0>
 8017412:	f858 300b 	ldr.w	r3, [r8, fp]
 8017416:	f853 9004 	ldr.w	r9, [r3, r4]
 801741a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801741c:	9303      	str	r3, [sp, #12]
 801741e:	2300      	movs	r3, #0
 8017420:	9302      	str	r3, [sp, #8]
 8017422:	9b07      	ldr	r3, [sp, #28]
 8017424:	441a      	add	r2, r3
 8017426:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017428:	9201      	str	r2, [sp, #4]
 801742a:	9300      	str	r3, [sp, #0]
 801742c:	2301      	movs	r3, #1
 801742e:	463a      	mov	r2, r7
 8017430:	9905      	ldr	r1, [sp, #20]
 8017432:	4628      	mov	r0, r5
 8017434:	47c8      	blx	r9
 8017436:	e7c2      	b.n	80173be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8017438:	46a1      	mov	r9, r4
 801743a:	e7ee      	b.n	801741a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2a2>
 801743c:	2300      	movs	r3, #0
 801743e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017442:	9307      	str	r3, [sp, #28]
 8017444:	461a      	mov	r2, r3
 8017446:	469a      	mov	sl, r3
 8017448:	9b06      	ldr	r3, [sp, #24]
 801744a:	f003 0301 	and.w	r3, r3, #1
 801744e:	9309      	str	r3, [sp, #36]	; 0x24
 8017450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017452:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017454:	428b      	cmp	r3, r1
 8017456:	f280 813f 	bge.w	80176d8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 801745a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	2b00      	cmp	r3, #0
 8017460:	f000 813a 	beq.w	80176d8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 8017464:	2b0a      	cmp	r3, #10
 8017466:	f000 8137 	beq.w	80176d8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 801746a:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 801746e:	f023 0c20 	bic.w	ip, r3, #32
 8017472:	2901      	cmp	r1, #1
 8017474:	fa1f fc8c 	uxth.w	ip, ip
 8017478:	d934      	bls.n	80174e4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 801747a:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 801747e:	d031      	beq.n	80174e4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 8017480:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8017484:	d02e      	beq.n	80174e4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 8017486:	f023 0102 	bic.w	r1, r3, #2
 801748a:	f1a1 0e3c 	sub.w	lr, r1, #60	; 0x3c
 801748e:	f1de 0100 	rsbs	r1, lr, #0
 8017492:	eb41 010e 	adc.w	r1, r1, lr
 8017496:	f5a3 60a0 	sub.w	r0, r3, #1280	; 0x500
 801749a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801749e:	d323      	bcc.n	80174e8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x370>
 80174a0:	f503 6096 	add.w	r0, r3, #1200	; 0x4b0
 80174a4:	b280      	uxth	r0, r0
 80174a6:	f5b0 7f6c 	cmp.w	r0, #944	; 0x3b0
 80174aa:	bf38      	it	cc
 80174ac:	2101      	movcc	r1, #1
 80174ae:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80174b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80174b6:	f1bc 0f19 	cmp.w	ip, #25
 80174ba:	b280      	uxth	r0, r0
 80174bc:	d905      	bls.n	80174ca <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x352>
 80174be:	2b7f      	cmp	r3, #127	; 0x7f
 80174c0:	f240 817c 	bls.w	80177bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 80174c4:	2900      	cmp	r1, #0
 80174c6:	f040 8179 	bne.w	80177bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 80174ca:	f1ba 0f07 	cmp.w	sl, #7
 80174ce:	d818      	bhi.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80174d0:	e8df f01a 	tbh	[pc, sl, lsl #1]
 80174d4:	0017002a 	.word	0x0017002a
 80174d8:	00170044 	.word	0x00170044
 80174dc:	007e0069 	.word	0x007e0069
 80174e0:	00d90075 	.word	0x00d90075
 80174e4:	2101      	movs	r1, #1
 80174e6:	e7d6      	b.n	8017496 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x31e>
 80174e8:	2101      	movs	r1, #1
 80174ea:	e7e0      	b.n	80174ae <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x336>
 80174ec:	2300      	movs	r3, #0
 80174ee:	2809      	cmp	r0, #9
 80174f0:	f04f 0201 	mov.w	r2, #1
 80174f4:	d92f      	bls.n	8017556 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	bf0c      	ite	eq
 80174fa:	f04f 0a02 	moveq.w	sl, #2
 80174fe:	f04f 0a06 	movne.w	sl, #6
 8017502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017504:	9908      	ldr	r1, [sp, #32]
 8017506:	f1ba 0f02 	cmp.w	sl, #2
 801750a:	bf08      	it	eq
 801750c:	f043 0301 	orreq.w	r3, r3, #1
 8017510:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017512:	920d      	str	r2, [sp, #52]	; 0x34
 8017514:	930b      	str	r3, [sp, #44]	; 0x2c
 8017516:	f003 f8f7 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801751a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801751c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801751e:	8018      	strh	r0, [r3, #0]
 8017520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017522:	3301      	adds	r3, #1
 8017524:	930a      	str	r3, [sp, #40]	; 0x28
 8017526:	e793      	b.n	8017450 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2d8>
 8017528:	2301      	movs	r3, #1
 801752a:	e7e0      	b.n	80174ee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x376>
 801752c:	2300      	movs	r3, #0
 801752e:	2809      	cmp	r0, #9
 8017530:	d818      	bhi.n	8017564 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3ec>
 8017532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017534:	b1a3      	cbz	r3, 8017560 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3e8>
 8017536:	682b      	ldr	r3, [r5, #0]
 8017538:	f853 9004 	ldr.w	r9, [r3, r4]
 801753c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801753e:	4628      	mov	r0, r5
 8017540:	9905      	ldr	r1, [sp, #20]
 8017542:	9303      	str	r3, [sp, #12]
 8017544:	2300      	movs	r3, #0
 8017546:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801754a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801754c:	463a      	mov	r2, r7
 801754e:	9300      	str	r3, [sp, #0]
 8017550:	2301      	movs	r3, #1
 8017552:	47c8      	blx	r9
 8017554:	2201      	movs	r2, #1
 8017556:	f04f 0a04 	mov.w	sl, #4
 801755a:	e7d2      	b.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 801755c:	2301      	movs	r3, #1
 801755e:	e7e6      	b.n	801752e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3b6>
 8017560:	46a1      	mov	r9, r4
 8017562:	e7eb      	b.n	801753c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3c4>
 8017564:	b1b3      	cbz	r3, 8017594 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41c>
 8017566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017568:	b193      	cbz	r3, 8017590 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x418>
 801756a:	682b      	ldr	r3, [r5, #0]
 801756c:	f853 9004 	ldr.w	r9, [r3, r4]
 8017570:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017572:	4628      	mov	r0, r5
 8017574:	9905      	ldr	r1, [sp, #20]
 8017576:	9303      	str	r3, [sp, #12]
 8017578:	2300      	movs	r3, #0
 801757a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801757e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017580:	463a      	mov	r2, r7
 8017582:	9300      	str	r3, [sp, #0]
 8017584:	2301      	movs	r3, #1
 8017586:	47c8      	blx	r9
 8017588:	2201      	movs	r2, #1
 801758a:	f04f 0a06 	mov.w	sl, #6
 801758e:	e7b8      	b.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8017590:	46a1      	mov	r9, r4
 8017592:	e7ed      	b.n	8017570 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3f8>
 8017594:	3201      	adds	r2, #1
 8017596:	f04f 0a02 	mov.w	sl, #2
 801759a:	e7b2      	b.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 801759c:	2100      	movs	r1, #0
 801759e:	2809      	cmp	r0, #9
 80175a0:	d803      	bhi.n	80175aa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x432>
 80175a2:	3201      	adds	r2, #1
 80175a4:	e7d7      	b.n	8017556 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 80175a6:	2101      	movs	r1, #1
 80175a8:	e7f9      	b.n	801759e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x426>
 80175aa:	f023 0002 	bic.w	r0, r3, #2
 80175ae:	282c      	cmp	r0, #44	; 0x2c
 80175b0:	f000 8085 	beq.w	80176be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 80175b4:	2b3a      	cmp	r3, #58	; 0x3a
 80175b6:	f000 8082 	beq.w	80176be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 80175ba:	2900      	cmp	r1, #0
 80175bc:	d04d      	beq.n	801765a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4e2>
 80175be:	3201      	adds	r2, #1
 80175c0:	e7e3      	b.n	801758a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 80175c2:	2300      	movs	r3, #0
 80175c4:	2809      	cmp	r0, #9
 80175c6:	d805      	bhi.n	80175d4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x45c>
 80175c8:	9b07      	ldr	r3, [sp, #28]
 80175ca:	3301      	adds	r3, #1
 80175cc:	441a      	add	r2, r3
 80175ce:	e7c2      	b.n	8017556 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 80175d0:	2301      	movs	r3, #1
 80175d2:	e7f7      	b.n	80175c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x44c>
 80175d4:	b343      	cbz	r3, 8017628 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4b0>
 80175d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175d8:	b313      	cbz	r3, 8017620 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4a8>
 80175da:	682b      	ldr	r3, [r5, #0]
 80175dc:	f853 a004 	ldr.w	sl, [r3, r4]
 80175e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80175e2:	f04f 0900 	mov.w	r9, #0
 80175e6:	9905      	ldr	r1, [sp, #20]
 80175e8:	4628      	mov	r0, r5
 80175ea:	9303      	str	r3, [sp, #12]
 80175ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80175ee:	e9cd 2901 	strd	r2, r9, [sp, #4]
 80175f2:	9300      	str	r3, [sp, #0]
 80175f4:	463a      	mov	r2, r7
 80175f6:	464b      	mov	r3, r9
 80175f8:	47d0      	blx	sl
 80175fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175fc:	464b      	mov	r3, r9
 80175fe:	b18a      	cbz	r2, 8017624 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ac>
 8017600:	682a      	ldr	r2, [r5, #0]
 8017602:	f852 a004 	ldr.w	sl, [r2, r4]
 8017606:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017608:	4628      	mov	r0, r5
 801760a:	9905      	ldr	r1, [sp, #20]
 801760c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017610:	9b07      	ldr	r3, [sp, #28]
 8017612:	463a      	mov	r2, r7
 8017614:	9301      	str	r3, [sp, #4]
 8017616:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017618:	9300      	str	r3, [sp, #0]
 801761a:	2301      	movs	r3, #1
 801761c:	47d0      	blx	sl
 801761e:	e7b3      	b.n	8017588 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x410>
 8017620:	46a2      	mov	sl, r4
 8017622:	e7dd      	b.n	80175e0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x468>
 8017624:	46a2      	mov	sl, r4
 8017626:	e7ee      	b.n	8017606 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x48e>
 8017628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801762a:	b183      	cbz	r3, 801764e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4d6>
 801762c:	682b      	ldr	r3, [r5, #0]
 801762e:	f853 9004 	ldr.w	r9, [r3, r4]
 8017632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017634:	4628      	mov	r0, r5
 8017636:	9905      	ldr	r1, [sp, #20]
 8017638:	9303      	str	r3, [sp, #12]
 801763a:	2300      	movs	r3, #0
 801763c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017640:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017642:	9200      	str	r2, [sp, #0]
 8017644:	463a      	mov	r2, r7
 8017646:	47c8      	blx	r9
 8017648:	9b07      	ldr	r3, [sp, #28]
 801764a:	1c5a      	adds	r2, r3, #1
 801764c:	e7a3      	b.n	8017596 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801764e:	46a1      	mov	r9, r4
 8017650:	e7ef      	b.n	8017632 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ba>
 8017652:	2809      	cmp	r0, #9
 8017654:	d9b3      	bls.n	80175be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x446>
 8017656:	2900      	cmp	r1, #0
 8017658:	d036      	beq.n	80176c8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x550>
 801765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765c:	b17b      	cbz	r3, 801767e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x506>
 801765e:	682b      	ldr	r3, [r5, #0]
 8017660:	f853 9004 	ldr.w	r9, [r3, r4]
 8017664:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017666:	4628      	mov	r0, r5
 8017668:	9905      	ldr	r1, [sp, #20]
 801766a:	9303      	str	r3, [sp, #12]
 801766c:	2300      	movs	r3, #0
 801766e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017672:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017674:	9200      	str	r2, [sp, #0]
 8017676:	463a      	mov	r2, r7
 8017678:	47c8      	blx	r9
 801767a:	2201      	movs	r2, #1
 801767c:	e78b      	b.n	8017596 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801767e:	46a1      	mov	r9, r4
 8017680:	e7f0      	b.n	8017664 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ec>
 8017682:	2809      	cmp	r0, #9
 8017684:	d803      	bhi.n	801768e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x516>
 8017686:	9b07      	ldr	r3, [sp, #28]
 8017688:	3301      	adds	r3, #1
 801768a:	441a      	add	r2, r3
 801768c:	e77d      	b.n	801758a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 801768e:	9b07      	ldr	r3, [sp, #28]
 8017690:	f103 0901 	add.w	r9, r3, #1
 8017694:	b1e9      	cbz	r1, 80176d2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x55a>
 8017696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017698:	b17b      	cbz	r3, 80176ba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x542>
 801769a:	682b      	ldr	r3, [r5, #0]
 801769c:	f853 a004 	ldr.w	sl, [r3, r4]
 80176a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176a2:	4628      	mov	r0, r5
 80176a4:	9905      	ldr	r1, [sp, #20]
 80176a6:	9303      	str	r3, [sp, #12]
 80176a8:	2300      	movs	r3, #0
 80176aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80176ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80176b0:	9200      	str	r2, [sp, #0]
 80176b2:	463a      	mov	r2, r7
 80176b4:	47d0      	blx	sl
 80176b6:	464a      	mov	r2, r9
 80176b8:	e76d      	b.n	8017596 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 80176ba:	46a2      	mov	sl, r4
 80176bc:	e7f0      	b.n	80176a0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x528>
 80176be:	2301      	movs	r3, #1
 80176c0:	f04f 0a05 	mov.w	sl, #5
 80176c4:	9307      	str	r3, [sp, #28]
 80176c6:	e71c      	b.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80176c8:	2301      	movs	r3, #1
 80176ca:	f04f 0a07 	mov.w	sl, #7
 80176ce:	9307      	str	r3, [sp, #28]
 80176d0:	e717      	b.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80176d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80176d6:	e714      	b.n	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80176d8:	f1ba 0f02 	cmp.w	sl, #2
 80176dc:	f43f ae31 	beq.w	8017342 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1ca>
 80176e0:	f00a 0a05 	and.w	sl, sl, #5
 80176e4:	f1ba 0f04 	cmp.w	sl, #4
 80176e8:	f43f ae18 	beq.w	801731c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1a4>
 80176ec:	f1ba 0f05 	cmp.w	sl, #5
 80176f0:	f47f ae65 	bne.w	80173be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 80176f4:	9b06      	ldr	r3, [sp, #24]
 80176f6:	f003 0a01 	and.w	sl, r3, #1
 80176fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176fc:	b343      	cbz	r3, 8017750 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d8>
 80176fe:	f1ba 0f00 	cmp.w	sl, #0
 8017702:	d021      	beq.n	8017748 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d0>
 8017704:	f858 300b 	ldr.w	r3, [r8, fp]
 8017708:	591b      	ldr	r3, [r3, r4]
 801770a:	461e      	mov	r6, r3
 801770c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801770e:	f04f 0900 	mov.w	r9, #0
 8017712:	9905      	ldr	r1, [sp, #20]
 8017714:	4628      	mov	r0, r5
 8017716:	9303      	str	r3, [sp, #12]
 8017718:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801771a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 801771e:	9300      	str	r3, [sp, #0]
 8017720:	463a      	mov	r2, r7
 8017722:	464b      	mov	r3, r9
 8017724:	47b0      	blx	r6
 8017726:	464b      	mov	r3, r9
 8017728:	f1ba 0f00 	cmp.w	sl, #0
 801772c:	d00e      	beq.n	801774c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d4>
 801772e:	f858 200b 	ldr.w	r2, [r8, fp]
 8017732:	f852 a004 	ldr.w	sl, [r2, r4]
 8017736:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017738:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801773c:	9b07      	ldr	r3, [sp, #28]
 801773e:	9301      	str	r3, [sp, #4]
 8017740:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	2301      	movs	r3, #1
 8017746:	e636      	b.n	80173b6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x23e>
 8017748:	4626      	mov	r6, r4
 801774a:	e7df      	b.n	801770c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x594>
 801774c:	46a2      	mov	sl, r4
 801774e:	e7f2      	b.n	8017736 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5be>
 8017750:	f1ba 0f00 	cmp.w	sl, #0
 8017754:	d00a      	beq.n	801776c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f4>
 8017756:	f858 300b 	ldr.w	r3, [r8, fp]
 801775a:	f853 9004 	ldr.w	r9, [r3, r4]
 801775e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017760:	9907      	ldr	r1, [sp, #28]
 8017762:	9303      	str	r3, [sp, #12]
 8017764:	2300      	movs	r3, #0
 8017766:	440a      	add	r2, r1
 8017768:	9302      	str	r3, [sp, #8]
 801776a:	e5e3      	b.n	8017334 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1bc>
 801776c:	46a1      	mov	r9, r4
 801776e:	e7f6      	b.n	801775e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5e6>
 8017770:	2000      	movs	r0, #0
 8017772:	e644      	b.n	80173fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x286>
 8017774:	3b30      	subs	r3, #48	; 0x30
 8017776:	2b09      	cmp	r3, #9
 8017778:	d910      	bls.n	801779c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 801777a:	b978      	cbnz	r0, 801779c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 801777c:	f1b9 0f03 	cmp.w	r9, #3
 8017780:	f63f ad91 	bhi.w	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017784:	a301      	add	r3, pc, #4	; (adr r3, 801778c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x614>)
 8017786:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 801778a:	bf00      	nop
 801778c:	08017237 	.word	0x08017237
 8017790:	08017243 	.word	0x08017243
 8017794:	080172a1 	.word	0x080172a1
 8017798:	080172cf 	.word	0x080172cf
 801779c:	f1b9 0f03 	cmp.w	r9, #3
 80177a0:	f63f ad81 	bhi.w	80172a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 80177a4:	a301      	add	r3, pc, #4	; (adr r3, 80177ac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x634>)
 80177a6:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 80177aa:	bf00      	nop
 80177ac:	08017237 	.word	0x08017237
 80177b0:	08017243 	.word	0x08017243
 80177b4:	08017275 	.word	0x08017275
 80177b8:	080172cd 	.word	0x080172cd
 80177bc:	f1ba 0f07 	cmp.w	sl, #7
 80177c0:	f63f ae9f 	bhi.w	8017502 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80177c4:	a601      	add	r6, pc, #4	; (adr r6, 80177cc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x654>)
 80177c6:	f856 f02a 	ldr.w	pc, [r6, sl, lsl #2]
 80177ca:	bf00      	nop
 80177cc:	080174ed 	.word	0x080174ed
 80177d0:	08017503 	.word	0x08017503
 80177d4:	0801752d 	.word	0x0801752d
 80177d8:	08017503 	.word	0x08017503
 80177dc:	0801759d 	.word	0x0801759d
 80177e0:	080175c3 	.word	0x080175c3
 80177e4:	08017653 	.word	0x08017653
 80177e8:	08017683 	.word	0x08017683

080177ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80177ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f0:	b09d      	sub	sp, #116	; 0x74
 80177f2:	9114      	str	r1, [sp, #80]	; 0x50
 80177f4:	9315      	str	r3, [sp, #84]	; 0x54
 80177f6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80177f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80177fa:	8809      	ldrh	r1, [r1, #0]
 80177fc:	889b      	ldrh	r3, [r3, #4]
 80177fe:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8017800:	440b      	add	r3, r1
 8017802:	9210      	str	r2, [sp, #64]	; 0x40
 8017804:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8017808:	b21b      	sxth	r3, r3
 801780a:	900f      	str	r0, [sp, #60]	; 0x3c
 801780c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8017810:	930e      	str	r3, [sp, #56]	; 0x38
 8017812:	6833      	ldr	r3, [r6, #0]
 8017814:	7a59      	ldrb	r1, [r3, #9]
 8017816:	7a1b      	ldrb	r3, [r3, #8]
 8017818:	9113      	str	r1, [sp, #76]	; 0x4c
 801781a:	9312      	str	r3, [sp, #72]	; 0x48
 801781c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801781e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8017822:	2a00      	cmp	r2, #0
 8017824:	d059      	beq.n	80178da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8017826:	7c33      	ldrb	r3, [r6, #16]
 8017828:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801782a:	2b04      	cmp	r3, #4
 801782c:	bf14      	ite	ne
 801782e:	2301      	movne	r3, #1
 8017830:	2302      	moveq	r3, #2
 8017832:	4413      	add	r3, r2
 8017834:	f04f 0800 	mov.w	r8, #0
 8017838:	930d      	str	r3, [sp, #52]	; 0x34
 801783a:	4645      	mov	r5, r8
 801783c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8017840:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8017844:	4293      	cmp	r3, r2
 8017846:	da75      	bge.n	8017934 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8017848:	2300      	movs	r3, #0
 801784a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801784c:	6832      	ldr	r2, [r6, #0]
 801784e:	931a      	str	r3, [sp, #104]	; 0x68
 8017850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017852:	428b      	cmp	r3, r1
 8017854:	db43      	blt.n	80178de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8017856:	6813      	ldr	r3, [r2, #0]
 8017858:	4610      	mov	r0, r2
 801785a:	695b      	ldr	r3, [r3, #20]
 801785c:	4798      	blx	r3
 801785e:	4681      	mov	r9, r0
 8017860:	6830      	ldr	r0, [r6, #0]
 8017862:	aa1b      	add	r2, sp, #108	; 0x6c
 8017864:	4649      	mov	r1, r9
 8017866:	6803      	ldr	r3, [r0, #0]
 8017868:	689f      	ldr	r7, [r3, #8]
 801786a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801786e:	47b8      	blx	r7
 8017870:	901a      	str	r0, [sp, #104]	; 0x68
 8017872:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8017876:	45d1      	cmp	r9, sl
 8017878:	d045      	beq.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801787a:	f242 070b 	movw	r7, #8203	; 0x200b
 801787e:	45b9      	cmp	r9, r7
 8017880:	d041      	beq.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017882:	f1b9 0f00 	cmp.w	r9, #0
 8017886:	f000 80ee 	beq.w	8017a66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801788a:	f1b9 0f0a 	cmp.w	r9, #10
 801788e:	d057      	beq.n	8017940 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017890:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017892:	b383      	cbz	r3, 80178f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8017894:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8017898:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801789a:	2a00      	cmp	r2, #0
 801789c:	f000 80d2 	beq.w	8017a44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 80178a0:	f1bb 0f00 	cmp.w	fp, #0
 80178a4:	d100      	bne.n	80178a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 80178a6:	4444      	add	r4, r8
 80178a8:	f992 800d 	ldrsb.w	r8, [r2, #13]
 80178ac:	f1bb 0f01 	cmp.w	fp, #1
 80178b0:	f408 7380 	and.w	r3, r8, #256	; 0x100
 80178b4:	f892 800a 	ldrb.w	r8, [r2, #10]
 80178b8:	ea48 0803 	orr.w	r8, r8, r3
 80178bc:	d128      	bne.n	8017910 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 80178be:	eba4 0408 	sub.w	r4, r4, r8
 80178c2:	2d00      	cmp	r5, #0
 80178c4:	d143      	bne.n	801794e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80178c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80178c8:	eb08 0304 	add.w	r3, r8, r4
 80178cc:	4413      	add	r3, r2
 80178ce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80178d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80178d4:	4293      	cmp	r3, r2
 80178d6:	da44      	bge.n	8017962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80178d8:	e02b      	b.n	8017932 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 80178da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80178dc:	e7aa      	b.n	8017834 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 80178de:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80178e2:	4659      	mov	r1, fp
 80178e4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80178e6:	9301      	str	r3, [sp, #4]
 80178e8:	ab1b      	add	r3, sp, #108	; 0x6c
 80178ea:	9300      	str	r3, [sp, #0]
 80178ec:	ab1a      	add	r3, sp, #104	; 0x68
 80178ee:	f002 ff7f 	bl	801a7f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80178f2:	4681      	mov	r9, r0
 80178f4:	e7bd      	b.n	8017872 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80178f6:	6830      	ldr	r0, [r6, #0]
 80178f8:	6803      	ldr	r3, [r0, #0]
 80178fa:	691b      	ldr	r3, [r3, #16]
 80178fc:	4798      	blx	r3
 80178fe:	4550      	cmp	r0, sl
 8017900:	d001      	beq.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017902:	42b8      	cmp	r0, r7
 8017904:	d1c8      	bne.n	8017898 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017908:	464d      	mov	r5, r9
 801790a:	3301      	adds	r3, #1
 801790c:	930c      	str	r3, [sp, #48]	; 0x30
 801790e:	e797      	b.n	8017840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8017910:	2d00      	cmp	r5, #0
 8017912:	f000 80aa 	beq.w	8017a6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8017916:	f1bb 0f00 	cmp.w	fp, #0
 801791a:	d118      	bne.n	801794e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801791c:	6830      	ldr	r0, [r6, #0]
 801791e:	4629      	mov	r1, r5
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017924:	4798      	blx	r3
 8017926:	4404      	add	r4, r0
 8017928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801792a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801792c:	1ae3      	subs	r3, r4, r3
 801792e:	4293      	cmp	r3, r2
 8017930:	dd17      	ble.n	8017962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017932:	464d      	mov	r5, r9
 8017934:	2d00      	cmp	r5, #0
 8017936:	f000 8096 	beq.w	8017a66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801793a:	2d0a      	cmp	r5, #10
 801793c:	f040 8084 	bne.w	8017a48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8017940:	250a      	movs	r5, #10
 8017942:	fab5 f085 	clz	r0, r5
 8017946:	0940      	lsrs	r0, r0, #5
 8017948:	b01d      	add	sp, #116	; 0x74
 801794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801794e:	6830      	ldr	r0, [r6, #0]
 8017950:	4629      	mov	r1, r5
 8017952:	6803      	ldr	r3, [r0, #0]
 8017954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017956:	4798      	blx	r3
 8017958:	f1bb 0f01 	cmp.w	fp, #1
 801795c:	eba4 0400 	sub.w	r4, r4, r0
 8017960:	d0b1      	beq.n	80178c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017962:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017964:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017966:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801796a:	f9b3 5000 	ldrsh.w	r5, [r3]
 801796e:	7b43      	ldrb	r3, [r0, #13]
 8017970:	4421      	add	r1, r4
 8017972:	015b      	lsls	r3, r3, #5
 8017974:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017978:	7983      	ldrb	r3, [r0, #6]
 801797a:	4313      	orrs	r3, r2
 801797c:	440b      	add	r3, r1
 801797e:	42ab      	cmp	r3, r5
 8017980:	dbc1      	blt.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017984:	4299      	cmp	r1, r3
 8017986:	dabe      	bge.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017988:	6830      	ldr	r0, [r6, #0]
 801798a:	42a5      	cmp	r5, r4
 801798c:	6803      	ldr	r3, [r0, #0]
 801798e:	bfcc      	ite	gt
 8017990:	1b2d      	subgt	r5, r5, r4
 8017992:	2500      	movle	r5, #0
 8017994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017996:	bfc8      	it	gt
 8017998:	b2ad      	uxthgt	r5, r5
 801799a:	4798      	blx	r3
 801799c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801799e:	4935      	ldr	r1, [pc, #212]	; (8017a74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 80179a0:	7b5a      	ldrb	r2, [r3, #13]
 80179a2:	f893 e008 	ldrb.w	lr, [r3, #8]
 80179a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80179aa:	bf18      	it	ne
 80179ac:	468c      	movne	ip, r1
 80179ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80179b0:	bf08      	it	eq
 80179b2:	f04f 0c00 	moveq.w	ip, #0
 80179b6:	4408      	add	r0, r1
 80179b8:	00d1      	lsls	r1, r2, #3
 80179ba:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80179be:	ea41 070e 	orr.w	r7, r1, lr
 80179c2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80179c4:	ea4c 0707 	orr.w	r7, ip, r7
 80179c8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80179cc:	1bc7      	subs	r7, r0, r7
 80179ce:	b2bf      	uxth	r7, r7
 80179d0:	fa0f fa87 	sxth.w	sl, r7
 80179d4:	4551      	cmp	r1, sl
 80179d6:	dd33      	ble.n	8017a40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 80179d8:	0112      	lsls	r2, r2, #4
 80179da:	79d8      	ldrb	r0, [r3, #7]
 80179dc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80179e0:	4302      	orrs	r2, r0
 80179e2:	4492      	add	sl, r2
 80179e4:	4551      	cmp	r1, sl
 80179e6:	dc8e      	bgt.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80179e8:	1bcf      	subs	r7, r1, r7
 80179ea:	468a      	mov	sl, r1
 80179ec:	b2bf      	uxth	r7, r7
 80179ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80179f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179f2:	6830      	ldr	r0, [r6, #0]
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	6801      	ldr	r1, [r0, #0]
 80179f8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80179fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80179fc:	9311      	str	r3, [sp, #68]	; 0x44
 80179fe:	9216      	str	r2, [sp, #88]	; 0x58
 8017a00:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8017a02:	4788      	blx	r1
 8017a04:	79b1      	ldrb	r1, [r6, #6]
 8017a06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017a08:	910b      	str	r1, [sp, #44]	; 0x2c
 8017a0a:	7bb1      	ldrb	r1, [r6, #14]
 8017a0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017a0e:	910a      	str	r1, [sp, #40]	; 0x28
 8017a10:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8017a14:	9109      	str	r1, [sp, #36]	; 0x24
 8017a16:	68b1      	ldr	r1, [r6, #8]
 8017a18:	9305      	str	r3, [sp, #20]
 8017a1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017a1c:	9206      	str	r2, [sp, #24]
 8017a1e:	e9cd a501 	strd	sl, r5, [sp, #4]
 8017a22:	4425      	add	r5, r4
 8017a24:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8017a28:	b22d      	sxth	r5, r5
 8017a2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a2c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017a30:	9500      	str	r5, [sp, #0]
 8017a32:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017a34:	681a      	ldr	r2, [r3, #0]
 8017a36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017a3c:	47a8      	blx	r5
 8017a3e:	e762      	b.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017a40:	2700      	movs	r7, #0
 8017a42:	e7d4      	b.n	80179ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8017a44:	4690      	mov	r8, r2
 8017a46:	e75e      	b.n	8017906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017a48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a4a:	3401      	adds	r4, #1
 8017a4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017a4e:	429c      	cmp	r4, r3
 8017a50:	f6bf af77 	bge.w	8017942 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017a54:	4659      	mov	r1, fp
 8017a56:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017a58:	f002 fe56 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017a5c:	4605      	mov	r5, r0
 8017a5e:	b110      	cbz	r0, 8017a66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017a60:	280a      	cmp	r0, #10
 8017a62:	d1f2      	bne.n	8017a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8017a64:	e76c      	b.n	8017940 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017a66:	2500      	movs	r5, #0
 8017a68:	e76b      	b.n	8017942 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017a6a:	f1bb 0f00 	cmp.w	fp, #0
 8017a6e:	f43f af5b 	beq.w	8017928 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8017a72:	e776      	b.n	8017962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017a74:	fffffe00 	.word	0xfffffe00

08017a78 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 8017a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a7c:	b08b      	sub	sp, #44	; 0x2c
 8017a7e:	460e      	mov	r6, r1
 8017a80:	4690      	mov	r8, r2
 8017a82:	4699      	mov	r9, r3
 8017a84:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8017a86:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8017a8a:	6929      	ldr	r1, [r5, #16]
 8017a8c:	9009      	str	r0, [sp, #36]	; 0x24
 8017a8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017a90:	6809      	ldr	r1, [r1, #0]
 8017a92:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017a94:	f7ff fae2 	bl	801705c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017a98:	4604      	mov	r4, r0
 8017a9a:	f1bb 0f00 	cmp.w	fp, #0
 8017a9e:	d022      	beq.n	8017ae6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8017aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8017aa4:	4640      	mov	r0, r8
 8017aa6:	695b      	ldr	r3, [r3, #20]
 8017aa8:	4798      	blx	r3
 8017aaa:	4682      	mov	sl, r0
 8017aac:	b1d8      	cbz	r0, 8017ae6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8017aae:	f8d8 3000 	ldr.w	r3, [r8]
 8017ab2:	4601      	mov	r1, r0
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	68db      	ldr	r3, [r3, #12]
 8017ab8:	4798      	blx	r3
 8017aba:	4602      	mov	r2, r0
 8017abc:	f990 700d 	ldrsb.w	r7, [r0, #13]
 8017ac0:	692b      	ldr	r3, [r5, #16]
 8017ac2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017ac6:	7a97      	ldrb	r7, [r2, #10]
 8017ac8:	7c1b      	ldrb	r3, [r3, #16]
 8017aca:	4307      	orrs	r7, r0
 8017acc:	2b04      	cmp	r3, #4
 8017ace:	443c      	add	r4, r7
 8017ad0:	b2a4      	uxth	r4, r4
 8017ad2:	d108      	bne.n	8017ae6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8017ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ad8:	4651      	mov	r1, sl
 8017ada:	4640      	mov	r0, r8
 8017adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ade:	4798      	blx	r3
 8017ae0:	4438      	add	r0, r7
 8017ae2:	4404      	add	r4, r0
 8017ae4:	b2a4      	uxth	r4, r4
 8017ae6:	692b      	ldr	r3, [r5, #16]
 8017ae8:	795b      	ldrb	r3, [r3, #5]
 8017aea:	bb23      	cbnz	r3, 8017b36 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xbe>
 8017aec:	f1b9 0f01 	cmp.w	r9, #1
 8017af0:	d102      	bne.n	8017af8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8017af2:	8833      	ldrh	r3, [r6, #0]
 8017af4:	4423      	add	r3, r4
 8017af6:	8033      	strh	r3, [r6, #0]
 8017af8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017afa:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8017afe:	f8cd b018 	str.w	fp, [sp, #24]
 8017b02:	9205      	str	r2, [sp, #20]
 8017b04:	696a      	ldr	r2, [r5, #20]
 8017b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b08:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017b0c:	692a      	ldr	r2, [r5, #16]
 8017b0e:	9202      	str	r2, [sp, #8]
 8017b10:	68ea      	ldr	r2, [r5, #12]
 8017b12:	e9cd 6200 	strd	r6, r2, [sp]
 8017b16:	e9d5 1200 	ldrd	r1, r2, [r5]
 8017b1a:	f7ff fe67 	bl	80177ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017b1e:	692b      	ldr	r3, [r5, #16]
 8017b20:	795b      	ldrb	r3, [r3, #5]
 8017b22:	b983      	cbnz	r3, 8017b46 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xce>
 8017b24:	f1b9 0f00 	cmp.w	r9, #0
 8017b28:	d102      	bne.n	8017b30 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 8017b2a:	8830      	ldrh	r0, [r6, #0]
 8017b2c:	4404      	add	r4, r0
 8017b2e:	8034      	strh	r4, [r6, #0]
 8017b30:	b00b      	add	sp, #44	; 0x2c
 8017b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	d1de      	bne.n	8017af8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8017b3a:	f1b9 0f00 	cmp.w	r9, #0
 8017b3e:	d1db      	bne.n	8017af8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8017b40:	8833      	ldrh	r3, [r6, #0]
 8017b42:	1b1b      	subs	r3, r3, r4
 8017b44:	e7d7      	b.n	8017af6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x7e>
 8017b46:	2b01      	cmp	r3, #1
 8017b48:	d1f2      	bne.n	8017b30 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 8017b4a:	f1b9 0f01 	cmp.w	r9, #1
 8017b4e:	d1ef      	bne.n	8017b30 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 8017b50:	8830      	ldrh	r0, [r6, #0]
 8017b52:	1b04      	subs	r4, r0, r4
 8017b54:	e7eb      	b.n	8017b2e <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb6>

08017b56 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017b56:	b530      	push	{r4, r5, lr}
 8017b58:	8a44      	ldrh	r4, [r0, #18]
 8017b5a:	8ac5      	ldrh	r5, [r0, #22]
 8017b5c:	82c3      	strh	r3, [r0, #22]
 8017b5e:	442c      	add	r4, r5
 8017b60:	1ae4      	subs	r4, r4, r3
 8017b62:	8b03      	ldrh	r3, [r0, #24]
 8017b64:	8244      	strh	r4, [r0, #18]
 8017b66:	8a84      	ldrh	r4, [r0, #20]
 8017b68:	4422      	add	r2, r4
 8017b6a:	440c      	add	r4, r1
 8017b6c:	1a59      	subs	r1, r3, r1
 8017b6e:	8342      	strh	r2, [r0, #26]
 8017b70:	8284      	strh	r4, [r0, #20]
 8017b72:	8301      	strh	r1, [r0, #24]
 8017b74:	bd30      	pop	{r4, r5, pc}

08017b76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b7a:	7a45      	ldrb	r5, [r0, #9]
 8017b7c:	b085      	sub	sp, #20
 8017b7e:	4604      	mov	r4, r0
 8017b80:	4689      	mov	r9, r1
 8017b82:	1eeb      	subs	r3, r5, #3
 8017b84:	b2db      	uxtb	r3, r3
 8017b86:	b329      	cbz	r1, 8017bd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8017b88:	2b01      	cmp	r3, #1
 8017b8a:	d921      	bls.n	8017bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8017b8c:	1e69      	subs	r1, r5, #1
 8017b8e:	f1d1 0b00 	rsbs	fp, r1, #0
 8017b92:	eb4b 0b01 	adc.w	fp, fp, r1
 8017b96:	1eaa      	subs	r2, r5, #2
 8017b98:	2500      	movs	r5, #0
 8017b9a:	4253      	negs	r3, r2
 8017b9c:	9500      	str	r5, [sp, #0]
 8017b9e:	4153      	adcs	r3, r2
 8017ba0:	9301      	str	r3, [sp, #4]
 8017ba2:	2600      	movs	r6, #0
 8017ba4:	f242 080b 	movw	r8, #8203	; 0x200b
 8017ba8:	8266      	strh	r6, [r4, #18]
 8017baa:	82a6      	strh	r6, [r4, #20]
 8017bac:	2300      	movs	r3, #0
 8017bae:	68e2      	ldr	r2, [r4, #12]
 8017bb0:	7a21      	ldrb	r1, [r4, #8]
 8017bb2:	9303      	str	r3, [sp, #12]
 8017bb4:	ab03      	add	r3, sp, #12
 8017bb6:	6860      	ldr	r0, [r4, #4]
 8017bb8:	8827      	ldrh	r7, [r4, #0]
 8017bba:	f002 fde5 	bl	801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017bbe:	8020      	strh	r0, [r4, #0]
 8017bc0:	b9b0      	cbnz	r0, 8017bf0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8017bc2:	8b22      	ldrh	r2, [r4, #24]
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	4611      	mov	r1, r2
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f7ff ffc4 	bl	8017b56 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017bce:	e062      	b.n	8017c96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017bd0:	468b      	mov	fp, r1
 8017bd2:	e7e0      	b.n	8017b96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8017bd4:	2b01      	cmp	r3, #1
 8017bd6:	f105 35ff 	add.w	r5, r5, #4294967295
 8017bda:	9101      	str	r1, [sp, #4]
 8017bdc:	468b      	mov	fp, r1
 8017bde:	bf8c      	ite	hi
 8017be0:	2300      	movhi	r3, #0
 8017be2:	2301      	movls	r3, #1
 8017be4:	2d01      	cmp	r5, #1
 8017be6:	9300      	str	r3, [sp, #0]
 8017be8:	bf8c      	ite	hi
 8017bea:	2500      	movhi	r5, #0
 8017bec:	2501      	movls	r5, #1
 8017bee:	e7d8      	b.n	8017ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8017bf0:	8ae3      	ldrh	r3, [r4, #22]
 8017bf2:	280a      	cmp	r0, #10
 8017bf4:	f103 0301 	add.w	r3, r3, #1
 8017bf8:	82e3      	strh	r3, [r4, #22]
 8017bfa:	d0e2      	beq.n	8017bc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8017bfc:	9a03      	ldr	r2, [sp, #12]
 8017bfe:	b972      	cbnz	r2, 8017c1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8017c00:	4540      	cmp	r0, r8
 8017c02:	d1d3      	bne.n	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017c04:	8823      	ldrh	r3, [r4, #0]
 8017c06:	8b21      	ldrh	r1, [r4, #24]
 8017c08:	2b20      	cmp	r3, #32
 8017c0a:	d001      	beq.n	8017c10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8017c0c:	4543      	cmp	r3, r8
 8017c0e:	d11d      	bne.n	8017c4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8017c10:	2f20      	cmp	r7, #32
 8017c12:	d002      	beq.n	8017c1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8017c14:	4547      	cmp	r7, r8
 8017c16:	bf18      	it	ne
 8017c18:	460e      	movne	r6, r1
 8017c1a:	2001      	movs	r0, #1
 8017c1c:	e017      	b.n	8017c4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8017c1e:	4540      	cmp	r0, r8
 8017c20:	d012      	beq.n	8017c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8017c22:	8893      	ldrh	r3, [r2, #4]
 8017c24:	4639      	mov	r1, r7
 8017c26:	8023      	strh	r3, [r4, #0]
 8017c28:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8017c2c:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8017c30:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8017c34:	ea4a 0a00 	orr.w	sl, sl, r0
 8017c38:	68e0      	ldr	r0, [r4, #12]
 8017c3a:	6803      	ldr	r3, [r0, #0]
 8017c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c3e:	4798      	blx	r3
 8017c40:	eb0a 0200 	add.w	r2, sl, r0
 8017c44:	b292      	uxth	r2, r2
 8017c46:	e7dd      	b.n	8017c04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017c48:	2200      	movs	r2, #0
 8017c4a:	e7db      	b.n	8017c04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8017c4c:	2000      	movs	r0, #0
 8017c4e:	440a      	add	r2, r1
 8017c50:	8aa3      	ldrh	r3, [r4, #20]
 8017c52:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017c56:	b292      	uxth	r2, r2
 8017c58:	8322      	strh	r2, [r4, #24]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	f1b9 0f00 	cmp.w	r9, #0
 8017c60:	d022      	beq.n	8017ca8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8017c62:	f1bb 0f00 	cmp.w	fp, #0
 8017c66:	d102      	bne.n	8017c6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8017c68:	9901      	ldr	r1, [sp, #4]
 8017c6a:	b149      	cbz	r1, 8017c80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017c6c:	b140      	cbz	r0, 8017c80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017c6e:	8ba1      	ldrh	r1, [r4, #28]
 8017c70:	4419      	add	r1, r3
 8017c72:	458c      	cmp	ip, r1
 8017c74:	da12      	bge.n	8017c9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017c76:	8a61      	ldrh	r1, [r4, #18]
 8017c78:	b181      	cbz	r1, 8017c9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017c7a:	4563      	cmp	r3, ip
 8017c7c:	dd96      	ble.n	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017c7e:	e004      	b.n	8017c8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8017c80:	4563      	cmp	r3, ip
 8017c82:	dd93      	ble.n	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017c84:	8a63      	ldrh	r3, [r4, #18]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d090      	beq.n	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	8ba2      	ldrh	r2, [r4, #28]
 8017c8e:	77a3      	strb	r3, [r4, #30]
 8017c90:	8b63      	ldrh	r3, [r4, #26]
 8017c92:	4413      	add	r3, r2
 8017c94:	8363      	strh	r3, [r4, #26]
 8017c96:	b005      	add	sp, #20
 8017c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	4611      	mov	r1, r2
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	f7ff ff58 	bl	8017b56 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017ca6:	e781      	b.n	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017ca8:	4563      	cmp	r3, ip
 8017caa:	dd16      	ble.n	8017cda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8017cac:	9b00      	ldr	r3, [sp, #0]
 8017cae:	b113      	cbz	r3, 8017cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8017cb0:	2301      	movs	r3, #1
 8017cb2:	460a      	mov	r2, r1
 8017cb4:	e787      	b.n	8017bc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8017cb6:	2d00      	cmp	r5, #0
 8017cb8:	f43f af78 	beq.w	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017cbc:	2800      	cmp	r0, #0
 8017cbe:	f47f af75 	bne.w	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017cc2:	2f20      	cmp	r7, #32
 8017cc4:	d001      	beq.n	8017cca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8017cc6:	4547      	cmp	r7, r8
 8017cc8:	d102      	bne.n	8017cd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8017cca:	2301      	movs	r3, #1
 8017ccc:	4632      	mov	r2, r6
 8017cce:	e77b      	b.n	8017bc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8017cd0:	8a63      	ldrh	r3, [r4, #18]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f43f af6a 	beq.w	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017cd8:	e7dd      	b.n	8017c96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	f47f af66 	bne.w	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017ce0:	2f20      	cmp	r7, #32
 8017ce2:	d002      	beq.n	8017cea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8017ce4:	4547      	cmp	r7, r8
 8017ce6:	f47f af61 	bne.w	8017bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017cea:	2301      	movs	r3, #1
 8017cec:	4632      	mov	r2, r6
 8017cee:	e7d7      	b.n	8017ca0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08017cf0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017cf0:	b570      	push	{r4, r5, r6, lr}
 8017cf2:	4606      	mov	r6, r0
 8017cf4:	b08a      	sub	sp, #40	; 0x28
 8017cf6:	4615      	mov	r5, r2
 8017cf8:	b191      	cbz	r1, 8017d20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8017cfa:	2401      	movs	r4, #1
 8017cfc:	e9cd 3100 	strd	r3, r1, [sp]
 8017d00:	4613      	mov	r3, r2
 8017d02:	4601      	mov	r1, r0
 8017d04:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017d08:	a802      	add	r0, sp, #8
 8017d0a:	f7ff f96d 	bl	8016fe8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017d0e:	2100      	movs	r1, #0
 8017d10:	a802      	add	r0, sp, #8
 8017d12:	f7ff ff30 	bl	8017b76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017d16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017d1a:	b173      	cbz	r3, 8017d3a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017d1c:	3401      	adds	r4, #1
 8017d1e:	e7f6      	b.n	8017d0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8017d20:	2401      	movs	r4, #1
 8017d22:	4611      	mov	r1, r2
 8017d24:	f002 fcf0 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017d28:	280a      	cmp	r0, #10
 8017d2a:	4629      	mov	r1, r5
 8017d2c:	4630      	mov	r0, r6
 8017d2e:	bf08      	it	eq
 8017d30:	3401      	addeq	r4, #1
 8017d32:	f002 fce9 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d1f6      	bne.n	8017d28 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8017d3a:	b2a0      	uxth	r0, r4
 8017d3c:	b00a      	add	sp, #40	; 0x28
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}

08017d40 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d44:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8017d48:	4689      	mov	r9, r1
 8017d4a:	461c      	mov	r4, r3
 8017d4c:	f8dd a2c8 	ldr.w	sl, [sp, #712]	; 0x2c8
 8017d50:	900a      	str	r0, [sp, #40]	; 0x28
 8017d52:	f1ba 0f00 	cmp.w	sl, #0
 8017d56:	f000 80eb 	beq.w	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f000 80e7 	beq.w	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017d62:	7ba3      	ldrb	r3, [r4, #14]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	f000 80e3 	beq.w	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017d6a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8017d6e:	6810      	ldr	r0, [r2, #0]
 8017d70:	6851      	ldr	r1, [r2, #4]
 8017d72:	2600      	movs	r6, #0
 8017d74:	465b      	mov	r3, fp
 8017d76:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8017d7a:	7965      	ldrb	r5, [r4, #5]
 8017d7c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017d80:	79a2      	ldrb	r2, [r4, #6]
 8017d82:	9610      	str	r6, [sp, #64]	; 0x40
 8017d84:	c303      	stmia	r3!, {r0, r1}
 8017d86:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8017d8a:	a910      	add	r1, sp, #64	; 0x40
 8017d8c:	4658      	mov	r0, fp
 8017d8e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8017d92:	f7ff f9a0 	bl	80170d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017d96:	a910      	add	r1, sp, #64	; 0x40
 8017d98:	79a2      	ldrb	r2, [r4, #6]
 8017d9a:	4608      	mov	r0, r1
 8017d9c:	f7ff f99b 	bl	80170d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017da0:	2d00      	cmp	r5, #0
 8017da2:	f040 80a7 	bne.w	8017ef4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8017da6:	7923      	ldrb	r3, [r4, #4]
 8017da8:	1b9b      	subs	r3, r3, r6
 8017daa:	bf18      	it	ne
 8017dac:	2301      	movne	r3, #1
 8017dae:	461e      	mov	r6, r3
 8017db0:	9309      	str	r3, [sp, #36]	; 0x24
 8017db2:	a824      	add	r0, sp, #144	; 0x90
 8017db4:	f002 fb66 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8017db8:	6820      	ldr	r0, [r4, #0]
 8017dba:	6803      	ldr	r3, [r0, #0]
 8017dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dbe:	4798      	blx	r3
 8017dc0:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	4651      	mov	r1, sl
 8017dc6:	a824      	add	r0, sp, #144	; 0x90
 8017dc8:	f002 fb79 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017dcc:	a83a      	add	r0, sp, #232	; 0xe8
 8017dce:	f002 fb59 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8017dd2:	6820      	ldr	r0, [r4, #0]
 8017dd4:	6803      	ldr	r3, [r0, #0]
 8017dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dd8:	4798      	blx	r3
 8017dda:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8017ddc:	4603      	mov	r3, r0
 8017dde:	4651      	mov	r1, sl
 8017de0:	a83a      	add	r0, sp, #232	; 0xe8
 8017de2:	f002 fb6c 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017de6:	a850      	add	r0, sp, #320	; 0x140
 8017de8:	f002 fb4c 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8017dec:	6820      	ldr	r0, [r4, #0]
 8017dee:	6803      	ldr	r3, [r0, #0]
 8017df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017df2:	4798      	blx	r3
 8017df4:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8017df6:	4603      	mov	r3, r0
 8017df8:	4651      	mov	r1, sl
 8017dfa:	a850      	add	r0, sp, #320	; 0x140
 8017dfc:	f002 fb5f 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e00:	a866      	add	r0, sp, #408	; 0x198
 8017e02:	f002 fb3f 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8017e06:	a87c      	add	r0, sp, #496	; 0x1f0
 8017e08:	f002 fb3c 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8017e0c:	b19e      	cbz	r6, 8017e36 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8017e0e:	6820      	ldr	r0, [r4, #0]
 8017e10:	6803      	ldr	r3, [r0, #0]
 8017e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e14:	4798      	blx	r3
 8017e16:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8017e18:	4603      	mov	r3, r0
 8017e1a:	4651      	mov	r1, sl
 8017e1c:	a866      	add	r0, sp, #408	; 0x198
 8017e1e:	f002 fb4e 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e22:	6820      	ldr	r0, [r4, #0]
 8017e24:	6803      	ldr	r3, [r0, #0]
 8017e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e28:	4798      	blx	r3
 8017e2a:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	4651      	mov	r1, sl
 8017e30:	a87c      	add	r0, sp, #496	; 0x1f0
 8017e32:	f002 fb44 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e36:	6820      	ldr	r0, [r4, #0]
 8017e38:	6803      	ldr	r3, [r0, #0]
 8017e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e3c:	4798      	blx	r3
 8017e3e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8017e42:	eb07 0800 	add.w	r8, r7, r0
 8017e46:	f1b8 0f00 	cmp.w	r8, #0
 8017e4a:	dd5e      	ble.n	8017f0a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8017e4c:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8017e50:	4283      	cmp	r3, r0
 8017e52:	db5a      	blt.n	8017f0a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8017e54:	441f      	add	r7, r3
 8017e56:	fb97 f7f8 	sdiv	r7, r7, r8
 8017e5a:	a892      	add	r0, sp, #584	; 0x248
 8017e5c:	f002 fb12 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8017e60:	7c23      	ldrb	r3, [r4, #16]
 8017e62:	b14b      	cbz	r3, 8017e78 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017e64:	6820      	ldr	r0, [r4, #0]
 8017e66:	6803      	ldr	r3, [r0, #0]
 8017e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e6a:	4798      	blx	r3
 8017e6c:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8017e6e:	4603      	mov	r3, r0
 8017e70:	4651      	mov	r1, sl
 8017e72:	a892      	add	r0, sp, #584	; 0x248
 8017e74:	f002 fb23 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e78:	7c21      	ldrb	r1, [r4, #16]
 8017e7a:	a81c      	add	r0, sp, #112	; 0x70
 8017e7c:	7963      	ldrb	r3, [r4, #5]
 8017e7e:	9101      	str	r1, [sp, #4]
 8017e80:	6821      	ldr	r1, [r4, #0]
 8017e82:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8017e86:	9100      	str	r1, [sp, #0]
 8017e88:	a992      	add	r1, sp, #584	; 0x248
 8017e8a:	f7ff f8ad 	bl	8016fe8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017e8e:	7c23      	ldrb	r3, [r4, #16]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d051      	beq.n	8017f38 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8017e94:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8017e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e9a:	2f00      	cmp	r7, #0
 8017e9c:	dd78      	ble.n	8017f90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8017e9e:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8017ea2:	a81c      	add	r0, sp, #112	; 0x70
 8017ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ea6:	428b      	cmp	r3, r1
 8017ea8:	bfd4      	ite	le
 8017eaa:	2100      	movle	r1, #0
 8017eac:	2101      	movgt	r1, #1
 8017eae:	f7ff fe62 	bl	8017b76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017eb2:	f8bd a082 	ldrh.w	sl, [sp, #130]	; 0x82
 8017eb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017eba:	fa1f fa83 	uxth.w	sl, r3
 8017ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ec2:	459a      	cmp	sl, r3
 8017ec4:	d023      	beq.n	8017f0e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ce>
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	a824      	add	r0, sp, #144	; 0x90
 8017eca:	f002 fc1d 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ece:	4629      	mov	r1, r5
 8017ed0:	a83a      	add	r0, sp, #232	; 0xe8
 8017ed2:	f002 fc19 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ed6:	4629      	mov	r1, r5
 8017ed8:	a850      	add	r0, sp, #320	; 0x140
 8017eda:	f002 fc15 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ede:	2e00      	cmp	r6, #0
 8017ee0:	d0e9      	beq.n	8017eb6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8017ee2:	4629      	mov	r1, r5
 8017ee4:	a866      	add	r0, sp, #408	; 0x198
 8017ee6:	f002 fc0f 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017eea:	4629      	mov	r1, r5
 8017eec:	a87c      	add	r0, sp, #496	; 0x1f0
 8017eee:	f002 fc0b 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017ef2:	e7e0      	b.n	8017eb6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8017ef4:	2d01      	cmp	r5, #1
 8017ef6:	d105      	bne.n	8017f04 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c4>
 8017ef8:	7926      	ldrb	r6, [r4, #4]
 8017efa:	9509      	str	r5, [sp, #36]	; 0x24
 8017efc:	3e02      	subs	r6, #2
 8017efe:	bf18      	it	ne
 8017f00:	2601      	movne	r6, #1
 8017f02:	e756      	b.n	8017db2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 8017f04:	2301      	movs	r3, #1
 8017f06:	9309      	str	r3, [sp, #36]	; 0x24
 8017f08:	e753      	b.n	8017db2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 8017f0a:	2700      	movs	r7, #0
 8017f0c:	e7a5      	b.n	8017e5a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11a>
 8017f0e:	fa1f f388 	uxth.w	r3, r8
 8017f12:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017f16:	3f01      	subs	r7, #1
 8017f18:	441a      	add	r2, r3
 8017f1a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017f1e:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8017f22:	1ad3      	subs	r3, r2, r3
 8017f24:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8017f28:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d1b4      	bne.n	8017e9a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8017f30:	f50d 7d29 	add.w	sp, sp, #676	; 0x2a4
 8017f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f38:	2f00      	cmp	r7, #0
 8017f3a:	dd29      	ble.n	8017f90 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8017f3c:	4629      	mov	r1, r5
 8017f3e:	a824      	add	r0, sp, #144	; 0x90
 8017f40:	f002 fbe2 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f44:	4629      	mov	r1, r5
 8017f46:	4682      	mov	sl, r0
 8017f48:	a83a      	add	r0, sp, #232	; 0xe8
 8017f4a:	f002 fbdd 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f4e:	4629      	mov	r1, r5
 8017f50:	a850      	add	r0, sp, #320	; 0x140
 8017f52:	f002 fbd9 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f56:	b13e      	cbz	r6, 8017f68 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x228>
 8017f58:	4629      	mov	r1, r5
 8017f5a:	a866      	add	r0, sp, #408	; 0x198
 8017f5c:	f002 fbd4 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f60:	4629      	mov	r1, r5
 8017f62:	a87c      	add	r0, sp, #496	; 0x1f0
 8017f64:	f002 fbd0 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f68:	f1ba 0f00 	cmp.w	sl, #0
 8017f6c:	d0e0      	beq.n	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017f6e:	f1ba 0f0a 	cmp.w	sl, #10
 8017f72:	d1e1      	bne.n	8017f38 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8017f74:	fa1f f388 	uxth.w	r3, r8
 8017f78:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017f7c:	3f01      	subs	r7, #1
 8017f7e:	441a      	add	r2, r3
 8017f80:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017f84:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8017f88:	1ad3      	subs	r3, r2, r3
 8017f8a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8017f8e:	e7d3      	b.n	8017f38 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8017f90:	2300      	movs	r3, #0
 8017f92:	4629      	mov	r1, r5
 8017f94:	a824      	add	r0, sp, #144	; 0x90
 8017f96:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
 8017f9a:	9316      	str	r3, [sp, #88]	; 0x58
 8017f9c:	ab3a      	add	r3, sp, #232	; 0xe8
 8017f9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017fa0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017fa4:	e9cd b419 	strd	fp, r4, [sp, #100]	; 0x64
 8017fa8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8017fac:	f002 fbac 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017fb0:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8017fb4:	b12e      	cbz	r6, 8017fc2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x282>
 8017fb6:	4629      	mov	r1, r5
 8017fb8:	a866      	add	r0, sp, #408	; 0x198
 8017fba:	f002 fba5 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017fbe:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8017fc2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8017fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fc8:	f04f 0300 	mov.w	r3, #0
 8017fcc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017fd0:	7c23      	ldrb	r3, [r4, #16]
 8017fd2:	b14b      	cbz	r3, 8017fe8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 8017fd4:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8017fd8:	a81c      	add	r0, sp, #112	; 0x70
 8017fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fdc:	428b      	cmp	r3, r1
 8017fde:	bfd4      	ite	le
 8017fe0:	2100      	movle	r1, #0
 8017fe2:	2101      	movgt	r1, #1
 8017fe4:	f7ff fdc7 	bl	8017b76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	f000 809e 	beq.w	801812c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ec>
 8017ff0:	2e00      	cmp	r6, #0
 8017ff2:	f000 8097 	beq.w	8018124 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3e4>
 8017ff6:	7c22      	ldrb	r2, [r4, #16]
 8017ff8:	b9d2      	cbnz	r2, 8018030 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2f0>
 8017ffa:	494f      	ldr	r1, [pc, #316]	; (8018138 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f8>)
 8017ffc:	ab12      	add	r3, sp, #72	; 0x48
 8017ffe:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 8018002:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8018006:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801800a:	9205      	str	r2, [sp, #20]
 801800c:	aa03      	add	r2, sp, #12
 801800e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018012:	ab7c      	add	r3, sp, #496	; 0x1f0
 8018014:	e882 0003 	stmia.w	r2, {r0, r1}
 8018018:	9302      	str	r3, [sp, #8]
 801801a:	ab66      	add	r3, sp, #408	; 0x198
 801801c:	6822      	ldr	r2, [r4, #0]
 801801e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018022:	9301      	str	r3, [sp, #4]
 8018024:	ab0d      	add	r3, sp, #52	; 0x34
 8018026:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018028:	9300      	str	r3, [sp, #0]
 801802a:	462b      	mov	r3, r5
 801802c:	f7ff f8a4 	bl	8017178 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018030:	7c23      	ldrb	r3, [r4, #16]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d064      	beq.n	8018100 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c0>
 8018036:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
 801803a:	7921      	ldrb	r1, [r4, #4]
 801803c:	2d00      	cmp	r5, #0
 801803e:	d166      	bne.n	801810e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ce>
 8018040:	2901      	cmp	r1, #1
 8018042:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018046:	d15e      	bne.n	8018106 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c6>
 8018048:	1a9b      	subs	r3, r3, r2
 801804a:	2202      	movs	r2, #2
 801804c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018050:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018054:	7c23      	ldrb	r3, [r4, #16]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d06a      	beq.n	8018130 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f0>
 801805a:	f8bd 1082 	ldrh.w	r1, [sp, #130]	; 0x82
 801805e:	f89d 308e 	ldrb.w	r3, [sp, #142]	; 0x8e
 8018062:	4836      	ldr	r0, [pc, #216]	; (801813c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3fc>)
 8018064:	af16      	add	r7, sp, #88	; 0x58
 8018066:	aa14      	add	r2, sp, #80	; 0x50
 8018068:	9105      	str	r1, [sp, #20]
 801806a:	9014      	str	r0, [sp, #80]	; 0x50
 801806c:	2000      	movs	r0, #0
 801806e:	f50d 79a0 	add.w	r9, sp, #320	; 0x140
 8018072:	f10d 0a32 	add.w	sl, sp, #50	; 0x32
 8018076:	9015      	str	r0, [sp, #84]	; 0x54
 8018078:	e9cd 3706 	strd	r3, r7, [sp, #24]
 801807c:	ab03      	add	r3, sp, #12
 801807e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018082:	e883 0003 	stmia.w	r3, {r0, r1}
 8018086:	ab24      	add	r3, sp, #144	; 0x90
 8018088:	6822      	ldr	r2, [r4, #0]
 801808a:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801808e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018092:	9301      	str	r3, [sp, #4]
 8018094:	462b      	mov	r3, r5
 8018096:	f8cd a000 	str.w	sl, [sp]
 801809a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801809c:	f7ff f86c 	bl	8017178 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 80180a0:	8939      	ldrh	r1, [r7, #8]
 80180a2:	fa1f f388 	uxth.w	r3, r8
 80180a6:	461a      	mov	r2, r3
 80180a8:	440b      	add	r3, r1
 80180aa:	813b      	strh	r3, [r7, #8]
 80180ac:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 80180b0:	1a9b      	subs	r3, r3, r2
 80180b2:	7c22      	ldrb	r2, [r4, #16]
 80180b4:	b21b      	sxth	r3, r3
 80180b6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 80180ba:	b112      	cbz	r2, 80180c2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x382>
 80180bc:	4543      	cmp	r3, r8
 80180be:	f6ff af37 	blt.w	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80180c2:	b160      	cbz	r0, 80180de <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 80180c4:	7961      	ldrb	r1, [r4, #5]
 80180c6:	a83a      	add	r0, sp, #232	; 0xe8
 80180c8:	f002 fb1e 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80180cc:	7961      	ldrb	r1, [r4, #5]
 80180ce:	4648      	mov	r0, r9
 80180d0:	f002 fb1a 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80180d4:	b11e      	cbz	r6, 80180de <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 80180d6:	4629      	mov	r1, r5
 80180d8:	a87c      	add	r0, sp, #496	; 0x1f0
 80180da:	f002 fb15 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80180de:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 80180e2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80180e6:	4413      	add	r3, r2
 80180e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80180ec:	b21b      	sxth	r3, r3
 80180ee:	429a      	cmp	r2, r3
 80180f0:	f73f af1e 	bgt.w	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80180f4:	f8ba 3000 	ldrh.w	r3, [sl]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	f47f af65 	bne.w	8017fc8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x288>
 80180fe:	e717      	b.n	8017f30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018100:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8018104:	e799      	b.n	801803a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2fa>
 8018106:	7be1      	ldrb	r1, [r4, #15]
 8018108:	1a5b      	subs	r3, r3, r1
 801810a:	1a9b      	subs	r3, r3, r2
 801810c:	e7a0      	b.n	8018050 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 801810e:	2901      	cmp	r1, #1
 8018110:	d103      	bne.n	801811a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3da>
 8018112:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018116:	4413      	add	r3, r2
 8018118:	e797      	b.n	801804a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x30a>
 801811a:	2900      	cmp	r1, #0
 801811c:	d19a      	bne.n	8018054 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x314>
 801811e:	7be3      	ldrb	r3, [r4, #15]
 8018120:	4413      	add	r3, r2
 8018122:	e795      	b.n	8018050 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018124:	7be2      	ldrb	r2, [r4, #15]
 8018126:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801812a:	e7ee      	b.n	801810a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ca>
 801812c:	7be3      	ldrb	r3, [r4, #15]
 801812e:	e78f      	b.n	8018050 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018130:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018134:	e795      	b.n	8018062 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x322>
 8018136:	bf00      	nop
 8018138:	080170c1 	.word	0x080170c1
 801813c:	08017a79 	.word	0x08017a79

08018140 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018140:	2b02      	cmp	r3, #2
 8018142:	b510      	push	{r4, lr}
 8018144:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018148:	d00b      	beq.n	8018162 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801814a:	2b03      	cmp	r3, #3
 801814c:	d00e      	beq.n	801816c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801814e:	2b01      	cmp	r3, #1
 8018150:	d001      	beq.n	8018156 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018152:	1860      	adds	r0, r4, r1
 8018154:	bd10      	pop	{r4, pc}
 8018156:	8880      	ldrh	r0, [r0, #4]
 8018158:	4420      	add	r0, r4
 801815a:	b200      	sxth	r0, r0
 801815c:	1a80      	subs	r0, r0, r2
 801815e:	3801      	subs	r0, #1
 8018160:	e7f8      	b.n	8018154 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018162:	8880      	ldrh	r0, [r0, #4]
 8018164:	4420      	add	r0, r4
 8018166:	b200      	sxth	r0, r0
 8018168:	1a40      	subs	r0, r0, r1
 801816a:	e7f8      	b.n	801815e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801816c:	18a0      	adds	r0, r4, r2
 801816e:	e7f1      	b.n	8018154 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018170 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018170:	2b02      	cmp	r3, #2
 8018172:	b510      	push	{r4, lr}
 8018174:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018178:	d006      	beq.n	8018188 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801817a:	2b03      	cmp	r3, #3
 801817c:	d00a      	beq.n	8018194 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801817e:	2b01      	cmp	r3, #1
 8018180:	bf14      	ite	ne
 8018182:	18a0      	addne	r0, r4, r2
 8018184:	1860      	addeq	r0, r4, r1
 8018186:	bd10      	pop	{r4, pc}
 8018188:	88c0      	ldrh	r0, [r0, #6]
 801818a:	4420      	add	r0, r4
 801818c:	b200      	sxth	r0, r0
 801818e:	1a80      	subs	r0, r0, r2
 8018190:	3801      	subs	r0, #1
 8018192:	e7f8      	b.n	8018186 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018194:	88c0      	ldrh	r0, [r0, #6]
 8018196:	4420      	add	r0, r4
 8018198:	b200      	sxth	r0, r0
 801819a:	1a40      	subs	r0, r0, r1
 801819c:	e7f8      	b.n	8018190 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080181a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80181a0:	4b01      	ldr	r3, [pc, #4]	; (80181a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80181a2:	2200      	movs	r2, #0
 80181a4:	601a      	str	r2, [r3, #0]
 80181a6:	4770      	bx	lr
 80181a8:	2000bb24 	.word	0x2000bb24

080181ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80181ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ae:	1e05      	subs	r5, r0, #0
 80181b0:	f04f 0601 	mov.w	r6, #1
 80181b4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80181b8:	bfba      	itte	lt
 80181ba:	f04f 37ff 	movlt.w	r7, #4294967295
 80181be:	426d      	neglt	r5, r5
 80181c0:	2701      	movge	r7, #1
 80181c2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80181c6:	f1be 0f00 	cmp.w	lr, #0
 80181ca:	bfbc      	itt	lt
 80181cc:	f1ce 0e00 	rsblt	lr, lr, #0
 80181d0:	427f      	neglt	r7, r7
 80181d2:	2c00      	cmp	r4, #0
 80181d4:	fa4e f001 	asr.w	r0, lr, r1
 80181d8:	fa06 f101 	lsl.w	r1, r6, r1
 80181dc:	bfbc      	itt	lt
 80181de:	4264      	neglt	r4, r4
 80181e0:	427f      	neglt	r7, r7
 80181e2:	3901      	subs	r1, #1
 80181e4:	ea01 010e 	and.w	r1, r1, lr
 80181e8:	434d      	muls	r5, r1
 80181ea:	f8dc 1000 	ldr.w	r1, [ip]
 80181ee:	fb03 1300 	mla	r3, r3, r0, r1
 80181f2:	fb95 f1f4 	sdiv	r1, r5, r4
 80181f6:	fb04 5511 	mls	r5, r4, r1, r5
 80181fa:	441d      	add	r5, r3
 80181fc:	fb95 f3f4 	sdiv	r3, r5, r4
 8018200:	4419      	add	r1, r3
 8018202:	fb04 5413 	mls	r4, r4, r3, r5
 8018206:	fb02 1000 	mla	r0, r2, r0, r1
 801820a:	f8cc 4000 	str.w	r4, [ip]
 801820e:	4378      	muls	r0, r7
 8018210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018214 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	4c24      	ldr	r4, [pc, #144]	; (80182ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801821a:	b086      	sub	sp, #24
 801821c:	4605      	mov	r5, r0
 801821e:	6807      	ldr	r7, [r0, #0]
 8018220:	69a3      	ldr	r3, [r4, #24]
 8018222:	b92b      	cbnz	r3, 8018230 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018224:	6840      	ldr	r0, [r0, #4]
 8018226:	e9c5 7000 	strd	r7, r0, [r5]
 801822a:	b006      	add	sp, #24
 801822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018230:	f04f 0802 	mov.w	r8, #2
 8018234:	68a2      	ldr	r2, [r4, #8]
 8018236:	ae06      	add	r6, sp, #24
 8018238:	6820      	ldr	r0, [r4, #0]
 801823a:	fb93 f1f8 	sdiv	r1, r3, r8
 801823e:	440a      	add	r2, r1
 8018240:	69e1      	ldr	r1, [r4, #28]
 8018242:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018246:	9700      	str	r7, [sp, #0]
 8018248:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801824a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801824e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018250:	f7ff ffac 	bl	80181ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018254:	69a3      	ldr	r3, [r4, #24]
 8018256:	4607      	mov	r7, r0
 8018258:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801825a:	9301      	str	r3, [sp, #4]
 801825c:	686b      	ldr	r3, [r5, #4]
 801825e:	6a21      	ldr	r1, [r4, #32]
 8018260:	9300      	str	r3, [sp, #0]
 8018262:	9602      	str	r6, [sp, #8]
 8018264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018266:	6860      	ldr	r0, [r4, #4]
 8018268:	f7ff ffa0 	bl	80181ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801826c:	69a2      	ldr	r2, [r4, #24]
 801826e:	6963      	ldr	r3, [r4, #20]
 8018270:	4407      	add	r7, r0
 8018272:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018274:	68e0      	ldr	r0, [r4, #12]
 8018276:	fb92 f8f8 	sdiv	r8, r2, r8
 801827a:	4443      	add	r3, r8
 801827c:	9305      	str	r3, [sp, #20]
 801827e:	682b      	ldr	r3, [r5, #0]
 8018280:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018284:	9300      	str	r3, [sp, #0]
 8018286:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018288:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801828a:	f7ff ff8f 	bl	80181ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801828e:	69a3      	ldr	r3, [r4, #24]
 8018290:	4680      	mov	r8, r0
 8018292:	9602      	str	r6, [sp, #8]
 8018294:	9301      	str	r3, [sp, #4]
 8018296:	686b      	ldr	r3, [r5, #4]
 8018298:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801829a:	9300      	str	r3, [sp, #0]
 801829c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801829e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80182a0:	6920      	ldr	r0, [r4, #16]
 80182a2:	f7ff ff83 	bl	80181ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80182a6:	4440      	add	r0, r8
 80182a8:	e7bd      	b.n	8018226 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80182aa:	bf00      	nop
 80182ac:	2000bb28 	.word	0x2000bb28

080182b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80182b0:	4b07      	ldr	r3, [pc, #28]	; (80182d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80182b2:	b510      	push	{r4, lr}
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	2b01      	cmp	r3, #1
 80182b8:	d108      	bne.n	80182cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80182ba:	4b06      	ldr	r3, [pc, #24]	; (80182d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80182bc:	880c      	ldrh	r4, [r1, #0]
 80182be:	881b      	ldrh	r3, [r3, #0]
 80182c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80182c4:	3b01      	subs	r3, #1
 80182c6:	1b1b      	subs	r3, r3, r4
 80182c8:	8003      	strh	r3, [r0, #0]
 80182ca:	800a      	strh	r2, [r1, #0]
 80182cc:	bd10      	pop	{r4, pc}
 80182ce:	bf00      	nop
 80182d0:	2000baf4 	.word	0x2000baf4
 80182d4:	2000baf8 	.word	0x2000baf8

080182d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80182d8:	4b0a      	ldr	r3, [pc, #40]	; (8018304 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80182da:	b510      	push	{r4, lr}
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	2b01      	cmp	r3, #1
 80182e0:	d10e      	bne.n	8018300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80182e2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80182e6:	8843      	ldrh	r3, [r0, #2]
 80182e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80182ec:	18ca      	adds	r2, r1, r3
 80182ee:	4b06      	ldr	r3, [pc, #24]	; (8018308 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80182f0:	8044      	strh	r4, [r0, #2]
 80182f2:	881b      	ldrh	r3, [r3, #0]
 80182f4:	1a9b      	subs	r3, r3, r2
 80182f6:	8003      	strh	r3, [r0, #0]
 80182f8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80182fc:	8081      	strh	r1, [r0, #4]
 80182fe:	80c3      	strh	r3, [r0, #6]
 8018300:	bd10      	pop	{r4, pc}
 8018302:	bf00      	nop
 8018304:	2000baf4 	.word	0x2000baf4
 8018308:	2000baf0 	.word	0x2000baf0

0801830c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801830c:	4b07      	ldr	r3, [pc, #28]	; (801832c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801830e:	b510      	push	{r4, lr}
 8018310:	781b      	ldrb	r3, [r3, #0]
 8018312:	2b01      	cmp	r3, #1
 8018314:	d108      	bne.n	8018328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018316:	f9b1 3000 	ldrsh.w	r3, [r1]
 801831a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801831e:	8003      	strh	r3, [r0, #0]
 8018320:	8893      	ldrh	r3, [r2, #4]
 8018322:	3b01      	subs	r3, #1
 8018324:	1b1b      	subs	r3, r3, r4
 8018326:	800b      	strh	r3, [r1, #0]
 8018328:	bd10      	pop	{r4, pc}
 801832a:	bf00      	nop
 801832c:	2000baf4 	.word	0x2000baf4

08018330 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018330:	4b08      	ldr	r3, [pc, #32]	; (8018354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018332:	b513      	push	{r0, r1, r4, lr}
 8018334:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018338:	2400      	movs	r4, #0
 801833a:	4b07      	ldr	r3, [pc, #28]	; (8018358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801833c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018340:	466a      	mov	r2, sp
 8018342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018346:	9400      	str	r4, [sp, #0]
 8018348:	f8ad 3006 	strh.w	r3, [sp, #6]
 801834c:	f7ff ffde 	bl	801830c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018350:	b002      	add	sp, #8
 8018352:	bd10      	pop	{r4, pc}
 8018354:	2000baf0 	.word	0x2000baf0
 8018358:	2000baf2 	.word	0x2000baf2

0801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801835c:	4b0a      	ldr	r3, [pc, #40]	; (8018388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801835e:	460a      	mov	r2, r1
 8018360:	b510      	push	{r4, lr}
 8018362:	781b      	ldrb	r3, [r3, #0]
 8018364:	2b01      	cmp	r3, #1
 8018366:	d10d      	bne.n	8018384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018368:	8881      	ldrh	r1, [r0, #4]
 801836a:	8803      	ldrh	r3, [r0, #0]
 801836c:	440b      	add	r3, r1
 801836e:	4601      	mov	r1, r0
 8018370:	3b01      	subs	r3, #1
 8018372:	f821 3b02 	strh.w	r3, [r1], #2
 8018376:	f7ff ffc9 	bl	801830c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801837a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801837e:	88c2      	ldrh	r2, [r0, #6]
 8018380:	80c3      	strh	r3, [r0, #6]
 8018382:	8082      	strh	r2, [r0, #4]
 8018384:	bd10      	pop	{r4, pc}
 8018386:	bf00      	nop
 8018388:	2000baf4 	.word	0x2000baf4

0801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801838c:	4b09      	ldr	r3, [pc, #36]	; (80183b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801838e:	b507      	push	{r0, r1, r2, lr}
 8018390:	2100      	movs	r1, #0
 8018392:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018396:	4b08      	ldr	r3, [pc, #32]	; (80183b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018398:	9100      	str	r1, [sp, #0]
 801839a:	4669      	mov	r1, sp
 801839c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183a8:	f7ff ffd8 	bl	801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183ac:	b003      	add	sp, #12
 80183ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80183b2:	bf00      	nop
 80183b4:	2000baf0 	.word	0x2000baf0
 80183b8:	2000baf2 	.word	0x2000baf2

080183bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80183bc:	4b03      	ldr	r3, [pc, #12]	; (80183cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80183be:	6818      	ldr	r0, [r3, #0]
 80183c0:	b110      	cbz	r0, 80183c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80183c2:	6803      	ldr	r3, [r0, #0]
 80183c4:	699b      	ldr	r3, [r3, #24]
 80183c6:	4718      	bx	r3
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	2000bb78 	.word	0x2000bb78

080183d0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80183d0:	4770      	bx	lr
	...

080183d4 <_ZN8touchgfx11Application4drawEv>:
 80183d4:	4b09      	ldr	r3, [pc, #36]	; (80183fc <_ZN8touchgfx11Application4drawEv+0x28>)
 80183d6:	b507      	push	{r0, r1, r2, lr}
 80183d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183dc:	2100      	movs	r1, #0
 80183de:	4b08      	ldr	r3, [pc, #32]	; (8018400 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80183e0:	9100      	str	r1, [sp, #0]
 80183e2:	4669      	mov	r1, sp
 80183e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183e8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80183ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183f0:	6803      	ldr	r3, [r0, #0]
 80183f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f4:	4798      	blx	r3
 80183f6:	b003      	add	sp, #12
 80183f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80183fc:	2000baf0 	.word	0x2000baf0
 8018400:	2000baf2 	.word	0x2000baf2

08018404 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018404:	4b03      	ldr	r3, [pc, #12]	; (8018414 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018406:	6818      	ldr	r0, [r3, #0]
 8018408:	b110      	cbz	r0, 8018410 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801840a:	6803      	ldr	r3, [r0, #0]
 801840c:	69db      	ldr	r3, [r3, #28]
 801840e:	4718      	bx	r3
 8018410:	4770      	bx	lr
 8018412:	bf00      	nop
 8018414:	2000bb78 	.word	0x2000bb78

08018418 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018418:	4b03      	ldr	r3, [pc, #12]	; (8018428 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801841a:	6818      	ldr	r0, [r3, #0]
 801841c:	b110      	cbz	r0, 8018424 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801841e:	6803      	ldr	r3, [r0, #0]
 8018420:	6a1b      	ldr	r3, [r3, #32]
 8018422:	4718      	bx	r3
 8018424:	4770      	bx	lr
 8018426:	bf00      	nop
 8018428:	2000bb78 	.word	0x2000bb78

0801842c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801842c:	4b03      	ldr	r3, [pc, #12]	; (801843c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801842e:	6818      	ldr	r0, [r3, #0]
 8018430:	b110      	cbz	r0, 8018438 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018432:	6803      	ldr	r3, [r0, #0]
 8018434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018436:	4718      	bx	r3
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop
 801843c:	2000bb78 	.word	0x2000bb78

08018440 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018444:	4d3a      	ldr	r5, [pc, #232]	; (8018530 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018446:	4604      	mov	r4, r0
 8018448:	6828      	ldr	r0, [r5, #0]
 801844a:	b140      	cbz	r0, 801845e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801844c:	7a03      	ldrb	r3, [r0, #8]
 801844e:	b933      	cbnz	r3, 801845e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018450:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018454:	6803      	ldr	r3, [r0, #0]
 8018456:	689b      	ldr	r3, [r3, #8]
 8018458:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801845c:	4718      	bx	r3
 801845e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018462:	b97b      	cbnz	r3, 8018484 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018464:	b170      	cbz	r0, 8018484 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018466:	7a03      	ldrb	r3, [r0, #8]
 8018468:	b163      	cbz	r3, 8018484 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801846a:	4b32      	ldr	r3, [pc, #200]	; (8018534 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801846c:	6818      	ldr	r0, [r3, #0]
 801846e:	b110      	cbz	r0, 8018476 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018470:	6803      	ldr	r3, [r0, #0]
 8018472:	691b      	ldr	r3, [r3, #16]
 8018474:	4798      	blx	r3
 8018476:	6828      	ldr	r0, [r5, #0]
 8018478:	6803      	ldr	r3, [r0, #0]
 801847a:	68db      	ldr	r3, [r3, #12]
 801847c:	4798      	blx	r3
 801847e:	2301      	movs	r3, #1
 8018480:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018484:	2500      	movs	r5, #0
 8018486:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801848a:	42a8      	cmp	r0, r5
 801848c:	dd0c      	ble.n	80184a8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801848e:	1963      	adds	r3, r4, r5
 8018490:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018494:	b132      	cbz	r2, 80184a4 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018496:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801849a:	4413      	add	r3, r2
 801849c:	6858      	ldr	r0, [r3, #4]
 801849e:	6803      	ldr	r3, [r0, #0]
 80184a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184a2:	4798      	blx	r3
 80184a4:	3501      	adds	r5, #1
 80184a6:	e7ee      	b.n	8018486 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80184a8:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80184ac:	3801      	subs	r0, #1
 80184ae:	f04f 0c00 	mov.w	ip, #0
 80184b2:	3678      	adds	r6, #120	; 0x78
 80184b4:	1c43      	adds	r3, r0, #1
 80184b6:	d033      	beq.n	8018520 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80184b8:	1823      	adds	r3, r4, r0
 80184ba:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80184be:	bb6a      	cbnz	r2, 801851c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80184c0:	b281      	uxth	r1, r0
 80184c2:	1d25      	adds	r5, r4, #4
 80184c4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80184c8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80184cc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80184d0:	4293      	cmp	r3, r2
 80184d2:	dc0a      	bgt.n	80184ea <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80184d4:	f101 0288 	add.w	r2, r1, #136	; 0x88
 80184d8:	4422      	add	r2, r4
 80184da:	18b1      	adds	r1, r6, r2
 80184dc:	b289      	uxth	r1, r1
 80184de:	428b      	cmp	r3, r1
 80184e0:	d919      	bls.n	8018516 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 80184e2:	7851      	ldrb	r1, [r2, #1]
 80184e4:	f802 1b01 	strb.w	r1, [r2], #1
 80184e8:	e7f7      	b.n	80184da <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 80184ea:	682f      	ldr	r7, [r5, #0]
 80184ec:	f105 0804 	add.w	r8, r5, #4
 80184f0:	45b9      	cmp	r9, r7
 80184f2:	d10d      	bne.n	8018510 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 80184f4:	4696      	mov	lr, r2
 80184f6:	f1be 0f1e 	cmp.w	lr, #30
 80184fa:	dc06      	bgt.n	801850a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80184fc:	f10e 0e01 	add.w	lr, lr, #1
 8018500:	686f      	ldr	r7, [r5, #4]
 8018502:	4573      	cmp	r3, lr
 8018504:	f845 7b04 	str.w	r7, [r5], #4
 8018508:	dcf5      	bgt.n	80184f6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801850a:	3b01      	subs	r3, #1
 801850c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018510:	3201      	adds	r2, #1
 8018512:	4645      	mov	r5, r8
 8018514:	e7da      	b.n	80184cc <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018516:	4423      	add	r3, r4
 8018518:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801851c:	3801      	subs	r0, #1
 801851e:	e7c9      	b.n	80184b4 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018520:	4b04      	ldr	r3, [pc, #16]	; (8018534 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018522:	6818      	ldr	r0, [r3, #0]
 8018524:	b110      	cbz	r0, 801852c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018526:	6803      	ldr	r3, [r0, #0]
 8018528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801852a:	e795      	b.n	8018458 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801852c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018530:	2000bb7c 	.word	0x2000bb7c
 8018534:	2000bb78 	.word	0x2000bb78

08018538 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018538:	b570      	push	{r4, r5, r6, lr}
 801853a:	4606      	mov	r6, r0
 801853c:	460c      	mov	r4, r1
 801853e:	b929      	cbnz	r1, 801854c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018540:	4b0c      	ldr	r3, [pc, #48]	; (8018574 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018542:	2164      	movs	r1, #100	; 0x64
 8018544:	4a0c      	ldr	r2, [pc, #48]	; (8018578 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018546:	480d      	ldr	r0, [pc, #52]	; (801857c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018548:	f00c fab4 	bl	8024ab4 <__assert_func>
 801854c:	2300      	movs	r3, #0
 801854e:	4d0c      	ldr	r5, [pc, #48]	; (8018580 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018550:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018554:	6828      	ldr	r0, [r5, #0]
 8018556:	b110      	cbz	r0, 801855e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018558:	6803      	ldr	r3, [r0, #0]
 801855a:	695b      	ldr	r3, [r3, #20]
 801855c:	4798      	blx	r3
 801855e:	602c      	str	r4, [r5, #0]
 8018560:	4620      	mov	r0, r4
 8018562:	6823      	ldr	r3, [r4, #0]
 8018564:	68db      	ldr	r3, [r3, #12]
 8018566:	4798      	blx	r3
 8018568:	6833      	ldr	r3, [r6, #0]
 801856a:	4630      	mov	r0, r6
 801856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801856e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018572:	4718      	bx	r3
 8018574:	08028e68 	.word	0x08028e68
 8018578:	08028f58 	.word	0x08028f58
 801857c:	08028e72 	.word	0x08028e72
 8018580:	2000bb78 	.word	0x2000bb78

08018584 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018584:	b510      	push	{r4, lr}
 8018586:	f9b1 4000 	ldrsh.w	r4, [r1]
 801858a:	888a      	ldrh	r2, [r1, #4]
 801858c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018590:	4422      	add	r2, r4
 8018592:	b212      	sxth	r2, r2
 8018594:	4293      	cmp	r3, r2
 8018596:	da15      	bge.n	80185c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018598:	8882      	ldrh	r2, [r0, #4]
 801859a:	4413      	add	r3, r2
 801859c:	b21b      	sxth	r3, r3
 801859e:	429c      	cmp	r4, r3
 80185a0:	da10      	bge.n	80185c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80185a2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80185a6:	88c9      	ldrh	r1, [r1, #6]
 80185a8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80185ac:	4419      	add	r1, r3
 80185ae:	b209      	sxth	r1, r1
 80185b0:	428a      	cmp	r2, r1
 80185b2:	da07      	bge.n	80185c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80185b4:	88c0      	ldrh	r0, [r0, #6]
 80185b6:	4410      	add	r0, r2
 80185b8:	b200      	sxth	r0, r0
 80185ba:	4283      	cmp	r3, r0
 80185bc:	bfac      	ite	ge
 80185be:	2000      	movge	r0, #0
 80185c0:	2001      	movlt	r0, #1
 80185c2:	bd10      	pop	{r4, pc}
 80185c4:	2000      	movs	r0, #0
 80185c6:	e7fc      	b.n	80185c2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080185c8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80185c8:	b570      	push	{r4, r5, r6, lr}
 80185ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80185ce:	f9b0 5000 	ldrsh.w	r5, [r0]
 80185d2:	42ac      	cmp	r4, r5
 80185d4:	db18      	blt.n	8018608 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185d6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80185da:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80185de:	429a      	cmp	r2, r3
 80185e0:	db12      	blt.n	8018608 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185e2:	8886      	ldrh	r6, [r0, #4]
 80185e4:	4435      	add	r5, r6
 80185e6:	888e      	ldrh	r6, [r1, #4]
 80185e8:	4434      	add	r4, r6
 80185ea:	b22d      	sxth	r5, r5
 80185ec:	b224      	sxth	r4, r4
 80185ee:	42a5      	cmp	r5, r4
 80185f0:	db0a      	blt.n	8018608 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80185f2:	88c0      	ldrh	r0, [r0, #6]
 80185f4:	4418      	add	r0, r3
 80185f6:	88cb      	ldrh	r3, [r1, #6]
 80185f8:	441a      	add	r2, r3
 80185fa:	b200      	sxth	r0, r0
 80185fc:	b212      	sxth	r2, r2
 80185fe:	4290      	cmp	r0, r2
 8018600:	bfb4      	ite	lt
 8018602:	2000      	movlt	r0, #0
 8018604:	2001      	movge	r0, #1
 8018606:	bd70      	pop	{r4, r5, r6, pc}
 8018608:	2000      	movs	r0, #0
 801860a:	e7fc      	b.n	8018606 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801860c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801860e:	4604      	mov	r4, r0
 8018610:	4608      	mov	r0, r1
 8018612:	460d      	mov	r5, r1
 8018614:	f7fc f9ca 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018618:	b978      	cbnz	r0, 801863a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801861a:	4620      	mov	r0, r4
 801861c:	f7fc f9c6 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018620:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018624:	b150      	cbz	r0, 801863c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018626:	8026      	strh	r6, [r4, #0]
 8018628:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801862c:	8063      	strh	r3, [r4, #2]
 801862e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018632:	80a3      	strh	r3, [r4, #4]
 8018634:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018638:	80e3      	strh	r3, [r4, #6]
 801863a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801863c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018640:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018644:	42b1      	cmp	r1, r6
 8018646:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801864a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801864e:	460f      	mov	r7, r1
 8018650:	88ed      	ldrh	r5, [r5, #6]
 8018652:	bfa8      	it	ge
 8018654:	4637      	movge	r7, r6
 8018656:	4293      	cmp	r3, r2
 8018658:	4618      	mov	r0, r3
 801865a:	4466      	add	r6, ip
 801865c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018660:	bfa8      	it	ge
 8018662:	4610      	movge	r0, r2
 8018664:	442a      	add	r2, r5
 8018666:	88e5      	ldrh	r5, [r4, #6]
 8018668:	4461      	add	r1, ip
 801866a:	b236      	sxth	r6, r6
 801866c:	8027      	strh	r7, [r4, #0]
 801866e:	442b      	add	r3, r5
 8018670:	b209      	sxth	r1, r1
 8018672:	b212      	sxth	r2, r2
 8018674:	8060      	strh	r0, [r4, #2]
 8018676:	b21b      	sxth	r3, r3
 8018678:	428e      	cmp	r6, r1
 801867a:	bfac      	ite	ge
 801867c:	ebc7 0106 	rsbge	r1, r7, r6
 8018680:	ebc7 0101 	rsblt	r1, r7, r1
 8018684:	429a      	cmp	r2, r3
 8018686:	bfac      	ite	ge
 8018688:	ebc0 0202 	rsbge	r2, r0, r2
 801868c:	ebc0 0203 	rsblt	r2, r0, r3
 8018690:	80a1      	strh	r1, [r4, #4]
 8018692:	80e2      	strh	r2, [r4, #6]
 8018694:	e7d1      	b.n	801863a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018698 <_ZN8touchgfx11Application11getInstanceEv>:
 8018698:	4b01      	ldr	r3, [pc, #4]	; (80186a0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801869a:	6818      	ldr	r0, [r3, #0]
 801869c:	4770      	bx	lr
 801869e:	bf00      	nop
 80186a0:	2000bb88 	.word	0x2000bb88

080186a4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80186a4:	b570      	push	{r4, r5, r6, lr}
 80186a6:	2200      	movs	r2, #0
 80186a8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80186ac:	1d04      	adds	r4, r0, #4
 80186ae:	b295      	uxth	r5, r2
 80186b0:	42ab      	cmp	r3, r5
 80186b2:	d90e      	bls.n	80186d2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80186b4:	f854 6b04 	ldr.w	r6, [r4], #4
 80186b8:	4615      	mov	r5, r2
 80186ba:	3201      	adds	r2, #1
 80186bc:	428e      	cmp	r6, r1
 80186be:	d1f6      	bne.n	80186ae <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 80186c0:	4428      	add	r0, r5
 80186c2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80186c6:	2bff      	cmp	r3, #255	; 0xff
 80186c8:	d002      	beq.n	80186d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80186ca:	3301      	adds	r3, #1
 80186cc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80186d0:	bd70      	pop	{r4, r5, r6, pc}
 80186d2:	2b20      	cmp	r3, #32
 80186d4:	d106      	bne.n	80186e4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 80186d6:	4b09      	ldr	r3, [pc, #36]	; (80186fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 80186d8:	f44f 7193 	mov.w	r1, #294	; 0x126
 80186dc:	4a08      	ldr	r2, [pc, #32]	; (8018700 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 80186de:	4809      	ldr	r0, [pc, #36]	; (8018704 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 80186e0:	f00c f9e8 	bl	8024ab4 <__assert_func>
 80186e4:	18c2      	adds	r2, r0, r3
 80186e6:	2401      	movs	r4, #1
 80186e8:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 80186ec:	191a      	adds	r2, r3, r4
 80186ee:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 80186f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80186f6:	6041      	str	r1, [r0, #4]
 80186f8:	e7ea      	b.n	80186d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80186fa:	bf00      	nop
 80186fc:	08028e9c 	.word	0x08028e9c
 8018700:	08028f9c 	.word	0x08028f9c
 8018704:	08028e72 	.word	0x08028e72

08018708 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8018708:	b570      	push	{r4, r5, r6, lr}
 801870a:	2300      	movs	r3, #0
 801870c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8018710:	1d04      	adds	r4, r0, #4
 8018712:	b29a      	uxth	r2, r3
 8018714:	4296      	cmp	r6, r2
 8018716:	d90a      	bls.n	801872e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8018718:	f854 2b04 	ldr.w	r2, [r4], #4
 801871c:	428a      	cmp	r2, r1
 801871e:	d107      	bne.n	8018730 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018720:	18c5      	adds	r5, r0, r3
 8018722:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8018726:	b11a      	cbz	r2, 8018730 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018728:	3a01      	subs	r2, #1
 801872a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801872e:	bd70      	pop	{r4, r5, r6, pc}
 8018730:	3301      	adds	r3, #1
 8018732:	e7ee      	b.n	8018712 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08018734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018734:	2300      	movs	r3, #0
 8018736:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801873a:	30a8      	adds	r0, #168	; 0xa8
 801873c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018740:	f802 3b01 	strb.w	r3, [r2], #1
 8018744:	4282      	cmp	r2, r0
 8018746:	d1fb      	bne.n	8018740 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018748:	4770      	bx	lr

0801874a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801874a:	4603      	mov	r3, r0
 801874c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018750:	2200      	movs	r2, #0
 8018752:	801a      	strh	r2, [r3, #0]
 8018754:	3308      	adds	r3, #8
 8018756:	f823 2c06 	strh.w	r2, [r3, #-6]
 801875a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801875e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018762:	428b      	cmp	r3, r1
 8018764:	d1f5      	bne.n	8018752 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018766:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801876a:	4770      	bx	lr

0801876c <_ZN8touchgfx11ApplicationC1Ev>:
 801876c:	b570      	push	{r4, r5, r6, lr}
 801876e:	4b16      	ldr	r3, [pc, #88]	; (80187c8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018770:	2500      	movs	r5, #0
 8018772:	4604      	mov	r4, r0
 8018774:	30a8      	adds	r0, #168	; 0xa8
 8018776:	f840 3ca8 	str.w	r3, [r0, #-168]
 801877a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801877e:	f7ff ffe4 	bl	801874a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018782:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018786:	f7ff ffe0 	bl	801874a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801878a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801878e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018792:	490e      	ldr	r1, [pc, #56]	; (80187cc <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018794:	480e      	ldr	r0, [pc, #56]	; (80187d0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018796:	f00a fc73 	bl	8023080 <CRC_Lock>
 801879a:	4e0e      	ldr	r6, [pc, #56]	; (80187d4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801879c:	4b0e      	ldr	r3, [pc, #56]	; (80187d8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801879e:	b158      	cbz	r0, 80187b8 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80187a0:	801d      	strh	r5, [r3, #0]
 80187a2:	2300      	movs	r3, #0
 80187a4:	4a0d      	ldr	r2, [pc, #52]	; (80187dc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80187a6:	4620      	mov	r0, r4
 80187a8:	6013      	str	r3, [r2, #0]
 80187aa:	4a0d      	ldr	r2, [pc, #52]	; (80187e0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80187ac:	6033      	str	r3, [r6, #0]
 80187ae:	6013      	str	r3, [r2, #0]
 80187b0:	f7ff ffc0 	bl	8018734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80187b4:	4620      	mov	r0, r4
 80187b6:	bd70      	pop	{r4, r5, r6, pc}
 80187b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80187bc:	2002      	movs	r0, #2
 80187be:	801a      	strh	r2, [r3, #0]
 80187c0:	6030      	str	r0, [r6, #0]
 80187c2:	f000 ffa9 	bl	8019718 <_ZN8touchgfx6Screen4drawEv>
 80187c6:	e7ec      	b.n	80187a2 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80187c8:	08028f24 	.word	0x08028f24
 80187cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80187d0:	f407a5c2 	.word	0xf407a5c2
 80187d4:	2000bb78 	.word	0x2000bb78
 80187d8:	20000060 	.word	0x20000060
 80187dc:	2000bb88 	.word	0x2000bb88
 80187e0:	2000bb7c 	.word	0x2000bb7c

080187e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80187e4:	2300      	movs	r3, #0
 80187e6:	8003      	strh	r3, [r0, #0]
 80187e8:	8043      	strh	r3, [r0, #2]
 80187ea:	8083      	strh	r3, [r0, #4]
 80187ec:	80c3      	strh	r3, [r0, #6]
 80187ee:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80187f2:	4293      	cmp	r3, r2
 80187f4:	b530      	push	{r4, r5, lr}
 80187f6:	d912      	bls.n	801881e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80187f8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80187fc:	3b01      	subs	r3, #1
 80187fe:	6825      	ldr	r5, [r4, #0]
 8018800:	b29b      	uxth	r3, r3
 8018802:	6005      	str	r5, [r0, #0]
 8018804:	4293      	cmp	r3, r2
 8018806:	6865      	ldr	r5, [r4, #4]
 8018808:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801880c:	6045      	str	r5, [r0, #4]
 801880e:	d906      	bls.n	801881e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018810:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018814:	681d      	ldr	r5, [r3, #0]
 8018816:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801881a:	685d      	ldr	r5, [r3, #4]
 801881c:	6065      	str	r5, [r4, #4]
 801881e:	bd30      	pop	{r4, r5, pc}

08018820 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018822:	466b      	mov	r3, sp
 8018824:	4604      	mov	r4, r0
 8018826:	e883 0006 	stmia.w	r3, {r1, r2}
 801882a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801882e:	2a07      	cmp	r2, #7
 8018830:	d906      	bls.n	8018840 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018832:	4b09      	ldr	r3, [pc, #36]	; (8018858 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018834:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018838:	4a08      	ldr	r2, [pc, #32]	; (801885c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801883a:	4809      	ldr	r0, [pc, #36]	; (8018860 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801883c:	f00c f93a 	bl	8024ab4 <__assert_func>
 8018840:	1c51      	adds	r1, r2, #1
 8018842:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018846:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801884a:	cb03      	ldmia	r3!, {r0, r1}
 801884c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018850:	6069      	str	r1, [r5, #4]
 8018852:	b003      	add	sp, #12
 8018854:	bd30      	pop	{r4, r5, pc}
 8018856:	bf00      	nop
 8018858:	08028ec4 	.word	0x08028ec4
 801885c:	08028fe1 	.word	0x08028fe1
 8018860:	08028ef3 	.word	0x08028ef3

08018864 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018868:	b089      	sub	sp, #36	; 0x24
 801886a:	4606      	mov	r6, r0
 801886c:	466c      	mov	r4, sp
 801886e:	4620      	mov	r0, r4
 8018870:	e884 0006 	stmia.w	r4, {r1, r2}
 8018874:	f7fc f89a 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018878:	bbb0      	cbnz	r0, 80188e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801887a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801887e:	b1fd      	cbz	r5, 80188c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8018880:	3d01      	subs	r5, #1
 8018882:	af04      	add	r7, sp, #16
 8018884:	f04f 090a 	mov.w	r9, #10
 8018888:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801888c:	ab02      	add	r3, sp, #8
 801888e:	fa1f f885 	uxth.w	r8, r5
 8018892:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018896:	6851      	ldr	r1, [r2, #4]
 8018898:	c303      	stmia	r3!, {r0, r1}
 801889a:	4621      	mov	r1, r4
 801889c:	a802      	add	r0, sp, #8
 801889e:	f7ff fe93 	bl	80185c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80188a2:	bb08      	cbnz	r0, 80188e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80188a4:	a902      	add	r1, sp, #8
 80188a6:	4620      	mov	r0, r4
 80188a8:	f7ff fe8e 	bl	80185c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80188ac:	b1f8      	cbz	r0, 80188ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80188ae:	4642      	mov	r2, r8
 80188b0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80188b4:	a806      	add	r0, sp, #24
 80188b6:	f7ff ff95 	bl	80187e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80188ba:	f115 35ff 	adds.w	r5, r5, #4294967295
 80188be:	d2e3      	bcs.n	8018888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80188c0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80188c4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80188c8:	2b08      	cmp	r3, #8
 80188ca:	d108      	bne.n	80188de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80188cc:	4629      	mov	r1, r5
 80188ce:	a806      	add	r0, sp, #24
 80188d0:	2207      	movs	r2, #7
 80188d2:	f7ff ff87 	bl	80187e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80188d6:	a906      	add	r1, sp, #24
 80188d8:	4620      	mov	r0, r4
 80188da:	f7ff fe97 	bl	801860c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80188de:	4628      	mov	r0, r5
 80188e0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80188e4:	f7ff ff9c 	bl	8018820 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80188e8:	b009      	add	sp, #36	; 0x24
 80188ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188ee:	4621      	mov	r1, r4
 80188f0:	a802      	add	r0, sp, #8
 80188f2:	f7ff fe47 	bl	8018584 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80188f6:	b150      	cbz	r0, 801890e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80188f8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80188fc:	a806      	add	r0, sp, #24
 80188fe:	4642      	mov	r2, r8
 8018900:	f7ff ff70 	bl	80187e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018904:	a902      	add	r1, sp, #8
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff fe80 	bl	801860c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801890c:	e7d5      	b.n	80188ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801890e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8018912:	e887 0003 	stmia.w	r7, {r0, r1}
 8018916:	a902      	add	r1, sp, #8
 8018918:	4638      	mov	r0, r7
 801891a:	f7ff fe77 	bl	801860c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801891e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018922:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018926:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801892a:	fb13 f302 	smulbb	r3, r3, r2
 801892e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018932:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018936:	fb11 f102 	smulbb	r1, r1, r2
 801893a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801893e:	fb09 f303 	mul.w	r3, r9, r3
 8018942:	fb12 1100 	smlabb	r1, r2, r0, r1
 8018946:	220b      	movs	r2, #11
 8018948:	434a      	muls	r2, r1
 801894a:	4293      	cmp	r3, r2
 801894c:	dab5      	bge.n	80188ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801894e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018952:	a806      	add	r0, sp, #24
 8018954:	4642      	mov	r2, r8
 8018956:	f7ff ff45 	bl	80187e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801895a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801895e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018962:	e7aa      	b.n	80188ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08018964 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018964:	4b1d      	ldr	r3, [pc, #116]	; (80189dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8018966:	b530      	push	{r4, r5, lr}
 8018968:	f9b3 2000 	ldrsh.w	r2, [r3]
 801896c:	b085      	sub	sp, #20
 801896e:	4b1c      	ldr	r3, [pc, #112]	; (80189e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8018970:	460c      	mov	r4, r1
 8018972:	2100      	movs	r1, #0
 8018974:	4605      	mov	r5, r0
 8018976:	f9b3 3000 	ldrsh.w	r3, [r3]
 801897a:	6820      	ldr	r0, [r4, #0]
 801897c:	9100      	str	r1, [sp, #0]
 801897e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018982:	ab02      	add	r3, sp, #8
 8018984:	6861      	ldr	r1, [r4, #4]
 8018986:	f8ad 2004 	strh.w	r2, [sp, #4]
 801898a:	c303      	stmia	r3!, {r0, r1}
 801898c:	4669      	mov	r1, sp
 801898e:	a802      	add	r0, sp, #8
 8018990:	f7fb ffc8 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8018994:	ab02      	add	r3, sp, #8
 8018996:	cb03      	ldmia	r3!, {r0, r1}
 8018998:	4b12      	ldr	r3, [pc, #72]	; (80189e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801899a:	6020      	str	r0, [r4, #0]
 801899c:	6818      	ldr	r0, [r3, #0]
 801899e:	6061      	str	r1, [r4, #4]
 80189a0:	b138      	cbz	r0, 80189b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80189a2:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80189a6:	b133      	cbz	r3, 80189b6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80189a8:	6821      	ldr	r1, [r4, #0]
 80189aa:	4628      	mov	r0, r5
 80189ac:	6862      	ldr	r2, [r4, #4]
 80189ae:	f7ff ff59 	bl	8018864 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80189b2:	b005      	add	sp, #20
 80189b4:	bd30      	pop	{r4, r5, pc}
 80189b6:	6803      	ldr	r3, [r0, #0]
 80189b8:	4621      	mov	r1, r4
 80189ba:	689b      	ldr	r3, [r3, #8]
 80189bc:	4798      	blx	r3
 80189be:	4b0a      	ldr	r3, [pc, #40]	; (80189e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80189c0:	6818      	ldr	r0, [r3, #0]
 80189c2:	b118      	cbz	r0, 80189cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80189c4:	6803      	ldr	r3, [r0, #0]
 80189c6:	4621      	mov	r1, r4
 80189c8:	689b      	ldr	r3, [r3, #8]
 80189ca:	4798      	blx	r3
 80189cc:	4b07      	ldr	r3, [pc, #28]	; (80189ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80189ce:	4621      	mov	r1, r4
 80189d0:	6818      	ldr	r0, [r3, #0]
 80189d2:	6803      	ldr	r3, [r0, #0]
 80189d4:	695b      	ldr	r3, [r3, #20]
 80189d6:	4798      	blx	r3
 80189d8:	e7eb      	b.n	80189b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80189da:	bf00      	nop
 80189dc:	2000baf0 	.word	0x2000baf0
 80189e0:	2000baf2 	.word	0x2000baf2
 80189e4:	2000bb78 	.word	0x2000bb78
 80189e8:	2000bb74 	.word	0x2000bb74
 80189ec:	2000bafc 	.word	0x2000bafc

080189f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80189f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f4:	4604      	mov	r4, r0
 80189f6:	b09b      	sub	sp, #108	; 0x6c
 80189f8:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80189fc:	b129      	cbz	r1, 8018a0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80189fe:	2300      	movs	r3, #0
 8018a00:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8018a04:	b01b      	add	sp, #108	; 0x6c
 8018a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a0a:	4baf      	ldr	r3, [pc, #700]	; (8018cc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	b33b      	cbz	r3, 8018a60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018a10:	4dae      	ldr	r5, [pc, #696]	; (8018ccc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8018a12:	4628      	mov	r0, r5
 8018a14:	f7fb ffca 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a18:	4606      	mov	r6, r0
 8018a1a:	bb08      	cbnz	r0, 8018a60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018a1c:	4628      	mov	r0, r5
 8018a1e:	f7ff fc5b 	bl	80182d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018a22:	6829      	ldr	r1, [r5, #0]
 8018a24:	686a      	ldr	r2, [r5, #4]
 8018a26:	4620      	mov	r0, r4
 8018a28:	f7ff ff1c 	bl	8018864 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a2c:	802e      	strh	r6, [r5, #0]
 8018a2e:	806e      	strh	r6, [r5, #2]
 8018a30:	80ae      	strh	r6, [r5, #4]
 8018a32:	80ee      	strh	r6, [r5, #6]
 8018a34:	4fa6      	ldr	r7, [pc, #664]	; (8018cd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8018a36:	a809      	add	r0, sp, #36	; 0x24
 8018a38:	f7ff fe87 	bl	801874a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018a3c:	883d      	ldrh	r5, [r7, #0]
 8018a3e:	462e      	mov	r6, r5
 8018a40:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a44:	42b3      	cmp	r3, r6
 8018a46:	d910      	bls.n	8018a6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8018a48:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018a4c:	3601      	adds	r6, #1
 8018a4e:	a809      	add	r0, sp, #36	; 0x24
 8018a50:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8018a54:	b2b6      	uxth	r6, r6
 8018a56:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018a5a:	f7ff fee1 	bl	8018820 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018a5e:	e7ef      	b.n	8018a40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8018a60:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d1e5      	bne.n	8018a34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8018a68:	e7cc      	b.n	8018a04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018a6a:	462e      	mov	r6, r5
 8018a6c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8018a70:	42b3      	cmp	r3, r6
 8018a72:	d90b      	bls.n	8018a8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018a74:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018a78:	3601      	adds	r6, #1
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8018a80:	b2b6      	uxth	r6, r6
 8018a82:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018a86:	f7ff feed 	bl	8018864 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a8a:	e7ef      	b.n	8018a6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8018a8c:	4e91      	ldr	r6, [pc, #580]	; (8018cd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8018a8e:	6833      	ldr	r3, [r6, #0]
 8018a90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018a94:	2b01      	cmp	r3, #1
 8018a96:	f040 8092 	bne.w	8018bbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8018a9a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018a9e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8018aa2:	f04f 0900 	mov.w	r9, #0
 8018aa6:	33aa      	adds	r3, #170	; 0xaa
 8018aa8:	42a8      	cmp	r0, r5
 8018aaa:	f103 0308 	add.w	r3, r3, #8
 8018aae:	dd0a      	ble.n	8018ac6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8018ab0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018ab4:	3501      	adds	r5, #1
 8018ab6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8018aba:	440a      	add	r2, r1
 8018abc:	b212      	sxth	r2, r2
 8018abe:	4591      	cmp	r9, r2
 8018ac0:	bfb8      	it	lt
 8018ac2:	4691      	movlt	r9, r2
 8018ac4:	e7f0      	b.n	8018aa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8018ac6:	4b84      	ldr	r3, [pc, #528]	; (8018cd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8018ac8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8018ce0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8018acc:	881d      	ldrh	r5, [r3, #0]
 8018ace:	2300      	movs	r3, #0
 8018ad0:	2d0f      	cmp	r5, #15
 8018ad2:	bf8c      	ite	hi
 8018ad4:	08ed      	lsrhi	r5, r5, #3
 8018ad6:	2501      	movls	r5, #1
 8018ad8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018adc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018ae0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8018ae4:	6830      	ldr	r0, [r6, #0]
 8018ae6:	440b      	add	r3, r1
 8018ae8:	6802      	ldr	r2, [r0, #0]
 8018aea:	b21b      	sxth	r3, r3
 8018aec:	4599      	cmp	r9, r3
 8018aee:	dd49      	ble.n	8018b84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8018af0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8018af4:	4798      	blx	r3
 8018af6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018afa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018afe:	4413      	add	r3, r2
 8018b00:	b21b      	sxth	r3, r3
 8018b02:	195a      	adds	r2, r3, r5
 8018b04:	4290      	cmp	r0, r2
 8018b06:	da07      	bge.n	8018b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018b08:	4581      	cmp	r9, r0
 8018b0a:	dd05      	ble.n	8018b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018b0c:	4298      	cmp	r0, r3
 8018b0e:	da33      	bge.n	8018b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	dd31      	ble.n	8018b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8018b14:	4648      	mov	r0, r9
 8018b16:	e004      	b.n	8018b22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8018b18:	4298      	cmp	r0, r3
 8018b1a:	dbfb      	blt.n	8018b14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8018b1c:	4548      	cmp	r0, r9
 8018b1e:	bfa8      	it	ge
 8018b20:	4648      	movge	r0, r9
 8018b22:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018b26:	2100      	movs	r1, #0
 8018b28:	1ac0      	subs	r0, r0, r3
 8018b2a:	f8b7 a000 	ldrh.w	sl, [r7]
 8018b2e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018b32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b36:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018b3a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018b3e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018b42:	4553      	cmp	r3, sl
 8018b44:	d9ca      	bls.n	8018adc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8018b46:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8018b4a:	ab07      	add	r3, sp, #28
 8018b4c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018b50:	6851      	ldr	r1, [r2, #4]
 8018b52:	c303      	stmia	r3!, {r0, r1}
 8018b54:	a807      	add	r0, sp, #28
 8018b56:	a905      	add	r1, sp, #20
 8018b58:	f7fb fee4 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8018b5c:	a807      	add	r0, sp, #28
 8018b5e:	f7fb ff25 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b62:	b920      	cbnz	r0, 8018b6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8018b64:	6823      	ldr	r3, [r4, #0]
 8018b66:	a907      	add	r1, sp, #28
 8018b68:	4620      	mov	r0, r4
 8018b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b6c:	4798      	blx	r3
 8018b6e:	f10a 0a01 	add.w	sl, sl, #1
 8018b72:	fa1f fa8a 	uxth.w	sl, sl
 8018b76:	e7e2      	b.n	8018b3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8018b78:	6830      	ldr	r0, [r6, #0]
 8018b7a:	2101      	movs	r1, #1
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b80:	4798      	blx	r3
 8018b82:	e7ab      	b.n	8018adc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8018b84:	69d3      	ldr	r3, [r2, #28]
 8018b86:	4798      	blx	r3
 8018b88:	4b54      	ldr	r3, [pc, #336]	; (8018cdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	f43f af39 	beq.w	8018a04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018b92:	2300      	movs	r3, #0
 8018b94:	883d      	ldrh	r5, [r7, #0]
 8018b96:	34ea      	adds	r4, #234	; 0xea
 8018b98:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8018b9c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8018ba0:	42ab      	cmp	r3, r5
 8018ba2:	f67f af2f 	bls.w	8018a04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018ba6:	ab1a      	add	r3, sp, #104	; 0x68
 8018ba8:	4620      	mov	r0, r4
 8018baa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018bae:	3501      	adds	r5, #1
 8018bb0:	3b44      	subs	r3, #68	; 0x44
 8018bb2:	b2ad      	uxth	r5, r5
 8018bb4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018bb8:	f7ff fe32 	bl	8018820 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018bbc:	e7ee      	b.n	8018b9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8018bbe:	2b02      	cmp	r3, #2
 8018bc0:	d16a      	bne.n	8018c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018bc2:	f8df a120 	ldr.w	sl, [pc, #288]	; 8018ce4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8018bc6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018bca:	42ab      	cmp	r3, r5
 8018bcc:	d9dc      	bls.n	8018b88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018bce:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018bd2:	ab03      	add	r3, sp, #12
 8018bd4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018bd8:	6851      	ldr	r1, [r2, #4]
 8018bda:	c303      	stmia	r3!, {r0, r1}
 8018bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8018be0:	2b01      	cmp	r3, #1
 8018be2:	d102      	bne.n	8018bea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8018be4:	a803      	add	r0, sp, #12
 8018be6:	f7ff fbd1 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018bea:	a803      	add	r0, sp, #12
 8018bec:	f7fb fede 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d14a      	bne.n	8018c8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8018bf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018bf8:	f10d 0914 	add.w	r9, sp, #20
 8018bfc:	f10d 081c 	add.w	r8, sp, #28
 8018c00:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018c04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018c08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018c10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018c14:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018c18:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8018c1c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8018c20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018c24:	44dc      	add	ip, fp
 8018c26:	6830      	ldr	r0, [r6, #0]
 8018c28:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018c2c:	ebac 0c02 	sub.w	ip, ip, r2
 8018c30:	f8d0 e000 	ldr.w	lr, [r0]
 8018c34:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018c38:	fa1f fc8c 	uxth.w	ip, ip
 8018c3c:	f8cd c000 	str.w	ip, [sp]
 8018c40:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8018c44:	47d8      	blx	fp
 8018c46:	f89a 3000 	ldrb.w	r3, [sl]
 8018c4a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018c4e:	2b01      	cmp	r3, #1
 8018c50:	d11e      	bne.n	8018c90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8018c52:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018c56:	e888 0003 	stmia.w	r8, {r0, r1}
 8018c5a:	4640      	mov	r0, r8
 8018c5c:	f7ff fb3c 	bl	80182d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018c60:	6823      	ldr	r3, [r4, #0]
 8018c62:	4641      	mov	r1, r8
 8018c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c66:	4620      	mov	r0, r4
 8018c68:	4798      	blx	r3
 8018c6a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018c6e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018c72:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8018c76:	4413      	add	r3, r2
 8018c78:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018c7c:	440a      	add	r2, r1
 8018c7e:	b21b      	sxth	r3, r3
 8018c80:	b212      	sxth	r2, r2
 8018c82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018c86:	4293      	cmp	r3, r2
 8018c88:	dbc6      	blt.n	8018c18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8018c8a:	3501      	adds	r5, #1
 8018c8c:	b2ad      	uxth	r5, r5
 8018c8e:	e79a      	b.n	8018bc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8018c90:	6823      	ldr	r3, [r4, #0]
 8018c92:	4649      	mov	r1, r9
 8018c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c96:	e7e6      	b.n	8018c66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8018c98:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018c9c:	42ab      	cmp	r3, r5
 8018c9e:	f67f af73 	bls.w	8018b88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018ca2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018ca6:	ab07      	add	r3, sp, #28
 8018ca8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018cac:	6851      	ldr	r1, [r2, #4]
 8018cae:	c303      	stmia	r3!, {r0, r1}
 8018cb0:	a807      	add	r0, sp, #28
 8018cb2:	f7fb fe7b 	bl	80149ac <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cb6:	b920      	cbnz	r0, 8018cc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8018cb8:	6823      	ldr	r3, [r4, #0]
 8018cba:	a907      	add	r1, sp, #28
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cc0:	4798      	blx	r3
 8018cc2:	3501      	adds	r5, #1
 8018cc4:	b2ad      	uxth	r5, r5
 8018cc6:	e7e7      	b.n	8018c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018cc8:	2000bb74 	.word	0x2000bb74
 8018ccc:	2000bb80 	.word	0x2000bb80
 8018cd0:	20000060 	.word	0x20000060
 8018cd4:	2000bafc 	.word	0x2000bafc
 8018cd8:	2000baf2 	.word	0x2000baf2
 8018cdc:	2000bafa 	.word	0x2000bafa
 8018ce0:	2000baf0 	.word	0x2000baf0
 8018ce4:	2000baf4 	.word	0x2000baf4

08018ce8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018ce8:	4b03      	ldr	r3, [pc, #12]	; (8018cf8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018cea:	2200      	movs	r2, #0
 8018cec:	801a      	strh	r2, [r3, #0]
 8018cee:	805a      	strh	r2, [r3, #2]
 8018cf0:	809a      	strh	r2, [r3, #4]
 8018cf2:	80da      	strh	r2, [r3, #6]
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop
 8018cf8:	2000bb80 	.word	0x2000bb80

08018cfc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8018cfc:	2000      	movs	r0, #0
 8018cfe:	4770      	bx	lr

08018d00 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8018d00:	2000      	movs	r0, #0
 8018d02:	4770      	bx	lr

08018d04 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018d04:	b508      	push	{r3, lr}
 8018d06:	6803      	ldr	r3, [r0, #0]
 8018d08:	68db      	ldr	r3, [r3, #12]
 8018d0a:	4798      	blx	r3
 8018d0c:	b128      	cbz	r0, 8018d1a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018d0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018d12:	7a80      	ldrb	r0, [r0, #10]
 8018d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d18:	4318      	orrs	r0, r3
 8018d1a:	bd08      	pop	{r3, pc}

08018d1c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8018d1c:	b40e      	push	{r1, r2, r3}
 8018d1e:	b533      	push	{r0, r1, r4, r5, lr}
 8018d20:	ab05      	add	r3, sp, #20
 8018d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d26:	9301      	str	r3, [sp, #4]
 8018d28:	4b0a      	ldr	r3, [pc, #40]	; (8018d54 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8018d2a:	685c      	ldr	r4, [r3, #4]
 8018d2c:	1061      	asrs	r1, r4, #1
 8018d2e:	07e4      	lsls	r4, r4, #31
 8018d30:	eb00 0501 	add.w	r5, r0, r1
 8018d34:	bf46      	itte	mi
 8018d36:	681b      	ldrmi	r3, [r3, #0]
 8018d38:	5841      	ldrmi	r1, [r0, r1]
 8018d3a:	681c      	ldrpl	r4, [r3, #0]
 8018d3c:	4628      	mov	r0, r5
 8018d3e:	bf48      	it	mi
 8018d40:	58cc      	ldrmi	r4, [r1, r3]
 8018d42:	2100      	movs	r1, #0
 8018d44:	9b01      	ldr	r3, [sp, #4]
 8018d46:	47a0      	blx	r4
 8018d48:	b002      	add	sp, #8
 8018d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d4e:	b003      	add	sp, #12
 8018d50:	4770      	bx	lr
 8018d52:	bf00      	nop
 8018d54:	2000000c 	.word	0x2000000c

08018d58 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8018d58:	b40c      	push	{r2, r3}
 8018d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d5c:	ab06      	add	r3, sp, #24
 8018d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d62:	9301      	str	r3, [sp, #4]
 8018d64:	4b09      	ldr	r3, [pc, #36]	; (8018d8c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8018d66:	685d      	ldr	r5, [r3, #4]
 8018d68:	106c      	asrs	r4, r5, #1
 8018d6a:	07ed      	lsls	r5, r5, #31
 8018d6c:	eb00 0604 	add.w	r6, r0, r4
 8018d70:	bf45      	ittet	mi
 8018d72:	681b      	ldrmi	r3, [r3, #0]
 8018d74:	5900      	ldrmi	r0, [r0, r4]
 8018d76:	681c      	ldrpl	r4, [r3, #0]
 8018d78:	58c4      	ldrmi	r4, [r0, r3]
 8018d7a:	4630      	mov	r0, r6
 8018d7c:	9b01      	ldr	r3, [sp, #4]
 8018d7e:	47a0      	blx	r4
 8018d80:	b002      	add	sp, #8
 8018d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d86:	b002      	add	sp, #8
 8018d88:	4770      	bx	lr
 8018d8a:	bf00      	nop
 8018d8c:	2000000c 	.word	0x2000000c

08018d90 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018d90:	b40e      	push	{r1, r2, r3}
 8018d92:	b530      	push	{r4, r5, lr}
 8018d94:	b098      	sub	sp, #96	; 0x60
 8018d96:	4604      	mov	r4, r0
 8018d98:	ab1b      	add	r3, sp, #108	; 0x6c
 8018d9a:	a802      	add	r0, sp, #8
 8018d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018da0:	9301      	str	r3, [sp, #4]
 8018da2:	f001 fb6f 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8018da6:	6823      	ldr	r3, [r4, #0]
 8018da8:	4620      	mov	r0, r4
 8018daa:	2401      	movs	r4, #1
 8018dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dae:	4798      	blx	r3
 8018db0:	9a01      	ldr	r2, [sp, #4]
 8018db2:	4603      	mov	r3, r0
 8018db4:	4629      	mov	r1, r5
 8018db6:	a802      	add	r0, sp, #8
 8018db8:	f001 fb81 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018dbc:	a802      	add	r0, sp, #8
 8018dbe:	f001 fbb7 	bl	801a530 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018dc2:	b2a3      	uxth	r3, r4
 8018dc4:	b138      	cbz	r0, 8018dd6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8018dc6:	280a      	cmp	r0, #10
 8018dc8:	a802      	add	r0, sp, #8
 8018dca:	bf04      	itt	eq
 8018dcc:	3301      	addeq	r3, #1
 8018dce:	b21c      	sxtheq	r4, r3
 8018dd0:	f001 fbae 	bl	801a530 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018dd4:	e7f5      	b.n	8018dc2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	b018      	add	sp, #96	; 0x60
 8018dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018dde:	b003      	add	sp, #12
 8018de0:	4770      	bx	lr
	...

08018de4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018de4:	b40e      	push	{r1, r2, r3}
 8018de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018de8:	b098      	sub	sp, #96	; 0x60
 8018dea:	4605      	mov	r5, r0
 8018dec:	4f25      	ldr	r7, [pc, #148]	; (8018e84 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8018dee:	ab1d      	add	r3, sp, #116	; 0x74
 8018df0:	a802      	add	r0, sp, #8
 8018df2:	ae18      	add	r6, sp, #96	; 0x60
 8018df4:	f853 4b04 	ldr.w	r4, [r3], #4
 8018df8:	9300      	str	r3, [sp, #0]
 8018dfa:	f001 fb43 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8018dfe:	682b      	ldr	r3, [r5, #0]
 8018e00:	4628      	mov	r0, r5
 8018e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e04:	4798      	blx	r3
 8018e06:	4621      	mov	r1, r4
 8018e08:	2400      	movs	r4, #0
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	9a00      	ldr	r2, [sp, #0]
 8018e0e:	a802      	add	r0, sp, #8
 8018e10:	f001 fb55 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018e14:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8018e18:	462a      	mov	r2, r5
 8018e1a:	4633      	mov	r3, r6
 8018e1c:	4621      	mov	r1, r4
 8018e1e:	a802      	add	r0, sp, #8
 8018e20:	f001 fcb2 	bl	801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e24:	b340      	cbz	r0, 8018e78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8018e26:	280a      	cmp	r0, #10
 8018e28:	d01f      	beq.n	8018e6a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018e2a:	9901      	ldr	r1, [sp, #4]
 8018e2c:	b1e9      	cbz	r1, 8018e6a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018e2e:	7b4b      	ldrb	r3, [r1, #13]
 8018e30:	f891 c008 	ldrb.w	ip, [r1, #8]
 8018e34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018e38:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8018e3c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018e40:	79c9      	ldrb	r1, [r1, #7]
 8018e42:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8018e46:	bf18      	it	ne
 8018e48:	4638      	movne	r0, r7
 8018e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e4e:	bf08      	it	eq
 8018e50:	2000      	moveq	r0, #0
 8018e52:	88aa      	ldrh	r2, [r5, #4]
 8018e54:	ea41 010e 	orr.w	r1, r1, lr
 8018e58:	ea43 030c 	orr.w	r3, r3, ip
 8018e5c:	440a      	add	r2, r1
 8018e5e:	4303      	orrs	r3, r0
 8018e60:	1ad3      	subs	r3, r2, r3
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	42a3      	cmp	r3, r4
 8018e66:	bfc8      	it	gt
 8018e68:	b21c      	sxthgt	r4, r3
 8018e6a:	4633      	mov	r3, r6
 8018e6c:	462a      	mov	r2, r5
 8018e6e:	2100      	movs	r1, #0
 8018e70:	a802      	add	r0, sp, #8
 8018e72:	f001 fc89 	bl	801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e76:	e7d5      	b.n	8018e24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8018e78:	b2a0      	uxth	r0, r4
 8018e7a:	b018      	add	sp, #96	; 0x60
 8018e7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018e80:	b003      	add	sp, #12
 8018e82:	4770      	bx	lr
 8018e84:	fffffe00 	.word	0xfffffe00

08018e88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018e88:	b40e      	push	{r1, r2, r3}
 8018e8a:	b570      	push	{r4, r5, r6, lr}
 8018e8c:	b099      	sub	sp, #100	; 0x64
 8018e8e:	4604      	mov	r4, r0
 8018e90:	26ff      	movs	r6, #255	; 0xff
 8018e92:	ab1d      	add	r3, sp, #116	; 0x74
 8018e94:	a802      	add	r0, sp, #8
 8018e96:	f853 5b04 	ldr.w	r5, [r3], #4
 8018e9a:	9300      	str	r3, [sp, #0]
 8018e9c:	f001 faf2 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8018ea0:	6823      	ldr	r3, [r4, #0]
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ea6:	4798      	blx	r3
 8018ea8:	4629      	mov	r1, r5
 8018eaa:	4603      	mov	r3, r0
 8018eac:	9a00      	ldr	r2, [sp, #0]
 8018eae:	a802      	add	r0, sp, #8
 8018eb0:	ad18      	add	r5, sp, #96	; 0x60
 8018eb2:	f001 fb04 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018eb6:	2100      	movs	r1, #0
 8018eb8:	4622      	mov	r2, r4
 8018eba:	a802      	add	r0, sp, #8
 8018ebc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8018ec0:	462b      	mov	r3, r5
 8018ec2:	f001 fc61 	bl	801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018ec6:	b190      	cbz	r0, 8018eee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8018ec8:	280a      	cmp	r0, #10
 8018eca:	d009      	beq.n	8018ee0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018ecc:	9a01      	ldr	r2, [sp, #4]
 8018ece:	b13a      	cbz	r2, 8018ee0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018ed0:	7923      	ldrb	r3, [r4, #4]
 8018ed2:	7a12      	ldrb	r2, [r2, #8]
 8018ed4:	1a9b      	subs	r3, r3, r2
 8018ed6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8018eda:	429e      	cmp	r6, r3
 8018edc:	bf28      	it	cs
 8018ede:	461e      	movcs	r6, r3
 8018ee0:	462b      	mov	r3, r5
 8018ee2:	4622      	mov	r2, r4
 8018ee4:	2100      	movs	r1, #0
 8018ee6:	a802      	add	r0, sp, #8
 8018ee8:	f001 fc4e 	bl	801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018eec:	e7eb      	b.n	8018ec6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8018eee:	4630      	mov	r0, r6
 8018ef0:	b019      	add	sp, #100	; 0x64
 8018ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ef6:	b003      	add	sp, #12
 8018ef8:	4770      	bx	lr
	...

08018efc <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 8018efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f00:	b0b9      	sub	sp, #228	; 0xe4
 8018f02:	4604      	mov	r4, r0
 8018f04:	4615      	mov	r5, r2
 8018f06:	4698      	mov	r8, r3
 8018f08:	ae0c      	add	r6, sp, #48	; 0x30
 8018f0a:	4689      	mov	r9, r1
 8018f0c:	af22      	add	r7, sp, #136	; 0x88
 8018f0e:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8018fcc <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd0>
 8018f12:	4630      	mov	r0, r6
 8018f14:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8018fd0 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd4>
 8018f18:	f001 fab4 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8018f1c:	6823      	ldr	r3, [r4, #0]
 8018f1e:	4620      	mov	r0, r4
 8018f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f22:	4798      	blx	r3
 8018f24:	4642      	mov	r2, r8
 8018f26:	4629      	mov	r1, r5
 8018f28:	4603      	mov	r3, r0
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	f001 fac7 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018f30:	4638      	mov	r0, r7
 8018f32:	f001 faa7 	bl	801a484 <_ZN8touchgfx12TextProviderC1Ev>
 8018f36:	6823      	ldr	r3, [r4, #0]
 8018f38:	4620      	mov	r0, r4
 8018f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f3c:	4798      	blx	r3
 8018f3e:	4629      	mov	r1, r5
 8018f40:	2500      	movs	r5, #0
 8018f42:	4603      	mov	r3, r0
 8018f44:	4642      	mov	r2, r8
 8018f46:	4638      	mov	r0, r7
 8018f48:	46a8      	mov	r8, r5
 8018f4a:	f001 fab8 	bl	801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018f4e:	4649      	mov	r1, r9
 8018f50:	4630      	mov	r0, r6
 8018f52:	f001 fbd9 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018f56:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8018f5a:	f8da 3000 	ldr.w	r3, [sl]
 8018f5e:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8018f62:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018f66:	b122      	cbz	r2, 8018f72 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x76>
 8018f68:	f8d3 c04c 	ldr.w	ip, [r3, #76]	; 0x4c
 8018f6c:	f1bc 0f00 	cmp.w	ip, #0
 8018f70:	d101      	bne.n	8018f76 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x7a>
 8018f72:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8018f76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018f7a:	aa0a      	add	r2, sp, #40	; 0x28
 8018f7c:	9305      	str	r3, [sp, #20]
 8018f7e:	ab03      	add	r3, sp, #12
 8018f80:	e9cd b80a 	strd	fp, r8, [sp, #40]	; 0x28
 8018f84:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8018f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f8c:	4622      	mov	r2, r4
 8018f8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f92:	ab09      	add	r3, sp, #36	; 0x24
 8018f94:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8018f98:	4660      	mov	r0, ip
 8018f9a:	9300      	str	r3, [sp, #0]
 8018f9c:	464b      	mov	r3, r9
 8018f9e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8018fa2:	f7fe f8e9 	bl	8017178 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018fa6:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8018faa:	42ab      	cmp	r3, r5
 8018fac:	bfc8      	it	gt
 8018fae:	b29d      	uxthgt	r5, r3
 8018fb0:	b118      	cbz	r0, 8018fba <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xbe>
 8018fb2:	4649      	mov	r1, r9
 8018fb4:	4638      	mov	r0, r7
 8018fb6:	f001 fba7 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018fba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d1cb      	bne.n	8018f5a <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x5e>
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	b039      	add	sp, #228	; 0xe4
 8018fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fca:	bf00      	nop
 8018fcc:	2000bafc 	.word	0x2000bafc
 8018fd0:	080170c1 	.word	0x080170c1

08018fd4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018fd4:	b513      	push	{r0, r1, r4, lr}
 8018fd6:	1d01      	adds	r1, r0, #4
 8018fd8:	4603      	mov	r3, r0
 8018fda:	466a      	mov	r2, sp
 8018fdc:	c903      	ldmia	r1, {r0, r1}
 8018fde:	e882 0003 	stmia.w	r2, {r0, r1}
 8018fe2:	2100      	movs	r1, #0
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	9100      	str	r1, [sp, #0]
 8018fe8:	6819      	ldr	r1, [r3, #0]
 8018fea:	690c      	ldr	r4, [r1, #16]
 8018fec:	4611      	mov	r1, r2
 8018fee:	47a0      	blx	r4
 8018ff0:	b002      	add	sp, #8
 8018ff2:	bd10      	pop	{r4, pc}

08018ff4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018ff4:	b538      	push	{r3, r4, r5, lr}
 8018ff6:	680b      	ldr	r3, [r1, #0]
 8018ff8:	460c      	mov	r4, r1
 8018ffa:	4605      	mov	r5, r0
 8018ffc:	68db      	ldr	r3, [r3, #12]
 8018ffe:	4798      	blx	r3
 8019000:	6823      	ldr	r3, [r4, #0]
 8019002:	4620      	mov	r0, r4
 8019004:	4629      	mov	r1, r5
 8019006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019008:	4798      	blx	r3
 801900a:	4628      	mov	r0, r5
 801900c:	bd38      	pop	{r3, r4, r5, pc}

0801900e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801900e:	b410      	push	{r4}
 8019010:	880a      	ldrh	r2, [r1, #0]
 8019012:	8884      	ldrh	r4, [r0, #4]
 8019014:	4422      	add	r2, r4
 8019016:	800a      	strh	r2, [r1, #0]
 8019018:	884a      	ldrh	r2, [r1, #2]
 801901a:	88c4      	ldrh	r4, [r0, #6]
 801901c:	4422      	add	r2, r4
 801901e:	804a      	strh	r2, [r1, #2]
 8019020:	6940      	ldr	r0, [r0, #20]
 8019022:	b120      	cbz	r0, 801902e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019024:	6803      	ldr	r3, [r0, #0]
 8019026:	f85d 4b04 	ldr.w	r4, [sp], #4
 801902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902c:	4718      	bx	r3
 801902e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019032:	4770      	bx	lr

08019034 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019036:	460b      	mov	r3, r1
 8019038:	b085      	sub	sp, #20
 801903a:	4604      	mov	r4, r0
 801903c:	b901      	cbnz	r1, 8019040 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801903e:	b1fa      	cbz	r2, 8019080 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019040:	1d27      	adds	r7, r4, #4
 8019042:	466e      	mov	r6, sp
 8019044:	ad02      	add	r5, sp, #8
 8019046:	e897 0003 	ldmia.w	r7, {r0, r1}
 801904a:	e886 0003 	stmia.w	r6, {r0, r1}
 801904e:	88e1      	ldrh	r1, [r4, #6]
 8019050:	4620      	mov	r0, r4
 8019052:	440a      	add	r2, r1
 8019054:	88a1      	ldrh	r1, [r4, #4]
 8019056:	4419      	add	r1, r3
 8019058:	6823      	ldr	r3, [r4, #0]
 801905a:	b212      	sxth	r2, r2
 801905c:	b209      	sxth	r1, r1
 801905e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019060:	4798      	blx	r3
 8019062:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019066:	e885 0003 	stmia.w	r5, {r0, r1}
 801906a:	6960      	ldr	r0, [r4, #20]
 801906c:	b150      	cbz	r0, 8019084 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801906e:	6803      	ldr	r3, [r0, #0]
 8019070:	4631      	mov	r1, r6
 8019072:	691b      	ldr	r3, [r3, #16]
 8019074:	4798      	blx	r3
 8019076:	6960      	ldr	r0, [r4, #20]
 8019078:	6803      	ldr	r3, [r0, #0]
 801907a:	691b      	ldr	r3, [r3, #16]
 801907c:	4629      	mov	r1, r5
 801907e:	4798      	blx	r3
 8019080:	b005      	add	sp, #20
 8019082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019084:	f7ff fb08 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8019088:	6803      	ldr	r3, [r0, #0]
 801908a:	4631      	mov	r1, r6
 801908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801908e:	4798      	blx	r3
 8019090:	f7ff fb02 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 8019094:	6803      	ldr	r3, [r0, #0]
 8019096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019098:	e7f0      	b.n	801907c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801909a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801909a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801909c:	8882      	ldrh	r2, [r0, #4]
 801909e:	4605      	mov	r5, r0
 80190a0:	880b      	ldrh	r3, [r1, #0]
 80190a2:	460c      	mov	r4, r1
 80190a4:	4413      	add	r3, r2
 80190a6:	800b      	strh	r3, [r1, #0]
 80190a8:	884b      	ldrh	r3, [r1, #2]
 80190aa:	88c2      	ldrh	r2, [r0, #6]
 80190ac:	4413      	add	r3, r2
 80190ae:	4602      	mov	r2, r0
 80190b0:	804b      	strh	r3, [r1, #2]
 80190b2:	466b      	mov	r3, sp
 80190b4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80190b8:	6851      	ldr	r1, [r2, #4]
 80190ba:	c303      	stmia	r3!, {r0, r1}
 80190bc:	4621      	mov	r1, r4
 80190be:	4668      	mov	r0, sp
 80190c0:	f7fb fc30 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 80190c4:	466b      	mov	r3, sp
 80190c6:	cb03      	ldmia	r3!, {r0, r1}
 80190c8:	6020      	str	r0, [r4, #0]
 80190ca:	6061      	str	r1, [r4, #4]
 80190cc:	6968      	ldr	r0, [r5, #20]
 80190ce:	b128      	cbz	r0, 80190dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 80190d0:	6803      	ldr	r3, [r0, #0]
 80190d2:	691b      	ldr	r3, [r3, #16]
 80190d4:	4621      	mov	r1, r4
 80190d6:	4798      	blx	r3
 80190d8:	b003      	add	sp, #12
 80190da:	bd30      	pop	{r4, r5, pc}
 80190dc:	f7ff fadc 	bl	8018698 <_ZN8touchgfx11Application11getInstanceEv>
 80190e0:	6803      	ldr	r3, [r0, #0]
 80190e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190e4:	e7f6      	b.n	80190d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080190e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80190e6:	b570      	push	{r4, r5, r6, lr}
 80190e8:	8882      	ldrh	r2, [r0, #4]
 80190ea:	460c      	mov	r4, r1
 80190ec:	880b      	ldrh	r3, [r1, #0]
 80190ee:	4605      	mov	r5, r0
 80190f0:	4413      	add	r3, r2
 80190f2:	800b      	strh	r3, [r1, #0]
 80190f4:	884b      	ldrh	r3, [r1, #2]
 80190f6:	88c2      	ldrh	r2, [r0, #6]
 80190f8:	4413      	add	r3, r2
 80190fa:	804b      	strh	r3, [r1, #2]
 80190fc:	1d01      	adds	r1, r0, #4
 80190fe:	4620      	mov	r0, r4
 8019100:	f7fb fc10 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 8019104:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019108:	b153      	cbz	r3, 8019120 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801910a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801910e:	b13b      	cbz	r3, 8019120 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019110:	6968      	ldr	r0, [r5, #20]
 8019112:	b128      	cbz	r0, 8019120 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019114:	6803      	ldr	r3, [r0, #0]
 8019116:	4621      	mov	r1, r4
 8019118:	6a1b      	ldr	r3, [r3, #32]
 801911a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801911e:	4718      	bx	r3
 8019120:	bd70      	pop	{r4, r5, r6, pc}

08019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019122:	b510      	push	{r4, lr}
 8019124:	2300      	movs	r3, #0
 8019126:	4604      	mov	r4, r0
 8019128:	4608      	mov	r0, r1
 801912a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801912e:	8023      	strh	r3, [r4, #0]
 8019130:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019134:	8063      	strh	r3, [r4, #2]
 8019136:	6803      	ldr	r3, [r0, #0]
 8019138:	80a1      	strh	r1, [r4, #4]
 801913a:	4621      	mov	r1, r4
 801913c:	80e2      	strh	r2, [r4, #6]
 801913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019140:	4798      	blx	r3
 8019142:	4620      	mov	r0, r4
 8019144:	bd10      	pop	{r4, pc}
	...

08019148 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019148:	b530      	push	{r4, r5, lr}
 801914a:	8083      	strh	r3, [r0, #4]
 801914c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019150:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019154:	7183      	strb	r3, [r0, #6]
 8019156:	79c3      	ldrb	r3, [r0, #7]
 8019158:	6101      	str	r1, [r0, #16]
 801915a:	f365 0306 	bfi	r3, r5, #0, #7
 801915e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019162:	8282      	strh	r2, [r0, #20]
 8019164:	f365 13c7 	bfi	r3, r5, #7, #1
 8019168:	71c3      	strb	r3, [r0, #7]
 801916a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801916e:	7203      	strb	r3, [r0, #8]
 8019170:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019174:	7243      	strb	r3, [r0, #9]
 8019176:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801917a:	8143      	strh	r3, [r0, #10]
 801917c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019180:	8183      	strh	r3, [r0, #12]
 8019182:	4b01      	ldr	r3, [pc, #4]	; (8019188 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019184:	6003      	str	r3, [r0, #0]
 8019186:	bd30      	pop	{r4, r5, pc}
 8019188:	08029108 	.word	0x08029108

0801918c <_ZNK8touchgfx9ConstFont4findEt>:
 801918c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801918e:	8a84      	ldrh	r4, [r0, #20]
 8019190:	2500      	movs	r5, #0
 8019192:	260e      	movs	r6, #14
 8019194:	3c01      	subs	r4, #1
 8019196:	42a5      	cmp	r5, r4
 8019198:	dc0c      	bgt.n	80191b4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801919a:	192a      	adds	r2, r5, r4
 801919c:	6903      	ldr	r3, [r0, #16]
 801919e:	1052      	asrs	r2, r2, #1
 80191a0:	fb06 3302 	mla	r3, r6, r2, r3
 80191a4:	889f      	ldrh	r7, [r3, #4]
 80191a6:	428f      	cmp	r7, r1
 80191a8:	d901      	bls.n	80191ae <_ZNK8touchgfx9ConstFont4findEt+0x22>
 80191aa:	1e54      	subs	r4, r2, #1
 80191ac:	e7f3      	b.n	8019196 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80191ae:	d202      	bcs.n	80191b6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 80191b0:	1c55      	adds	r5, r2, #1
 80191b2:	e7f0      	b.n	8019196 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80191b4:	2300      	movs	r3, #0
 80191b6:	4618      	mov	r0, r3
 80191b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80191ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191bc:	4605      	mov	r5, r0
 80191be:	4617      	mov	r7, r2
 80191c0:	461e      	mov	r6, r3
 80191c2:	f7ff ffe3 	bl	801918c <_ZNK8touchgfx9ConstFont4findEt>
 80191c6:	b9e0      	cbnz	r0, 8019202 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 80191c8:	b911      	cbnz	r1, 80191d0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 80191ca:	2400      	movs	r4, #0
 80191cc:	4620      	mov	r0, r4
 80191ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191d0:	290a      	cmp	r1, #10
 80191d2:	d0fa      	beq.n	80191ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80191d4:	682b      	ldr	r3, [r5, #0]
 80191d6:	4628      	mov	r0, r5
 80191d8:	691b      	ldr	r3, [r3, #16]
 80191da:	4798      	blx	r3
 80191dc:	4601      	mov	r1, r0
 80191de:	4628      	mov	r0, r5
 80191e0:	f7ff ffd4 	bl	801918c <_ZNK8touchgfx9ConstFont4findEt>
 80191e4:	4604      	mov	r4, r0
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d0ef      	beq.n	80191ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80191ea:	682b      	ldr	r3, [r5, #0]
 80191ec:	4621      	mov	r1, r4
 80191ee:	4628      	mov	r0, r5
 80191f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191f2:	4798      	blx	r3
 80191f4:	6038      	str	r0, [r7, #0]
 80191f6:	682b      	ldr	r3, [r5, #0]
 80191f8:	4628      	mov	r0, r5
 80191fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191fc:	4798      	blx	r3
 80191fe:	7030      	strb	r0, [r6, #0]
 8019200:	e7e4      	b.n	80191cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019202:	4604      	mov	r4, r0
 8019204:	e7f1      	b.n	80191ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019206 <_ZN8touchgfx6memsetEPvhm>:
 8019206:	4402      	add	r2, r0
 8019208:	4290      	cmp	r0, r2
 801920a:	d002      	beq.n	8019212 <_ZN8touchgfx6memsetEPvhm+0xc>
 801920c:	f800 1b01 	strb.w	r1, [r0], #1
 8019210:	e7fa      	b.n	8019208 <_ZN8touchgfx6memsetEPvhm+0x2>
 8019212:	4770      	bx	lr

08019214 <_ZN8touchgfx3clzEl>:
 8019214:	b1e8      	cbz	r0, 8019252 <_ZN8touchgfx3clzEl+0x3e>
 8019216:	2800      	cmp	r0, #0
 8019218:	bfb8      	it	lt
 801921a:	4240      	neglt	r0, r0
 801921c:	0c03      	lsrs	r3, r0, #16
 801921e:	041b      	lsls	r3, r3, #16
 8019220:	b9ab      	cbnz	r3, 801924e <_ZN8touchgfx3clzEl+0x3a>
 8019222:	0400      	lsls	r0, r0, #16
 8019224:	2310      	movs	r3, #16
 8019226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801922a:	bf04      	itt	eq
 801922c:	0200      	lsleq	r0, r0, #8
 801922e:	3308      	addeq	r3, #8
 8019230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019234:	bf04      	itt	eq
 8019236:	0100      	lsleq	r0, r0, #4
 8019238:	3304      	addeq	r3, #4
 801923a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801923e:	bf04      	itt	eq
 8019240:	0080      	lsleq	r0, r0, #2
 8019242:	3302      	addeq	r3, #2
 8019244:	2800      	cmp	r0, #0
 8019246:	bfa8      	it	ge
 8019248:	3301      	addge	r3, #1
 801924a:	1e58      	subs	r0, r3, #1
 801924c:	4770      	bx	lr
 801924e:	2300      	movs	r3, #0
 8019250:	e7e9      	b.n	8019226 <_ZN8touchgfx3clzEl+0x12>
 8019252:	201f      	movs	r0, #31
 8019254:	4770      	bx	lr

08019256 <_ZN8touchgfx6muldivElllRl>:
 8019256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801925a:	4604      	mov	r4, r0
 801925c:	4698      	mov	r8, r3
 801925e:	2601      	movs	r6, #1
 8019260:	f7ff ffd8 	bl	8019214 <_ZN8touchgfx3clzEl>
 8019264:	2c00      	cmp	r4, #0
 8019266:	fa04 f500 	lsl.w	r5, r4, r0
 801926a:	fa06 f600 	lsl.w	r6, r6, r0
 801926e:	bfba      	itte	lt
 8019270:	f04f 37ff 	movlt.w	r7, #4294967295
 8019274:	4264      	neglt	r4, r4
 8019276:	2701      	movge	r7, #1
 8019278:	2900      	cmp	r1, #0
 801927a:	f106 36ff 	add.w	r6, r6, #4294967295
 801927e:	bfbc      	itt	lt
 8019280:	4249      	neglt	r1, r1
 8019282:	427f      	neglt	r7, r7
 8019284:	2a00      	cmp	r2, #0
 8019286:	fa41 fc00 	asr.w	ip, r1, r0
 801928a:	ea01 0106 	and.w	r1, r1, r6
 801928e:	bfb8      	it	lt
 8019290:	427f      	neglt	r7, r7
 8019292:	fb04 f401 	mul.w	r4, r4, r1
 8019296:	fb95 f3f2 	sdiv	r3, r5, r2
 801929a:	fb02 5513 	mls	r5, r2, r3, r5
 801929e:	bfb8      	it	lt
 80192a0:	4252      	neglt	r2, r2
 80192a2:	fb94 f0f2 	sdiv	r0, r4, r2
 80192a6:	fb02 4410 	mls	r4, r2, r0, r4
 80192aa:	fb0c 4405 	mla	r4, ip, r5, r4
 80192ae:	fb94 f1f2 	sdiv	r1, r4, r2
 80192b2:	4408      	add	r0, r1
 80192b4:	fb02 4211 	mls	r2, r2, r1, r4
 80192b8:	fb0c 0003 	mla	r0, ip, r3, r0
 80192bc:	f8c8 2000 	str.w	r2, [r8]
 80192c0:	4378      	muls	r0, r7
 80192c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192c6 <_ZN8touchgfx10ClickEventD1Ev>:
 80192c6:	4770      	bx	lr

080192c8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80192c8:	2000      	movs	r0, #0
 80192ca:	4770      	bx	lr

080192cc <_ZN8touchgfx9DragEventD1Ev>:
 80192cc:	4770      	bx	lr

080192ce <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80192ce:	2001      	movs	r0, #1
 80192d0:	4770      	bx	lr

080192d2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80192d2:	2002      	movs	r0, #2
 80192d4:	4770      	bx	lr

080192d6 <_ZN8touchgfx12GestureEventD1Ev>:
 80192d6:	4770      	bx	lr

080192d8 <_ZN8touchgfx10ClickEventD0Ev>:
 80192d8:	b510      	push	{r4, lr}
 80192da:	4604      	mov	r4, r0
 80192dc:	210c      	movs	r1, #12
 80192de:	f00b fbbe 	bl	8024a5e <_ZdlPvj>
 80192e2:	4620      	mov	r0, r4
 80192e4:	bd10      	pop	{r4, pc}

080192e6 <_ZN8touchgfx9DragEventD0Ev>:
 80192e6:	b510      	push	{r4, lr}
 80192e8:	4604      	mov	r4, r0
 80192ea:	2110      	movs	r1, #16
 80192ec:	f00b fbb7 	bl	8024a5e <_ZdlPvj>
 80192f0:	4620      	mov	r0, r4
 80192f2:	bd10      	pop	{r4, pc}

080192f4 <_ZN8touchgfx12GestureEventD0Ev>:
 80192f4:	b510      	push	{r4, lr}
 80192f6:	4604      	mov	r4, r0
 80192f8:	210c      	movs	r1, #12
 80192fa:	f00b fbb0 	bl	8024a5e <_ZdlPvj>
 80192fe:	4620      	mov	r0, r4
 8019300:	bd10      	pop	{r4, pc}
	...

08019304 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019304:	b530      	push	{r4, r5, lr}
 8019306:	460d      	mov	r5, r1
 8019308:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801930a:	b087      	sub	sp, #28
 801930c:	4604      	mov	r4, r0
 801930e:	b301      	cbz	r1, 8019352 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019310:	a801      	add	r0, sp, #4
 8019312:	f7ff ff06 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019316:	892a      	ldrh	r2, [r5, #8]
 8019318:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801931c:	7928      	ldrb	r0, [r5, #4]
 801931e:	1ad2      	subs	r2, r2, r3
 8019320:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019322:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019326:	441a      	add	r2, r3
 8019328:	896b      	ldrh	r3, [r5, #10]
 801932a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801932e:	f88d 0010 	strb.w	r0, [sp, #16]
 8019332:	1b5b      	subs	r3, r3, r5
 8019334:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019336:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019338:	442b      	add	r3, r5
 801933a:	4d07      	ldr	r5, [pc, #28]	; (8019358 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801933c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019340:	a903      	add	r1, sp, #12
 8019342:	9503      	str	r5, [sp, #12]
 8019344:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019348:	f8ad 3016 	strh.w	r3, [sp, #22]
 801934c:	6803      	ldr	r3, [r0, #0]
 801934e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019350:	4798      	blx	r3
 8019352:	b007      	add	sp, #28
 8019354:	bd30      	pop	{r4, r5, pc}
 8019356:	bf00      	nop
 8019358:	08029184 	.word	0x08029184

0801935c <_ZNK8touchgfx4Rect9intersectEss>:
 801935c:	b510      	push	{r4, lr}
 801935e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019362:	428b      	cmp	r3, r1
 8019364:	dc10      	bgt.n	8019388 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019366:	8884      	ldrh	r4, [r0, #4]
 8019368:	4423      	add	r3, r4
 801936a:	b21b      	sxth	r3, r3
 801936c:	4299      	cmp	r1, r3
 801936e:	da0b      	bge.n	8019388 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019370:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019374:	4293      	cmp	r3, r2
 8019376:	dc07      	bgt.n	8019388 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019378:	88c0      	ldrh	r0, [r0, #6]
 801937a:	4418      	add	r0, r3
 801937c:	b200      	sxth	r0, r0
 801937e:	4282      	cmp	r2, r0
 8019380:	bfac      	ite	ge
 8019382:	2000      	movge	r0, #0
 8019384:	2001      	movlt	r0, #1
 8019386:	bd10      	pop	{r4, pc}
 8019388:	2000      	movs	r0, #0
 801938a:	e7fc      	b.n	8019386 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801938c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801938e:	460c      	mov	r4, r1
 8019390:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019392:	b089      	sub	sp, #36	; 0x24
 8019394:	4605      	mov	r5, r0
 8019396:	2900      	cmp	r1, #0
 8019398:	d054      	beq.n	8019444 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801939a:	4668      	mov	r0, sp
 801939c:	f7ff fec1 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193a0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 80193a2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 80193a4:	4668      	mov	r0, sp
 80193a6:	8922      	ldrh	r2, [r4, #8]
 80193a8:	88e1      	ldrh	r1, [r4, #6]
 80193aa:	443a      	add	r2, r7
 80193ac:	4431      	add	r1, r6
 80193ae:	b212      	sxth	r2, r2
 80193b0:	b209      	sxth	r1, r1
 80193b2:	f7ff ffd3 	bl	801935c <_ZNK8touchgfx4Rect9intersectEss>
 80193b6:	b1d0      	cbz	r0, 80193ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80193b8:	89a2      	ldrh	r2, [r4, #12]
 80193ba:	4668      	mov	r0, sp
 80193bc:	8961      	ldrh	r1, [r4, #10]
 80193be:	443a      	add	r2, r7
 80193c0:	4431      	add	r1, r6
 80193c2:	b212      	sxth	r2, r2
 80193c4:	b209      	sxth	r1, r1
 80193c6:	f7ff ffc9 	bl	801935c <_ZNK8touchgfx4Rect9intersectEss>
 80193ca:	4603      	mov	r3, r0
 80193cc:	b978      	cbnz	r0, 80193ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80193ce:	4a1e      	ldr	r2, [pc, #120]	; (8019448 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80193d0:	a904      	add	r1, sp, #16
 80193d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80193d4:	9204      	str	r2, [sp, #16]
 80193d6:	2202      	movs	r2, #2
 80193d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193dc:	f88d 2014 	strb.w	r2, [sp, #20]
 80193e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80193e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80193e8:	6803      	ldr	r3, [r0, #0]
 80193ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193ec:	4798      	blx	r3
 80193ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80193f0:	a802      	add	r0, sp, #8
 80193f2:	f7ff fe96 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80193fa:	88e0      	ldrh	r0, [r4, #6]
 80193fc:	8961      	ldrh	r1, [r4, #10]
 80193fe:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019402:	1a80      	subs	r0, r0, r2
 8019404:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019408:	1a89      	subs	r1, r1, r2
 801940a:	8923      	ldrh	r3, [r4, #8]
 801940c:	4460      	add	r0, ip
 801940e:	89a2      	ldrh	r2, [r4, #12]
 8019410:	4461      	add	r1, ip
 8019412:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019414:	eba3 030e 	sub.w	r3, r3, lr
 8019418:	eba2 020e 	sub.w	r2, r2, lr
 801941c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019420:	7927      	ldrb	r7, [r4, #4]
 8019422:	4433      	add	r3, r6
 8019424:	4432      	add	r2, r6
 8019426:	4c09      	ldr	r4, [pc, #36]	; (801944c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019428:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801942a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801942e:	a904      	add	r1, sp, #16
 8019430:	9404      	str	r4, [sp, #16]
 8019432:	f88d 7014 	strb.w	r7, [sp, #20]
 8019436:	f8ad 3018 	strh.w	r3, [sp, #24]
 801943a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801943e:	6803      	ldr	r3, [r0, #0]
 8019440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019442:	4798      	blx	r3
 8019444:	b009      	add	sp, #36	; 0x24
 8019446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019448:	0802915c 	.word	0x0802915c
 801944c:	08029170 	.word	0x08029170

08019450 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019458:	b0a1      	sub	sp, #132	; 0x84
 801945a:	4604      	mov	r4, r0
 801945c:	460d      	mov	r5, r1
 801945e:	790b      	ldrb	r3, [r1, #4]
 8019460:	f1b9 0f00 	cmp.w	r9, #0
 8019464:	d00f      	beq.n	8019486 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019466:	2b00      	cmp	r3, #0
 8019468:	f040 80a2 	bne.w	80195b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801946c:	b021      	add	sp, #132	; 0x84
 801946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019472:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019476:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801947a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801947e:	1d20      	adds	r0, r4, #4
 8019480:	f7fb f99f 	bl	80147c2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019484:	e094      	b.n	80195b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019486:	2b00      	cmp	r3, #0
 8019488:	d1f0      	bne.n	801946c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801948a:	4b5f      	ldr	r3, [pc, #380]	; (8019608 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019492:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019496:	f1ba 0f03 	cmp.w	sl, #3
 801949a:	ddea      	ble.n	8019472 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801949c:	f1ba 0f0c 	cmp.w	sl, #12
 80194a0:	f04f 0303 	mov.w	r3, #3
 80194a4:	f04f 0600 	mov.w	r6, #0
 80194a8:	4958      	ldr	r1, [pc, #352]	; (801960c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 80194aa:	bfd8      	it	le
 80194ac:	f10a 32ff 	addle.w	r2, sl, #4294967295
 80194b0:	960a      	str	r6, [sp, #40]	; 0x28
 80194b2:	bfd8      	it	le
 80194b4:	fb92 f3f3 	sdivle	r3, r2, r3
 80194b8:	9301      	str	r3, [sp, #4]
 80194ba:	4b55      	ldr	r3, [pc, #340]	; (8019610 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 80194bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194c0:	4b54      	ldr	r3, [pc, #336]	; (8019614 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 80194c2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80194c6:	2248      	movs	r2, #72	; 0x48
 80194c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194cc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80194d0:	ab0e      	add	r3, sp, #56	; 0x38
 80194d2:	4618      	mov	r0, r3
 80194d4:	f00b fb66 	bl	8024ba4 <memcpy>
 80194d8:	f04f 32ff 	mov.w	r2, #4294967295
 80194dc:	f8cd a008 	str.w	sl, [sp, #8]
 80194e0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80194e4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80194e8:	46b3      	mov	fp, r6
 80194ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	9303      	str	r3, [sp, #12]
 80194f2:	2300      	movs	r3, #0
 80194f4:	9a03      	ldr	r2, [sp, #12]
 80194f6:	88ef      	ldrh	r7, [r5, #6]
 80194f8:	a80a      	add	r0, sp, #40	; 0x28
 80194fa:	9309      	str	r3, [sp, #36]	; 0x24
 80194fc:	9b07      	ldr	r3, [sp, #28]
 80194fe:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019502:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019506:	fb13 f302 	smulbb	r3, r3, r2
 801950a:	b29b      	uxth	r3, r3
 801950c:	9304      	str	r3, [sp, #16]
 801950e:	9b07      	ldr	r3, [sp, #28]
 8019510:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019514:	685b      	ldr	r3, [r3, #4]
 8019516:	fb13 f302 	smulbb	r3, r3, r2
 801951a:	b29b      	uxth	r3, r3
 801951c:	9305      	str	r3, [sp, #20]
 801951e:	9b04      	ldr	r3, [sp, #16]
 8019520:	441f      	add	r7, r3
 8019522:	9b05      	ldr	r3, [sp, #20]
 8019524:	4498      	add	r8, r3
 8019526:	b23f      	sxth	r7, r7
 8019528:	fa0f f888 	sxth.w	r8, r8
 801952c:	4639      	mov	r1, r7
 801952e:	4642      	mov	r2, r8
 8019530:	f7ff ff14 	bl	801935c <_ZNK8touchgfx4Rect9intersectEss>
 8019534:	b380      	cbz	r0, 8019598 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019536:	4639      	mov	r1, r7
 8019538:	ab09      	add	r3, sp, #36	; 0x24
 801953a:	4642      	mov	r2, r8
 801953c:	1d20      	adds	r0, r4, #4
 801953e:	f7fb f940 	bl	80147c2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019544:	b341      	cbz	r1, 8019598 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019546:	4549      	cmp	r1, r9
 8019548:	d026      	beq.n	8019598 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801954a:	a80c      	add	r0, sp, #48	; 0x30
 801954c:	f7ff fde9 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019550:	2002      	movs	r0, #2
 8019552:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019556:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801955a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801955e:	fb92 f2f0 	sdiv	r2, r2, r0
 8019562:	440a      	add	r2, r1
 8019564:	1a99      	subs	r1, r3, r2
 8019566:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801956a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801956e:	fb93 f3f0 	sdiv	r3, r3, r0
 8019572:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019576:	4403      	add	r3, r0
 8019578:	1ad3      	subs	r3, r2, r3
 801957a:	9a06      	ldr	r2, [sp, #24]
 801957c:	435b      	muls	r3, r3
 801957e:	fb01 3301 	mla	r3, r1, r1, r3
 8019582:	4293      	cmp	r3, r2
 8019584:	d208      	bcs.n	8019598 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019586:	9a04      	ldr	r2, [sp, #16]
 8019588:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801958c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801958e:	9a05      	ldr	r2, [sp, #20]
 8019590:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019594:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019596:	9306      	str	r3, [sp, #24]
 8019598:	f10b 0b02 	add.w	fp, fp, #2
 801959c:	f1bb 0f08 	cmp.w	fp, #8
 80195a0:	dda7      	ble.n	80194f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 80195a2:	9b02      	ldr	r3, [sp, #8]
 80195a4:	3601      	adds	r6, #1
 80195a6:	4453      	add	r3, sl
 80195a8:	9302      	str	r3, [sp, #8]
 80195aa:	9b01      	ldr	r3, [sp, #4]
 80195ac:	42b3      	cmp	r3, r6
 80195ae:	d199      	bne.n	80194e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 80195b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80195b2:	2900      	cmp	r1, #0
 80195b4:	f43f af5a 	beq.w	801946c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80195b8:	a80c      	add	r0, sp, #48	; 0x30
 80195ba:	2600      	movs	r6, #0
 80195bc:	f7ff fdb1 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195c0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80195c4:	88ea      	ldrh	r2, [r5, #6]
 80195c6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80195ca:	1ad2      	subs	r2, r2, r3
 80195cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80195ce:	7929      	ldrb	r1, [r5, #4]
 80195d0:	441a      	add	r2, r3
 80195d2:	892b      	ldrh	r3, [r5, #8]
 80195d4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80195d8:	a90e      	add	r1, sp, #56	; 0x38
 80195da:	1a1b      	subs	r3, r3, r0
 80195dc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80195de:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80195e2:	4403      	add	r3, r0
 80195e4:	480c      	ldr	r0, [pc, #48]	; (8019618 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80195e6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80195ea:	900e      	str	r0, [sp, #56]	; 0x38
 80195ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80195ee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80195f2:	6803      	ldr	r3, [r0, #0]
 80195f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195f6:	4798      	blx	r3
 80195f8:	792b      	ldrb	r3, [r5, #4]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	f43f af36 	beq.w	801946c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019600:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019604:	e732      	b.n	801946c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019606:	bf00      	nop
 8019608:	2000bafc 	.word	0x2000bafc
 801960c:	08026550 	.word	0x08026550
 8019610:	2000baf0 	.word	0x2000baf0
 8019614:	2000baf2 	.word	0x2000baf2
 8019618:	0802915c 	.word	0x0802915c

0801961c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801961c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801961e:	4604      	mov	r4, r0
 8019620:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019624:	3201      	adds	r2, #1
 8019626:	d112      	bne.n	801964e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019628:	2500      	movs	r5, #0
 801962a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801962e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019632:	6803      	ldr	r3, [r0, #0]
 8019634:	9500      	str	r5, [sp, #0]
 8019636:	466d      	mov	r5, sp
 8019638:	f8ad 1004 	strh.w	r1, [sp, #4]
 801963c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019640:	4629      	mov	r1, r5
 8019642:	6a1b      	ldr	r3, [r3, #32]
 8019644:	4798      	blx	r3
 8019646:	e895 0003 	ldmia.w	r5, {r0, r1}
 801964a:	e884 0003 	stmia.w	r4, {r0, r1}
 801964e:	4620      	mov	r0, r4
 8019650:	b003      	add	sp, #12
 8019652:	bd30      	pop	{r4, r5, pc}

08019654 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019654:	b513      	push	{r0, r1, r4, lr}
 8019656:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801965a:	4604      	mov	r4, r0
 801965c:	3301      	adds	r3, #1
 801965e:	d109      	bne.n	8019674 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019660:	4601      	mov	r1, r0
 8019662:	4668      	mov	r0, sp
 8019664:	f7ff fd5d 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019668:	f8bd 3000 	ldrh.w	r3, [sp]
 801966c:	8423      	strh	r3, [r4, #32]
 801966e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019672:	8463      	strh	r3, [r4, #34]	; 0x22
 8019674:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019678:	b002      	add	sp, #8
 801967a:	bd10      	pop	{r4, pc}

0801967c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801967c:	b513      	push	{r0, r1, r4, lr}
 801967e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019682:	4604      	mov	r4, r0
 8019684:	3301      	adds	r3, #1
 8019686:	d109      	bne.n	801969c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019688:	4601      	mov	r1, r0
 801968a:	4668      	mov	r0, sp
 801968c:	f7ff fd49 	bl	8019122 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019690:	f8bd 3000 	ldrh.w	r3, [sp]
 8019694:	8423      	strh	r3, [r4, #32]
 8019696:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801969a:	8463      	strh	r3, [r4, #34]	; 0x22
 801969c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80196a0:	b002      	add	sp, #8
 80196a2:	bd10      	pop	{r4, pc}

080196a4 <_ZN8touchgfx6ScreenC1Ev>:
 80196a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196a6:	4605      	mov	r5, r0
 80196a8:	4b17      	ldr	r3, [pc, #92]	; (8019708 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80196aa:	2200      	movs	r2, #0
 80196ac:	4917      	ldr	r1, [pc, #92]	; (801970c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80196ae:	f845 3b04 	str.w	r3, [r5], #4
 80196b2:	2301      	movs	r3, #1
 80196b4:	8102      	strh	r2, [r0, #8]
 80196b6:	4604      	mov	r4, r0
 80196b8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80196bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80196c0:	4b13      	ldr	r3, [pc, #76]	; (8019710 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80196c2:	8142      	strh	r2, [r0, #10]
 80196c4:	f9b3 7000 	ldrsh.w	r7, [r3]
 80196c8:	4b12      	ldr	r3, [pc, #72]	; (8019714 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80196ca:	8182      	strh	r2, [r0, #12]
 80196cc:	81c2      	strh	r2, [r0, #14]
 80196ce:	8202      	strh	r2, [r0, #16]
 80196d0:	8242      	strh	r2, [r0, #18]
 80196d2:	8282      	strh	r2, [r0, #20]
 80196d4:	82c2      	strh	r2, [r0, #22]
 80196d6:	6202      	str	r2, [r0, #32]
 80196d8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80196dc:	6342      	str	r2, [r0, #52]	; 0x34
 80196de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80196e2:	6041      	str	r1, [r0, #4]
 80196e4:	4611      	mov	r1, r2
 80196e6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80196ea:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80196ee:	4628      	mov	r0, r5
 80196f0:	f7eb f943 	bl	800497a <_ZN8touchgfx8Drawable5setXYEss>
 80196f4:	4639      	mov	r1, r7
 80196f6:	4628      	mov	r0, r5
 80196f8:	f7eb f95d 	bl	80049b6 <_ZN8touchgfx8Drawable8setWidthEs>
 80196fc:	4628      	mov	r0, r5
 80196fe:	4631      	mov	r1, r6
 8019700:	f7eb f968 	bl	80049d4 <_ZN8touchgfx8Drawable9setHeightEs>
 8019704:	4620      	mov	r0, r4
 8019706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019708:	08029198 	.word	0x08029198
 801970c:	08027d10 	.word	0x08027d10
 8019710:	2000baf0 	.word	0x2000baf0
 8019714:	2000baf2 	.word	0x2000baf2

08019718 <_ZN8touchgfx6Screen4drawEv>:
 8019718:	4b09      	ldr	r3, [pc, #36]	; (8019740 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801971a:	b507      	push	{r0, r1, r2, lr}
 801971c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019720:	2100      	movs	r1, #0
 8019722:	4b08      	ldr	r3, [pc, #32]	; (8019744 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019724:	9100      	str	r1, [sp, #0]
 8019726:	4669      	mov	r1, sp
 8019728:	f9b3 3000 	ldrsh.w	r3, [r3]
 801972c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019730:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019734:	6803      	ldr	r3, [r0, #0]
 8019736:	689b      	ldr	r3, [r3, #8]
 8019738:	4798      	blx	r3
 801973a:	b003      	add	sp, #12
 801973c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019740:	2000baf0 	.word	0x2000baf0
 8019744:	2000baf2 	.word	0x2000baf2

08019748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801974c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019750:	b089      	sub	sp, #36	; 0x24
 8019752:	4680      	mov	r8, r0
 8019754:	460c      	mov	r4, r1
 8019756:	4615      	mov	r5, r2
 8019758:	b16b      	cbz	r3, 8019776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801975a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801975e:	b153      	cbz	r3, 8019776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019760:	4628      	mov	r0, r5
 8019762:	f7ff ff5b 	bl	801961c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019766:	4621      	mov	r1, r4
 8019768:	f7fe ff0c 	bl	8018584 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801976c:	69eb      	ldr	r3, [r5, #28]
 801976e:	b928      	cbnz	r0, 801977c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019770:	461d      	mov	r5, r3
 8019772:	2b00      	cmp	r3, #0
 8019774:	d1f4      	bne.n	8019760 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019776:	b009      	add	sp, #36	; 0x24
 8019778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801977c:	ae04      	add	r6, sp, #16
 801977e:	2b00      	cmp	r3, #0
 8019780:	d051      	beq.n	8019826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019782:	682b      	ldr	r3, [r5, #0]
 8019784:	4629      	mov	r1, r5
 8019786:	a802      	add	r0, sp, #8
 8019788:	68db      	ldr	r3, [r3, #12]
 801978a:	4798      	blx	r3
 801978c:	4628      	mov	r0, r5
 801978e:	f7ff ff61 	bl	8019654 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019792:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019796:	4407      	add	r7, r0
 8019798:	4628      	mov	r0, r5
 801979a:	f7ff ff6f 	bl	801967c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801979e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80197a2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80197a6:	b23f      	sxth	r7, r7
 80197a8:	4418      	add	r0, r3
 80197aa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80197ae:	4621      	mov	r1, r4
 80197b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80197b4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80197b8:	4630      	mov	r0, r6
 80197ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80197be:	f8ad 7010 	strh.w	r7, [sp, #16]
 80197c2:	f7fb f8af 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 80197c6:	4628      	mov	r0, r5
 80197c8:	f7ff ff28 	bl	801961c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80197cc:	ab06      	add	r3, sp, #24
 80197ce:	4602      	mov	r2, r0
 80197d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80197d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80197d8:	4611      	mov	r1, r2
 80197da:	4618      	mov	r0, r3
 80197dc:	f7fb f8a2 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 80197e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80197e4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80197e8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80197ec:	4299      	cmp	r1, r3
 80197ee:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80197f2:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80197f6:	d10b      	bne.n	8019810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80197f8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80197fc:	4552      	cmp	r2, sl
 80197fe:	d107      	bne.n	8019810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019800:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019804:	455a      	cmp	r2, fp
 8019806:	d103      	bne.n	8019810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019808:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801980c:	454a      	cmp	r2, r9
 801980e:	d00a      	beq.n	8019826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019810:	f1bb 0f00 	cmp.w	fp, #0
 8019814:	d002      	beq.n	801981c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8019816:	f1b9 0f00 	cmp.w	r9, #0
 801981a:	d12e      	bne.n	801987a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801981c:	69ea      	ldr	r2, [r5, #28]
 801981e:	4621      	mov	r1, r4
 8019820:	4640      	mov	r0, r8
 8019822:	f7ff ff91 	bl	8019748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019826:	4628      	mov	r0, r5
 8019828:	f7ff fef8 	bl	801961c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801982c:	6861      	ldr	r1, [r4, #4]
 801982e:	4602      	mov	r2, r0
 8019830:	4633      	mov	r3, r6
 8019832:	6820      	ldr	r0, [r4, #0]
 8019834:	c303      	stmia	r3!, {r0, r1}
 8019836:	4611      	mov	r1, r2
 8019838:	4630      	mov	r0, r6
 801983a:	f7fb f873 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 801983e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d097      	beq.n	8019776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019846:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d093      	beq.n	8019776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801984e:	4628      	mov	r0, r5
 8019850:	f7ff ff00 	bl	8019654 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019854:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019858:	1a18      	subs	r0, r3, r0
 801985a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801985e:	4628      	mov	r0, r5
 8019860:	f7ff ff0c 	bl	801967c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019864:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019868:	4631      	mov	r1, r6
 801986a:	1a18      	subs	r0, r3, r0
 801986c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019870:	4628      	mov	r0, r5
 8019872:	682b      	ldr	r3, [r5, #0]
 8019874:	689b      	ldr	r3, [r3, #8]
 8019876:	4798      	blx	r3
 8019878:	e77d      	b.n	8019776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801987a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801987e:	fa1f f08a 	uxth.w	r0, sl
 8019882:	4552      	cmp	r2, sl
 8019884:	9000      	str	r0, [sp, #0]
 8019886:	da12      	bge.n	80198ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019888:	9301      	str	r3, [sp, #4]
 801988a:	9b00      	ldr	r3, [sp, #0]
 801988c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019890:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019894:	1a9a      	subs	r2, r3, r2
 8019896:	f8ad 1010 	strh.w	r1, [sp, #16]
 801989a:	4631      	mov	r1, r6
 801989c:	f8ad 0014 	strh.w	r0, [sp, #20]
 80198a0:	4640      	mov	r0, r8
 80198a2:	f8ad 2016 	strh.w	r2, [sp, #22]
 80198a6:	69ea      	ldr	r2, [r5, #28]
 80198a8:	f7ff ff4e 	bl	8019748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80198ac:	9b01      	ldr	r3, [sp, #4]
 80198ae:	f9b4 2000 	ldrsh.w	r2, [r4]
 80198b2:	b29f      	uxth	r7, r3
 80198b4:	429a      	cmp	r2, r3
 80198b6:	da0d      	bge.n	80198d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 80198b8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80198bc:	1aba      	subs	r2, r7, r2
 80198be:	f8ad a012 	strh.w	sl, [sp, #18]
 80198c2:	4631      	mov	r1, r6
 80198c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80198c8:	4640      	mov	r0, r8
 80198ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 80198ce:	69ea      	ldr	r2, [r5, #28]
 80198d0:	f7ff ff3a 	bl	8019748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80198d4:	8822      	ldrh	r2, [r4, #0]
 80198d6:	445f      	add	r7, fp
 80198d8:	88a3      	ldrh	r3, [r4, #4]
 80198da:	b2bf      	uxth	r7, r7
 80198dc:	4413      	add	r3, r2
 80198de:	b23a      	sxth	r2, r7
 80198e0:	b29b      	uxth	r3, r3
 80198e2:	b219      	sxth	r1, r3
 80198e4:	4291      	cmp	r1, r2
 80198e6:	dd0d      	ble.n	8019904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 80198e8:	1bdb      	subs	r3, r3, r7
 80198ea:	f8ad 2010 	strh.w	r2, [sp, #16]
 80198ee:	f8ad a012 	strh.w	sl, [sp, #18]
 80198f2:	4631      	mov	r1, r6
 80198f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80198f8:	4640      	mov	r0, r8
 80198fa:	f8ad 9016 	strh.w	r9, [sp, #22]
 80198fe:	69ea      	ldr	r2, [r5, #28]
 8019900:	f7ff ff22 	bl	8019748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019904:	88e2      	ldrh	r2, [r4, #6]
 8019906:	8863      	ldrh	r3, [r4, #2]
 8019908:	4413      	add	r3, r2
 801990a:	9a00      	ldr	r2, [sp, #0]
 801990c:	444a      	add	r2, r9
 801990e:	b29b      	uxth	r3, r3
 8019910:	fa1f f982 	uxth.w	r9, r2
 8019914:	b219      	sxth	r1, r3
 8019916:	fa0f f289 	sxth.w	r2, r9
 801991a:	428a      	cmp	r2, r1
 801991c:	da83      	bge.n	8019826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801991e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019922:	eba3 0309 	sub.w	r3, r3, r9
 8019926:	f9b4 0000 	ldrsh.w	r0, [r4]
 801992a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801992e:	4631      	mov	r1, r6
 8019930:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019934:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019938:	f8ad 3016 	strh.w	r3, [sp, #22]
 801993c:	69ea      	ldr	r2, [r5, #28]
 801993e:	e76f      	b.n	8019820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019940 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019942:	2300      	movs	r3, #0
 8019944:	aa02      	add	r2, sp, #8
 8019946:	4604      	mov	r4, r0
 8019948:	3004      	adds	r0, #4
 801994a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801994e:	460d      	mov	r5, r1
 8019950:	f7fb f8bf 	bl	8014ad2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019954:	9a01      	ldr	r2, [sp, #4]
 8019956:	b11a      	cbz	r2, 8019960 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019958:	4629      	mov	r1, r5
 801995a:	4620      	mov	r0, r4
 801995c:	f7ff fef4 	bl	8019748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019960:	b003      	add	sp, #12
 8019962:	bd30      	pop	{r4, r5, pc}

08019964 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019966:	4602      	mov	r2, r0
 8019968:	4604      	mov	r4, r0
 801996a:	460d      	mov	r5, r1
 801996c:	466b      	mov	r3, sp
 801996e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019972:	6851      	ldr	r1, [r2, #4]
 8019974:	c303      	stmia	r3!, {r0, r1}
 8019976:	4629      	mov	r1, r5
 8019978:	4668      	mov	r0, sp
 801997a:	f7fa ffd3 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 801997e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019982:	4669      	mov	r1, sp
 8019984:	b123      	cbz	r3, 8019990 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019986:	4620      	mov	r0, r4
 8019988:	f7ff ffda 	bl	8019940 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801998c:	b003      	add	sp, #12
 801998e:	bd30      	pop	{r4, r5, pc}
 8019990:	1d20      	adds	r0, r4, #4
 8019992:	f7fb f865 	bl	8014a60 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019996:	e7f9      	b.n	801998c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019998 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019998:	460b      	mov	r3, r1
 801999a:	680a      	ldr	r2, [r1, #0]
 801999c:	1d01      	adds	r1, r0, #4
 801999e:	6952      	ldr	r2, [r2, #20]
 80199a0:	4618      	mov	r0, r3
 80199a2:	4710      	bx	r2

080199a4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 80199a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80199a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80199ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b0:	bfcc      	ite	gt
 80199b2:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 80199b6:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80199ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199be:	ee10 3a10 	vmov	r3, s0
 80199c2:	b218      	sxth	r0, r3
 80199c4:	4770      	bx	lr
	...

080199c8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 80199c8:	b510      	push	{r4, lr}
 80199ca:	4298      	cmp	r0, r3
 80199cc:	eb01 0402 	add.w	r4, r1, r2
 80199d0:	b224      	sxth	r4, r4
 80199d2:	d225      	bcs.n	8019a20 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 80199d4:	b323      	cbz	r3, 8019a20 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 80199d6:	ee07 0a90 	vmov	s15, r0
 80199da:	ee06 1a10 	vmov	s12, r1
 80199de:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8019a24 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 80199e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80199e6:	ee07 3a90 	vmov	s15, r3
 80199ea:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 80199ee:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8019a28 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 80199f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80199f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80199fa:	ee06 2a90 	vmov	s13, r2
 80199fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a02:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a0a:	eea7 6a85 	vfma.f32	s12, s15, s10
 8019a0e:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8019a12:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019a16:	eea6 0a87 	vfma.f32	s0, s13, s14
 8019a1a:	f7ff ffc3 	bl	80199a4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8019a1e:	4604      	mov	r4, r0
 8019a20:	4620      	mov	r0, r4
 8019a22:	bd10      	pop	{r4, pc}
 8019a24:	402ce6b0 	.word	0x402ce6b0
 8019a28:	3fd9cd60 	.word	0x3fd9cd60

08019a2c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8019a2c:	b510      	push	{r4, lr}
 8019a2e:	4298      	cmp	r0, r3
 8019a30:	eb01 0402 	add.w	r4, r1, r2
 8019a34:	b224      	sxth	r4, r4
 8019a36:	d21f      	bcs.n	8019a78 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8019a38:	b1f3      	cbz	r3, 8019a78 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8019a3a:	ee07 0a90 	vmov	s15, r0
 8019a3e:	ee06 1a10 	vmov	s12, r1
 8019a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019a46:	ee07 3a90 	vmov	s15, r3
 8019a4a:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 8019a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019a56:	ee06 2a90 	vmov	s13, r2
 8019a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a5e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a66:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019a6a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019a6e:	eea6 0a87 	vfma.f32	s0, s13, s14
 8019a72:	f7ff ff97 	bl	80199a4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8019a76:	4604      	mov	r4, r0
 8019a78:	4620      	mov	r0, r4
 8019a7a:	bd10      	pop	{r4, pc}

08019a7c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8019a7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8019a80:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8019a84:	4b03      	ldr	r3, [pc, #12]	; (8019a94 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8019a86:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019a8a:	bf08      	it	eq
 8019a8c:	2300      	moveq	r3, #0
 8019a8e:	4308      	orrs	r0, r1
 8019a90:	4318      	orrs	r0, r3
 8019a92:	4770      	bx	lr
 8019a94:	fffffe00 	.word	0xfffffe00

08019a98 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8019a98:	7b43      	ldrb	r3, [r0, #13]
 8019a9a:	7201      	strb	r1, [r0, #8]
 8019a9c:	b289      	uxth	r1, r1
 8019a9e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8019aa2:	05ca      	lsls	r2, r1, #23
 8019aa4:	bf48      	it	mi
 8019aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8019aaa:	7343      	strb	r3, [r0, #13]
 8019aac:	058b      	lsls	r3, r1, #22
 8019aae:	bf42      	ittt	mi
 8019ab0:	7b43      	ldrbmi	r3, [r0, #13]
 8019ab2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8019ab6:	7343      	strbmi	r3, [r0, #13]
 8019ab8:	4770      	bx	lr

08019aba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019aba:	b530      	push	{r4, r5, lr}
 8019abc:	2500      	movs	r5, #0
 8019abe:	2401      	movs	r4, #1
 8019ac0:	6843      	ldr	r3, [r0, #4]
 8019ac2:	b913      	cbnz	r3, 8019aca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019ac4:	6803      	ldr	r3, [r0, #0]
 8019ac6:	b1f3      	cbz	r3, 8019b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019ac8:	6043      	str	r3, [r0, #4]
 8019aca:	7c03      	ldrb	r3, [r0, #16]
 8019acc:	b143      	cbz	r3, 8019ae0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019ace:	68c3      	ldr	r3, [r0, #12]
 8019ad0:	b12b      	cbz	r3, 8019ade <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019ad2:	881a      	ldrh	r2, [r3, #0]
 8019ad4:	b11a      	cbz	r2, 8019ade <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019ad6:	1c9a      	adds	r2, r3, #2
 8019ad8:	60c2      	str	r2, [r0, #12]
 8019ada:	8818      	ldrh	r0, [r3, #0]
 8019adc:	bd30      	pop	{r4, r5, pc}
 8019ade:	7405      	strb	r5, [r0, #16]
 8019ae0:	6843      	ldr	r3, [r0, #4]
 8019ae2:	8819      	ldrh	r1, [r3, #0]
 8019ae4:	b179      	cbz	r1, 8019b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019ae6:	1c9a      	adds	r2, r3, #2
 8019ae8:	2902      	cmp	r1, #2
 8019aea:	6042      	str	r2, [r0, #4]
 8019aec:	d1f5      	bne.n	8019ada <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019aee:	6883      	ldr	r3, [r0, #8]
 8019af0:	1d1a      	adds	r2, r3, #4
 8019af2:	6082      	str	r2, [r0, #8]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	60c3      	str	r3, [r0, #12]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d0e1      	beq.n	8019ac0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019afc:	881b      	ldrh	r3, [r3, #0]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d0de      	beq.n	8019ac0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019b02:	7404      	strb	r4, [r0, #16]
 8019b04:	e7dc      	b.n	8019ac0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019b06:	2000      	movs	r0, #0
 8019b08:	e7e8      	b.n	8019adc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019b0a <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 8019b10:	4770      	bx	lr

08019b12 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>:
 8019b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b14:	f04f 0c0a 	mov.w	ip, #10
 8019b18:	2500      	movs	r5, #0
 8019b1a:	2702      	movs	r7, #2
 8019b1c:	42ab      	cmp	r3, r5
 8019b1e:	dd0f      	ble.n	8019b40 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2e>
 8019b20:	195c      	adds	r4, r3, r5
 8019b22:	fb94 f4f7 	sdiv	r4, r4, r7
 8019b26:	fb0c f604 	mul.w	r6, ip, r4
 8019b2a:	1990      	adds	r0, r2, r6
 8019b2c:	5b96      	ldrh	r6, [r2, r6]
 8019b2e:	428e      	cmp	r6, r1
 8019b30:	d203      	bcs.n	8019b3a <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x28>
 8019b32:	1c65      	adds	r5, r4, #1
 8019b34:	461c      	mov	r4, r3
 8019b36:	4623      	mov	r3, r4
 8019b38:	e7f0      	b.n	8019b1c <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0xa>
 8019b3a:	d1fc      	bne.n	8019b36 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x24>
 8019b3c:	3002      	adds	r0, #2
 8019b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b40:	2000      	movs	r0, #0
 8019b42:	e7fc      	b.n	8019b3e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2c>

08019b44 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>:
 8019b44:	f46f 6cc4 	mvn.w	ip, #1568	; 0x620
 8019b48:	460b      	mov	r3, r1
 8019b4a:	eb01 020c 	add.w	r2, r1, ip
 8019b4e:	b410      	push	{r4}
 8019b50:	b294      	uxth	r4, r2
 8019b52:	2c19      	cmp	r4, #25
 8019b54:	d805      	bhi.n	8019b62 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x1e>
 8019b56:	480d      	ldr	r0, [pc, #52]	; (8019b8c <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x48>)
 8019b58:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8019b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b60:	4770      	bx	lr
 8019b62:	f46f 64c8 	mvn.w	r4, #1600	; 0x640
 8019b66:	190a      	adds	r2, r1, r4
 8019b68:	b294      	uxth	r4, r2
 8019b6a:	2c09      	cmp	r4, #9
 8019b6c:	d801      	bhi.n	8019b72 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x2e>
 8019b6e:	4808      	ldr	r0, [pc, #32]	; (8019b90 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x4c>)
 8019b70:	e7f2      	b.n	8019b58 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x14>
 8019b72:	f46f 62ce 	mvn.w	r2, #1648	; 0x670
 8019b76:	4413      	add	r3, r2
 8019b78:	2b62      	cmp	r3, #98	; 0x62
 8019b7a:	d805      	bhi.n	8019b88 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x44>
 8019b7c:	2328      	movs	r3, #40	; 0x28
 8019b7e:	4a05      	ldr	r2, [pc, #20]	; (8019b94 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x50>)
 8019b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b84:	f7ff bfc5 	b.w	8019b12 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 8019b88:	2000      	movs	r0, #0
 8019b8a:	e7e7      	b.n	8019b5c <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x18>
 8019b8c:	08029e94 	.word	0x08029e94
 8019b90:	08029f64 	.word	0x08029f64
 8019b94:	08029232 	.word	0x08029232

08019b98 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b9a:	4605      	mov	r5, r0
 8019b9c:	4608      	mov	r0, r1
 8019b9e:	b1f1      	cbz	r1, 8019bde <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019ba0:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8019ba4:	460b      	mov	r3, r1
 8019ba6:	f101 0708 	add.w	r7, r1, #8
 8019baa:	4622      	mov	r2, r4
 8019bac:	6818      	ldr	r0, [r3, #0]
 8019bae:	3308      	adds	r3, #8
 8019bb0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019bb4:	4626      	mov	r6, r4
 8019bb6:	42bb      	cmp	r3, r7
 8019bb8:	c603      	stmia	r6!, {r0, r1}
 8019bba:	4634      	mov	r4, r6
 8019bbc:	d1f6      	bne.n	8019bac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019bbe:	6818      	ldr	r0, [r3, #0]
 8019bc0:	6030      	str	r0, [r6, #0]
 8019bc2:	4610      	mov	r0, r2
 8019bc4:	889b      	ldrh	r3, [r3, #4]
 8019bc6:	80b3      	strh	r3, [r6, #4]
 8019bc8:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8019bcc:	015b      	lsls	r3, r3, #5
 8019bce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019bd2:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019bd6:	430b      	orrs	r3, r1
 8019bd8:	425b      	negs	r3, r3
 8019bda:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019be0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019be0:	b538      	push	{r3, r4, r5, lr}
 8019be2:	460c      	mov	r4, r1
 8019be4:	6811      	ldr	r1, [r2, #0]
 8019be6:	4610      	mov	r0, r2
 8019be8:	68cd      	ldr	r5, [r1, #12]
 8019bea:	4619      	mov	r1, r3
 8019bec:	47a8      	blx	r5
 8019bee:	2800      	cmp	r0, #0
 8019bf0:	bf08      	it	eq
 8019bf2:	4620      	moveq	r0, r4
 8019bf4:	bd38      	pop	{r3, r4, r5, pc}

08019bf6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019bf6:	b570      	push	{r4, r5, r6, lr}
 8019bf8:	8810      	ldrh	r0, [r2, #0]
 8019bfa:	4298      	cmp	r0, r3
 8019bfc:	d817      	bhi.n	8019c2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019bfe:	1e48      	subs	r0, r1, #1
 8019c00:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019c04:	4298      	cmp	r0, r3
 8019c06:	d312      	bcc.n	8019c2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c08:	2400      	movs	r4, #0
 8019c0a:	428c      	cmp	r4, r1
 8019c0c:	d20f      	bcs.n	8019c2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c0e:	1860      	adds	r0, r4, r1
 8019c10:	1040      	asrs	r0, r0, #1
 8019c12:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019c16:	0085      	lsls	r5, r0, #2
 8019c18:	42b3      	cmp	r3, r6
 8019c1a:	d902      	bls.n	8019c22 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019c1c:	3001      	adds	r0, #1
 8019c1e:	b284      	uxth	r4, r0
 8019c20:	e7f3      	b.n	8019c0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019c22:	d102      	bne.n	8019c2a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8019c24:	442a      	add	r2, r5
 8019c26:	8850      	ldrh	r0, [r2, #2]
 8019c28:	bd70      	pop	{r4, r5, r6, pc}
 8019c2a:	b281      	uxth	r1, r0
 8019c2c:	e7ed      	b.n	8019c0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019c2e:	2000      	movs	r0, #0
 8019c30:	e7fa      	b.n	8019c28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08019c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8019c34:	b510      	push	{r4, lr}
 8019c36:	8ac3      	ldrh	r3, [r0, #22]
 8019c38:	428b      	cmp	r3, r1
 8019c3a:	d805      	bhi.n	8019c48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8019c3c:	4b07      	ldr	r3, [pc, #28]	; (8019c5c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8019c3e:	21fd      	movs	r1, #253	; 0xfd
 8019c40:	4a07      	ldr	r2, [pc, #28]	; (8019c60 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8019c42:	4808      	ldr	r0, [pc, #32]	; (8019c64 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8019c44:	f00a ff36 	bl	8024ab4 <__assert_func>
 8019c48:	8a83      	ldrh	r3, [r0, #20]
 8019c4a:	240a      	movs	r4, #10
 8019c4c:	4419      	add	r1, r3
 8019c4e:	fbb1 f3f4 	udiv	r3, r1, r4
 8019c52:	fb04 1113 	mls	r1, r4, r3, r1
 8019c56:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8019c5a:	bd10      	pop	{r4, pc}
 8019c5c:	080291e5 	.word	0x080291e5
 8019c60:	0802a396 	.word	0x0802a396
 8019c64:	080291f3 	.word	0x080291f3

08019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8019c68:	b508      	push	{r3, lr}
 8019c6a:	8ac3      	ldrh	r3, [r0, #22]
 8019c6c:	428b      	cmp	r3, r1
 8019c6e:	d805      	bhi.n	8019c7c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8019c70:	4b07      	ldr	r3, [pc, #28]	; (8019c90 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8019c72:	21d3      	movs	r1, #211	; 0xd3
 8019c74:	4a07      	ldr	r2, [pc, #28]	; (8019c94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8019c76:	4808      	ldr	r0, [pc, #32]	; (8019c98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8019c78:	f00a ff1c 	bl	8024ab4 <__assert_func>
 8019c7c:	8a83      	ldrh	r3, [r0, #20]
 8019c7e:	220a      	movs	r2, #10
 8019c80:	4419      	add	r1, r3
 8019c82:	fbb1 f3f2 	udiv	r3, r1, r2
 8019c86:	fb02 1113 	mls	r1, r2, r3, r1
 8019c8a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8019c8e:	bd08      	pop	{r3, pc}
 8019c90:	080291e5 	.word	0x080291e5
 8019c94:	0802a0e6 	.word	0x0802a0e6
 8019c98:	080291f3 	.word	0x080291f3

08019c9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	4688      	mov	r8, r1
 8019ca4:	4615      	mov	r5, r2
 8019ca6:	b94a      	cbnz	r2, 8019cbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8019ca8:	4691      	mov	r9, r2
 8019caa:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8019cae:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8019cb2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019cb6:	4648      	mov	r0, r9
 8019cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cbc:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8019cc0:	8892      	ldrh	r2, [r2, #4]
 8019cc2:	462b      	mov	r3, r5
 8019cc4:	f105 0c08 	add.w	ip, r5, #8
 8019cc8:	46b3      	mov	fp, r6
 8019cca:	6818      	ldr	r0, [r3, #0]
 8019ccc:	3308      	adds	r3, #8
 8019cce:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019cd2:	4637      	mov	r7, r6
 8019cd4:	4563      	cmp	r3, ip
 8019cd6:	c703      	stmia	r7!, {r0, r1}
 8019cd8:	463e      	mov	r6, r7
 8019cda:	d1f6      	bne.n	8019cca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8019cdc:	6818      	ldr	r0, [r3, #0]
 8019cde:	46d9      	mov	r9, fp
 8019ce0:	6038      	str	r0, [r7, #0]
 8019ce2:	889b      	ldrh	r3, [r3, #4]
 8019ce4:	80bb      	strh	r3, [r7, #4]
 8019ce6:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8019cea:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8019cee:	18d3      	adds	r3, r2, r3
 8019cf0:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8019cf4:	b298      	uxth	r0, r3
 8019cf6:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8019cfa:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8019cfe:	281d      	cmp	r0, #29
 8019d00:	ea4a 0a01 	orr.w	sl, sl, r1
 8019d04:	fa1f f68a 	uxth.w	r6, sl
 8019d08:	d842      	bhi.n	8019d90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	4950      	ldr	r1, [pc, #320]	; (8019e50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 8019d0e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8019d12:	4083      	lsls	r3, r0
 8019d14:	420b      	tst	r3, r1
 8019d16:	d114      	bne.n	8019d42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8019d18:	f413 7f60 	tst.w	r3, #896	; 0x380
 8019d1c:	d03c      	beq.n	8019d98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 8019d1e:	fa1f fa8a 	uxth.w	sl, sl
 8019d22:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8019d26:	4658      	mov	r0, fp
 8019d28:	eba1 010a 	sub.w	r1, r1, sl
 8019d2c:	b209      	sxth	r1, r1
 8019d2e:	f7ff feb3 	bl	8019a98 <_ZN8touchgfx9GlyphNode6setTopEs>
 8019d32:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8019d36:	1b86      	subs	r6, r0, r6
 8019d38:	eba6 0a0a 	sub.w	sl, r6, sl
 8019d3c:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8019d40:	e7b9      	b.n	8019cb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019d42:	2100      	movs	r1, #0
 8019d44:	f104 001a 	add.w	r0, r4, #26
 8019d48:	f7ff ff8e 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019d4c:	f640 6333 	movw	r3, #3635	; 0xe33
 8019d50:	4601      	mov	r1, r0
 8019d52:	4298      	cmp	r0, r3
 8019d54:	d10a      	bne.n	8019d6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8019d56:	f8d8 3000 	ldr.w	r3, [r8]
 8019d5a:	4640      	mov	r0, r8
 8019d5c:	68db      	ldr	r3, [r3, #12]
 8019d5e:	4798      	blx	r3
 8019d60:	7b41      	ldrb	r1, [r0, #13]
 8019d62:	7a00      	ldrb	r0, [r0, #8]
 8019d64:	f7ff fe8a 	bl	8019a7c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019d68:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019d6c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8019d70:	4658      	mov	r0, fp
 8019d72:	4431      	add	r1, r6
 8019d74:	4451      	add	r1, sl
 8019d76:	b209      	sxth	r1, r1
 8019d78:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8019d7c:	f7ff fe8c 	bl	8019a98 <_ZN8touchgfx9GlyphNode6setTopEs>
 8019d80:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019d84:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8019d88:	1a9b      	subs	r3, r3, r2
 8019d8a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8019d8e:	e792      	b.n	8019cb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019d90:	f640 631b 	movw	r3, #3611	; 0xe1b
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d005      	beq.n	8019da4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8019d98:	f022 0302 	bic.w	r3, r2, #2
 8019d9c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8019da0:	428b      	cmp	r3, r1
 8019da2:	d119      	bne.n	8019dd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8019da4:	1e53      	subs	r3, r2, #1
 8019da6:	4629      	mov	r1, r5
 8019da8:	4642      	mov	r2, r8
 8019daa:	4620      	mov	r0, r4
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	f7ff ff17 	bl	8019be0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019db2:	7b41      	ldrb	r1, [r0, #13]
 8019db4:	7a00      	ldrb	r0, [r0, #8]
 8019db6:	f7ff fe61 	bl	8019a7c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019dba:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8019dbe:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019dc2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dc6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019dca:	4313      	orrs	r3, r2
 8019dcc:	115a      	asrs	r2, r3, #5
 8019dce:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019dd2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019dd6:	e02e      	b.n	8019e36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8019dd8:	4639      	mov	r1, r7
 8019dda:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019dde:	f7ff fe4d 	bl	8019a7c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019de2:	f640 6109 	movw	r1, #3593	; 0xe09
 8019de6:	f022 0310 	bic.w	r3, r2, #16
 8019dea:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019dee:	428b      	cmp	r3, r1
 8019df0:	d003      	beq.n	8019dfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8019df2:	f640 6313 	movw	r3, #3603	; 0xe13
 8019df6:	429a      	cmp	r2, r3
 8019df8:	d127      	bne.n	8019e4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 8019dfa:	b27f      	sxtb	r7, r7
 8019dfc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019e00:	4629      	mov	r1, r5
 8019e02:	4620      	mov	r0, r4
 8019e04:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8019e08:	431f      	orrs	r7, r3
 8019e0a:	f640 6313 	movw	r3, #3603	; 0xe13
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	bf14      	ite	ne
 8019e12:	f102 33ff 	addne.w	r3, r2, #4294967295
 8019e16:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019e1a:	4642      	mov	r2, r8
 8019e1c:	bf18      	it	ne
 8019e1e:	b29b      	uxthne	r3, r3
 8019e20:	f7ff fede 	bl	8019be0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019e24:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019e28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e2c:	7a83      	ldrb	r3, [r0, #10]
 8019e2e:	4313      	orrs	r3, r2
 8019e30:	1aff      	subs	r7, r7, r3
 8019e32:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8019e36:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8019e3a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019e3e:	f7ff fe1d 	bl	8019a7c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019e42:	1b80      	subs	r0, r0, r6
 8019e44:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8019e48:	e735      	b.n	8019cb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	e7c1      	b.n	8019dd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 8019e4e:	bf00      	nop
 8019e50:	3fc00079 	.word	0x3fc00079

08019e54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019e54:	3a01      	subs	r2, #1
 8019e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e5a:	b292      	uxth	r2, r2
 8019e5c:	460c      	mov	r4, r1
 8019e5e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019e62:	42b2      	cmp	r2, r6
 8019e64:	d018      	beq.n	8019e98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8019e66:	8b01      	ldrh	r1, [r0, #24]
 8019e68:	f834 5b02 	ldrh.w	r5, [r4], #2
 8019e6c:	4291      	cmp	r1, r2
 8019e6e:	d805      	bhi.n	8019e7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8019e70:	4b13      	ldr	r3, [pc, #76]	; (8019ec0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 8019e72:	21d3      	movs	r1, #211	; 0xd3
 8019e74:	4a13      	ldr	r2, [pc, #76]	; (8019ec4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8019e76:	4814      	ldr	r0, [pc, #80]	; (8019ec8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8019e78:	f00a fe1c 	bl	8024ab4 <__assert_func>
 8019e7c:	8ac1      	ldrh	r1, [r0, #22]
 8019e7e:	4411      	add	r1, r2
 8019e80:	3a01      	subs	r2, #1
 8019e82:	f001 0101 	and.w	r1, r1, #1
 8019e86:	b292      	uxth	r2, r2
 8019e88:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019e8c:	8a49      	ldrh	r1, [r1, #18]
 8019e8e:	428d      	cmp	r5, r1
 8019e90:	d0e7      	beq.n	8019e62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8019e92:	2000      	movs	r0, #0
 8019e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e98:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8019e9c:	2600      	movs	r6, #0
 8019e9e:	f100 051a 	add.w	r5, r0, #26
 8019ea2:	441f      	add	r7, r3
 8019ea4:	b2b1      	uxth	r1, r6
 8019ea6:	42b9      	cmp	r1, r7
 8019ea8:	da08      	bge.n	8019ebc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 8019eaa:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8019eae:	4628      	mov	r0, r5
 8019eb0:	f7ff feda 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019eb4:	3601      	adds	r6, #1
 8019eb6:	4540      	cmp	r0, r8
 8019eb8:	d0f4      	beq.n	8019ea4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8019eba:	e7ea      	b.n	8019e92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8019ebc:	2001      	movs	r0, #1
 8019ebe:	e7e9      	b.n	8019e94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8019ec0:	080291e5 	.word	0x080291e5
 8019ec4:	0802a4f6 	.word	0x0802a4f6
 8019ec8:	080291f3 	.word	0x080291f3

08019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8019ecc:	b538      	push	{r3, r4, r5, lr}
 8019ece:	8ac3      	ldrh	r3, [r0, #22]
 8019ed0:	428b      	cmp	r3, r1
 8019ed2:	d205      	bcs.n	8019ee0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8019ed4:	4b08      	ldr	r3, [pc, #32]	; (8019ef8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8019ed6:	21d8      	movs	r1, #216	; 0xd8
 8019ed8:	4a08      	ldr	r2, [pc, #32]	; (8019efc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8019eda:	4809      	ldr	r0, [pc, #36]	; (8019f00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8019edc:	f00a fdea 	bl	8024ab4 <__assert_func>
 8019ee0:	8a82      	ldrh	r2, [r0, #20]
 8019ee2:	250a      	movs	r5, #10
 8019ee4:	1a5b      	subs	r3, r3, r1
 8019ee6:	440a      	add	r2, r1
 8019ee8:	82c3      	strh	r3, [r0, #22]
 8019eea:	fbb2 f4f5 	udiv	r4, r2, r5
 8019eee:	fb05 2214 	mls	r2, r5, r4, r2
 8019ef2:	8282      	strh	r2, [r0, #20]
 8019ef4:	bd38      	pop	{r3, r4, r5, pc}
 8019ef6:	bf00      	nop
 8019ef8:	080291d9 	.word	0x080291d9
 8019efc:	0802a312 	.word	0x0802a312
 8019f00:	080291f3 	.word	0x080291f3

08019f04 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 8019f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f08:	f100 061a 	add.w	r6, r0, #26
 8019f0c:	b087      	sub	sp, #28
 8019f0e:	4607      	mov	r7, r0
 8019f10:	460d      	mov	r5, r1
 8019f12:	4630      	mov	r0, r6
 8019f14:	2100      	movs	r1, #0
 8019f16:	f7ff fea7 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	2800      	cmp	r0, #0
 8019f1e:	d03d      	beq.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019f20:	2d01      	cmp	r5, #1
 8019f22:	d112      	bne.n	8019f4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 8019f24:	287f      	cmp	r0, #127	; 0x7f
 8019f26:	d810      	bhi.n	8019f4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 8019f28:	283e      	cmp	r0, #62	; 0x3e
 8019f2a:	f000 8229 	beq.w	801a380 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x47c>
 8019f2e:	d807      	bhi.n	8019f40 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3c>
 8019f30:	2829      	cmp	r0, #41	; 0x29
 8019f32:	d037      	beq.n	8019fa4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa0>
 8019f34:	283c      	cmp	r0, #60	; 0x3c
 8019f36:	d030      	beq.n	8019f9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x96>
 8019f38:	2828      	cmp	r0, #40	; 0x28
 8019f3a:	d106      	bne.n	8019f4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 8019f3c:	2429      	movs	r4, #41	; 0x29
 8019f3e:	e02d      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019f40:	285d      	cmp	r0, #93	; 0x5d
 8019f42:	d033      	beq.n	8019fac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa8>
 8019f44:	d823      	bhi.n	8019f8e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a>
 8019f46:	285b      	cmp	r0, #91	; 0x5b
 8019f48:	d02e      	beq.n	8019fa8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa4>
 8019f4a:	2101      	movs	r1, #1
 8019f4c:	4630      	mov	r0, r6
 8019f4e:	f7ff fe8b 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019f52:	2102      	movs	r1, #2
 8019f54:	4605      	mov	r5, r0
 8019f56:	4630      	mov	r0, r6
 8019f58:	f7ff fe86 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019f5c:	2c20      	cmp	r4, #32
 8019f5e:	4680      	mov	r8, r0
 8019f60:	9000      	str	r0, [sp, #0]
 8019f62:	f040 820f 	bne.w	801a384 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x480>
 8019f66:	f2a5 634c 	subw	r3, r5, #1612	; 0x64c
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	2b04      	cmp	r3, #4
 8019f6e:	f240 6351 	movw	r3, #1617	; 0x651
 8019f72:	d81f      	bhi.n	8019fb4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb0>
 8019f74:	4298      	cmp	r0, r3
 8019f76:	d14c      	bne.n	801a012 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 8019f78:	2102      	movs	r1, #2
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	f7ff ffa6 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8019f80:	f6a5 14ee 	subw	r4, r5, #2542	; 0x9ee
 8019f84:	2301      	movs	r3, #1
 8019f86:	b2a4      	uxth	r4, r4
 8019f88:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8019f8c:	e006      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019f8e:	287b      	cmp	r0, #123	; 0x7b
 8019f90:	d00e      	beq.n	8019fb0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xac>
 8019f92:	287d      	cmp	r0, #125	; 0x7d
 8019f94:	d1d9      	bne.n	8019f4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 8019f96:	247b      	movs	r4, #123	; 0x7b
 8019f98:	e000      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019f9a:	243e      	movs	r4, #62	; 0x3e
 8019f9c:	4620      	mov	r0, r4
 8019f9e:	b007      	add	sp, #28
 8019fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa4:	2428      	movs	r4, #40	; 0x28
 8019fa6:	e7f9      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019fa8:	245d      	movs	r4, #93	; 0x5d
 8019faa:	e7f7      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019fac:	245b      	movs	r4, #91	; 0x5b
 8019fae:	e7f5      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019fb0:	247d      	movs	r4, #125	; 0x7d
 8019fb2:	e7f3      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019fb4:	429d      	cmp	r5, r3
 8019fb6:	d12c      	bne.n	801a012 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 8019fb8:	f5b0 6fce 	cmp.w	r0, #1648	; 0x670
 8019fbc:	d129      	bne.n	801a012 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 8019fbe:	2102      	movs	r1, #2
 8019fc0:	4630      	mov	r0, r6
 8019fc2:	f7ff ff83 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	f64f 4463 	movw	r4, #64611	; 0xfc63
 8019fcc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8019fd0:	e7e4      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019fd2:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8019fd6:	4598      	cmp	r8, r3
 8019fd8:	d12d      	bne.n	801a036 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 8019fda:	2102      	movs	r1, #2
 8019fdc:	4630      	mov	r0, r6
 8019fde:	f7ff ff75 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	f64f 54f0 	movw	r4, #65008	; 0xfdf0
 8019fe8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8019fec:	e7d6      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 8019fee:	f240 6342 	movw	r3, #1602	; 0x642
 8019ff2:	429c      	cmp	r4, r3
 8019ff4:	d11f      	bne.n	801a036 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 8019ff6:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8019ffa:	4598      	cmp	r8, r3
 8019ffc:	d11b      	bne.n	801a036 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 8019ffe:	2102      	movs	r1, #2
 801a000:	4630      	mov	r0, r6
 801a002:	f7ff ff63 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a006:	2301      	movs	r3, #1
 801a008:	f64f 54f1 	movw	r4, #65009	; 0xfdf1
 801a00c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a010:	e7c4      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a012:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801a016:	b29b      	uxth	r3, r3
 801a018:	2b07      	cmp	r3, #7
 801a01a:	d80c      	bhi.n	801a036 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801a01c:	f505 45f1 	add.w	r5, r5, #30848	; 0x7880
 801a020:	2101      	movs	r1, #1
 801a022:	4630      	mov	r0, r6
 801a024:	f7ff ff52 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a028:	356d      	adds	r5, #109	; 0x6d
 801a02a:	2301      	movs	r3, #1
 801a02c:	409d      	lsls	r5, r3
 801a02e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a032:	b2ac      	uxth	r4, r5
 801a034:	e7b2      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a036:	f46f 61c4 	mvn.w	r1, #1568	; 0x620
 801a03a:	1863      	adds	r3, r4, r1
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	2b19      	cmp	r3, #25
 801a040:	d90b      	bls.n	801a05a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801a042:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801a046:	18a3      	adds	r3, r4, r2
 801a048:	b29b      	uxth	r3, r3
 801a04a:	2b09      	cmp	r3, #9
 801a04c:	d905      	bls.n	801a05a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801a04e:	f46f 63ce 	mvn.w	r3, #1648	; 0x670
 801a052:	18e3      	adds	r3, r4, r3
 801a054:	b29b      	uxth	r3, r3
 801a056:	2b62      	cmp	r3, #98	; 0x62
 801a058:	d8a0      	bhi.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a05a:	2103      	movs	r1, #3
 801a05c:	4630      	mov	r0, r6
 801a05e:	f7ff fe03 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a062:	f2a4 6327 	subw	r3, r4, #1575	; 0x627
 801a066:	4682      	mov	sl, r0
 801a068:	4683      	mov	fp, r0
 801a06a:	b29b      	uxth	r3, r3
 801a06c:	2b21      	cmp	r3, #33	; 0x21
 801a06e:	d82c      	bhi.n	801a0ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a070:	f2a8 6327 	subw	r3, r8, #1575	; 0x627
 801a074:	b29b      	uxth	r3, r3
 801a076:	2b23      	cmp	r3, #35	; 0x23
 801a078:	d827      	bhi.n	801a0ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a07a:	f2a0 632f 	subw	r3, r0, #1583	; 0x62f
 801a07e:	b29b      	uxth	r3, r3
 801a080:	2b18      	cmp	r3, #24
 801a082:	d822      	bhi.n	801a0ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a084:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 801a088:	4ab0      	ldr	r2, [pc, #704]	; (801a34c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>)
 801a08a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801a08e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801a092:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a096:	0089      	lsls	r1, r1, #2
 801a098:	f5a1 4182 	sub.w	r1, r1, #16640	; 0x4100
 801a09c:	391a      	subs	r1, #26
 801a09e:	4419      	add	r1, r3
 801a0a0:	2308      	movs	r3, #8
 801a0a2:	4401      	add	r1, r0
 801a0a4:	4638      	mov	r0, r7
 801a0a6:	b289      	uxth	r1, r1
 801a0a8:	f7ff fd33 	bl	8019b12 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a0ac:	4681      	mov	r9, r0
 801a0ae:	b160      	cbz	r0, 801a0ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a0b0:	8842      	ldrh	r2, [r0, #2]
 801a0b2:	42aa      	cmp	r2, r5
 801a0b4:	d109      	bne.n	801a0ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a0b6:	2103      	movs	r1, #3
 801a0b8:	4630      	mov	r0, r6
 801a0ba:	f7ff ff07 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a0be:	2201      	movs	r2, #1
 801a0c0:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 801a0c4:	f8b9 4000 	ldrh.w	r4, [r9]
 801a0c8:	e768      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a0ca:	f5a4 63c5 	sub.w	r3, r4, #1576	; 0x628
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	2b22      	cmp	r3, #34	; 0x22
 801a0d2:	d823      	bhi.n	801a11c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801a0d4:	f2a5 632c 	subw	r3, r5, #1580	; 0x62c
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	2b24      	cmp	r3, #36	; 0x24
 801a0dc:	d81e      	bhi.n	801a11c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801a0de:	f2a8 632c 	subw	r3, r8, #1580	; 0x62c
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	2b25      	cmp	r3, #37	; 0x25
 801a0e6:	d819      	bhi.n	801a11c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801a0e8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801a0ec:	4a98      	ldr	r2, [pc, #608]	; (801a350 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x44c>)
 801a0ee:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 801a0f2:	4638      	mov	r0, r7
 801a0f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a0f8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801a0fc:	ebc4 1181 	rsb	r1, r4, r1, lsl #6
 801a100:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 801a104:	f501 517e 	add.w	r1, r1, #16256	; 0x3f80
 801a108:	311c      	adds	r1, #28
 801a10a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801a10e:	2362      	movs	r3, #98	; 0x62
 801a110:	b289      	uxth	r1, r1
 801a112:	f7ff fcfe 	bl	8019b12 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a116:	4681      	mov	r9, r0
 801a118:	2800      	cmp	r0, #0
 801a11a:	d179      	bne.n	801a210 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 801a11c:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801a120:	b29b      	uxth	r3, r3
 801a122:	2b0a      	cmp	r3, #10
 801a124:	f240 8147 	bls.w	801a3b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b2>
 801a128:	f240 6374 	movw	r3, #1652	; 0x674
 801a12c:	429d      	cmp	r5, r3
 801a12e:	bf0b      	itete	eq
 801a130:	4643      	moveq	r3, r8
 801a132:	462b      	movne	r3, r5
 801a134:	46d3      	moveq	fp, sl
 801a136:	46c3      	movne	fp, r8
 801a138:	9300      	str	r3, [sp, #0]
 801a13a:	bf0c      	ite	eq
 801a13c:	462b      	moveq	r3, r5
 801a13e:	2300      	movne	r3, #0
 801a140:	9302      	str	r3, [sp, #8]
 801a142:	f2a4 6326 	subw	r3, r4, #1574	; 0x626
 801a146:	b29b      	uxth	r3, r3
 801a148:	2b24      	cmp	r3, #36	; 0x24
 801a14a:	d903      	bls.n	801a154 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x250>
 801a14c:	f04f 0800 	mov.w	r8, #0
 801a150:	46c1      	mov	r9, r8
 801a152:	e022      	b.n	801a19a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801a154:	9b00      	ldr	r3, [sp, #0]
 801a156:	f2a3 6322 	subw	r3, r3, #1570	; 0x622
 801a15a:	b29b      	uxth	r3, r3
 801a15c:	2bb3      	cmp	r3, #179	; 0xb3
 801a15e:	d8f5      	bhi.n	801a14c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801a160:	f240 6344 	movw	r3, #1604	; 0x644
 801a164:	9a00      	ldr	r2, [sp, #0]
 801a166:	429a      	cmp	r2, r3
 801a168:	d103      	bne.n	801a172 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x26e>
 801a16a:	f240 6327 	movw	r3, #1575	; 0x627
 801a16e:	459b      	cmp	fp, r3
 801a170:	d0ec      	beq.n	801a14c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801a172:	f89d 1000 	ldrb.w	r1, [sp]
 801a176:	23ab      	movs	r3, #171	; 0xab
 801a178:	4a76      	ldr	r2, [pc, #472]	; (801a354 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x450>)
 801a17a:	4638      	mov	r0, r7
 801a17c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801a180:	b289      	uxth	r1, r1
 801a182:	f7ff fcc6 	bl	8019b12 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a186:	f1b0 0900 	subs.w	r9, r0, #0
 801a18a:	9b00      	ldr	r3, [sp, #0]
 801a18c:	bf1a      	itte	ne
 801a18e:	f04f 0801 	movne.w	r8, #1
 801a192:	465b      	movne	r3, fp
 801a194:	f04f 0800 	moveq.w	r8, #0
 801a198:	9300      	str	r3, [sp, #0]
 801a19a:	9b00      	ldr	r3, [sp, #0]
 801a19c:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 801a1a0:	f2a3 6222 	subw	r2, r3, #1570	; 0x622
 801a1a4:	b292      	uxth	r2, r2
 801a1a6:	2ab1      	cmp	r2, #177	; 0xb1
 801a1a8:	bf94      	ite	ls
 801a1aa:	2300      	movls	r3, #0
 801a1ac:	2301      	movhi	r3, #1
 801a1ae:	2ab2      	cmp	r2, #178	; 0xb2
 801a1b0:	9301      	str	r3, [sp, #4]
 801a1b2:	f081 0301 	eor.w	r3, r1, #1
 801a1b6:	bf34      	ite	cc
 801a1b8:	f04f 0a02 	movcc.w	sl, #2
 801a1bc:	f04f 0a00 	movcs.w	sl, #0
 801a1c0:	9304      	str	r3, [sp, #16]
 801a1c2:	449a      	add	sl, r3
 801a1c4:	f1b9 0f00 	cmp.w	r9, #0
 801a1c8:	f000 80a9 	beq.w	801a31e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41a>
 801a1cc:	f839 201a 	ldrh.w	r2, [r9, sl, lsl #1]
 801a1d0:	2a00      	cmp	r2, #0
 801a1d2:	f040 8086 	bne.w	801a2e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a1d6:	f1b8 0f00 	cmp.w	r8, #0
 801a1da:	f000 8082 	beq.w	801a2e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a1de:	4641      	mov	r1, r8
 801a1e0:	4630      	mov	r0, r6
 801a1e2:	f7ff fd41 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a1e6:	f108 0b01 	add.w	fp, r8, #1
 801a1ea:	f240 6274 	movw	r2, #1652	; 0x674
 801a1ee:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801a1f2:	b289      	uxth	r1, r1
 801a1f4:	290a      	cmp	r1, #10
 801a1f6:	d901      	bls.n	801a1fc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f8>
 801a1f8:	4290      	cmp	r0, r2
 801a1fa:	d110      	bne.n	801a21e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x31a>
 801a1fc:	fa1f f18b 	uxth.w	r1, fp
 801a200:	4630      	mov	r0, r6
 801a202:	9203      	str	r2, [sp, #12]
 801a204:	f10b 0b01 	add.w	fp, fp, #1
 801a208:	f7ff fd2e 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a20c:	9a03      	ldr	r2, [sp, #12]
 801a20e:	e7ee      	b.n	801a1ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2ea>
 801a210:	2300      	movs	r3, #0
 801a212:	f8cd a000 	str.w	sl, [sp]
 801a216:	f04f 0802 	mov.w	r8, #2
 801a21a:	9302      	str	r3, [sp, #8]
 801a21c:	e7bd      	b.n	801a19a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801a21e:	4601      	mov	r1, r0
 801a220:	4638      	mov	r0, r7
 801a222:	f7ff fc8f 	bl	8019b44 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801a226:	9003      	str	r0, [sp, #12]
 801a228:	fa1f f18b 	uxth.w	r1, fp
 801a22c:	4630      	mov	r0, r6
 801a22e:	f7ff fd1b 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a232:	f10b 0b01 	add.w	fp, fp, #1
 801a236:	f240 6274 	movw	r2, #1652	; 0x674
 801a23a:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801a23e:	b289      	uxth	r1, r1
 801a240:	290a      	cmp	r1, #10
 801a242:	d901      	bls.n	801a248 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x344>
 801a244:	4290      	cmp	r0, r2
 801a246:	d109      	bne.n	801a25c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>
 801a248:	fa1f f18b 	uxth.w	r1, fp
 801a24c:	4630      	mov	r0, r6
 801a24e:	9205      	str	r2, [sp, #20]
 801a250:	f10b 0b01 	add.w	fp, fp, #1
 801a254:	f7ff fd08 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a258:	9a05      	ldr	r2, [sp, #20]
 801a25a:	e7ee      	b.n	801a23a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x336>
 801a25c:	4601      	mov	r1, r0
 801a25e:	4638      	mov	r0, r7
 801a260:	f7ff fc70 	bl	8019b44 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801a264:	9b03      	ldr	r3, [sp, #12]
 801a266:	b133      	cbz	r3, 801a276 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801a268:	88da      	ldrh	r2, [r3, #6]
 801a26a:	b122      	cbz	r2, 801a276 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801a26c:	b118      	cbz	r0, 801a276 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801a26e:	8842      	ldrh	r2, [r0, #2]
 801a270:	b9ea      	cbnz	r2, 801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a272:	88c2      	ldrh	r2, [r0, #6]
 801a274:	b9da      	cbnz	r2, 801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a276:	f1ba 0f02 	cmp.w	sl, #2
 801a27a:	d109      	bne.n	801a290 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x38c>
 801a27c:	f8b9 2000 	ldrh.w	r2, [r9]
 801a280:	b1aa      	cbz	r2, 801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a282:	f240 6244 	movw	r2, #1604	; 0x644
 801a286:	4294      	cmp	r4, r2
 801a288:	d111      	bne.n	801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a28a:	2301      	movs	r3, #1
 801a28c:	9301      	str	r3, [sp, #4]
 801a28e:	e069      	b.n	801a364 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801a290:	f1ba 0f03 	cmp.w	sl, #3
 801a294:	d10b      	bne.n	801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a296:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801a29a:	b142      	cbz	r2, 801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a29c:	f240 6244 	movw	r2, #1604	; 0x644
 801a2a0:	4294      	cmp	r4, r2
 801a2a2:	d104      	bne.n	801a2ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801a2a4:	f240 6247 	movw	r2, #1607	; 0x647
 801a2a8:	9b00      	ldr	r3, [sp, #0]
 801a2aa:	4293      	cmp	r3, r2
 801a2ac:	d146      	bne.n	801a33c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x438>
 801a2ae:	f2a5 6522 	subw	r5, r5, #1570	; 0x622
 801a2b2:	4621      	mov	r1, r4
 801a2b4:	4638      	mov	r0, r7
 801a2b6:	b2ad      	uxth	r5, r5
 801a2b8:	f7ff fc44 	bl	8019b44 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801a2bc:	2db1      	cmp	r5, #177	; 0xb1
 801a2be:	bf8c      	ite	hi
 801a2c0:	2200      	movhi	r2, #0
 801a2c2:	2202      	movls	r2, #2
 801a2c4:	b168      	cbz	r0, 801a2e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a2c6:	9b04      	ldr	r3, [sp, #16]
 801a2c8:	441a      	add	r2, r3
 801a2ca:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
 801a2ce:	b141      	cbz	r1, 801a2e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a2d0:	2db1      	cmp	r5, #177	; 0xb1
 801a2d2:	4692      	mov	sl, r2
 801a2d4:	4681      	mov	r9, r0
 801a2d6:	f04f 0800 	mov.w	r8, #0
 801a2da:	bf94      	ite	ls
 801a2dc:	2300      	movls	r3, #0
 801a2de:	2301      	movhi	r3, #1
 801a2e0:	9301      	str	r3, [sp, #4]
 801a2e2:	f1ba 0f02 	cmp.w	sl, #2
 801a2e6:	d122      	bne.n	801a32e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x42a>
 801a2e8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801a2ec:	2a00      	cmp	r2, #0
 801a2ee:	d0cc      	beq.n	801a28a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x386>
 801a2f0:	f839 301a 	ldrh.w	r3, [r9, sl, lsl #1]
 801a2f4:	eb09 054a 	add.w	r5, r9, sl, lsl #1
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	f43f ae4f 	beq.w	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a2fe:	9b01      	ldr	r3, [sp, #4]
 801a300:	4641      	mov	r1, r8
 801a302:	4630      	mov	r0, r6
 801a304:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a308:	f7ff fde0 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a30c:	9b02      	ldr	r3, [sp, #8]
 801a30e:	b123      	cbz	r3, 801a31a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x416>
 801a310:	461a      	mov	r2, r3
 801a312:	2101      	movs	r1, #1
 801a314:	4630      	mov	r0, r6
 801a316:	f7ff fc8d 	bl	8019c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a31a:	882c      	ldrh	r4, [r5, #0]
 801a31c:	e63e      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a31e:	4621      	mov	r1, r4
 801a320:	4638      	mov	r0, r7
 801a322:	f7ff fc0f 	bl	8019b44 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801a326:	4681      	mov	r9, r0
 801a328:	2800      	cmp	r0, #0
 801a32a:	d1da      	bne.n	801a2e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a32c:	e636      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a32e:	f1ba 0f03 	cmp.w	sl, #3
 801a332:	d111      	bne.n	801a358 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x454>
 801a334:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801a338:	2a00      	cmp	r2, #0
 801a33a:	d1d9      	bne.n	801a2f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801a33c:	2301      	movs	r3, #1
 801a33e:	9301      	str	r3, [sp, #4]
 801a340:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801a344:	b172      	cbz	r2, 801a364 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801a346:	f04f 0a01 	mov.w	sl, #1
 801a34a:	e7d1      	b.n	801a2f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801a34c:	08029e44 	.word	0x08029e44
 801a350:	08029a70 	.word	0x08029a70
 801a354:	080293c2 	.word	0x080293c2
 801a358:	f1ba 0f01 	cmp.w	sl, #1
 801a35c:	d0f0      	beq.n	801a340 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x43c>
 801a35e:	f1ba 0f00 	cmp.w	sl, #0
 801a362:	d1c5      	bne.n	801a2f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801a364:	f8b9 2000 	ldrh.w	r2, [r9]
 801a368:	b93a      	cbnz	r2, 801a37a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801a36a:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 801a36e:	f11a 0a00 	adds.w	sl, sl, #0
 801a372:	bf18      	it	ne
 801a374:	f04f 0a01 	movne.w	sl, #1
 801a378:	e7ba      	b.n	801a2f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801a37a:	f04f 0a00 	mov.w	sl, #0
 801a37e:	e7b7      	b.n	801a2f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801a380:	243c      	movs	r4, #60	; 0x3c
 801a382:	e60b      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a384:	f240 6344 	movw	r3, #1604	; 0x644
 801a388:	429d      	cmp	r5, r3
 801a38a:	f47f ae54 	bne.w	801a036 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801a38e:	f240 6335 	movw	r3, #1589	; 0x635
 801a392:	429c      	cmp	r4, r3
 801a394:	f47f ae2b 	bne.w	8019fee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xea>
 801a398:	f240 6349 	movw	r3, #1609	; 0x649
 801a39c:	4598      	cmp	r8, r3
 801a39e:	f47f ae18 	bne.w	8019fd2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xce>
 801a3a2:	2102      	movs	r1, #2
 801a3a4:	4630      	mov	r0, r6
 801a3a6:	f7ff fd91 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	f64f 54f9 	movw	r4, #65017	; 0xfdf9
 801a3b0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a3b4:	e5f2      	b.n	8019f9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a3b6:	9502      	str	r5, [sp, #8]
 801a3b8:	e6c3      	b.n	801a142 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x23e>
 801a3ba:	bf00      	nop

0801a3bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801a3bc:	b538      	push	{r3, r4, r5, lr}
 801a3be:	8ac3      	ldrh	r3, [r0, #22]
 801a3c0:	2b09      	cmp	r3, #9
 801a3c2:	d905      	bls.n	801a3d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801a3c4:	4b08      	ldr	r3, [pc, #32]	; (801a3e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801a3c6:	21f7      	movs	r1, #247	; 0xf7
 801a3c8:	4a08      	ldr	r2, [pc, #32]	; (801a3ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801a3ca:	4809      	ldr	r0, [pc, #36]	; (801a3f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801a3cc:	f00a fb72 	bl	8024ab4 <__assert_func>
 801a3d0:	8a82      	ldrh	r2, [r0, #20]
 801a3d2:	250a      	movs	r5, #10
 801a3d4:	441a      	add	r2, r3
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	fbb2 f4f5 	udiv	r4, r2, r5
 801a3dc:	fb05 2214 	mls	r2, r5, r4, r2
 801a3e0:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801a3e4:	82c3      	strh	r3, [r0, #22]
 801a3e6:	bd38      	pop	{r3, r4, r5, pc}
 801a3e8:	080291cd 	.word	0x080291cd
 801a3ec:	0802a263 	.word	0x0802a263
 801a3f0:	080291f3 	.word	0x080291f3

0801a3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a3f4:	b538      	push	{r3, r4, r5, lr}
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	f100 051a 	add.w	r5, r0, #26
 801a3fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a3fe:	2b0a      	cmp	r3, #10
 801a400:	d01c      	beq.n	801a43c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a402:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801a404:	b962      	cbnz	r2, 801a420 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a406:	f104 051a 	add.w	r5, r4, #26
 801a40a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a40c:	2b0a      	cmp	r3, #10
 801a40e:	d015      	beq.n	801a43c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a410:	4620      	mov	r0, r4
 801a412:	f7ff fb52 	bl	8019aba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a416:	4601      	mov	r1, r0
 801a418:	4628      	mov	r0, r5
 801a41a:	f7ff ffcf 	bl	801a3bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a41e:	e7f4      	b.n	801a40a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801a420:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a422:	3a01      	subs	r2, #1
 801a424:	4628      	mov	r0, r5
 801a426:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801a42a:	3301      	adds	r3, #1
 801a42c:	f003 0301 	and.w	r3, r3, #1
 801a430:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801a432:	8722      	strh	r2, [r4, #56]	; 0x38
 801a434:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a436:	f7ff ffc1 	bl	801a3bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a43a:	e7df      	b.n	801a3fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801a43c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a440 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801a440:	2300      	movs	r3, #0
 801a442:	b510      	push	{r4, lr}
 801a444:	6043      	str	r3, [r0, #4]
 801a446:	4604      	mov	r4, r0
 801a448:	60c3      	str	r3, [r0, #12]
 801a44a:	7403      	strb	r3, [r0, #16]
 801a44c:	8603      	strh	r3, [r0, #48]	; 0x30
 801a44e:	8303      	strh	r3, [r0, #24]
 801a450:	8703      	strh	r3, [r0, #56]	; 0x38
 801a452:	f7ff ffcf 	bl	801a3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a456:	4a0a      	ldr	r2, [pc, #40]	; (801a480 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801a458:	6813      	ldr	r3, [r2, #0]
 801a45a:	4611      	mov	r1, r2
 801a45c:	b913      	cbnz	r3, 801a464 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801a45e:	6852      	ldr	r2, [r2, #4]
 801a460:	07d0      	lsls	r0, r2, #31
 801a462:	d50b      	bpl.n	801a47c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801a464:	6849      	ldr	r1, [r1, #4]
 801a466:	104a      	asrs	r2, r1, #1
 801a468:	07c9      	lsls	r1, r1, #31
 801a46a:	eb04 0002 	add.w	r0, r4, r2
 801a46e:	bf48      	it	mi
 801a470:	58a2      	ldrmi	r2, [r4, r2]
 801a472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a476:	bf48      	it	mi
 801a478:	58d3      	ldrmi	r3, [r2, r3]
 801a47a:	4718      	bx	r3
 801a47c:	bd10      	pop	{r4, pc}
 801a47e:	bf00      	nop
 801a480:	2000001c 	.word	0x2000001c

0801a484 <_ZN8touchgfx12TextProviderC1Ev>:
 801a484:	2300      	movs	r3, #0
 801a486:	2201      	movs	r2, #1
 801a488:	b510      	push	{r4, lr}
 801a48a:	4604      	mov	r4, r0
 801a48c:	60c3      	str	r3, [r0, #12]
 801a48e:	7403      	strb	r3, [r0, #16]
 801a490:	82c3      	strh	r3, [r0, #22]
 801a492:	8303      	strh	r3, [r0, #24]
 801a494:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a496:	8603      	strh	r3, [r0, #48]	; 0x30
 801a498:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a49a:	8703      	strh	r3, [r0, #56]	; 0x38
 801a49c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a49e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a4a2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a4a6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a4aa:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a4ae:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a4b2:	e9c0 3300 	strd	r3, r3, [r0]
 801a4b6:	f7ff ffc3 	bl	801a440 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	bd10      	pop	{r4, pc}

0801a4be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a4be:	b410      	push	{r4}
 801a4c0:	6082      	str	r2, [r0, #8]
 801a4c2:	6001      	str	r1, [r0, #0]
 801a4c4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a4ca:	f7ff bfb9 	b.w	801a440 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801a4d0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801a4d0:	b508      	push	{r3, lr}
 801a4d2:	88c2      	ldrh	r2, [r0, #6]
 801a4d4:	440a      	add	r2, r1
 801a4d6:	2a02      	cmp	r2, #2
 801a4d8:	dd05      	ble.n	801a4e6 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801a4da:	4b06      	ldr	r3, [pc, #24]	; (801a4f4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801a4dc:	21ec      	movs	r1, #236	; 0xec
 801a4de:	4a06      	ldr	r2, [pc, #24]	; (801a4f8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801a4e0:	4806      	ldr	r0, [pc, #24]	; (801a4fc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801a4e2:	f00a fae7 	bl	8024ab4 <__assert_func>
 801a4e6:	8883      	ldrh	r3, [r0, #4]
 801a4e8:	80c2      	strh	r2, [r0, #6]
 801a4ea:	1a59      	subs	r1, r3, r1
 801a4ec:	f001 0101 	and.w	r1, r1, #1
 801a4f0:	8081      	strh	r1, [r0, #4]
 801a4f2:	bd08      	pop	{r3, pc}
 801a4f4:	0802921f 	.word	0x0802921f
 801a4f8:	0802a46f 	.word	0x0802a46f
 801a4fc:	080291f3 	.word	0x080291f3

0801a500 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801a500:	b508      	push	{r3, lr}
 801a502:	88c3      	ldrh	r3, [r0, #6]
 801a504:	428b      	cmp	r3, r1
 801a506:	d805      	bhi.n	801a514 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801a508:	4b06      	ldr	r3, [pc, #24]	; (801a524 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801a50a:	21fd      	movs	r1, #253	; 0xfd
 801a50c:	4a06      	ldr	r2, [pc, #24]	; (801a528 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801a50e:	4807      	ldr	r0, [pc, #28]	; (801a52c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801a510:	f00a fad0 	bl	8024ab4 <__assert_func>
 801a514:	8883      	ldrh	r3, [r0, #4]
 801a516:	4419      	add	r1, r3
 801a518:	f001 0101 	and.w	r1, r1, #1
 801a51c:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a520:	bd08      	pop	{r3, pc}
 801a522:	bf00      	nop
 801a524:	080291e5 	.word	0x080291e5
 801a528:	0802a5c7 	.word	0x0802a5c7
 801a52c:	080291f3 	.word	0x080291f3

0801a530 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a530:	b570      	push	{r4, r5, r6, lr}
 801a532:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a534:	4604      	mov	r4, r0
 801a536:	b92a      	cbnz	r2, 801a544 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a538:	4b12      	ldr	r3, [pc, #72]	; (801a584 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801a53a:	21de      	movs	r1, #222	; 0xde
 801a53c:	4a12      	ldr	r2, [pc, #72]	; (801a588 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a53e:	4813      	ldr	r0, [pc, #76]	; (801a58c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a540:	f00a fab8 	bl	8024ab4 <__assert_func>
 801a544:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a546:	260a      	movs	r6, #10
 801a548:	3a01      	subs	r2, #1
 801a54a:	3412      	adds	r4, #18
 801a54c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a550:	3301      	adds	r3, #1
 801a552:	8b4d      	ldrh	r5, [r1, #26]
 801a554:	8602      	strh	r2, [r0, #48]	; 0x30
 801a556:	fbb3 f1f6 	udiv	r1, r3, r6
 801a55a:	fb06 3311 	mls	r3, r6, r1, r3
 801a55e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a560:	f7ff ff48 	bl	801a3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a564:	88e3      	ldrh	r3, [r4, #6]
 801a566:	2101      	movs	r1, #1
 801a568:	2b02      	cmp	r3, #2
 801a56a:	bf04      	itt	eq
 801a56c:	2301      	moveq	r3, #1
 801a56e:	80e3      	strheq	r3, [r4, #6]
 801a570:	4620      	mov	r0, r4
 801a572:	f7ff ffad 	bl	801a4d0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a576:	4620      	mov	r0, r4
 801a578:	462a      	mov	r2, r5
 801a57a:	2100      	movs	r1, #0
 801a57c:	f7ff ffc0 	bl	801a500 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a580:	4628      	mov	r0, r5
 801a582:	bd70      	pop	{r4, r5, r6, pc}
 801a584:	080291c4 	.word	0x080291c4
 801a588:	0802a1b8 	.word	0x0802a1b8
 801a58c:	080291f3 	.word	0x080291f3

0801a590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a590:	428a      	cmp	r2, r1
 801a592:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a596:	4604      	mov	r4, r0
 801a598:	460e      	mov	r6, r1
 801a59a:	4615      	mov	r5, r2
 801a59c:	469a      	mov	sl, r3
 801a59e:	d92b      	bls.n	801a5f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801a5a0:	1a57      	subs	r7, r2, r1
 801a5a2:	f04f 0800 	mov.w	r8, #0
 801a5a6:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801a5aa:	f04f 0b0a 	mov.w	fp, #10
 801a5ae:	b2bf      	uxth	r7, r7
 801a5b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a5b2:	b92b      	cbnz	r3, 801a5c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801a5b4:	4b24      	ldr	r3, [pc, #144]	; (801a648 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801a5b6:	21e6      	movs	r1, #230	; 0xe6
 801a5b8:	4a24      	ldr	r2, [pc, #144]	; (801a64c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801a5ba:	4825      	ldr	r0, [pc, #148]	; (801a650 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801a5bc:	f00a fa7a 	bl	8024ab4 <__assert_func>
 801a5c0:	3b01      	subs	r3, #1
 801a5c2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a5c4:	2101      	movs	r1, #1
 801a5c6:	4648      	mov	r0, r9
 801a5c8:	b29b      	uxth	r3, r3
 801a5ca:	f108 0801 	add.w	r8, r8, #1
 801a5ce:	441a      	add	r2, r3
 801a5d0:	8623      	strh	r3, [r4, #48]	; 0x30
 801a5d2:	fbb2 f3fb 	udiv	r3, r2, fp
 801a5d6:	fb0b 2313 	mls	r3, fp, r3, r2
 801a5da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a5de:	8b5a      	ldrh	r2, [r3, #26]
 801a5e0:	9201      	str	r2, [sp, #4]
 801a5e2:	f7ff ff75 	bl	801a4d0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a5e6:	9a01      	ldr	r2, [sp, #4]
 801a5e8:	2100      	movs	r1, #0
 801a5ea:	4648      	mov	r0, r9
 801a5ec:	f7ff ff88 	bl	801a500 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a5f0:	fa1f f388 	uxth.w	r3, r8
 801a5f4:	429f      	cmp	r7, r3
 801a5f6:	d8db      	bhi.n	801a5b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801a5f8:	f104 071a 	add.w	r7, r4, #26
 801a5fc:	4631      	mov	r1, r6
 801a5fe:	260a      	movs	r6, #10
 801a600:	4638      	mov	r0, r7
 801a602:	f7ff fc63 	bl	8019ecc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a606:	b1c5      	cbz	r5, 801a63a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a608:	3d01      	subs	r5, #1
 801a60a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a60c:	b2ad      	uxth	r5, r5
 801a60e:	2b09      	cmp	r3, #9
 801a610:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801a614:	d903      	bls.n	801a61e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801a616:	4b0f      	ldr	r3, [pc, #60]	; (801a654 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801a618:	21ec      	movs	r1, #236	; 0xec
 801a61a:	4a0f      	ldr	r2, [pc, #60]	; (801a658 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801a61c:	e7cd      	b.n	801a5ba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801a61e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801a620:	3301      	adds	r3, #1
 801a622:	3109      	adds	r1, #9
 801a624:	8623      	strh	r3, [r4, #48]	; 0x30
 801a626:	fbb1 f0f6 	udiv	r0, r1, r6
 801a62a:	fb06 1110 	mls	r1, r6, r0, r1
 801a62e:	4638      	mov	r0, r7
 801a630:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801a632:	2100      	movs	r1, #0
 801a634:	f7ff fafe 	bl	8019c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a638:	e7e5      	b.n	801a606 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801a63a:	4620      	mov	r0, r4
 801a63c:	b003      	add	sp, #12
 801a63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a642:	f7ff bed7 	b.w	801a3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a646:	bf00      	nop
 801a648:	080291c4 	.word	0x080291c4
 801a64c:	0802a03c 	.word	0x0802a03c
 801a650:	080291f3 	.word	0x080291f3
 801a654:	0802921f 	.word	0x0802921f
 801a658:	08029fb4 	.word	0x08029fb4

0801a65c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a660:	4605      	mov	r5, r0
 801a662:	4616      	mov	r6, r2
 801a664:	1c8c      	adds	r4, r1, #2
 801a666:	8809      	ldrh	r1, [r1, #0]
 801a668:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a66c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a670:	42b3      	cmp	r3, r6
 801a672:	d124      	bne.n	801a6be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a674:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a678:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a67c:	f001 070f 	and.w	r7, r1, #15
 801a680:	4652      	mov	r2, sl
 801a682:	f8cd 8000 	str.w	r8, [sp]
 801a686:	464b      	mov	r3, r9
 801a688:	4621      	mov	r1, r4
 801a68a:	4628      	mov	r0, r5
 801a68c:	f7ff fbe2 	bl	8019e54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a690:	4683      	mov	fp, r0
 801a692:	b168      	cbz	r0, 801a6b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a694:	eb0a 0109 	add.w	r1, sl, r9
 801a698:	463a      	mov	r2, r7
 801a69a:	4628      	mov	r0, r5
 801a69c:	4441      	add	r1, r8
 801a69e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a6a2:	4649      	mov	r1, r9
 801a6a4:	f7ff ff74 	bl	801a590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a6a8:	4658      	mov	r0, fp
 801a6aa:	b003      	add	sp, #12
 801a6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6b0:	eb07 010a 	add.w	r1, r7, sl
 801a6b4:	4449      	add	r1, r9
 801a6b6:	4441      	add	r1, r8
 801a6b8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a6bc:	e7d2      	b.n	801a664 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a6be:	f04f 0b00 	mov.w	fp, #0
 801a6c2:	e7f1      	b.n	801a6a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a6c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6c8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	260b      	movs	r6, #11
 801a6ce:	f100 091a 	add.w	r9, r0, #26
 801a6d2:	886f      	ldrh	r7, [r5, #2]
 801a6d4:	087f      	lsrs	r7, r7, #1
 801a6d6:	3e01      	subs	r6, #1
 801a6d8:	d013      	beq.n	801a702 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a6da:	2100      	movs	r1, #0
 801a6dc:	4648      	mov	r0, r9
 801a6de:	f7ff fac3 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a6e2:	462a      	mov	r2, r5
 801a6e4:	4680      	mov	r8, r0
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	4639      	mov	r1, r7
 801a6ea:	4620      	mov	r0, r4
 801a6ec:	f7ff fa83 	bl	8019bf6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a6f0:	b138      	cbz	r0, 801a702 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a6f2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a6f6:	4642      	mov	r2, r8
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	f7ff ffaf 	bl	801a65c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a6fe:	2800      	cmp	r0, #0
 801a700:	d1e9      	bne.n	801a6d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801a702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801a708:	4b1e      	ldr	r3, [pc, #120]	; (801a784 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801a70a:	b570      	push	{r4, r5, r6, lr}
 801a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a710:	4604      	mov	r4, r0
 801a712:	f003 0501 	and.w	r5, r3, #1
 801a716:	b902      	cbnz	r2, 801a71a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801a718:	b165      	cbz	r5, 801a734 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801a71a:	105b      	asrs	r3, r3, #1
 801a71c:	f104 061a 	add.w	r6, r4, #26
 801a720:	18e0      	adds	r0, r4, r3
 801a722:	b10d      	cbz	r5, 801a728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801a724:	58e3      	ldr	r3, [r4, r3]
 801a726:	589a      	ldr	r2, [r3, r2]
 801a728:	4790      	blx	r2
 801a72a:	2100      	movs	r1, #0
 801a72c:	4602      	mov	r2, r0
 801a72e:	4630      	mov	r0, r6
 801a730:	f7ff fa80 	bl	8019c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a736:	b303      	cbz	r3, 801a77a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a738:	f104 051a 	add.w	r5, r4, #26
 801a73c:	2100      	movs	r1, #0
 801a73e:	4628      	mov	r0, r5
 801a740:	f7ff fa92 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a744:	b1c8      	cbz	r0, 801a77a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a746:	4620      	mov	r0, r4
 801a748:	f7ff ffbc 	bl	801a6c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801a74c:	2101      	movs	r1, #1
 801a74e:	4628      	mov	r0, r5
 801a750:	f7ff fa8a 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a754:	f640 133f 	movw	r3, #2367	; 0x93f
 801a758:	4606      	mov	r6, r0
 801a75a:	4298      	cmp	r0, r3
 801a75c:	d10d      	bne.n	801a77a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a75e:	2100      	movs	r1, #0
 801a760:	4628      	mov	r0, r5
 801a762:	f7ff fa81 	bl	8019c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a766:	2101      	movs	r1, #1
 801a768:	4602      	mov	r2, r0
 801a76a:	4628      	mov	r0, r5
 801a76c:	f7ff fa62 	bl	8019c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a770:	4632      	mov	r2, r6
 801a772:	2100      	movs	r1, #0
 801a774:	4628      	mov	r0, r5
 801a776:	f7ff fa5d 	bl	8019c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a77a:	4620      	mov	r0, r4
 801a77c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a780:	f7ff bed6 	b.w	801a530 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a784:	20000024 	.word	0x20000024

0801a788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a78a:	4617      	mov	r7, r2
 801a78c:	461e      	mov	r6, r3
 801a78e:	4605      	mov	r5, r0
 801a790:	f7ff ffba 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	4604      	mov	r4, r0
 801a798:	4601      	mov	r1, r0
 801a79a:	4638      	mov	r0, r7
 801a79c:	68db      	ldr	r3, [r3, #12]
 801a79e:	4798      	blx	r3
 801a7a0:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a7a4:	4602      	mov	r2, r0
 801a7a6:	6030      	str	r0, [r6, #0]
 801a7a8:	b29b      	uxth	r3, r3
 801a7aa:	2b7f      	cmp	r3, #127	; 0x7f
 801a7ac:	d813      	bhi.n	801a7d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a7ae:	4639      	mov	r1, r7
 801a7b0:	4628      	mov	r0, r5
 801a7b2:	f7ff fa73 	bl	8019c9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a7b6:	6030      	str	r0, [r6, #0]
 801a7b8:	6833      	ldr	r3, [r6, #0]
 801a7ba:	b143      	cbz	r3, 801a7ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a7bc:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a7c0:	7a9b      	ldrb	r3, [r3, #10]
 801a7c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a7c6:	4313      	orrs	r3, r2
 801a7c8:	bf0c      	ite	eq
 801a7ca:	2301      	moveq	r3, #1
 801a7cc:	2300      	movne	r3, #0
 801a7ce:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a7d2:	4620      	mov	r0, r4
 801a7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7d6:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d0ec      	beq.n	801a7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a7de:	f640 1302 	movw	r3, #2306	; 0x902
 801a7e2:	429c      	cmp	r4, r3
 801a7e4:	d1e8      	bne.n	801a7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a7e6:	4601      	mov	r1, r0
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	f7ff f9d5 	bl	8019b98 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a7ee:	e7e2      	b.n	801a7b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a7f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7f4:	4617      	mov	r7, r2
 801a7f6:	461e      	mov	r6, r3
 801a7f8:	4605      	mov	r5, r0
 801a7fa:	f7ff ff85 	bl	801a708 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a7fe:	683b      	ldr	r3, [r7, #0]
 801a800:	4604      	mov	r4, r0
 801a802:	4601      	mov	r1, r0
 801a804:	4638      	mov	r0, r7
 801a806:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a80a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a80e:	47c0      	blx	r8
 801a810:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a814:	4602      	mov	r2, r0
 801a816:	6030      	str	r0, [r6, #0]
 801a818:	b29b      	uxth	r3, r3
 801a81a:	2b7f      	cmp	r3, #127	; 0x7f
 801a81c:	d814      	bhi.n	801a848 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a81e:	4639      	mov	r1, r7
 801a820:	4628      	mov	r0, r5
 801a822:	f7ff fa3b 	bl	8019c9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a826:	6030      	str	r0, [r6, #0]
 801a828:	6833      	ldr	r3, [r6, #0]
 801a82a:	b143      	cbz	r3, 801a83e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a82c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a830:	7a9b      	ldrb	r3, [r3, #10]
 801a832:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a836:	4313      	orrs	r3, r2
 801a838:	bf0c      	ite	eq
 801a83a:	2301      	moveq	r3, #1
 801a83c:	2300      	movne	r3, #0
 801a83e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a842:	4620      	mov	r0, r4
 801a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a848:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d0eb      	beq.n	801a828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a850:	f640 1302 	movw	r3, #2306	; 0x902
 801a854:	429c      	cmp	r4, r3
 801a856:	d1e7      	bne.n	801a828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a858:	4601      	mov	r1, r0
 801a85a:	4628      	mov	r0, r5
 801a85c:	f7ff f99c 	bl	8019b98 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a860:	e7e1      	b.n	801a826 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a862 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a862:	4602      	mov	r2, r0
 801a864:	b148      	cbz	r0, 801a87a <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a866:	2300      	movs	r3, #0
 801a868:	b298      	uxth	r0, r3
 801a86a:	3301      	adds	r3, #1
 801a86c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a870:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a874:	2900      	cmp	r1, #0
 801a876:	d1f7      	bne.n	801a868 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a878:	4770      	bx	lr
 801a87a:	4770      	bx	lr

0801a87c <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a87c:	b140      	cbz	r0, 801a890 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a87e:	4602      	mov	r2, r0
 801a880:	1a13      	subs	r3, r2, r0
 801a882:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a886:	b29b      	uxth	r3, r3
 801a888:	2900      	cmp	r1, #0
 801a88a:	d1f9      	bne.n	801a880 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a88c:	4618      	mov	r0, r3
 801a88e:	4770      	bx	lr
 801a890:	4603      	mov	r3, r0
 801a892:	e7fb      	b.n	801a88c <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a894 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a894:	b530      	push	{r4, r5, lr}
 801a896:	4604      	mov	r4, r0
 801a898:	b159      	cbz	r1, 801a8b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a89a:	b148      	cbz	r0, 801a8b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a89c:	2300      	movs	r3, #0
 801a89e:	b298      	uxth	r0, r3
 801a8a0:	4282      	cmp	r2, r0
 801a8a2:	d905      	bls.n	801a8b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a8a4:	5ccd      	ldrb	r5, [r1, r3]
 801a8a6:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a8aa:	3301      	adds	r3, #1
 801a8ac:	2d00      	cmp	r5, #0
 801a8ae:	d1f6      	bne.n	801a89e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a8b0:	bd30      	pop	{r4, r5, pc}
 801a8b2:	4608      	mov	r0, r1
 801a8b4:	e7fc      	b.n	801a8b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a8b6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a8b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8b8:	468c      	mov	ip, r1
 801a8ba:	b08b      	sub	sp, #44	; 0x2c
 801a8bc:	2100      	movs	r1, #0
 801a8be:	ae01      	add	r6, sp, #4
 801a8c0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a8c4:	211f      	movs	r1, #31
 801a8c6:	fbb0 f7f3 	udiv	r7, r0, r3
 801a8ca:	fb03 0517 	mls	r5, r3, r7, r0
 801a8ce:	4638      	mov	r0, r7
 801a8d0:	b2ec      	uxtb	r4, r5
 801a8d2:	2d09      	cmp	r5, #9
 801a8d4:	bfd4      	ite	le
 801a8d6:	3430      	addle	r4, #48	; 0x30
 801a8d8:	3457      	addgt	r4, #87	; 0x57
 801a8da:	b2e4      	uxtb	r4, r4
 801a8dc:	558c      	strb	r4, [r1, r6]
 801a8de:	1e4c      	subs	r4, r1, #1
 801a8e0:	b92f      	cbnz	r7, 801a8ee <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a8e2:	4431      	add	r1, r6
 801a8e4:	4660      	mov	r0, ip
 801a8e6:	f7ff ffd5 	bl	801a894 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a8ea:	b00b      	add	sp, #44	; 0x2c
 801a8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8ee:	4621      	mov	r1, r4
 801a8f0:	e7e9      	b.n	801a8c6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a8f2 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a8f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8f4:	4607      	mov	r7, r0
 801a8f6:	b08b      	sub	sp, #44	; 0x2c
 801a8f8:	4608      	mov	r0, r1
 801a8fa:	b341      	cbz	r1, 801a94e <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a8fc:	1e99      	subs	r1, r3, #2
 801a8fe:	290e      	cmp	r1, #14
 801a900:	d825      	bhi.n	801a94e <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a902:	2100      	movs	r1, #0
 801a904:	463c      	mov	r4, r7
 801a906:	261f      	movs	r6, #31
 801a908:	f10d 0c04 	add.w	ip, sp, #4
 801a90c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a910:	1e71      	subs	r1, r6, #1
 801a912:	fb94 fef3 	sdiv	lr, r4, r3
 801a916:	fb03 441e 	mls	r4, r3, lr, r4
 801a91a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a91e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a922:	b2ec      	uxtb	r4, r5
 801a924:	2d09      	cmp	r5, #9
 801a926:	bfd4      	ite	le
 801a928:	3430      	addle	r4, #48	; 0x30
 801a92a:	3457      	addgt	r4, #87	; 0x57
 801a92c:	b2e4      	uxtb	r4, r4
 801a92e:	f80c 4006 	strb.w	r4, [ip, r6]
 801a932:	4674      	mov	r4, lr
 801a934:	b96c      	cbnz	r4, 801a952 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a936:	2f00      	cmp	r7, #0
 801a938:	da05      	bge.n	801a946 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a93a:	ab0a      	add	r3, sp, #40	; 0x28
 801a93c:	4419      	add	r1, r3
 801a93e:	232d      	movs	r3, #45	; 0x2d
 801a940:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a944:	1eb1      	subs	r1, r6, #2
 801a946:	3101      	adds	r1, #1
 801a948:	4461      	add	r1, ip
 801a94a:	f7ff ffa3 	bl	801a894 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a94e:	b00b      	add	sp, #44	; 0x2c
 801a950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a952:	460e      	mov	r6, r1
 801a954:	e7dc      	b.n	801a910 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a956 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801a956:	b510      	push	{r4, lr}
 801a958:	b158      	cbz	r0, 801a972 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a95a:	1e82      	subs	r2, r0, #2
 801a95c:	210a      	movs	r1, #10
 801a95e:	2000      	movs	r0, #0
 801a960:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a964:	3b30      	subs	r3, #48	; 0x30
 801a966:	b29c      	uxth	r4, r3
 801a968:	2c09      	cmp	r4, #9
 801a96a:	d802      	bhi.n	801a972 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a96c:	fb01 3000 	mla	r0, r1, r0, r3
 801a970:	e7f6      	b.n	801a960 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801a972:	bd10      	pop	{r4, pc}

0801a974 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a978:	b085      	sub	sp, #20
 801a97a:	f8d0 8000 	ldr.w	r8, [r0]
 801a97e:	468a      	mov	sl, r1
 801a980:	461c      	mov	r4, r3
 801a982:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a986:	4681      	mov	r9, r0
 801a988:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a98c:	4640      	mov	r0, r8
 801a98e:	9203      	str	r2, [sp, #12]
 801a990:	9102      	str	r1, [sp, #8]
 801a992:	9301      	str	r3, [sp, #4]
 801a994:	f7ff ff65 	bl	801a862 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a998:	9a03      	ldr	r2, [sp, #12]
 801a99a:	f1ba 0f00 	cmp.w	sl, #0
 801a99e:	bf0c      	ite	eq
 801a9a0:	4684      	moveq	ip, r0
 801a9a2:	f100 0c01 	addne.w	ip, r0, #1
 801a9a6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801a9aa:	8812      	ldrh	r2, [r2, #0]
 801a9ac:	fa1f fc8c 	uxth.w	ip, ip
 801a9b0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a9b2:	2a69      	cmp	r2, #105	; 0x69
 801a9b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a9b6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a9b8:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801a9bc:	d004      	beq.n	801a9c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a9be:	d844      	bhi.n	801aa4a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801a9c0:	2a58      	cmp	r2, #88	; 0x58
 801a9c2:	d001      	beq.n	801a9c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a9c4:	2a64      	cmp	r2, #100	; 0x64
 801a9c6:	d14b      	bne.n	801aa60 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a9c8:	b1a4      	cbz	r4, 801a9f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a9ca:	b956      	cbnz	r6, 801a9e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a9cc:	2801      	cmp	r0, #1
 801a9ce:	d108      	bne.n	801a9e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a9d0:	f8b8 2000 	ldrh.w	r2, [r8]
 801a9d4:	2a30      	cmp	r2, #48	; 0x30
 801a9d6:	bf02      	ittt	eq
 801a9d8:	f108 0202 	addeq.w	r2, r8, #2
 801a9dc:	4630      	moveq	r0, r6
 801a9de:	f8c9 2000 	streq.w	r2, [r9]
 801a9e2:	45b4      	cmp	ip, r6
 801a9e4:	da3e      	bge.n	801aa64 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801a9e6:	b2b6      	uxth	r6, r6
 801a9e8:	eba6 040c 	sub.w	r4, r6, ip
 801a9ec:	46b4      	mov	ip, r6
 801a9ee:	b2a4      	uxth	r4, r4
 801a9f0:	f04f 0b00 	mov.w	fp, #0
 801a9f4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a9f8:	3a01      	subs	r2, #1
 801a9fa:	b169      	cbz	r1, 801aa18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a9fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a9fe:	458c      	cmp	ip, r1
 801aa00:	da09      	bge.n	801aa16 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801aa02:	eba1 010c 	sub.w	r1, r1, ip
 801aa06:	b289      	uxth	r1, r1
 801aa08:	b933      	cbnz	r3, 801aa18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aa0a:	f1bb 0f00 	cmp.w	fp, #0
 801aa0e:	d02b      	beq.n	801aa68 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801aa10:	b350      	cbz	r0, 801aa68 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801aa12:	440c      	add	r4, r1
 801aa14:	b2a4      	uxth	r4, r4
 801aa16:	2100      	movs	r1, #0
 801aa18:	682b      	ldr	r3, [r5, #0]
 801aa1a:	4293      	cmp	r3, r2
 801aa1c:	da07      	bge.n	801aa2e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801aa1e:	f1ba 0f00 	cmp.w	sl, #0
 801aa22:	d004      	beq.n	801aa2e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801aa24:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801aa28:	682b      	ldr	r3, [r5, #0]
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	602b      	str	r3, [r5, #0]
 801aa2e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801aa32:	b354      	cbz	r4, 801aa8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aa34:	682e      	ldr	r6, [r5, #0]
 801aa36:	3c01      	subs	r4, #1
 801aa38:	42b2      	cmp	r2, r6
 801aa3a:	b2a4      	uxth	r4, r4
 801aa3c:	dd25      	ble.n	801aa8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aa3e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801aa42:	682b      	ldr	r3, [r5, #0]
 801aa44:	3301      	adds	r3, #1
 801aa46:	602b      	str	r3, [r5, #0]
 801aa48:	e7f3      	b.n	801aa32 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801aa4a:	2a73      	cmp	r2, #115	; 0x73
 801aa4c:	d003      	beq.n	801aa56 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801aa4e:	2a78      	cmp	r2, #120	; 0x78
 801aa50:	d0ba      	beq.n	801a9c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801aa52:	2a6f      	cmp	r2, #111	; 0x6f
 801aa54:	e7b7      	b.n	801a9c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801aa56:	2c00      	cmp	r4, #0
 801aa58:	d0cc      	beq.n	801a9f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801aa5a:	42b0      	cmp	r0, r6
 801aa5c:	dd00      	ble.n	801aa60 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801aa5e:	b2b0      	uxth	r0, r6
 801aa60:	2400      	movs	r4, #0
 801aa62:	e7c7      	b.n	801a9f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801aa64:	2400      	movs	r4, #0
 801aa66:	e7c3      	b.n	801a9f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801aa68:	2900      	cmp	r1, #0
 801aa6a:	d0d5      	beq.n	801aa18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aa6c:	f04f 0c20 	mov.w	ip, #32
 801aa70:	682e      	ldr	r6, [r5, #0]
 801aa72:	2900      	cmp	r1, #0
 801aa74:	d0d0      	beq.n	801aa18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aa76:	3901      	subs	r1, #1
 801aa78:	4296      	cmp	r6, r2
 801aa7a:	b289      	uxth	r1, r1
 801aa7c:	dacb      	bge.n	801aa16 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801aa7e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801aa82:	682b      	ldr	r3, [r5, #0]
 801aa84:	3301      	adds	r3, #1
 801aa86:	602b      	str	r3, [r5, #0]
 801aa88:	e7f2      	b.n	801aa70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801aa8a:	b198      	cbz	r0, 801aab4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aa8c:	f8d9 3000 	ldr.w	r3, [r9]
 801aa90:	881c      	ldrh	r4, [r3, #0]
 801aa92:	b17c      	cbz	r4, 801aab4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aa94:	682c      	ldr	r4, [r5, #0]
 801aa96:	3801      	subs	r0, #1
 801aa98:	42a2      	cmp	r2, r4
 801aa9a:	b280      	uxth	r0, r0
 801aa9c:	dd0a      	ble.n	801aab4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aa9e:	1c9c      	adds	r4, r3, #2
 801aaa0:	f8c9 4000 	str.w	r4, [r9]
 801aaa4:	881c      	ldrh	r4, [r3, #0]
 801aaa6:	682b      	ldr	r3, [r5, #0]
 801aaa8:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801aaac:	682b      	ldr	r3, [r5, #0]
 801aaae:	3301      	adds	r3, #1
 801aab0:	602b      	str	r3, [r5, #0]
 801aab2:	e7ea      	b.n	801aa8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aab4:	2620      	movs	r6, #32
 801aab6:	b151      	cbz	r1, 801aace <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801aab8:	6828      	ldr	r0, [r5, #0]
 801aaba:	3901      	subs	r1, #1
 801aabc:	4282      	cmp	r2, r0
 801aabe:	b289      	uxth	r1, r1
 801aac0:	dd05      	ble.n	801aace <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801aac2:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801aac6:	682b      	ldr	r3, [r5, #0]
 801aac8:	3301      	adds	r3, #1
 801aaca:	602b      	str	r3, [r5, #0]
 801aacc:	e7f3      	b.n	801aab6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801aace:	b005      	add	sp, #20
 801aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aad4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801aada:	4604      	mov	r4, r0
 801aadc:	f04f 0801 	mov.w	r8, #1
 801aae0:	2000      	movs	r0, #0
 801aae2:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801aae6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801aaea:	8008      	strh	r0, [r1, #0]
 801aaec:	7010      	strb	r0, [r2, #0]
 801aaee:	7018      	strb	r0, [r3, #0]
 801aaf0:	f88c 0000 	strb.w	r0, [ip]
 801aaf4:	f88e 0000 	strb.w	r0, [lr]
 801aaf8:	7030      	strb	r0, [r6, #0]
 801aafa:	6820      	ldr	r0, [r4, #0]
 801aafc:	8800      	ldrh	r0, [r0, #0]
 801aafe:	b190      	cbz	r0, 801ab26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801ab00:	282b      	cmp	r0, #43	; 0x2b
 801ab02:	d001      	beq.n	801ab08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801ab04:	2820      	cmp	r0, #32
 801ab06:	d104      	bne.n	801ab12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801ab08:	8008      	strh	r0, [r1, #0]
 801ab0a:	6820      	ldr	r0, [r4, #0]
 801ab0c:	3002      	adds	r0, #2
 801ab0e:	6020      	str	r0, [r4, #0]
 801ab10:	e7f3      	b.n	801aafa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801ab12:	282d      	cmp	r0, #45	; 0x2d
 801ab14:	d102      	bne.n	801ab1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801ab16:	f882 8000 	strb.w	r8, [r2]
 801ab1a:	e7f6      	b.n	801ab0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ab1c:	2823      	cmp	r0, #35	; 0x23
 801ab1e:	d102      	bne.n	801ab26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801ab20:	f883 8000 	strb.w	r8, [r3]
 801ab24:	e7f1      	b.n	801ab0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ab26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ab2a:	2b09      	cmp	r3, #9
 801ab2c:	d901      	bls.n	801ab32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801ab2e:	282a      	cmp	r0, #42	; 0x2a
 801ab30:	d114      	bne.n	801ab5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801ab32:	2201      	movs	r2, #1
 801ab34:	f88e 2000 	strb.w	r2, [lr]
 801ab38:	6823      	ldr	r3, [r4, #0]
 801ab3a:	8819      	ldrh	r1, [r3, #0]
 801ab3c:	2930      	cmp	r1, #48	; 0x30
 801ab3e:	bf02      	ittt	eq
 801ab40:	3302      	addeq	r3, #2
 801ab42:	6023      	streq	r3, [r4, #0]
 801ab44:	f88c 2000 	strbeq.w	r2, [ip]
 801ab48:	6820      	ldr	r0, [r4, #0]
 801ab4a:	8803      	ldrh	r3, [r0, #0]
 801ab4c:	2b2a      	cmp	r3, #42	; 0x2a
 801ab4e:	d11e      	bne.n	801ab8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801ab50:	f04f 33ff 	mov.w	r3, #4294967295
 801ab54:	603b      	str	r3, [r7, #0]
 801ab56:	6823      	ldr	r3, [r4, #0]
 801ab58:	3302      	adds	r3, #2
 801ab5a:	6023      	str	r3, [r4, #0]
 801ab5c:	6823      	ldr	r3, [r4, #0]
 801ab5e:	881b      	ldrh	r3, [r3, #0]
 801ab60:	2b2e      	cmp	r3, #46	; 0x2e
 801ab62:	d112      	bne.n	801ab8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801ab64:	2301      	movs	r3, #1
 801ab66:	7033      	strb	r3, [r6, #0]
 801ab68:	6823      	ldr	r3, [r4, #0]
 801ab6a:	1c98      	adds	r0, r3, #2
 801ab6c:	6020      	str	r0, [r4, #0]
 801ab6e:	885b      	ldrh	r3, [r3, #2]
 801ab70:	2b2a      	cmp	r3, #42	; 0x2a
 801ab72:	d117      	bne.n	801aba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801ab74:	f04f 33ff 	mov.w	r3, #4294967295
 801ab78:	602b      	str	r3, [r5, #0]
 801ab7a:	6823      	ldr	r3, [r4, #0]
 801ab7c:	3302      	adds	r3, #2
 801ab7e:	6023      	str	r3, [r4, #0]
 801ab80:	682b      	ldr	r3, [r5, #0]
 801ab82:	2b06      	cmp	r3, #6
 801ab84:	bfa8      	it	ge
 801ab86:	2306      	movge	r3, #6
 801ab88:	602b      	str	r3, [r5, #0]
 801ab8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab8e:	f7ff fee2 	bl	801a956 <_ZN8touchgfx7Unicode4atoiEPKt>
 801ab92:	6038      	str	r0, [r7, #0]
 801ab94:	6823      	ldr	r3, [r4, #0]
 801ab96:	881a      	ldrh	r2, [r3, #0]
 801ab98:	3a30      	subs	r2, #48	; 0x30
 801ab9a:	2a09      	cmp	r2, #9
 801ab9c:	d8de      	bhi.n	801ab5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801ab9e:	3302      	adds	r3, #2
 801aba0:	6023      	str	r3, [r4, #0]
 801aba2:	e7f7      	b.n	801ab94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801aba4:	f7ff fed7 	bl	801a956 <_ZN8touchgfx7Unicode4atoiEPKt>
 801aba8:	6028      	str	r0, [r5, #0]
 801abaa:	6823      	ldr	r3, [r4, #0]
 801abac:	881a      	ldrh	r2, [r3, #0]
 801abae:	3a30      	subs	r2, #48	; 0x30
 801abb0:	2a09      	cmp	r2, #9
 801abb2:	d8e5      	bhi.n	801ab80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801abb4:	3302      	adds	r3, #2
 801abb6:	6023      	str	r3, [r4, #0]
 801abb8:	e7f7      	b.n	801abaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801abba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801abba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abbe:	b0a2      	sub	sp, #136	; 0x88
 801abc0:	2500      	movs	r5, #0
 801abc2:	4606      	mov	r6, r0
 801abc4:	460f      	mov	r7, r1
 801abc6:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801abca:	9209      	str	r2, [sp, #36]	; 0x24
 801abcc:	4629      	mov	r1, r5
 801abce:	2242      	movs	r2, #66	; 0x42
 801abd0:	4640      	mov	r0, r8
 801abd2:	461c      	mov	r4, r3
 801abd4:	950d      	str	r5, [sp, #52]	; 0x34
 801abd6:	f7fe fb16 	bl	8019206 <_ZN8touchgfx6memsetEPvhm>
 801abda:	b30e      	cbz	r6, 801ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801abdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abde:	b1f3      	cbz	r3, 801ac1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801abe0:	f107 3aff 	add.w	sl, r7, #4294967295
 801abe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801abe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abe8:	8812      	ldrh	r2, [r2, #0]
 801abea:	2a00      	cmp	r2, #0
 801abec:	f000 80b3 	beq.w	801ad56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801abf0:	459a      	cmp	sl, r3
 801abf2:	f340 80b0 	ble.w	801ad56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801abf6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801abfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abfc:	f8b9 2000 	ldrh.w	r2, [r9]
 801ac00:	2a00      	cmp	r2, #0
 801ac02:	d0ef      	beq.n	801abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ac04:	2a25      	cmp	r2, #37	; 0x25
 801ac06:	f000 80aa 	beq.w	801ad5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801ac0a:	459a      	cmp	sl, r3
 801ac0c:	ddea      	ble.n	801abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ac0e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ac12:	f109 0202 	add.w	r2, r9, #2
 801ac16:	3301      	adds	r3, #1
 801ac18:	9209      	str	r2, [sp, #36]	; 0x24
 801ac1a:	930d      	str	r3, [sp, #52]	; 0x34
 801ac1c:	e7eb      	b.n	801abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801ac1e:	8033      	strh	r3, [r6, #0]
 801ac20:	4630      	mov	r0, r6
 801ac22:	b022      	add	sp, #136	; 0x88
 801ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac28:	3b63      	subs	r3, #99	; 0x63
 801ac2a:	2b01      	cmp	r3, #1
 801ac2c:	f200 80df 	bhi.w	801adee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ac30:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ac34:	8813      	ldrh	r3, [r2, #0]
 801ac36:	2b69      	cmp	r3, #105	; 0x69
 801ac38:	d058      	beq.n	801acec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ac3a:	d81b      	bhi.n	801ac74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801ac3c:	2b63      	cmp	r3, #99	; 0x63
 801ac3e:	d02e      	beq.n	801ac9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801ac40:	2b64      	cmp	r3, #100	; 0x64
 801ac42:	d053      	beq.n	801acec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ac44:	2b58      	cmp	r3, #88	; 0x58
 801ac46:	d06f      	beq.n	801ad28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801ac48:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801ac4c:	46a1      	mov	r9, r4
 801ac4e:	e02d      	b.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ac50:	2b73      	cmp	r3, #115	; 0x73
 801ac52:	d0ed      	beq.n	801ac30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac54:	d803      	bhi.n	801ac5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801ac56:	2b6f      	cmp	r3, #111	; 0x6f
 801ac58:	f040 80c9 	bne.w	801adee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ac5c:	e7e8      	b.n	801ac30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac5e:	2b75      	cmp	r3, #117	; 0x75
 801ac60:	d0e6      	beq.n	801ac30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac62:	2b78      	cmp	r3, #120	; 0x78
 801ac64:	e7f8      	b.n	801ac58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801ac66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac68:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ac6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac6e:	3302      	adds	r3, #2
 801ac70:	9309      	str	r3, [sp, #36]	; 0x24
 801ac72:	e7b7      	b.n	801abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ac74:	2b73      	cmp	r3, #115	; 0x73
 801ac76:	d034      	beq.n	801ace2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801ac78:	d807      	bhi.n	801ac8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801ac7a:	2b6f      	cmp	r3, #111	; 0x6f
 801ac7c:	d1e4      	bne.n	801ac48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ac7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac80:	f104 0904 	add.w	r9, r4, #4
 801ac84:	2308      	movs	r3, #8
 801ac86:	1aba      	subs	r2, r7, r2
 801ac88:	e048      	b.n	801ad1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ac8a:	2b75      	cmp	r3, #117	; 0x75
 801ac8c:	d041      	beq.n	801ad12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801ac8e:	2b78      	cmp	r3, #120	; 0x78
 801ac90:	d1da      	bne.n	801ac48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ac92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac94:	f104 0904 	add.w	r9, r4, #4
 801ac98:	2310      	movs	r3, #16
 801ac9a:	1aba      	subs	r2, r7, r2
 801ac9c:	e03e      	b.n	801ad1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ac9e:	7823      	ldrb	r3, [r4, #0]
 801aca0:	f104 0904 	add.w	r9, r4, #4
 801aca4:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801aca8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801acac:	aa0d      	add	r2, sp, #52	; 0x34
 801acae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801acb2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801acb6:	a810      	add	r0, sp, #64	; 0x40
 801acb8:	9205      	str	r2, [sp, #20]
 801acba:	464c      	mov	r4, r9
 801acbc:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801acc0:	9204      	str	r2, [sp, #16]
 801acc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801acc4:	9203      	str	r2, [sp, #12]
 801acc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801acca:	9202      	str	r2, [sp, #8]
 801accc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801acce:	9201      	str	r2, [sp, #4]
 801acd0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801acd4:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801acd8:	9200      	str	r2, [sp, #0]
 801acda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801acdc:	f7ff fe4a 	bl	801a974 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ace0:	e7c4      	b.n	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801ace2:	f104 0904 	add.w	r9, r4, #4
 801ace6:	6823      	ldr	r3, [r4, #0]
 801ace8:	9310      	str	r3, [sp, #64]	; 0x40
 801acea:	e7df      	b.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801acec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801acee:	230a      	movs	r3, #10
 801acf0:	4641      	mov	r1, r8
 801acf2:	6820      	ldr	r0, [r4, #0]
 801acf4:	1aba      	subs	r2, r7, r2
 801acf6:	f104 0904 	add.w	r9, r4, #4
 801acfa:	b292      	uxth	r2, r2
 801acfc:	f7ff fdf9 	bl	801a8f2 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ad00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ad04:	2b2d      	cmp	r3, #45	; 0x2d
 801ad06:	d1d1      	bne.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad08:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ad0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad0e:	3302      	adds	r3, #2
 801ad10:	e7ea      	b.n	801ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801ad12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad14:	f104 0904 	add.w	r9, r4, #4
 801ad18:	230a      	movs	r3, #10
 801ad1a:	1aba      	subs	r2, r7, r2
 801ad1c:	b292      	uxth	r2, r2
 801ad1e:	4641      	mov	r1, r8
 801ad20:	6820      	ldr	r0, [r4, #0]
 801ad22:	f7ff fdc8 	bl	801a8b6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ad26:	e7c1      	b.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad2a:	2310      	movs	r3, #16
 801ad2c:	4641      	mov	r1, r8
 801ad2e:	6820      	ldr	r0, [r4, #0]
 801ad30:	1aba      	subs	r2, r7, r2
 801ad32:	f104 0904 	add.w	r9, r4, #4
 801ad36:	b292      	uxth	r2, r2
 801ad38:	f7ff fdbd 	bl	801a8b6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ad3c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ad40:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d0b1      	beq.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad48:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ad4c:	2919      	cmp	r1, #25
 801ad4e:	d8f7      	bhi.n	801ad40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801ad50:	3b20      	subs	r3, #32
 801ad52:	8013      	strh	r3, [r2, #0]
 801ad54:	e7f4      	b.n	801ad40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801ad56:	2200      	movs	r2, #0
 801ad58:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ad5c:	e760      	b.n	801ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ad5e:	459a      	cmp	sl, r3
 801ad60:	f77f af40 	ble.w	801abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ad64:	f109 0302 	add.w	r3, r9, #2
 801ad68:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801ad6c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801ad70:	a809      	add	r0, sp, #36	; 0x24
 801ad72:	9309      	str	r3, [sp, #36]	; 0x24
 801ad74:	ab0f      	add	r3, sp, #60	; 0x3c
 801ad76:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801ad7a:	9304      	str	r3, [sp, #16]
 801ad7c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ad80:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801ad84:	9303      	str	r3, [sp, #12]
 801ad86:	ab0e      	add	r3, sp, #56	; 0x38
 801ad88:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801ad8c:	9302      	str	r3, [sp, #8]
 801ad8e:	ab0c      	add	r3, sp, #48	; 0x30
 801ad90:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801ad94:	9301      	str	r3, [sp, #4]
 801ad96:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ad9a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801ad9e:	9300      	str	r3, [sp, #0]
 801ada0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ada4:	950e      	str	r5, [sp, #56]	; 0x38
 801ada6:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801adaa:	950f      	str	r5, [sp, #60]	; 0x3c
 801adac:	f7ff fe92 	bl	801aad4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801adb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	bfbf      	itttt	lt
 801adb8:	6823      	ldrlt	r3, [r4, #0]
 801adba:	3404      	addlt	r4, #4
 801adbc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801adc0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801adc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	bfbf      	itttt	lt
 801adc8:	6823      	ldrlt	r3, [r4, #0]
 801adca:	3404      	addlt	r4, #4
 801adcc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801add0:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801add2:	8813      	ldrh	r3, [r2, #0]
 801add4:	2b69      	cmp	r3, #105	; 0x69
 801add6:	f43f af2b 	beq.w	801ac30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801adda:	f63f af39 	bhi.w	801ac50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801adde:	2b58      	cmp	r3, #88	; 0x58
 801ade0:	f43f af26 	beq.w	801ac30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ade4:	f63f af20 	bhi.w	801ac28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801ade8:	2b25      	cmp	r3, #37	; 0x25
 801adea:	f43f af3c 	beq.w	801ac66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801adee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adf0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801adf4:	f8b9 2000 	ldrh.w	r2, [r9]
 801adf8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801adfc:	3301      	adds	r3, #1
 801adfe:	930d      	str	r3, [sp, #52]	; 0x34
 801ae00:	e734      	b.n	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>

0801ae02 <_ZN8touchgfx7Unicode8snprintfEPttPKtz>:
 801ae02:	b40c      	push	{r2, r3}
 801ae04:	b507      	push	{r0, r1, r2, lr}
 801ae06:	ab04      	add	r3, sp, #16
 801ae08:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae0c:	9301      	str	r3, [sp, #4]
 801ae0e:	f7ff fed4 	bl	801abba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801ae12:	b003      	add	sp, #12
 801ae14:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae18:	b002      	add	sp, #8
 801ae1a:	4770      	bx	lr

0801ae1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ae1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae1e:	4605      	mov	r5, r0
 801ae20:	b0a1      	sub	sp, #132	; 0x84
 801ae22:	4610      	mov	r0, r2
 801ae24:	460e      	mov	r6, r1
 801ae26:	4614      	mov	r4, r2
 801ae28:	461f      	mov	r7, r3
 801ae2a:	f7ff fd27 	bl	801a87c <_ZN8touchgfx7Unicode6strlenEPKc>
 801ae2e:	283f      	cmp	r0, #63	; 0x3f
 801ae30:	d906      	bls.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801ae32:	4b0a      	ldr	r3, [pc, #40]	; (801ae5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801ae34:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801ae38:	4a09      	ldr	r2, [pc, #36]	; (801ae60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801ae3a:	480a      	ldr	r0, [pc, #40]	; (801ae64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801ae3c:	f009 fe3a 	bl	8024ab4 <__assert_func>
 801ae40:	4621      	mov	r1, r4
 801ae42:	2240      	movs	r2, #64	; 0x40
 801ae44:	4668      	mov	r0, sp
 801ae46:	f7ff fd25 	bl	801a894 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ae4a:	463b      	mov	r3, r7
 801ae4c:	466a      	mov	r2, sp
 801ae4e:	4631      	mov	r1, r6
 801ae50:	4628      	mov	r0, r5
 801ae52:	f7ff feb2 	bl	801abba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801ae56:	b021      	add	sp, #132	; 0x84
 801ae58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae5a:	bf00      	nop
 801ae5c:	0802a69f 	.word	0x0802a69f
 801ae60:	0802a6e2 	.word	0x0802a6e2
 801ae64:	0802a6bc 	.word	0x0802a6bc

0801ae68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ae68:	b40c      	push	{r2, r3}
 801ae6a:	b507      	push	{r0, r1, r2, lr}
 801ae6c:	ab04      	add	r3, sp, #16
 801ae6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae72:	9301      	str	r3, [sp, #4]
 801ae74:	f7ff ffd2 	bl	801ae1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ae78:	b003      	add	sp, #12
 801ae7a:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae7e:	b002      	add	sp, #8
 801ae80:	4770      	bx	lr
	...

0801ae84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ae84:	4b01      	ldr	r3, [pc, #4]	; (801ae8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ae86:	6018      	str	r0, [r3, #0]
 801ae88:	4770      	bx	lr
 801ae8a:	bf00      	nop
 801ae8c:	2000bb9c 	.word	0x2000bb9c

0801ae90 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ae90:	4b07      	ldr	r3, [pc, #28]	; (801aeb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801ae92:	881a      	ldrh	r2, [r3, #0]
 801ae94:	4282      	cmp	r2, r0
 801ae96:	d809      	bhi.n	801aeac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801ae98:	4b06      	ldr	r3, [pc, #24]	; (801aeb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801ae9a:	881b      	ldrh	r3, [r3, #0]
 801ae9c:	4413      	add	r3, r2
 801ae9e:	4298      	cmp	r0, r3
 801aea0:	da04      	bge.n	801aeac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801aea2:	4b05      	ldr	r3, [pc, #20]	; (801aeb8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801aeaa:	4770      	bx	lr
 801aeac:	2000      	movs	r0, #0
 801aeae:	4770      	bx	lr
 801aeb0:	2000bbbc 	.word	0x2000bbbc
 801aeb4:	2000bbc0 	.word	0x2000bbc0
 801aeb8:	2000bba0 	.word	0x2000bba0

0801aebc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801aebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aec0:	4d26      	ldr	r5, [pc, #152]	; (801af5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801aec2:	682b      	ldr	r3, [r5, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d046      	beq.n	801af56 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801aec8:	4a25      	ldr	r2, [pc, #148]	; (801af60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801aeca:	4f26      	ldr	r7, [pc, #152]	; (801af64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801aecc:	8810      	ldrh	r0, [r2, #0]
 801aece:	883c      	ldrh	r4, [r7, #0]
 801aed0:	4e25      	ldr	r6, [pc, #148]	; (801af68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801aed2:	4420      	add	r0, r4
 801aed4:	1c42      	adds	r2, r0, #1
 801aed6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801aeda:	f022 0201 	bic.w	r2, r2, #1
 801aede:	0412      	lsls	r2, r2, #16
 801aee0:	0c12      	lsrs	r2, r2, #16
 801aee2:	0051      	lsls	r1, r2, #1
 801aee4:	220e      	movs	r2, #14
 801aee6:	eb08 0e01 	add.w	lr, r8, r1
 801aeea:	fb02 fc04 	mul.w	ip, r2, r4
 801aeee:	eb03 0208 	add.w	r2, r3, r8
 801aef2:	4c1e      	ldr	r4, [pc, #120]	; (801af6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801aef4:	6022      	str	r2, [r4, #0]
 801aef6:	eb03 020e 	add.w	r2, r3, lr
 801aefa:	44e6      	add	lr, ip
 801aefc:	6032      	str	r2, [r6, #0]
 801aefe:	4473      	add	r3, lr
 801af00:	4a1b      	ldr	r2, [pc, #108]	; (801af70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801af02:	6013      	str	r3, [r2, #0]
 801af04:	2300      	movs	r3, #0
 801af06:	4a1b      	ldr	r2, [pc, #108]	; (801af74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801af08:	8013      	strh	r3, [r2, #0]
 801af0a:	4a1b      	ldr	r2, [pc, #108]	; (801af78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801af0c:	6812      	ldr	r2, [r2, #0]
 801af0e:	eba2 0208 	sub.w	r2, r2, r8
 801af12:	1a52      	subs	r2, r2, r1
 801af14:	4919      	ldr	r1, [pc, #100]	; (801af7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801af16:	eba2 020c 	sub.w	r2, r2, ip
 801af1a:	469c      	mov	ip, r3
 801af1c:	600a      	str	r2, [r1, #0]
 801af1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801af22:	4a17      	ldr	r2, [pc, #92]	; (801af80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801af24:	8013      	strh	r3, [r2, #0]
 801af26:	4283      	cmp	r3, r0
 801af28:	d10d      	bne.n	801af46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801af2a:	883d      	ldrh	r5, [r7, #0]
 801af2c:	2300      	movs	r3, #0
 801af2e:	6830      	ldr	r0, [r6, #0]
 801af30:	240e      	movs	r4, #14
 801af32:	429d      	cmp	r5, r3
 801af34:	d90f      	bls.n	801af56 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801af36:	fb04 0203 	mla	r2, r4, r3, r0
 801af3a:	3301      	adds	r3, #1
 801af3c:	7b11      	ldrb	r1, [r2, #12]
 801af3e:	f36f 1145 	bfc	r1, #5, #1
 801af42:	7311      	strb	r1, [r2, #12]
 801af44:	e7f5      	b.n	801af32 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801af46:	682a      	ldr	r2, [r5, #0]
 801af48:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801af4c:	6822      	ldr	r2, [r4, #0]
 801af4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801af52:	3301      	adds	r3, #1
 801af54:	e7e7      	b.n	801af26 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801af56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af5a:	bf00      	nop
 801af5c:	2000bba0 	.word	0x2000bba0
 801af60:	2000bbbc 	.word	0x2000bbbc
 801af64:	2000bbc0 	.word	0x2000bbc0
 801af68:	2000bba4 	.word	0x2000bba4
 801af6c:	2000bbb4 	.word	0x2000bbb4
 801af70:	2000bbac 	.word	0x2000bbac
 801af74:	2000bbbe 	.word	0x2000bbbe
 801af78:	2000bba8 	.word	0x2000bba8
 801af7c:	2000bbb8 	.word	0x2000bbb8
 801af80:	2000bbb0 	.word	0x2000bbb0

0801af84 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801af84:	4b10      	ldr	r3, [pc, #64]	; (801afc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801af86:	b510      	push	{r4, lr}
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	b9db      	cbnz	r3, 801afc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801af8c:	b1d1      	cbz	r1, 801afc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801af8e:	4b0f      	ldr	r3, [pc, #60]	; (801afcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801af90:	240e      	movs	r4, #14
 801af92:	801a      	strh	r2, [r3, #0]
 801af94:	b292      	uxth	r2, r2
 801af96:	4b0e      	ldr	r3, [pc, #56]	; (801afd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801af98:	881b      	ldrh	r3, [r3, #0]
 801af9a:	4413      	add	r3, r2
 801af9c:	4362      	muls	r2, r4
 801af9e:	2406      	movs	r4, #6
 801afa0:	fb04 2203 	mla	r2, r4, r3, r2
 801afa4:	428a      	cmp	r2, r1
 801afa6:	d305      	bcc.n	801afb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801afa8:	4b0a      	ldr	r3, [pc, #40]	; (801afd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801afaa:	2137      	movs	r1, #55	; 0x37
 801afac:	4a0a      	ldr	r2, [pc, #40]	; (801afd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801afae:	480b      	ldr	r0, [pc, #44]	; (801afdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801afb0:	f009 fd80 	bl	8024ab4 <__assert_func>
 801afb4:	4b0a      	ldr	r3, [pc, #40]	; (801afe0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801afb6:	6019      	str	r1, [r3, #0]
 801afb8:	4b0a      	ldr	r3, [pc, #40]	; (801afe4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801afba:	6018      	str	r0, [r3, #0]
 801afbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afc0:	f7ff bf7c 	b.w	801aebc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801afc4:	bd10      	pop	{r4, pc}
 801afc6:	bf00      	nop
 801afc8:	2000bbac 	.word	0x2000bbac
 801afcc:	2000bbc0 	.word	0x2000bbc0
 801afd0:	2000bbbc 	.word	0x2000bbbc
 801afd4:	0802a7c4 	.word	0x0802a7c4
 801afd8:	0802a81d 	.word	0x0802a81d
 801afdc:	0802a79f 	.word	0x0802a79f
 801afe0:	2000bba8 	.word	0x2000bba8
 801afe4:	2000bba0 	.word	0x2000bba0

0801afe8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801afe8:	b470      	push	{r4, r5, r6}
 801afea:	4c07      	ldr	r4, [pc, #28]	; (801b008 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801afec:	4605      	mov	r5, r0
 801afee:	4610      	mov	r0, r2
 801aff0:	9a03      	ldr	r2, [sp, #12]
 801aff2:	6826      	ldr	r6, [r4, #0]
 801aff4:	b936      	cbnz	r6, 801b004 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801aff6:	6025      	str	r5, [r4, #0]
 801aff8:	4c04      	ldr	r4, [pc, #16]	; (801b00c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801affa:	8021      	strh	r1, [r4, #0]
 801affc:	4619      	mov	r1, r3
 801affe:	bc70      	pop	{r4, r5, r6}
 801b000:	f7ff bfc0 	b.w	801af84 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b004:	bc70      	pop	{r4, r5, r6}
 801b006:	4770      	bx	lr
 801b008:	2000bbc4 	.word	0x2000bbc4
 801b00c:	2000bbbc 	.word	0x2000bbbc

0801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b010:	b508      	push	{r3, lr}
 801b012:	4b14      	ldr	r3, [pc, #80]	; (801b064 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b014:	6819      	ldr	r1, [r3, #0]
 801b016:	b931      	cbnz	r1, 801b026 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b018:	4b13      	ldr	r3, [pc, #76]	; (801b068 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b01a:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b01e:	4a13      	ldr	r2, [pc, #76]	; (801b06c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b020:	4813      	ldr	r0, [pc, #76]	; (801b070 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b022:	f009 fd47 	bl	8024ab4 <__assert_func>
 801b026:	4a13      	ldr	r2, [pc, #76]	; (801b074 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b028:	8803      	ldrh	r3, [r0, #0]
 801b02a:	8812      	ldrh	r2, [r2, #0]
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d204      	bcs.n	801b03a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b030:	2214      	movs	r2, #20
 801b032:	fb02 1303 	mla	r3, r2, r3, r1
 801b036:	8918      	ldrh	r0, [r3, #8]
 801b038:	bd08      	pop	{r3, pc}
 801b03a:	490f      	ldr	r1, [pc, #60]	; (801b078 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b03c:	8809      	ldrh	r1, [r1, #0]
 801b03e:	4411      	add	r1, r2
 801b040:	428b      	cmp	r3, r1
 801b042:	da06      	bge.n	801b052 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b044:	1a9b      	subs	r3, r3, r2
 801b046:	4a0d      	ldr	r2, [pc, #52]	; (801b07c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b048:	210e      	movs	r1, #14
 801b04a:	6812      	ldr	r2, [r2, #0]
 801b04c:	fb01 2303 	mla	r3, r1, r3, r2
 801b050:	e7f1      	b.n	801b036 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b052:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b056:	4293      	cmp	r3, r2
 801b058:	bf0a      	itet	eq
 801b05a:	4b09      	ldreq	r3, [pc, #36]	; (801b080 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b05c:	2000      	movne	r0, #0
 801b05e:	8818      	ldrheq	r0, [r3, #0]
 801b060:	e7ea      	b.n	801b038 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b062:	bf00      	nop
 801b064:	2000bbc4 	.word	0x2000bbc4
 801b068:	08028a3c 	.word	0x08028a3c
 801b06c:	0802a8ca 	.word	0x0802a8ca
 801b070:	0802a79f 	.word	0x0802a79f
 801b074:	2000bbbc 	.word	0x2000bbbc
 801b078:	2000bbc0 	.word	0x2000bbc0
 801b07c:	2000bba4 	.word	0x2000bba4
 801b080:	2000baf0 	.word	0x2000baf0

0801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b084:	b508      	push	{r3, lr}
 801b086:	4b14      	ldr	r3, [pc, #80]	; (801b0d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b088:	6819      	ldr	r1, [r3, #0]
 801b08a:	b931      	cbnz	r1, 801b09a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b08c:	4b13      	ldr	r3, [pc, #76]	; (801b0dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b08e:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b092:	4a13      	ldr	r2, [pc, #76]	; (801b0e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b094:	4813      	ldr	r0, [pc, #76]	; (801b0e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b096:	f009 fd0d 	bl	8024ab4 <__assert_func>
 801b09a:	4a13      	ldr	r2, [pc, #76]	; (801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b09c:	8803      	ldrh	r3, [r0, #0]
 801b09e:	8812      	ldrh	r2, [r2, #0]
 801b0a0:	4293      	cmp	r3, r2
 801b0a2:	d204      	bcs.n	801b0ae <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b0a4:	2214      	movs	r2, #20
 801b0a6:	fb02 1303 	mla	r3, r2, r3, r1
 801b0aa:	8958      	ldrh	r0, [r3, #10]
 801b0ac:	bd08      	pop	{r3, pc}
 801b0ae:	490f      	ldr	r1, [pc, #60]	; (801b0ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b0b0:	8809      	ldrh	r1, [r1, #0]
 801b0b2:	4411      	add	r1, r2
 801b0b4:	428b      	cmp	r3, r1
 801b0b6:	da06      	bge.n	801b0c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b0b8:	1a9b      	subs	r3, r3, r2
 801b0ba:	4a0d      	ldr	r2, [pc, #52]	; (801b0f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b0bc:	210e      	movs	r1, #14
 801b0be:	6812      	ldr	r2, [r2, #0]
 801b0c0:	fb01 2303 	mla	r3, r1, r3, r2
 801b0c4:	e7f1      	b.n	801b0aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b0c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b0ca:	4293      	cmp	r3, r2
 801b0cc:	bf0a      	itet	eq
 801b0ce:	4b09      	ldreq	r3, [pc, #36]	; (801b0f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b0d0:	2000      	movne	r0, #0
 801b0d2:	8818      	ldrheq	r0, [r3, #0]
 801b0d4:	e7ea      	b.n	801b0ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b0d6:	bf00      	nop
 801b0d8:	2000bbc4 	.word	0x2000bbc4
 801b0dc:	08028a3c 	.word	0x08028a3c
 801b0e0:	0802a8f6 	.word	0x0802a8f6
 801b0e4:	0802a79f 	.word	0x0802a79f
 801b0e8:	2000bbbc 	.word	0x2000bbbc
 801b0ec:	2000bbc0 	.word	0x2000bbc0
 801b0f0:	2000bba4 	.word	0x2000bba4
 801b0f4:	2000baf2 	.word	0x2000baf2

0801b0f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b0f8:	4b23      	ldr	r3, [pc, #140]	; (801b188 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b0fa:	b510      	push	{r4, lr}
 801b0fc:	681c      	ldr	r4, [r3, #0]
 801b0fe:	b934      	cbnz	r4, 801b10e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b100:	4b22      	ldr	r3, [pc, #136]	; (801b18c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b102:	f240 310e 	movw	r1, #782	; 0x30e
 801b106:	4a22      	ldr	r2, [pc, #136]	; (801b190 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b108:	4822      	ldr	r0, [pc, #136]	; (801b194 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b10a:	f009 fcd3 	bl	8024ab4 <__assert_func>
 801b10e:	4a22      	ldr	r2, [pc, #136]	; (801b198 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b110:	880b      	ldrh	r3, [r1, #0]
 801b112:	8812      	ldrh	r2, [r2, #0]
 801b114:	4293      	cmp	r3, r2
 801b116:	d211      	bcs.n	801b13c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b118:	2214      	movs	r2, #20
 801b11a:	fb02 4303 	mla	r3, r2, r3, r4
 801b11e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b122:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b126:	8a1a      	ldrh	r2, [r3, #16]
 801b128:	8a5b      	ldrh	r3, [r3, #18]
 801b12a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b12e:	8004      	strh	r4, [r0, #0]
 801b130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b134:	8041      	strh	r1, [r0, #2]
 801b136:	8082      	strh	r2, [r0, #4]
 801b138:	80c3      	strh	r3, [r0, #6]
 801b13a:	e00e      	b.n	801b15a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b13c:	4917      	ldr	r1, [pc, #92]	; (801b19c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b13e:	8809      	ldrh	r1, [r1, #0]
 801b140:	4411      	add	r1, r2
 801b142:	428b      	cmp	r3, r1
 801b144:	da0a      	bge.n	801b15c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b146:	1a9b      	subs	r3, r3, r2
 801b148:	4a15      	ldr	r2, [pc, #84]	; (801b1a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b14a:	210e      	movs	r1, #14
 801b14c:	6812      	ldr	r2, [r2, #0]
 801b14e:	fb01 2303 	mla	r3, r1, r3, r2
 801b152:	681a      	ldr	r2, [r3, #0]
 801b154:	6002      	str	r2, [r0, #0]
 801b156:	685a      	ldr	r2, [r3, #4]
 801b158:	6042      	str	r2, [r0, #4]
 801b15a:	bd10      	pop	{r4, pc}
 801b15c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b160:	4293      	cmp	r3, r2
 801b162:	d10b      	bne.n	801b17c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b164:	4b0f      	ldr	r3, [pc, #60]	; (801b1a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b166:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b16a:	4b0f      	ldr	r3, [pc, #60]	; (801b1a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b16c:	8081      	strh	r1, [r0, #4]
 801b16e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b172:	2300      	movs	r3, #0
 801b174:	80c2      	strh	r2, [r0, #6]
 801b176:	8003      	strh	r3, [r0, #0]
 801b178:	8043      	strh	r3, [r0, #2]
 801b17a:	e7ee      	b.n	801b15a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b17c:	2300      	movs	r3, #0
 801b17e:	8003      	strh	r3, [r0, #0]
 801b180:	8043      	strh	r3, [r0, #2]
 801b182:	8083      	strh	r3, [r0, #4]
 801b184:	e7d8      	b.n	801b138 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b186:	bf00      	nop
 801b188:	2000bbc4 	.word	0x2000bbc4
 801b18c:	08028a3c 	.word	0x08028a3c
 801b190:	0802a863 	.word	0x0802a863
 801b194:	0802a79f 	.word	0x0802a79f
 801b198:	2000bbbc 	.word	0x2000bbbc
 801b19c:	2000bbc0 	.word	0x2000bbc0
 801b1a0:	2000bba4 	.word	0x2000bba4
 801b1a4:	2000baf0 	.word	0x2000baf0
 801b1a8:	2000baf2 	.word	0x2000baf2

0801b1ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b1ac:	4b18      	ldr	r3, [pc, #96]	; (801b210 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	b34b      	cbz	r3, 801b206 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b1b2:	4a18      	ldr	r2, [pc, #96]	; (801b214 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b1b4:	8800      	ldrh	r0, [r0, #0]
 801b1b6:	8812      	ldrh	r2, [r2, #0]
 801b1b8:	4290      	cmp	r0, r2
 801b1ba:	d211      	bcs.n	801b1e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b1bc:	2214      	movs	r2, #20
 801b1be:	fb02 3300 	mla	r3, r2, r0, r3
 801b1c2:	8a1a      	ldrh	r2, [r3, #16]
 801b1c4:	8919      	ldrh	r1, [r3, #8]
 801b1c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b1ca:	428a      	cmp	r2, r1
 801b1cc:	db1d      	blt.n	801b20a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b1ce:	8a58      	ldrh	r0, [r3, #18]
 801b1d0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b1d4:	895b      	ldrh	r3, [r3, #10]
 801b1d6:	4298      	cmp	r0, r3
 801b1d8:	bfac      	ite	ge
 801b1da:	2000      	movge	r0, #0
 801b1dc:	2001      	movlt	r0, #1
 801b1de:	4770      	bx	lr
 801b1e0:	4b0d      	ldr	r3, [pc, #52]	; (801b218 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b1e2:	881b      	ldrh	r3, [r3, #0]
 801b1e4:	4413      	add	r3, r2
 801b1e6:	4298      	cmp	r0, r3
 801b1e8:	da0d      	bge.n	801b206 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b1ea:	4b0c      	ldr	r3, [pc, #48]	; (801b21c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b1ec:	1a80      	subs	r0, r0, r2
 801b1ee:	220e      	movs	r2, #14
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	fb02 3300 	mla	r3, r2, r0, r3
 801b1f6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b1fa:	891a      	ldrh	r2, [r3, #8]
 801b1fc:	4291      	cmp	r1, r2
 801b1fe:	db04      	blt.n	801b20a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b200:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b204:	e7e6      	b.n	801b1d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b206:	2000      	movs	r0, #0
 801b208:	4770      	bx	lr
 801b20a:	2001      	movs	r0, #1
 801b20c:	4770      	bx	lr
 801b20e:	bf00      	nop
 801b210:	2000bbc4 	.word	0x2000bbc4
 801b214:	2000bbbc 	.word	0x2000bbbc
 801b218:	2000bbc0 	.word	0x2000bbc0
 801b21c:	2000bba4 	.word	0x2000bba4

0801b220 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b220:	b508      	push	{r3, lr}
 801b222:	4b12      	ldr	r3, [pc, #72]	; (801b26c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b224:	6819      	ldr	r1, [r3, #0]
 801b226:	b931      	cbnz	r1, 801b236 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b228:	4b11      	ldr	r3, [pc, #68]	; (801b270 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b22a:	f240 3132 	movw	r1, #818	; 0x332
 801b22e:	4a11      	ldr	r2, [pc, #68]	; (801b274 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b230:	4811      	ldr	r0, [pc, #68]	; (801b278 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b232:	f009 fc3f 	bl	8024ab4 <__assert_func>
 801b236:	8803      	ldrh	r3, [r0, #0]
 801b238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b23c:	4293      	cmp	r3, r2
 801b23e:	d012      	beq.n	801b266 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b240:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b244:	4293      	cmp	r3, r2
 801b246:	d103      	bne.n	801b250 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b248:	4b0c      	ldr	r3, [pc, #48]	; (801b27c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b24e:	bd08      	pop	{r3, pc}
 801b250:	4a0b      	ldr	r2, [pc, #44]	; (801b280 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b252:	6812      	ldr	r2, [r2, #0]
 801b254:	b11a      	cbz	r2, 801b25e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b256:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b25a:	2800      	cmp	r0, #0
 801b25c:	d1f7      	bne.n	801b24e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b25e:	2214      	movs	r2, #20
 801b260:	4353      	muls	r3, r2
 801b262:	58c8      	ldr	r0, [r1, r3]
 801b264:	e7f3      	b.n	801b24e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b266:	2000      	movs	r0, #0
 801b268:	e7f1      	b.n	801b24e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b26a:	bf00      	nop
 801b26c:	2000bbc4 	.word	0x2000bbc4
 801b270:	08028a3c 	.word	0x08028a3c
 801b274:	0802a899 	.word	0x0802a899
 801b278:	0802a79f 	.word	0x0802a79f
 801b27c:	2000bafc 	.word	0x2000bafc
 801b280:	2000bba0 	.word	0x2000bba0

0801b284 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b284:	8802      	ldrh	r2, [r0, #0]
 801b286:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d840      	bhi.n	801b310 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b28e:	4b21      	ldr	r3, [pc, #132]	; (801b314 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801b290:	881b      	ldrh	r3, [r3, #0]
 801b292:	429a      	cmp	r2, r3
 801b294:	d220      	bcs.n	801b2d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801b296:	4b20      	ldr	r3, [pc, #128]	; (801b318 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b298:	6819      	ldr	r1, [r3, #0]
 801b29a:	2314      	movs	r3, #20
 801b29c:	fb03 1302 	mla	r3, r3, r2, r1
 801b2a0:	6858      	ldr	r0, [r3, #4]
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d035      	beq.n	801b312 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b2a6:	491d      	ldr	r1, [pc, #116]	; (801b31c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b2a8:	6809      	ldr	r1, [r1, #0]
 801b2aa:	2900      	cmp	r1, #0
 801b2ac:	d031      	beq.n	801b312 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b2ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b2b2:	b371      	cbz	r1, 801b312 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b2b4:	895a      	ldrh	r2, [r3, #10]
 801b2b6:	8918      	ldrh	r0, [r3, #8]
 801b2b8:	4350      	muls	r0, r2
 801b2ba:	7c5a      	ldrb	r2, [r3, #17]
 801b2bc:	7cdb      	ldrb	r3, [r3, #19]
 801b2be:	0952      	lsrs	r2, r2, #5
 801b2c0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b2c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b2c8:	2b0b      	cmp	r3, #11
 801b2ca:	bf18      	it	ne
 801b2cc:	0040      	lslne	r0, r0, #1
 801b2ce:	3003      	adds	r0, #3
 801b2d0:	f020 0003 	bic.w	r0, r0, #3
 801b2d4:	4408      	add	r0, r1
 801b2d6:	4770      	bx	lr
 801b2d8:	4911      	ldr	r1, [pc, #68]	; (801b320 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b2da:	8809      	ldrh	r1, [r1, #0]
 801b2dc:	4419      	add	r1, r3
 801b2de:	428a      	cmp	r2, r1
 801b2e0:	da16      	bge.n	801b310 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b2e2:	4910      	ldr	r1, [pc, #64]	; (801b324 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b2e4:	1ad3      	subs	r3, r2, r3
 801b2e6:	200e      	movs	r0, #14
 801b2e8:	6809      	ldr	r1, [r1, #0]
 801b2ea:	fb00 1303 	mla	r3, r0, r3, r1
 801b2ee:	7b19      	ldrb	r1, [r3, #12]
 801b2f0:	f001 011f 	and.w	r1, r1, #31
 801b2f4:	290b      	cmp	r1, #11
 801b2f6:	d10b      	bne.n	801b310 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b2f8:	8919      	ldrh	r1, [r3, #8]
 801b2fa:	8958      	ldrh	r0, [r3, #10]
 801b2fc:	4b07      	ldr	r3, [pc, #28]	; (801b31c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b2fe:	4348      	muls	r0, r1
 801b300:	6819      	ldr	r1, [r3, #0]
 801b302:	3003      	adds	r0, #3
 801b304:	f020 0303 	bic.w	r3, r0, #3
 801b308:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b30c:	4418      	add	r0, r3
 801b30e:	4770      	bx	lr
 801b310:	2000      	movs	r0, #0
 801b312:	4770      	bx	lr
 801b314:	2000bbbc 	.word	0x2000bbbc
 801b318:	2000bbc4 	.word	0x2000bbc4
 801b31c:	2000bba0 	.word	0x2000bba0
 801b320:	2000bbc0 	.word	0x2000bbc0
 801b324:	2000bba4 	.word	0x2000bba4

0801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b328:	4b19      	ldr	r3, [pc, #100]	; (801b390 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b32a:	6819      	ldr	r1, [r3, #0]
 801b32c:	8803      	ldrh	r3, [r0, #0]
 801b32e:	b1e9      	cbz	r1, 801b36c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b330:	4a18      	ldr	r2, [pc, #96]	; (801b394 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b332:	8812      	ldrh	r2, [r2, #0]
 801b334:	429a      	cmp	r2, r3
 801b336:	d90a      	bls.n	801b34e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b338:	2214      	movs	r2, #20
 801b33a:	fb02 1303 	mla	r3, r2, r3, r1
 801b33e:	7c58      	ldrb	r0, [r3, #17]
 801b340:	0942      	lsrs	r2, r0, #5
 801b342:	7cd8      	ldrb	r0, [r3, #19]
 801b344:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b348:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b34c:	4770      	bx	lr
 801b34e:	4912      	ldr	r1, [pc, #72]	; (801b398 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b350:	8809      	ldrh	r1, [r1, #0]
 801b352:	4411      	add	r1, r2
 801b354:	428b      	cmp	r3, r1
 801b356:	da09      	bge.n	801b36c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b358:	1a9b      	subs	r3, r3, r2
 801b35a:	4a10      	ldr	r2, [pc, #64]	; (801b39c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b35c:	210e      	movs	r1, #14
 801b35e:	6812      	ldr	r2, [r2, #0]
 801b360:	fb01 2303 	mla	r3, r1, r3, r2
 801b364:	7b18      	ldrb	r0, [r3, #12]
 801b366:	f000 001f 	and.w	r0, r0, #31
 801b36a:	4770      	bx	lr
 801b36c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b370:	4293      	cmp	r3, r2
 801b372:	d10a      	bne.n	801b38a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b374:	4b0a      	ldr	r3, [pc, #40]	; (801b3a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b37c:	b10a      	cbz	r2, 801b382 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b37e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b380:	b900      	cbnz	r0, 801b384 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b382:	6898      	ldr	r0, [r3, #8]
 801b384:	6803      	ldr	r3, [r0, #0]
 801b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b388:	4718      	bx	r3
 801b38a:	2000      	movs	r0, #0
 801b38c:	4770      	bx	lr
 801b38e:	bf00      	nop
 801b390:	2000bbc4 	.word	0x2000bbc4
 801b394:	2000bbbc 	.word	0x2000bbbc
 801b398:	2000bbc0 	.word	0x2000bbc0
 801b39c:	2000bba4 	.word	0x2000bba4
 801b3a0:	2000bafc 	.word	0x2000bafc

0801b3a4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b3a4:	2018      	movs	r0, #24
 801b3a6:	4770      	bx	lr

0801b3a8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b3a8:	2001      	movs	r0, #1
 801b3aa:	4770      	bx	lr

0801b3ac <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801b3ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b3b0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801b3b4:	4770      	bx	lr

0801b3b6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801b3b6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801b3ba:	4770      	bx	lr

0801b3bc <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801b3bc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801b3c0:	4770      	bx	lr

0801b3c2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801b3c2:	b2c8      	uxtb	r0, r1
 801b3c4:	4770      	bx	lr

0801b3c6 <_ZN8touchgfx8LCD24bpp4initEv>:
 801b3c6:	4770      	bx	lr

0801b3c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3cc:	b085      	sub	sp, #20
 801b3ce:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b3d0:	9203      	str	r2, [sp, #12]
 801b3d2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	9201      	str	r2, [sp, #4]
 801b3da:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801b3dc:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801b3e0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801b3e4:	fa1f fc84 	uxth.w	ip, r4
 801b3e8:	43e4      	mvns	r4, r4
 801b3ea:	9100      	str	r1, [sp, #0]
 801b3ec:	b2e4      	uxtb	r4, r4
 801b3ee:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b3f2:	fb00 2505 	mla	r5, r0, r5, r2
 801b3f6:	683a      	ldr	r2, [r7, #0]
 801b3f8:	6877      	ldr	r7, [r6, #4]
 801b3fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3fe:	3704      	adds	r7, #4
 801b400:	4415      	add	r5, r2
 801b402:	6832      	ldr	r2, [r6, #0]
 801b404:	9202      	str	r2, [sp, #8]
 801b406:	9a00      	ldr	r2, [sp, #0]
 801b408:	2a00      	cmp	r2, #0
 801b40a:	dc03      	bgt.n	801b414 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b40c:	9a03      	ldr	r2, [sp, #12]
 801b40e:	2a00      	cmp	r2, #0
 801b410:	f340 8116 	ble.w	801b640 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b414:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b416:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b41a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b41c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b420:	2b00      	cmp	r3, #0
 801b422:	dd0f      	ble.n	801b444 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b424:	1406      	asrs	r6, r0, #16
 801b426:	d406      	bmi.n	801b436 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b428:	4546      	cmp	r6, r8
 801b42a:	da04      	bge.n	801b436 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b42c:	1416      	asrs	r6, r2, #16
 801b42e:	d402      	bmi.n	801b436 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b430:	9901      	ldr	r1, [sp, #4]
 801b432:	428e      	cmp	r6, r1
 801b434:	db07      	blt.n	801b446 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b436:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b438:	3b01      	subs	r3, #1
 801b43a:	3503      	adds	r5, #3
 801b43c:	4408      	add	r0, r1
 801b43e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b440:	440a      	add	r2, r1
 801b442:	e7ed      	b.n	801b420 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b444:	d011      	beq.n	801b46a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b446:	1e5e      	subs	r6, r3, #1
 801b448:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b44a:	fb01 0e06 	mla	lr, r1, r6, r0
 801b44e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b452:	d548      	bpl.n	801b4e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801b454:	4699      	mov	r9, r3
 801b456:	462e      	mov	r6, r5
 801b458:	f1b9 0f00 	cmp.w	r9, #0
 801b45c:	f300 809e 	bgt.w	801b59c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801b460:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b464:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b468:	441d      	add	r5, r3
 801b46a:	9b00      	ldr	r3, [sp, #0]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	f340 80e7 	ble.w	801b640 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b478:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b47c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b480:	eef0 6a62 	vmov.f32	s13, s5
 801b484:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b488:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b48c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b490:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b494:	eef0 6a43 	vmov.f32	s13, s6
 801b498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b49c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b4a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b4a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b4ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b4b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b4b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b4b8:	ee12 2a90 	vmov	r2, s5
 801b4bc:	eef0 2a47 	vmov.f32	s5, s14
 801b4c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4c4:	ee13 2a10 	vmov	r2, s6
 801b4c8:	9311      	str	r3, [sp, #68]	; 0x44
 801b4ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4cc:	eeb0 3a67 	vmov.f32	s6, s15
 801b4d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4d4:	9312      	str	r3, [sp, #72]	; 0x48
 801b4d6:	9b00      	ldr	r3, [sp, #0]
 801b4d8:	9a03      	ldr	r2, [sp, #12]
 801b4da:	3b01      	subs	r3, #1
 801b4dc:	9300      	str	r3, [sp, #0]
 801b4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4e0:	bf08      	it	eq
 801b4e2:	4613      	moveq	r3, r2
 801b4e4:	e78f      	b.n	801b406 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b4e6:	45c6      	cmp	lr, r8
 801b4e8:	dab4      	bge.n	801b454 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b4ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b4ec:	fb01 2606 	mla	r6, r1, r6, r2
 801b4f0:	1436      	asrs	r6, r6, #16
 801b4f2:	d4af      	bmi.n	801b454 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b4f4:	9901      	ldr	r1, [sp, #4]
 801b4f6:	428e      	cmp	r6, r1
 801b4f8:	daac      	bge.n	801b454 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b4fa:	1cee      	adds	r6, r5, #3
 801b4fc:	4699      	mov	r9, r3
 801b4fe:	f1b9 0f00 	cmp.w	r9, #0
 801b502:	f106 0603 	add.w	r6, r6, #3
 801b506:	ddab      	ble.n	801b460 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b508:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b50c:	9902      	ldr	r1, [sp, #8]
 801b50e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b512:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b516:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b51a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b51c:	fb1b fb04 	smulbb	fp, fp, r4
 801b520:	f109 39ff 	add.w	r9, r9, #4294967295
 801b524:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b528:	4408      	add	r0, r1
 801b52a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b52c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b530:	440a      	add	r2, r1
 801b532:	eb07 0a0e 	add.w	sl, r7, lr
 801b536:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b53a:	fb0e be0c 	mla	lr, lr, ip, fp
 801b53e:	fa1f fe8e 	uxth.w	lr, lr
 801b542:	f10e 0b01 	add.w	fp, lr, #1
 801b546:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b54a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b54e:	fb1b fb04 	smulbb	fp, fp, r4
 801b552:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b556:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b55a:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b55e:	fb0e be0c 	mla	lr, lr, ip, fp
 801b562:	fa1f fe8e 	uxth.w	lr, lr
 801b566:	f10e 0b01 	add.w	fp, lr, #1
 801b56a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b56e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b572:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b576:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b57a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b57e:	fb1a fa04 	smulbb	sl, sl, r4
 801b582:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b586:	fa1f fe8e 	uxth.w	lr, lr
 801b58a:	f10e 0a01 	add.w	sl, lr, #1
 801b58e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b592:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b596:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b59a:	e7b0      	b.n	801b4fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b59c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b5a0:	d446      	bmi.n	801b630 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b5a2:	45c2      	cmp	sl, r8
 801b5a4:	da44      	bge.n	801b630 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b5a6:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b5aa:	d441      	bmi.n	801b630 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b5ac:	9901      	ldr	r1, [sp, #4]
 801b5ae:	458e      	cmp	lr, r1
 801b5b0:	da3e      	bge.n	801b630 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b5b2:	9902      	ldr	r1, [sp, #8]
 801b5b4:	f896 b000 	ldrb.w	fp, [r6]
 801b5b8:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b5bc:	fb1b fb04 	smulbb	fp, fp, r4
 801b5c0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b5c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b5c8:	eb07 0a0e 	add.w	sl, r7, lr
 801b5cc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b5d0:	fb0e be0c 	mla	lr, lr, ip, fp
 801b5d4:	fa1f fe8e 	uxth.w	lr, lr
 801b5d8:	f10e 0b01 	add.w	fp, lr, #1
 801b5dc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b5e0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b5e4:	fb1b fb04 	smulbb	fp, fp, r4
 801b5e8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b5ec:	f886 e000 	strb.w	lr, [r6]
 801b5f0:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b5f4:	fb0e be0c 	mla	lr, lr, ip, fp
 801b5f8:	fa1f fe8e 	uxth.w	lr, lr
 801b5fc:	f10e 0b01 	add.w	fp, lr, #1
 801b600:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b604:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b608:	f886 e001 	strb.w	lr, [r6, #1]
 801b60c:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b610:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b614:	fb1a fa04 	smulbb	sl, sl, r4
 801b618:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b61c:	fa1f fe8e 	uxth.w	lr, lr
 801b620:	f10e 0a01 	add.w	sl, lr, #1
 801b624:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b628:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b62c:	f886 e002 	strb.w	lr, [r6, #2]
 801b630:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b632:	3603      	adds	r6, #3
 801b634:	f109 39ff 	add.w	r9, r9, #4294967295
 801b638:	4408      	add	r0, r1
 801b63a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b63c:	440a      	add	r2, r1
 801b63e:	e70b      	b.n	801b458 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b640:	b005      	add	sp, #20
 801b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b646 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b646:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b64a:	b085      	sub	sp, #20
 801b64c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b650:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b652:	9203      	str	r2, [sp, #12]
 801b654:	6870      	ldr	r0, [r6, #4]
 801b656:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b658:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b65c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b660:	9101      	str	r1, [sp, #4]
 801b662:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b666:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b66a:	fb00 2404 	mla	r4, r0, r4, r2
 801b66e:	6832      	ldr	r2, [r6, #0]
 801b670:	686e      	ldr	r6, [r5, #4]
 801b672:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b676:	3604      	adds	r6, #4
 801b678:	4414      	add	r4, r2
 801b67a:	682a      	ldr	r2, [r5, #0]
 801b67c:	9202      	str	r2, [sp, #8]
 801b67e:	9a01      	ldr	r2, [sp, #4]
 801b680:	2a00      	cmp	r2, #0
 801b682:	dc03      	bgt.n	801b68c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b684:	9a03      	ldr	r2, [sp, #12]
 801b686:	2a00      	cmp	r2, #0
 801b688:	f340 80b2 	ble.w	801b7f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b68c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b68e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b692:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b694:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b698:	2b00      	cmp	r3, #0
 801b69a:	dd0c      	ble.n	801b6b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b69c:	1405      	asrs	r5, r0, #16
 801b69e:	d405      	bmi.n	801b6ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b6a0:	4575      	cmp	r5, lr
 801b6a2:	da03      	bge.n	801b6ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b6a4:	1415      	asrs	r5, r2, #16
 801b6a6:	d401      	bmi.n	801b6ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b6a8:	4545      	cmp	r5, r8
 801b6aa:	db05      	blt.n	801b6b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b6ac:	4460      	add	r0, ip
 801b6ae:	443a      	add	r2, r7
 801b6b0:	3b01      	subs	r3, #1
 801b6b2:	3403      	adds	r4, #3
 801b6b4:	e7f0      	b.n	801b698 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b6b6:	d03d      	beq.n	801b734 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b6b8:	1e5d      	subs	r5, r3, #1
 801b6ba:	fb0c 0905 	mla	r9, ip, r5, r0
 801b6be:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b6c2:	d42c      	bmi.n	801b71e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b6c4:	45f1      	cmp	r9, lr
 801b6c6:	da2a      	bge.n	801b71e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b6c8:	fb07 2505 	mla	r5, r7, r5, r2
 801b6cc:	142d      	asrs	r5, r5, #16
 801b6ce:	d426      	bmi.n	801b71e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b6d0:	4545      	cmp	r5, r8
 801b6d2:	da24      	bge.n	801b71e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b6d4:	1ce5      	adds	r5, r4, #3
 801b6d6:	469a      	mov	sl, r3
 801b6d8:	f1ba 0f00 	cmp.w	sl, #0
 801b6dc:	f105 0503 	add.w	r5, r5, #3
 801b6e0:	dd23      	ble.n	801b72a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b6e2:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b6e6:	9902      	ldr	r1, [sp, #8]
 801b6e8:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b6ec:	443a      	add	r2, r7
 801b6ee:	fb0e 1909 	mla	r9, lr, r9, r1
 801b6f2:	4460      	add	r0, ip
 801b6f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6f8:	f819 900b 	ldrb.w	r9, [r9, fp]
 801b6fc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b700:	eb06 0b09 	add.w	fp, r6, r9
 801b704:	f816 9009 	ldrb.w	r9, [r6, r9]
 801b708:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b70c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b710:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b714:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b718:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b71c:	e7dc      	b.n	801b6d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b71e:	2500      	movs	r5, #0
 801b720:	eba3 0905 	sub.w	r9, r3, r5
 801b724:	f1b9 0f00 	cmp.w	r9, #0
 801b728:	dc3c      	bgt.n	801b7a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801b72a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b72e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b732:	441c      	add	r4, r3
 801b734:	9b01      	ldr	r3, [sp, #4]
 801b736:	2b00      	cmp	r3, #0
 801b738:	dd5a      	ble.n	801b7f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b73a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b740:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b744:	eeb0 6a62 	vmov.f32	s12, s5
 801b748:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b74c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b750:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b754:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b758:	eeb0 6a43 	vmov.f32	s12, s6
 801b75c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b760:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b764:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b768:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b76c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b770:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b774:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b778:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b77c:	ee12 2a90 	vmov	r2, s5
 801b780:	eef0 2a47 	vmov.f32	s5, s14
 801b784:	fb92 fcf3 	sdiv	ip, r2, r3
 801b788:	ee13 2a10 	vmov	r2, s6
 801b78c:	eeb0 3a67 	vmov.f32	s6, s15
 801b790:	fb92 f7f3 	sdiv	r7, r2, r3
 801b794:	9b01      	ldr	r3, [sp, #4]
 801b796:	9a03      	ldr	r2, [sp, #12]
 801b798:	3b01      	subs	r3, #1
 801b79a:	9301      	str	r3, [sp, #4]
 801b79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b79e:	bf08      	it	eq
 801b7a0:	4613      	moveq	r3, r2
 801b7a2:	e76c      	b.n	801b67e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801b7a4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b7a8:	d41e      	bmi.n	801b7e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b7aa:	45f2      	cmp	sl, lr
 801b7ac:	da1c      	bge.n	801b7e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b7ae:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b7b2:	d419      	bmi.n	801b7e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b7b4:	45c1      	cmp	r9, r8
 801b7b6:	da17      	bge.n	801b7e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b7b8:	9902      	ldr	r1, [sp, #8]
 801b7ba:	fb0e 1909 	mla	r9, lr, r9, r1
 801b7be:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b7c2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b7c6:	f816 b009 	ldrb.w	fp, [r6, r9]
 801b7ca:	eb06 0a09 	add.w	sl, r6, r9
 801b7ce:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801b7d2:	f804 b009 	strb.w	fp, [r4, r9]
 801b7d6:	44a1      	add	r9, r4
 801b7d8:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b7dc:	f889 b001 	strb.w	fp, [r9, #1]
 801b7e0:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b7e4:	f889 a002 	strb.w	sl, [r9, #2]
 801b7e8:	4460      	add	r0, ip
 801b7ea:	443a      	add	r2, r7
 801b7ec:	3501      	adds	r5, #1
 801b7ee:	e797      	b.n	801b720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801b7f0:	b005      	add	sp, #20
 801b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b7f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7fa:	b087      	sub	sp, #28
 801b7fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b800:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b802:	9204      	str	r2, [sp, #16]
 801b804:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b808:	6870      	ldr	r0, [r6, #4]
 801b80a:	9205      	str	r2, [sp, #20]
 801b80c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b80e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801b812:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801b816:	9101      	str	r1, [sp, #4]
 801b818:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b81c:	fb00 2505 	mla	r5, r0, r5, r2
 801b820:	6832      	ldr	r2, [r6, #0]
 801b822:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b826:	4415      	add	r5, r2
 801b828:	6822      	ldr	r2, [r4, #0]
 801b82a:	9202      	str	r2, [sp, #8]
 801b82c:	6862      	ldr	r2, [r4, #4]
 801b82e:	3204      	adds	r2, #4
 801b830:	9203      	str	r2, [sp, #12]
 801b832:	9a01      	ldr	r2, [sp, #4]
 801b834:	2a00      	cmp	r2, #0
 801b836:	dc03      	bgt.n	801b840 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b838:	9a04      	ldr	r2, [sp, #16]
 801b83a:	2a00      	cmp	r2, #0
 801b83c:	f340 8124 	ble.w	801ba88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b840:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b842:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b846:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b848:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	dd0e      	ble.n	801b86e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b850:	1422      	asrs	r2, r4, #16
 801b852:	d405      	bmi.n	801b860 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b854:	4572      	cmp	r2, lr
 801b856:	da03      	bge.n	801b860 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b858:	1402      	asrs	r2, r0, #16
 801b85a:	d401      	bmi.n	801b860 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b85c:	4542      	cmp	r2, r8
 801b85e:	db07      	blt.n	801b870 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b862:	3b01      	subs	r3, #1
 801b864:	3503      	adds	r5, #3
 801b866:	4414      	add	r4, r2
 801b868:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b86a:	4410      	add	r0, r2
 801b86c:	e7ee      	b.n	801b84c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801b86e:	d010      	beq.n	801b892 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b870:	1e5a      	subs	r2, r3, #1
 801b872:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b874:	fb06 4602 	mla	r6, r6, r2, r4
 801b878:	1436      	asrs	r6, r6, #16
 801b87a:	d546      	bpl.n	801b90a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801b87c:	4699      	mov	r9, r3
 801b87e:	462f      	mov	r7, r5
 801b880:	f1b9 0f00 	cmp.w	r9, #0
 801b884:	f300 80a5 	bgt.w	801b9d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b888:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b88c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b890:	441d      	add	r5, r3
 801b892:	9b01      	ldr	r3, [sp, #4]
 801b894:	2b00      	cmp	r3, #0
 801b896:	f340 80f7 	ble.w	801ba88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b89a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8a4:	eeb0 6a62 	vmov.f32	s12, s5
 801b8a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8b4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b8b8:	eeb0 6a43 	vmov.f32	s12, s6
 801b8bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8c0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b8c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8dc:	ee12 2a90 	vmov	r2, s5
 801b8e0:	eef0 2a47 	vmov.f32	s5, s14
 801b8e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8e8:	ee13 2a10 	vmov	r2, s6
 801b8ec:	9313      	str	r3, [sp, #76]	; 0x4c
 801b8ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8f0:	eeb0 3a67 	vmov.f32	s6, s15
 801b8f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8f8:	9314      	str	r3, [sp, #80]	; 0x50
 801b8fa:	9b01      	ldr	r3, [sp, #4]
 801b8fc:	9a04      	ldr	r2, [sp, #16]
 801b8fe:	3b01      	subs	r3, #1
 801b900:	9301      	str	r3, [sp, #4]
 801b902:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b904:	bf08      	it	eq
 801b906:	4613      	moveq	r3, r2
 801b908:	e793      	b.n	801b832 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b90a:	4576      	cmp	r6, lr
 801b90c:	dab6      	bge.n	801b87c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b90e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b910:	fb06 0202 	mla	r2, r6, r2, r0
 801b914:	1412      	asrs	r2, r2, #16
 801b916:	d4b1      	bmi.n	801b87c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b918:	4542      	cmp	r2, r8
 801b91a:	daaf      	bge.n	801b87c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801b91c:	1cef      	adds	r7, r5, #3
 801b91e:	4699      	mov	r9, r3
 801b920:	f1b9 0f00 	cmp.w	r9, #0
 801b924:	ddb0      	ble.n	801b888 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b926:	9902      	ldr	r1, [sp, #8]
 801b928:	1402      	asrs	r2, r0, #16
 801b92a:	1426      	asrs	r6, r4, #16
 801b92c:	fb0e 1202 	mla	r2, lr, r2, r1
 801b930:	9903      	ldr	r1, [sp, #12]
 801b932:	5d92      	ldrb	r2, [r2, r6]
 801b934:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b938:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b93c:	d041      	beq.n	801b9c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801b93e:	9a05      	ldr	r2, [sp, #20]
 801b940:	fa5f fb86 	uxtb.w	fp, r6
 801b944:	fb02 fc0c 	mul.w	ip, r2, ip
 801b948:	f10c 0201 	add.w	r2, ip, #1
 801b94c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b950:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801b954:	1212      	asrs	r2, r2, #8
 801b956:	fa1f fa82 	uxth.w	sl, r2
 801b95a:	43d2      	mvns	r2, r2
 801b95c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b960:	b2d2      	uxtb	r2, r2
 801b962:	fb0c bc02 	mla	ip, ip, r2, fp
 801b966:	fa1f fc8c 	uxth.w	ip, ip
 801b96a:	f10c 0b01 	add.w	fp, ip, #1
 801b96e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b972:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b976:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b97a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b97e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b982:	fb16 fa0a 	smulbb	sl, r6, sl
 801b986:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b98a:	f807 cc03 	strb.w	ip, [r7, #-3]
 801b98e:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801b992:	fb06 aa02 	mla	sl, r6, r2, sl
 801b996:	fb0c bc02 	mla	ip, ip, r2, fp
 801b99a:	fa1f fa8a 	uxth.w	sl, sl
 801b99e:	fa1f fc8c 	uxth.w	ip, ip
 801b9a2:	f10a 0601 	add.w	r6, sl, #1
 801b9a6:	f10c 0b01 	add.w	fp, ip, #1
 801b9aa:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b9ae:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b9b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b9b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b9ba:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b9be:	f807 cc02 	strb.w	ip, [r7, #-2]
 801b9c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9c4:	3703      	adds	r7, #3
 801b9c6:	f109 39ff 	add.w	r9, r9, #4294967295
 801b9ca:	4414      	add	r4, r2
 801b9cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9ce:	4410      	add	r0, r2
 801b9d0:	e7a6      	b.n	801b920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b9d2:	1426      	asrs	r6, r4, #16
 801b9d4:	d450      	bmi.n	801ba78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b9d6:	4576      	cmp	r6, lr
 801b9d8:	da4e      	bge.n	801ba78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b9da:	1402      	asrs	r2, r0, #16
 801b9dc:	d44c      	bmi.n	801ba78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b9de:	4542      	cmp	r2, r8
 801b9e0:	da4a      	bge.n	801ba78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b9e2:	9902      	ldr	r1, [sp, #8]
 801b9e4:	fb0e 1202 	mla	r2, lr, r2, r1
 801b9e8:	9903      	ldr	r1, [sp, #12]
 801b9ea:	5d92      	ldrb	r2, [r2, r6]
 801b9ec:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801b9f0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b9f4:	d040      	beq.n	801ba78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801b9f6:	9a05      	ldr	r2, [sp, #20]
 801b9f8:	fa5f fb86 	uxtb.w	fp, r6
 801b9fc:	fb02 fc0c 	mul.w	ip, r2, ip
 801ba00:	f10c 0201 	add.w	r2, ip, #1
 801ba04:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ba08:	f897 c000 	ldrb.w	ip, [r7]
 801ba0c:	1212      	asrs	r2, r2, #8
 801ba0e:	fa1f fa82 	uxth.w	sl, r2
 801ba12:	43d2      	mvns	r2, r2
 801ba14:	fb1b fb0a 	smulbb	fp, fp, sl
 801ba18:	b2d2      	uxtb	r2, r2
 801ba1a:	fb0c bc02 	mla	ip, ip, r2, fp
 801ba1e:	fa1f fc8c 	uxth.w	ip, ip
 801ba22:	f10c 0b01 	add.w	fp, ip, #1
 801ba26:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ba2a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ba2e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ba32:	fb1b fb0a 	smulbb	fp, fp, sl
 801ba36:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ba3a:	fb16 fa0a 	smulbb	sl, r6, sl
 801ba3e:	78be      	ldrb	r6, [r7, #2]
 801ba40:	f887 c000 	strb.w	ip, [r7]
 801ba44:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ba48:	fb06 aa02 	mla	sl, r6, r2, sl
 801ba4c:	fb0c bc02 	mla	ip, ip, r2, fp
 801ba50:	fa1f fa8a 	uxth.w	sl, sl
 801ba54:	fa1f fc8c 	uxth.w	ip, ip
 801ba58:	f10a 0601 	add.w	r6, sl, #1
 801ba5c:	f10c 0b01 	add.w	fp, ip, #1
 801ba60:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ba64:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ba68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ba6c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ba70:	f887 a002 	strb.w	sl, [r7, #2]
 801ba74:	f887 c001 	strb.w	ip, [r7, #1]
 801ba78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba7a:	3703      	adds	r7, #3
 801ba7c:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba80:	4414      	add	r4, r2
 801ba82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba84:	4410      	add	r0, r2
 801ba86:	e6fb      	b.n	801b880 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ba88:	b007      	add	sp, #28
 801ba8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba8e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ba8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba92:	b085      	sub	sp, #20
 801ba94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba98:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba9a:	9203      	str	r2, [sp, #12]
 801ba9c:	6870      	ldr	r0, [r6, #4]
 801ba9e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801baa0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801baa4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801baa8:	9100      	str	r1, [sp, #0]
 801baaa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801baae:	fb00 2404 	mla	r4, r0, r4, r2
 801bab2:	6832      	ldr	r2, [r6, #0]
 801bab4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bab8:	4414      	add	r4, r2
 801baba:	682a      	ldr	r2, [r5, #0]
 801babc:	9201      	str	r2, [sp, #4]
 801babe:	686a      	ldr	r2, [r5, #4]
 801bac0:	3204      	adds	r2, #4
 801bac2:	9202      	str	r2, [sp, #8]
 801bac4:	9a00      	ldr	r2, [sp, #0]
 801bac6:	2a00      	cmp	r2, #0
 801bac8:	dc03      	bgt.n	801bad2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801baca:	9a03      	ldr	r2, [sp, #12]
 801bacc:	2a00      	cmp	r2, #0
 801bace:	f340 8131 	ble.w	801bd34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bad4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bad8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bada:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bade:	2b00      	cmp	r3, #0
 801bae0:	dd0e      	ble.n	801bb00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bae2:	1405      	asrs	r5, r0, #16
 801bae4:	d405      	bmi.n	801baf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bae6:	4575      	cmp	r5, lr
 801bae8:	da03      	bge.n	801baf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801baea:	1415      	asrs	r5, r2, #16
 801baec:	d401      	bmi.n	801baf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801baee:	4545      	cmp	r5, r8
 801baf0:	db07      	blt.n	801bb02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801baf2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801baf4:	3b01      	subs	r3, #1
 801baf6:	3403      	adds	r4, #3
 801baf8:	4428      	add	r0, r5
 801bafa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bafc:	442a      	add	r2, r5
 801bafe:	e7ee      	b.n	801bade <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801bb00:	d06f      	beq.n	801bbe2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801bb02:	1e5d      	subs	r5, r3, #1
 801bb04:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bb06:	fb06 0605 	mla	r6, r6, r5, r0
 801bb0a:	1436      	asrs	r6, r6, #16
 801bb0c:	d460      	bmi.n	801bbd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bb0e:	4576      	cmp	r6, lr
 801bb10:	da5e      	bge.n	801bbd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bb12:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bb14:	fb06 2505 	mla	r5, r6, r5, r2
 801bb18:	142d      	asrs	r5, r5, #16
 801bb1a:	d459      	bmi.n	801bbd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bb1c:	4545      	cmp	r5, r8
 801bb1e:	da57      	bge.n	801bbd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bb20:	1ce5      	adds	r5, r4, #3
 801bb22:	469a      	mov	sl, r3
 801bb24:	f1ba 0f00 	cmp.w	sl, #0
 801bb28:	dd56      	ble.n	801bbd8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801bb2a:	9901      	ldr	r1, [sp, #4]
 801bb2c:	1416      	asrs	r6, r2, #16
 801bb2e:	1407      	asrs	r7, r0, #16
 801bb30:	fb0e 1606 	mla	r6, lr, r6, r1
 801bb34:	9902      	ldr	r1, [sp, #8]
 801bb36:	5df6      	ldrb	r6, [r6, r7]
 801bb38:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801bb3c:	0e37      	lsrs	r7, r6, #24
 801bb3e:	2fff      	cmp	r7, #255	; 0xff
 801bb40:	f000 80ef 	beq.w	801bd22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801bb44:	fa5f fc87 	uxtb.w	ip, r7
 801bb48:	b3d7      	cbz	r7, 801bbc0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bb4a:	fa1f f78c 	uxth.w	r7, ip
 801bb4e:	ea6f 0c0c 	mvn.w	ip, ip
 801bb52:	fa5f fb86 	uxtb.w	fp, r6
 801bb56:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bb5a:	fa5f fc8c 	uxtb.w	ip, ip
 801bb5e:	fb1b fb07 	smulbb	fp, fp, r7
 801bb62:	fb09 b90c 	mla	r9, r9, ip, fp
 801bb66:	fa1f f989 	uxth.w	r9, r9
 801bb6a:	f109 0b01 	add.w	fp, r9, #1
 801bb6e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb72:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bb76:	fb1b fb0c 	smulbb	fp, fp, ip
 801bb7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb7e:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bb82:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bb86:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bb8a:	fb09 b907 	mla	r9, r9, r7, fp
 801bb8e:	fa1f f989 	uxth.w	r9, r9
 801bb92:	f109 0b01 	add.w	fp, r9, #1
 801bb96:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb9e:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bba2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bba6:	fb19 fc0c 	smulbb	ip, r9, ip
 801bbaa:	fb06 c607 	mla	r6, r6, r7, ip
 801bbae:	b2b6      	uxth	r6, r6
 801bbb0:	f106 0c01 	add.w	ip, r6, #1
 801bbb4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801bbb8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbbc:	f805 cc01 	strb.w	ip, [r5, #-1]
 801bbc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bbc2:	3503      	adds	r5, #3
 801bbc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bbc8:	4408      	add	r0, r1
 801bbca:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bbcc:	440a      	add	r2, r1
 801bbce:	e7a9      	b.n	801bb24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bbd0:	2600      	movs	r6, #0
 801bbd2:	1b9d      	subs	r5, r3, r6
 801bbd4:	2d00      	cmp	r5, #0
 801bbd6:	dc40      	bgt.n	801bc5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bbd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bbdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbe0:	441c      	add	r4, r3
 801bbe2:	9b00      	ldr	r3, [sp, #0]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	f340 80a5 	ble.w	801bd34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bbea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bbee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbf0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bbf4:	eeb0 6a62 	vmov.f32	s12, s5
 801bbf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bbfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bc08:	eeb0 6a43 	vmov.f32	s12, s6
 801bc0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bc14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc2c:	ee12 2a90 	vmov	r2, s5
 801bc30:	eef0 2a47 	vmov.f32	s5, s14
 801bc34:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc38:	ee13 2a10 	vmov	r2, s6
 801bc3c:	9311      	str	r3, [sp, #68]	; 0x44
 801bc3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc40:	eeb0 3a67 	vmov.f32	s6, s15
 801bc44:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc48:	9312      	str	r3, [sp, #72]	; 0x48
 801bc4a:	9b00      	ldr	r3, [sp, #0]
 801bc4c:	9a03      	ldr	r2, [sp, #12]
 801bc4e:	3b01      	subs	r3, #1
 801bc50:	9300      	str	r3, [sp, #0]
 801bc52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc54:	bf08      	it	eq
 801bc56:	4613      	moveq	r3, r2
 801bc58:	e734      	b.n	801bac4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801bc5a:	1407      	asrs	r7, r0, #16
 801bc5c:	d450      	bmi.n	801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bc5e:	4577      	cmp	r7, lr
 801bc60:	da4e      	bge.n	801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bc62:	1415      	asrs	r5, r2, #16
 801bc64:	d44c      	bmi.n	801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bc66:	4545      	cmp	r5, r8
 801bc68:	da4a      	bge.n	801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bc6a:	9901      	ldr	r1, [sp, #4]
 801bc6c:	fb0e 1505 	mla	r5, lr, r5, r1
 801bc70:	9902      	ldr	r1, [sp, #8]
 801bc72:	5ded      	ldrb	r5, [r5, r7]
 801bc74:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801bc78:	0e2f      	lsrs	r7, r5, #24
 801bc7a:	2fff      	cmp	r7, #255	; 0xff
 801bc7c:	d046      	beq.n	801bd0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801bc7e:	fa5f f987 	uxtb.w	r9, r7
 801bc82:	b3ef      	cbz	r7, 801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bc84:	fa1f fc89 	uxth.w	ip, r9
 801bc88:	ea6f 0909 	mvn.w	r9, r9
 801bc8c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bc90:	fa5f fb85 	uxtb.w	fp, r5
 801bc94:	f814 a007 	ldrb.w	sl, [r4, r7]
 801bc98:	fa5f f989 	uxtb.w	r9, r9
 801bc9c:	fb1b fb0c 	smulbb	fp, fp, ip
 801bca0:	fb0a ba09 	mla	sl, sl, r9, fp
 801bca4:	fa1f fa8a 	uxth.w	sl, sl
 801bca8:	f10a 0b01 	add.w	fp, sl, #1
 801bcac:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bcb0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bcb4:	f804 a007 	strb.w	sl, [r4, r7]
 801bcb8:	4427      	add	r7, r4
 801bcba:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bcbe:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801bcc2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bcc6:	fb1b fb09 	smulbb	fp, fp, r9
 801bcca:	fb0a ba0c 	mla	sl, sl, ip, fp
 801bcce:	fa1f fa8a 	uxth.w	sl, sl
 801bcd2:	f10a 0b01 	add.w	fp, sl, #1
 801bcd6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bcda:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bcde:	f887 a001 	strb.w	sl, [r7, #1]
 801bce2:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bce6:	fb1a f909 	smulbb	r9, sl, r9
 801bcea:	fb05 950c 	mla	r5, r5, ip, r9
 801bcee:	b2ad      	uxth	r5, r5
 801bcf0:	f105 0901 	add.w	r9, r5, #1
 801bcf4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801bcf8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcfc:	f887 9002 	strb.w	r9, [r7, #2]
 801bd00:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd02:	3601      	adds	r6, #1
 801bd04:	4408      	add	r0, r1
 801bd06:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bd08:	440a      	add	r2, r1
 801bd0a:	e762      	b.n	801bbd2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801bd0c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bd10:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801bd14:	55e5      	strb	r5, [r4, r7]
 801bd16:	4427      	add	r7, r4
 801bd18:	0c2d      	lsrs	r5, r5, #16
 801bd1a:	f887 c001 	strb.w	ip, [r7, #1]
 801bd1e:	70bd      	strb	r5, [r7, #2]
 801bd20:	e7ee      	b.n	801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bd22:	0a37      	lsrs	r7, r6, #8
 801bd24:	f805 6c03 	strb.w	r6, [r5, #-3]
 801bd28:	0c36      	lsrs	r6, r6, #16
 801bd2a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bd2e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bd32:	e745      	b.n	801bbc0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bd34:	b005      	add	sp, #20
 801bd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd3a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bd3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bd40:	9201      	str	r2, [sp, #4]
 801bd42:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801bd46:	6870      	ldr	r0, [r6, #4]
 801bd48:	9200      	str	r2, [sp, #0]
 801bd4a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801bd4e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801bd52:	fa1f fc85 	uxth.w	ip, r5
 801bd56:	43ed      	mvns	r5, r5
 801bd58:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bd5c:	b2ed      	uxtb	r5, r5
 801bd5e:	fb00 2404 	mla	r4, r0, r4, r2
 801bd62:	6832      	ldr	r2, [r6, #0]
 801bd64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd68:	4414      	add	r4, r2
 801bd6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bd6c:	f8d2 8000 	ldr.w	r8, [r2]
 801bd70:	2900      	cmp	r1, #0
 801bd72:	dc03      	bgt.n	801bd7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801bd74:	9a01      	ldr	r2, [sp, #4]
 801bd76:	2a00      	cmp	r2, #0
 801bd78:	f340 8104 	ble.w	801bf84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801bd7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bd82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	dd0f      	ble.n	801bdac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bd8c:	1406      	asrs	r6, r0, #16
 801bd8e:	d406      	bmi.n	801bd9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bd90:	4576      	cmp	r6, lr
 801bd92:	da04      	bge.n	801bd9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bd94:	1416      	asrs	r6, r2, #16
 801bd96:	d402      	bmi.n	801bd9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bd98:	9f00      	ldr	r7, [sp, #0]
 801bd9a:	42be      	cmp	r6, r7
 801bd9c:	db07      	blt.n	801bdae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bd9e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bda0:	3b01      	subs	r3, #1
 801bda2:	3403      	adds	r4, #3
 801bda4:	4430      	add	r0, r6
 801bda6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bda8:	4432      	add	r2, r6
 801bdaa:	e7ed      	b.n	801bd88 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801bdac:	d05f      	beq.n	801be6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801bdae:	1e5e      	subs	r6, r3, #1
 801bdb0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bdb2:	fb07 0706 	mla	r7, r7, r6, r0
 801bdb6:	143f      	asrs	r7, r7, #16
 801bdb8:	d450      	bmi.n	801be5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bdba:	4577      	cmp	r7, lr
 801bdbc:	da4e      	bge.n	801be5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bdbe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bdc0:	fb07 2606 	mla	r6, r7, r6, r2
 801bdc4:	1436      	asrs	r6, r6, #16
 801bdc6:	d449      	bmi.n	801be5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bdc8:	9f00      	ldr	r7, [sp, #0]
 801bdca:	42be      	cmp	r6, r7
 801bdcc:	da46      	bge.n	801be5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bdce:	1ce6      	adds	r6, r4, #3
 801bdd0:	4699      	mov	r9, r3
 801bdd2:	f1b9 0f00 	cmp.w	r9, #0
 801bdd6:	f106 0603 	add.w	r6, r6, #3
 801bdda:	dd43      	ble.n	801be64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bddc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bde0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bde4:	1417      	asrs	r7, r2, #16
 801bde6:	f109 39ff 	add.w	r9, r9, #4294967295
 801bdea:	fb1b fb05 	smulbb	fp, fp, r5
 801bdee:	fb0e a707 	mla	r7, lr, r7, sl
 801bdf2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bdf6:	eb08 0a07 	add.w	sl, r8, r7
 801bdfa:	f818 7007 	ldrb.w	r7, [r8, r7]
 801bdfe:	fb07 b70c 	mla	r7, r7, ip, fp
 801be02:	b2bf      	uxth	r7, r7
 801be04:	f107 0b01 	add.w	fp, r7, #1
 801be08:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801be0c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801be10:	fb1b fb05 	smulbb	fp, fp, r5
 801be14:	123f      	asrs	r7, r7, #8
 801be16:	f806 7c06 	strb.w	r7, [r6, #-6]
 801be1a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801be1e:	fb07 b70c 	mla	r7, r7, ip, fp
 801be22:	b2bf      	uxth	r7, r7
 801be24:	f107 0b01 	add.w	fp, r7, #1
 801be28:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801be2c:	123f      	asrs	r7, r7, #8
 801be2e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801be32:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801be36:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801be3a:	fb1a fa05 	smulbb	sl, sl, r5
 801be3e:	fb07 a70c 	mla	r7, r7, ip, sl
 801be42:	b2bf      	uxth	r7, r7
 801be44:	f107 0a01 	add.w	sl, r7, #1
 801be48:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801be4c:	123f      	asrs	r7, r7, #8
 801be4e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801be52:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801be54:	4438      	add	r0, r7
 801be56:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801be58:	443a      	add	r2, r7
 801be5a:	e7ba      	b.n	801bdd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801be5c:	2700      	movs	r7, #0
 801be5e:	1bde      	subs	r6, r3, r7
 801be60:	2e00      	cmp	r6, #0
 801be62:	dc3f      	bgt.n	801bee4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801be64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be6c:	441c      	add	r4, r3
 801be6e:	2900      	cmp	r1, #0
 801be70:	f340 8088 	ble.w	801bf84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801be74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be7e:	3901      	subs	r1, #1
 801be80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be84:	eef0 6a62 	vmov.f32	s13, s5
 801be88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801be8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be94:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801be98:	eef0 6a43 	vmov.f32	s13, s6
 801be9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bea0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801bea4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bea8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801beac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801beb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801beb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801beb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bebc:	ee12 2a90 	vmov	r2, s5
 801bec0:	eef0 2a47 	vmov.f32	s5, s14
 801bec4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bec8:	ee13 2a10 	vmov	r2, s6
 801becc:	930f      	str	r3, [sp, #60]	; 0x3c
 801bece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bed0:	eeb0 3a67 	vmov.f32	s6, s15
 801bed4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bed8:	9a01      	ldr	r2, [sp, #4]
 801beda:	9310      	str	r3, [sp, #64]	; 0x40
 801bedc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bede:	bf08      	it	eq
 801bee0:	4613      	moveq	r3, r2
 801bee2:	e745      	b.n	801bd70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801bee4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bee8:	d446      	bmi.n	801bf78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801beea:	45f2      	cmp	sl, lr
 801beec:	da44      	bge.n	801bf78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801beee:	ea5f 4922 	movs.w	r9, r2, asr #16
 801bef2:	d441      	bmi.n	801bf78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801bef4:	9e00      	ldr	r6, [sp, #0]
 801bef6:	45b1      	cmp	r9, r6
 801bef8:	da3e      	bge.n	801bf78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801befa:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801befe:	fb0e a909 	mla	r9, lr, r9, sl
 801bf02:	f814 b006 	ldrb.w	fp, [r4, r6]
 801bf06:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bf0a:	fb1b fb05 	smulbb	fp, fp, r5
 801bf0e:	eb08 0a09 	add.w	sl, r8, r9
 801bf12:	f818 9009 	ldrb.w	r9, [r8, r9]
 801bf16:	fb09 b90c 	mla	r9, r9, ip, fp
 801bf1a:	fa1f f989 	uxth.w	r9, r9
 801bf1e:	f109 0b01 	add.w	fp, r9, #1
 801bf22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf26:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf2a:	f804 9006 	strb.w	r9, [r4, r6]
 801bf2e:	4426      	add	r6, r4
 801bf30:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801bf34:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bf38:	fb1b fb05 	smulbb	fp, fp, r5
 801bf3c:	fb09 b90c 	mla	r9, r9, ip, fp
 801bf40:	fa1f f989 	uxth.w	r9, r9
 801bf44:	f109 0b01 	add.w	fp, r9, #1
 801bf48:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf50:	f886 9001 	strb.w	r9, [r6, #1]
 801bf54:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801bf58:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bf5c:	fb1a fa05 	smulbb	sl, sl, r5
 801bf60:	fb09 a90c 	mla	r9, r9, ip, sl
 801bf64:	fa1f f989 	uxth.w	r9, r9
 801bf68:	f109 0a01 	add.w	sl, r9, #1
 801bf6c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801bf70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf74:	f886 9002 	strb.w	r9, [r6, #2]
 801bf78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bf7a:	3701      	adds	r7, #1
 801bf7c:	4430      	add	r0, r6
 801bf7e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bf80:	4432      	add	r2, r6
 801bf82:	e76c      	b.n	801be5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801bf84:	b003      	add	sp, #12
 801bf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bf8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bf90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf94:	9201      	str	r2, [sp, #4]
 801bf96:	6868      	ldr	r0, [r5, #4]
 801bf98:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801bf9c:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801bfa0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bfa4:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801bfa8:	fb00 2404 	mla	r4, r0, r4, r2
 801bfac:	682a      	ldr	r2, [r5, #0]
 801bfae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bfb2:	4414      	add	r4, r2
 801bfb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bfb6:	f8d2 9000 	ldr.w	r9, [r2]
 801bfba:	2900      	cmp	r1, #0
 801bfbc:	dc03      	bgt.n	801bfc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bfbe:	9a01      	ldr	r2, [sp, #4]
 801bfc0:	2a00      	cmp	r2, #0
 801bfc2:	f340 80a8 	ble.w	801c116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801bfc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bfc8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bfcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bfce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	dd0c      	ble.n	801bff0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bfd6:	1405      	asrs	r5, r0, #16
 801bfd8:	d405      	bmi.n	801bfe6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bfda:	4565      	cmp	r5, ip
 801bfdc:	da03      	bge.n	801bfe6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bfde:	1415      	asrs	r5, r2, #16
 801bfe0:	d401      	bmi.n	801bfe6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801bfe2:	4575      	cmp	r5, lr
 801bfe4:	db05      	blt.n	801bff2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801bfe6:	4438      	add	r0, r7
 801bfe8:	4432      	add	r2, r6
 801bfea:	3b01      	subs	r3, #1
 801bfec:	3403      	adds	r4, #3
 801bfee:	e7f0      	b.n	801bfd2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801bff0:	d03a      	beq.n	801c068 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801bff2:	1e5d      	subs	r5, r3, #1
 801bff4:	fb07 0805 	mla	r8, r7, r5, r0
 801bff8:	ea5f 4828 	movs.w	r8, r8, asr #16
 801bffc:	d429      	bmi.n	801c052 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bffe:	45e0      	cmp	r8, ip
 801c000:	da27      	bge.n	801c052 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c002:	fb06 2505 	mla	r5, r6, r5, r2
 801c006:	142d      	asrs	r5, r5, #16
 801c008:	d423      	bmi.n	801c052 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c00a:	4575      	cmp	r5, lr
 801c00c:	da21      	bge.n	801c052 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c00e:	f104 0803 	add.w	r8, r4, #3
 801c012:	469a      	mov	sl, r3
 801c014:	f1ba 0f00 	cmp.w	sl, #0
 801c018:	f108 0803 	add.w	r8, r8, #3
 801c01c:	dd1f      	ble.n	801c05e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c01e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c022:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c026:	1415      	asrs	r5, r2, #16
 801c028:	4438      	add	r0, r7
 801c02a:	4432      	add	r2, r6
 801c02c:	fb0c b505 	mla	r5, ip, r5, fp
 801c030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c034:	eb09 0b05 	add.w	fp, r9, r5
 801c038:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c03c:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c040:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c044:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c048:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c04c:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c050:	e7e0      	b.n	801c014 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c052:	2500      	movs	r5, #0
 801c054:	eba3 0805 	sub.w	r8, r3, r5
 801c058:	f1b8 0f00 	cmp.w	r8, #0
 801c05c:	dc38      	bgt.n	801c0d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c05e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c062:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c066:	441c      	add	r4, r3
 801c068:	2900      	cmp	r1, #0
 801c06a:	dd54      	ble.n	801c116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c06c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c072:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c076:	3901      	subs	r1, #1
 801c078:	eeb0 6a62 	vmov.f32	s12, s5
 801c07c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c080:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c084:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c088:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c08c:	eeb0 6a43 	vmov.f32	s12, s6
 801c090:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c094:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c098:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c09c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0b0:	ee12 2a90 	vmov	r2, s5
 801c0b4:	eef0 2a47 	vmov.f32	s5, s14
 801c0b8:	fb92 f7f3 	sdiv	r7, r2, r3
 801c0bc:	ee13 2a10 	vmov	r2, s6
 801c0c0:	eeb0 3a67 	vmov.f32	s6, s15
 801c0c4:	fb92 f6f3 	sdiv	r6, r2, r3
 801c0c8:	9a01      	ldr	r2, [sp, #4]
 801c0ca:	bf08      	it	eq
 801c0cc:	4613      	moveq	r3, r2
 801c0ce:	e774      	b.n	801bfba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c0d0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c0d4:	d41b      	bmi.n	801c10e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c0d6:	45e2      	cmp	sl, ip
 801c0d8:	da19      	bge.n	801c10e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c0da:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c0de:	d416      	bmi.n	801c10e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c0e0:	45f0      	cmp	r8, lr
 801c0e2:	da14      	bge.n	801c10e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c0e4:	fb0c a808 	mla	r8, ip, r8, sl
 801c0e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c0ec:	f819 b008 	ldrb.w	fp, [r9, r8]
 801c0f0:	eb09 0a08 	add.w	sl, r9, r8
 801c0f4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801c0f8:	f804 b008 	strb.w	fp, [r4, r8]
 801c0fc:	44a0      	add	r8, r4
 801c0fe:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c102:	f888 b001 	strb.w	fp, [r8, #1]
 801c106:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c10a:	f888 a002 	strb.w	sl, [r8, #2]
 801c10e:	4438      	add	r0, r7
 801c110:	4432      	add	r2, r6
 801c112:	3501      	adds	r5, #1
 801c114:	e79e      	b.n	801c054 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801c116:	b003      	add	sp, #12
 801c118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c11c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c120:	b085      	sub	sp, #20
 801c122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c126:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c128:	9202      	str	r2, [sp, #8]
 801c12a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c12e:	6860      	ldr	r0, [r4, #4]
 801c130:	9203      	str	r2, [sp, #12]
 801c132:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c136:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c13a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c13e:	fb00 2505 	mla	r5, r0, r5, r2
 801c142:	6822      	ldr	r2, [r4, #0]
 801c144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c148:	4415      	add	r5, r2
 801c14a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c14c:	6812      	ldr	r2, [r2, #0]
 801c14e:	9201      	str	r2, [sp, #4]
 801c150:	2900      	cmp	r1, #0
 801c152:	dc03      	bgt.n	801c15c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c154:	9a02      	ldr	r2, [sp, #8]
 801c156:	2a00      	cmp	r2, #0
 801c158:	f340 811c 	ble.w	801c394 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c15c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c15e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c164:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c168:	2b00      	cmp	r3, #0
 801c16a:	dd0e      	ble.n	801c18a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c16c:	1422      	asrs	r2, r4, #16
 801c16e:	d405      	bmi.n	801c17c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c170:	4572      	cmp	r2, lr
 801c172:	da03      	bge.n	801c17c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c174:	1402      	asrs	r2, r0, #16
 801c176:	d401      	bmi.n	801c17c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c178:	4542      	cmp	r2, r8
 801c17a:	db07      	blt.n	801c18c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c17c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c17e:	3b01      	subs	r3, #1
 801c180:	3503      	adds	r5, #3
 801c182:	4414      	add	r4, r2
 801c184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c186:	4410      	add	r0, r2
 801c188:	e7ee      	b.n	801c168 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c18a:	d072      	beq.n	801c272 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801c18c:	1e5a      	subs	r2, r3, #1
 801c18e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c190:	fb06 4602 	mla	r6, r6, r2, r4
 801c194:	1436      	asrs	r6, r6, #16
 801c196:	d461      	bmi.n	801c25c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c198:	4576      	cmp	r6, lr
 801c19a:	da5f      	bge.n	801c25c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c19c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c19e:	fb06 0202 	mla	r2, r6, r2, r0
 801c1a2:	1412      	asrs	r2, r2, #16
 801c1a4:	d45a      	bmi.n	801c25c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c1a6:	4542      	cmp	r2, r8
 801c1a8:	da58      	bge.n	801c25c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c1aa:	1cef      	adds	r7, r5, #3
 801c1ac:	4699      	mov	r9, r3
 801c1ae:	f1b9 0f00 	cmp.w	r9, #0
 801c1b2:	dd59      	ble.n	801c268 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c1b4:	1426      	asrs	r6, r4, #16
 801c1b6:	1402      	asrs	r2, r0, #16
 801c1b8:	fb0e 6202 	mla	r2, lr, r2, r6
 801c1bc:	9e01      	ldr	r6, [sp, #4]
 801c1be:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c1c2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c1c6:	d041      	beq.n	801c24c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801c1c8:	9a03      	ldr	r2, [sp, #12]
 801c1ca:	fa5f fb86 	uxtb.w	fp, r6
 801c1ce:	fb02 fc0c 	mul.w	ip, r2, ip
 801c1d2:	f10c 0201 	add.w	r2, ip, #1
 801c1d6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c1da:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c1de:	1212      	asrs	r2, r2, #8
 801c1e0:	fa1f fa82 	uxth.w	sl, r2
 801c1e4:	43d2      	mvns	r2, r2
 801c1e6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c1ea:	b2d2      	uxtb	r2, r2
 801c1ec:	fb0c bc02 	mla	ip, ip, r2, fp
 801c1f0:	fa1f fc8c 	uxth.w	ip, ip
 801c1f4:	f10c 0b01 	add.w	fp, ip, #1
 801c1f8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c1fc:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c200:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c204:	fb1b fb0a 	smulbb	fp, fp, sl
 801c208:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c20c:	fb16 fa0a 	smulbb	sl, r6, sl
 801c210:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c214:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c218:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c21c:	fb06 aa02 	mla	sl, r6, r2, sl
 801c220:	fb0c bc02 	mla	ip, ip, r2, fp
 801c224:	fa1f fa8a 	uxth.w	sl, sl
 801c228:	fa1f fc8c 	uxth.w	ip, ip
 801c22c:	f10a 0601 	add.w	r6, sl, #1
 801c230:	f10c 0b01 	add.w	fp, ip, #1
 801c234:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c238:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c23c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c240:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c244:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c248:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c24c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c24e:	3703      	adds	r7, #3
 801c250:	f109 39ff 	add.w	r9, r9, #4294967295
 801c254:	4414      	add	r4, r2
 801c256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c258:	4410      	add	r0, r2
 801c25a:	e7a8      	b.n	801c1ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c25c:	f04f 0c00 	mov.w	ip, #0
 801c260:	eba3 020c 	sub.w	r2, r3, ip
 801c264:	2a00      	cmp	r2, #0
 801c266:	dc3d      	bgt.n	801c2e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801c268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c26c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c270:	441d      	add	r5, r3
 801c272:	2900      	cmp	r1, #0
 801c274:	f340 808e 	ble.w	801c394 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c278:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c27e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c282:	3901      	subs	r1, #1
 801c284:	eeb0 6a62 	vmov.f32	s12, s5
 801c288:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c28c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c290:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c294:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c298:	eeb0 6a43 	vmov.f32	s12, s6
 801c29c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c2a0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c2a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2bc:	ee12 2a90 	vmov	r2, s5
 801c2c0:	eef0 2a47 	vmov.f32	s5, s14
 801c2c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2c8:	ee13 2a10 	vmov	r2, s6
 801c2cc:	9311      	str	r3, [sp, #68]	; 0x44
 801c2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2d0:	eeb0 3a67 	vmov.f32	s6, s15
 801c2d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2d8:	9a02      	ldr	r2, [sp, #8]
 801c2da:	9312      	str	r3, [sp, #72]	; 0x48
 801c2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2de:	bf08      	it	eq
 801c2e0:	4613      	moveq	r3, r2
 801c2e2:	e735      	b.n	801c150 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801c2e4:	1426      	asrs	r6, r4, #16
 801c2e6:	d44e      	bmi.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c2e8:	4576      	cmp	r6, lr
 801c2ea:	da4c      	bge.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c2ec:	1402      	asrs	r2, r0, #16
 801c2ee:	d44a      	bmi.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c2f0:	4542      	cmp	r2, r8
 801c2f2:	da48      	bge.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c2f4:	fb0e 6202 	mla	r2, lr, r2, r6
 801c2f8:	9e01      	ldr	r6, [sp, #4]
 801c2fa:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c2fe:	0e3a      	lsrs	r2, r7, #24
 801c300:	d041      	beq.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c302:	9e03      	ldr	r6, [sp, #12]
 801c304:	fa5f fb87 	uxtb.w	fp, r7
 801c308:	4372      	muls	r2, r6
 801c30a:	1c56      	adds	r6, r2, #1
 801c30c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c310:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801c314:	1212      	asrs	r2, r2, #8
 801c316:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c31a:	fa1f fa82 	uxth.w	sl, r2
 801c31e:	43d2      	mvns	r2, r2
 801c320:	fb1b fb0a 	smulbb	fp, fp, sl
 801c324:	b2d2      	uxtb	r2, r2
 801c326:	fb09 b902 	mla	r9, r9, r2, fp
 801c32a:	fa1f f989 	uxth.w	r9, r9
 801c32e:	f109 0b01 	add.w	fp, r9, #1
 801c332:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c336:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c33a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c33e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c342:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c346:	fb17 fa0a 	smulbb	sl, r7, sl
 801c34a:	f805 9006 	strb.w	r9, [r5, r6]
 801c34e:	442e      	add	r6, r5
 801c350:	78b7      	ldrb	r7, [r6, #2]
 801c352:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c356:	fb07 aa02 	mla	sl, r7, r2, sl
 801c35a:	fb09 b902 	mla	r9, r9, r2, fp
 801c35e:	fa1f fa8a 	uxth.w	sl, sl
 801c362:	fa1f f989 	uxth.w	r9, r9
 801c366:	f10a 0701 	add.w	r7, sl, #1
 801c36a:	f109 0b01 	add.w	fp, r9, #1
 801c36e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c372:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c376:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c37a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c37e:	f886 a002 	strb.w	sl, [r6, #2]
 801c382:	f886 9001 	strb.w	r9, [r6, #1]
 801c386:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c388:	f10c 0c01 	add.w	ip, ip, #1
 801c38c:	4414      	add	r4, r2
 801c38e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c390:	4410      	add	r0, r2
 801c392:	e765      	b.n	801c260 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c394:	b005      	add	sp, #20
 801c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c39a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c39a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39e:	b085      	sub	sp, #20
 801c3a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c3a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c3a6:	9203      	str	r2, [sp, #12]
 801c3a8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c3ac:	6860      	ldr	r0, [r4, #4]
 801c3ae:	9201      	str	r2, [sp, #4]
 801c3b0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c3b4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c3b8:	fb00 2505 	mla	r5, r0, r5, r2
 801c3bc:	6822      	ldr	r2, [r4, #0]
 801c3be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3c2:	4415      	add	r5, r2
 801c3c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c3c6:	6812      	ldr	r2, [r2, #0]
 801c3c8:	9202      	str	r2, [sp, #8]
 801c3ca:	2900      	cmp	r1, #0
 801c3cc:	dc03      	bgt.n	801c3d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c3ce:	9a03      	ldr	r2, [sp, #12]
 801c3d0:	2a00      	cmp	r2, #0
 801c3d2:	f340 8122 	ble.w	801c61a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c3d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3d8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c3dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	dd0f      	ble.n	801c406 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c3e6:	1422      	asrs	r2, r4, #16
 801c3e8:	d406      	bmi.n	801c3f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c3ea:	4572      	cmp	r2, lr
 801c3ec:	da04      	bge.n	801c3f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c3ee:	1402      	asrs	r2, r0, #16
 801c3f0:	d402      	bmi.n	801c3f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c3f2:	9e01      	ldr	r6, [sp, #4]
 801c3f4:	42b2      	cmp	r2, r6
 801c3f6:	db07      	blt.n	801c408 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c3f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3fa:	3b01      	subs	r3, #1
 801c3fc:	3503      	adds	r5, #3
 801c3fe:	4414      	add	r4, r2
 801c400:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c402:	4410      	add	r0, r2
 801c404:	e7ed      	b.n	801c3e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c406:	d06e      	beq.n	801c4e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c408:	1e5a      	subs	r2, r3, #1
 801c40a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c40c:	fb06 4602 	mla	r6, r6, r2, r4
 801c410:	1436      	asrs	r6, r6, #16
 801c412:	d45d      	bmi.n	801c4d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c414:	4576      	cmp	r6, lr
 801c416:	da5b      	bge.n	801c4d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c418:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c41a:	fb06 0202 	mla	r2, r6, r2, r0
 801c41e:	1412      	asrs	r2, r2, #16
 801c420:	d456      	bmi.n	801c4d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c422:	9e01      	ldr	r6, [sp, #4]
 801c424:	42b2      	cmp	r2, r6
 801c426:	da53      	bge.n	801c4d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c428:	1cee      	adds	r6, r5, #3
 801c42a:	469a      	mov	sl, r3
 801c42c:	f1ba 0f00 	cmp.w	sl, #0
 801c430:	dd54      	ble.n	801c4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c432:	1427      	asrs	r7, r4, #16
 801c434:	1402      	asrs	r2, r0, #16
 801c436:	fb0e 7202 	mla	r2, lr, r2, r7
 801c43a:	9f02      	ldr	r7, [sp, #8]
 801c43c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c440:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801c444:	d03c      	beq.n	801c4c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c446:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c44a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c44e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c452:	fa5f f28c 	uxtb.w	r2, ip
 801c456:	b2ff      	uxtb	r7, r7
 801c458:	f000 80d8 	beq.w	801c60c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c45c:	fa1f f882 	uxth.w	r8, r2
 801c460:	43d2      	mvns	r2, r2
 801c462:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c466:	fb17 f708 	smulbb	r7, r7, r8
 801c46a:	b2d2      	uxtb	r2, r2
 801c46c:	fb19 f908 	smulbb	r9, r9, r8
 801c470:	fb0c 7702 	mla	r7, ip, r2, r7
 801c474:	fb1b f808 	smulbb	r8, fp, r8
 801c478:	b2bf      	uxth	r7, r7
 801c47a:	f107 0c01 	add.w	ip, r7, #1
 801c47e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c482:	123f      	asrs	r7, r7, #8
 801c484:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c488:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c48c:	fb07 9902 	mla	r9, r7, r2, r9
 801c490:	fa1f f989 	uxth.w	r9, r9
 801c494:	f109 0701 	add.w	r7, r9, #1
 801c498:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c49c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c4a0:	fb07 8802 	mla	r8, r7, r2, r8
 801c4a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4a8:	fa1f f888 	uxth.w	r8, r8
 801c4ac:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c4b0:	f108 0201 	add.w	r2, r8, #1
 801c4b4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c4b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c4bc:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c4c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4c2:	3603      	adds	r6, #3
 801c4c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c4c8:	4414      	add	r4, r2
 801c4ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c4cc:	4410      	add	r0, r2
 801c4ce:	e7ad      	b.n	801c42c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c4d0:	f04f 0c00 	mov.w	ip, #0
 801c4d4:	eba3 020c 	sub.w	r2, r3, ip
 801c4d8:	2a00      	cmp	r2, #0
 801c4da:	dc3d      	bgt.n	801c558 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c4dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4e4:	441d      	add	r5, r3
 801c4e6:	2900      	cmp	r1, #0
 801c4e8:	f340 8097 	ble.w	801c61a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c4ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4f6:	3901      	subs	r1, #1
 801c4f8:	eeb0 6a62 	vmov.f32	s12, s5
 801c4fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c500:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c504:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c508:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c50c:	eeb0 6a43 	vmov.f32	s12, s6
 801c510:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c514:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c518:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c51c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c520:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c524:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c528:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c52c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c530:	ee12 2a90 	vmov	r2, s5
 801c534:	eef0 2a47 	vmov.f32	s5, s14
 801c538:	fb92 f3f3 	sdiv	r3, r2, r3
 801c53c:	ee13 2a10 	vmov	r2, s6
 801c540:	9311      	str	r3, [sp, #68]	; 0x44
 801c542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c544:	eeb0 3a67 	vmov.f32	s6, s15
 801c548:	fb92 f3f3 	sdiv	r3, r2, r3
 801c54c:	9a03      	ldr	r2, [sp, #12]
 801c54e:	9312      	str	r3, [sp, #72]	; 0x48
 801c550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c552:	bf08      	it	eq
 801c554:	4613      	moveq	r3, r2
 801c556:	e738      	b.n	801c3ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c558:	1426      	asrs	r6, r4, #16
 801c55a:	d448      	bmi.n	801c5ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c55c:	4576      	cmp	r6, lr
 801c55e:	da46      	bge.n	801c5ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c560:	1402      	asrs	r2, r0, #16
 801c562:	d444      	bmi.n	801c5ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c564:	9f01      	ldr	r7, [sp, #4]
 801c566:	42ba      	cmp	r2, r7
 801c568:	da41      	bge.n	801c5ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c56a:	fb0e 6202 	mla	r2, lr, r2, r6
 801c56e:	9e02      	ldr	r6, [sp, #8]
 801c570:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c574:	0e3a      	lsrs	r2, r7, #24
 801c576:	d03a      	beq.n	801c5ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c578:	2aff      	cmp	r2, #255	; 0xff
 801c57a:	b2d6      	uxtb	r6, r2
 801c57c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c580:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c584:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c588:	b2ff      	uxtb	r7, r7
 801c58a:	d037      	beq.n	801c5fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c58c:	fa1f f986 	uxth.w	r9, r6
 801c590:	4462      	add	r2, ip
 801c592:	43f6      	mvns	r6, r6
 801c594:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c598:	fb17 f709 	smulbb	r7, r7, r9
 801c59c:	fb1a fa09 	smulbb	sl, sl, r9
 801c5a0:	b2f6      	uxtb	r6, r6
 801c5a2:	fb1b f909 	smulbb	r9, fp, r9
 801c5a6:	fb08 7706 	mla	r7, r8, r6, r7
 801c5aa:	b2bf      	uxth	r7, r7
 801c5ac:	f107 0801 	add.w	r8, r7, #1
 801c5b0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c5b4:	123f      	asrs	r7, r7, #8
 801c5b6:	54af      	strb	r7, [r5, r2]
 801c5b8:	442a      	add	r2, r5
 801c5ba:	7857      	ldrb	r7, [r2, #1]
 801c5bc:	fb07 aa06 	mla	sl, r7, r6, sl
 801c5c0:	fa1f fa8a 	uxth.w	sl, sl
 801c5c4:	f10a 0701 	add.w	r7, sl, #1
 801c5c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c5cc:	7897      	ldrb	r7, [r2, #2]
 801c5ce:	fb07 9906 	mla	r9, r7, r6, r9
 801c5d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c5d6:	fa1f f989 	uxth.w	r9, r9
 801c5da:	f882 a001 	strb.w	sl, [r2, #1]
 801c5de:	f109 0601 	add.w	r6, r9, #1
 801c5e2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c5e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5ea:	f882 9002 	strb.w	r9, [r2, #2]
 801c5ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5f0:	f10c 0c01 	add.w	ip, ip, #1
 801c5f4:	4414      	add	r4, r2
 801c5f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5f8:	4410      	add	r0, r2
 801c5fa:	e76b      	b.n	801c4d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c5fc:	4462      	add	r2, ip
 801c5fe:	54af      	strb	r7, [r5, r2]
 801c600:	442a      	add	r2, r5
 801c602:	f882 a001 	strb.w	sl, [r2, #1]
 801c606:	f882 b002 	strb.w	fp, [r2, #2]
 801c60a:	e7f0      	b.n	801c5ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c60c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c610:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c614:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c618:	e752      	b.n	801c4c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c61a:	b005      	add	sp, #20
 801c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c624:	b087      	sub	sp, #28
 801c626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c62a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c62c:	9204      	str	r2, [sp, #16]
 801c62e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c632:	6860      	ldr	r0, [r4, #4]
 801c634:	9205      	str	r2, [sp, #20]
 801c636:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c63a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c63e:	9101      	str	r1, [sp, #4]
 801c640:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c644:	fb00 2505 	mla	r5, r0, r5, r2
 801c648:	6822      	ldr	r2, [r4, #0]
 801c64a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c64e:	4415      	add	r5, r2
 801c650:	f10e 0201 	add.w	r2, lr, #1
 801c654:	f022 0201 	bic.w	r2, r2, #1
 801c658:	9202      	str	r2, [sp, #8]
 801c65a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c65c:	6812      	ldr	r2, [r2, #0]
 801c65e:	9203      	str	r2, [sp, #12]
 801c660:	9a01      	ldr	r2, [sp, #4]
 801c662:	2a00      	cmp	r2, #0
 801c664:	dc03      	bgt.n	801c66e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c666:	9a04      	ldr	r2, [sp, #16]
 801c668:	2a00      	cmp	r2, #0
 801c66a:	f340 8132 	ble.w	801c8d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c66e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c670:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c676:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	dd0e      	ble.n	801c69c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c67e:	1422      	asrs	r2, r4, #16
 801c680:	d405      	bmi.n	801c68e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c682:	4596      	cmp	lr, r2
 801c684:	dd03      	ble.n	801c68e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c686:	1402      	asrs	r2, r0, #16
 801c688:	d401      	bmi.n	801c68e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c68a:	4542      	cmp	r2, r8
 801c68c:	db07      	blt.n	801c69e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c68e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c690:	3b01      	subs	r3, #1
 801c692:	3503      	adds	r5, #3
 801c694:	4414      	add	r4, r2
 801c696:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c698:	4410      	add	r0, r2
 801c69a:	e7ee      	b.n	801c67a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c69c:	d010      	beq.n	801c6c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c69e:	1e5a      	subs	r2, r3, #1
 801c6a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c6a2:	fb06 4602 	mla	r6, r6, r2, r4
 801c6a6:	1436      	asrs	r6, r6, #16
 801c6a8:	d546      	bpl.n	801c738 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c6aa:	4699      	mov	r9, r3
 801c6ac:	462e      	mov	r6, r5
 801c6ae:	f1b9 0f00 	cmp.w	r9, #0
 801c6b2:	f300 80ac 	bgt.w	801c80e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c6b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6be:	441d      	add	r5, r3
 801c6c0:	9b01      	ldr	r3, [sp, #4]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f340 8105 	ble.w	801c8d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c6c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6d2:	eeb0 6a62 	vmov.f32	s12, s5
 801c6d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c6e6:	eeb0 6a43 	vmov.f32	s12, s6
 801c6ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6ee:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c6f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c702:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c706:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c70a:	ee12 2a90 	vmov	r2, s5
 801c70e:	eef0 2a47 	vmov.f32	s5, s14
 801c712:	fb92 f3f3 	sdiv	r3, r2, r3
 801c716:	ee13 2a10 	vmov	r2, s6
 801c71a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c71e:	eeb0 3a67 	vmov.f32	s6, s15
 801c722:	fb92 f3f3 	sdiv	r3, r2, r3
 801c726:	9314      	str	r3, [sp, #80]	; 0x50
 801c728:	9b01      	ldr	r3, [sp, #4]
 801c72a:	9a04      	ldr	r2, [sp, #16]
 801c72c:	3b01      	subs	r3, #1
 801c72e:	9301      	str	r3, [sp, #4]
 801c730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c732:	bf08      	it	eq
 801c734:	4613      	moveq	r3, r2
 801c736:	e793      	b.n	801c660 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c738:	45b6      	cmp	lr, r6
 801c73a:	ddb6      	ble.n	801c6aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c73c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c73e:	fb06 0202 	mla	r2, r6, r2, r0
 801c742:	1412      	asrs	r2, r2, #16
 801c744:	d4b1      	bmi.n	801c6aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c746:	4542      	cmp	r2, r8
 801c748:	daaf      	bge.n	801c6aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c74a:	1cee      	adds	r6, r5, #3
 801c74c:	4699      	mov	r9, r3
 801c74e:	f1b9 0f00 	cmp.w	r9, #0
 801c752:	ddb0      	ble.n	801c6b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c754:	1422      	asrs	r2, r4, #16
 801c756:	9902      	ldr	r1, [sp, #8]
 801c758:	1407      	asrs	r7, r0, #16
 801c75a:	fb01 2707 	mla	r7, r1, r7, r2
 801c75e:	9903      	ldr	r1, [sp, #12]
 801c760:	087a      	lsrs	r2, r7, #1
 801c762:	5c8a      	ldrb	r2, [r1, r2]
 801c764:	07f9      	lsls	r1, r7, #31
 801c766:	bf54      	ite	pl
 801c768:	f002 020f 	andpl.w	r2, r2, #15
 801c76c:	1112      	asrmi	r2, r2, #4
 801c76e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c772:	b2d2      	uxtb	r2, r2
 801c774:	2a00      	cmp	r2, #0
 801c776:	d042      	beq.n	801c7fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801c778:	4957      	ldr	r1, [pc, #348]	; (801c8d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c77a:	680f      	ldr	r7, [r1, #0]
 801c77c:	9905      	ldr	r1, [sp, #20]
 801c77e:	fa5f fb87 	uxtb.w	fp, r7
 801c782:	434a      	muls	r2, r1
 801c784:	f102 0c01 	add.w	ip, r2, #1
 801c788:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c78c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c790:	1212      	asrs	r2, r2, #8
 801c792:	fa1f fa82 	uxth.w	sl, r2
 801c796:	43d2      	mvns	r2, r2
 801c798:	fb1b fb0a 	smulbb	fp, fp, sl
 801c79c:	b2d2      	uxtb	r2, r2
 801c79e:	fb0c bc02 	mla	ip, ip, r2, fp
 801c7a2:	fa1f fc8c 	uxth.w	ip, ip
 801c7a6:	f10c 0b01 	add.w	fp, ip, #1
 801c7aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c7ae:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c7b2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c7b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c7ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c7be:	fb17 fa0a 	smulbb	sl, r7, sl
 801c7c2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c7c6:	f806 cc03 	strb.w	ip, [r6, #-3]
 801c7ca:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801c7ce:	fb07 aa02 	mla	sl, r7, r2, sl
 801c7d2:	fb0c bc02 	mla	ip, ip, r2, fp
 801c7d6:	fa1f fa8a 	uxth.w	sl, sl
 801c7da:	fa1f fc8c 	uxth.w	ip, ip
 801c7de:	f10a 0701 	add.w	r7, sl, #1
 801c7e2:	f10c 0b01 	add.w	fp, ip, #1
 801c7e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c7ea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c7ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7f2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c7f6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c7fa:	f806 cc02 	strb.w	ip, [r6, #-2]
 801c7fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c800:	3603      	adds	r6, #3
 801c802:	f109 39ff 	add.w	r9, r9, #4294967295
 801c806:	4414      	add	r4, r2
 801c808:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c80a:	4410      	add	r0, r2
 801c80c:	e79f      	b.n	801c74e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801c80e:	1422      	asrs	r2, r4, #16
 801c810:	d457      	bmi.n	801c8c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c812:	4596      	cmp	lr, r2
 801c814:	dd55      	ble.n	801c8c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c816:	1407      	asrs	r7, r0, #16
 801c818:	d453      	bmi.n	801c8c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c81a:	4547      	cmp	r7, r8
 801c81c:	da51      	bge.n	801c8c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c81e:	9902      	ldr	r1, [sp, #8]
 801c820:	fb07 2701 	mla	r7, r7, r1, r2
 801c824:	9903      	ldr	r1, [sp, #12]
 801c826:	087a      	lsrs	r2, r7, #1
 801c828:	07ff      	lsls	r7, r7, #31
 801c82a:	5c8a      	ldrb	r2, [r1, r2]
 801c82c:	bf54      	ite	pl
 801c82e:	f002 020f 	andpl.w	r2, r2, #15
 801c832:	1112      	asrmi	r2, r2, #4
 801c834:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c838:	b2d2      	uxtb	r2, r2
 801c83a:	2a00      	cmp	r2, #0
 801c83c:	d041      	beq.n	801c8c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c83e:	4926      	ldr	r1, [pc, #152]	; (801c8d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c840:	680f      	ldr	r7, [r1, #0]
 801c842:	9905      	ldr	r1, [sp, #20]
 801c844:	fa5f fb87 	uxtb.w	fp, r7
 801c848:	434a      	muls	r2, r1
 801c84a:	f102 0c01 	add.w	ip, r2, #1
 801c84e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c852:	f896 c000 	ldrb.w	ip, [r6]
 801c856:	1212      	asrs	r2, r2, #8
 801c858:	fa1f fa82 	uxth.w	sl, r2
 801c85c:	43d2      	mvns	r2, r2
 801c85e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c862:	b2d2      	uxtb	r2, r2
 801c864:	fb0c bc02 	mla	ip, ip, r2, fp
 801c868:	fa1f fc8c 	uxth.w	ip, ip
 801c86c:	f10c 0b01 	add.w	fp, ip, #1
 801c870:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c874:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c878:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c87c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c880:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c884:	fb17 fa0a 	smulbb	sl, r7, sl
 801c888:	78b7      	ldrb	r7, [r6, #2]
 801c88a:	f886 c000 	strb.w	ip, [r6]
 801c88e:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c892:	fb07 aa02 	mla	sl, r7, r2, sl
 801c896:	fb0c bc02 	mla	ip, ip, r2, fp
 801c89a:	fa1f fa8a 	uxth.w	sl, sl
 801c89e:	fa1f fc8c 	uxth.w	ip, ip
 801c8a2:	f10a 0701 	add.w	r7, sl, #1
 801c8a6:	f10c 0b01 	add.w	fp, ip, #1
 801c8aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c8ae:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c8b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c8b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c8ba:	f886 a002 	strb.w	sl, [r6, #2]
 801c8be:	f886 c001 	strb.w	ip, [r6, #1]
 801c8c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c8c4:	3603      	adds	r6, #3
 801c8c6:	f109 39ff 	add.w	r9, r9, #4294967295
 801c8ca:	4414      	add	r4, r2
 801c8cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c8ce:	4410      	add	r0, r2
 801c8d0:	e6ed      	b.n	801c6ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801c8d2:	b007      	add	sp, #28
 801c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8d8:	2000bb24 	.word	0x2000bb24

0801c8dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e0:	b087      	sub	sp, #28
 801c8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c8e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c8e8:	9205      	str	r2, [sp, #20]
 801c8ea:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801c8ee:	6860      	ldr	r0, [r4, #4]
 801c8f0:	9202      	str	r2, [sp, #8]
 801c8f2:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801c8f6:	9101      	str	r1, [sp, #4]
 801c8f8:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801c8fc:	fb00 2606 	mla	r6, r0, r6, r2
 801c900:	6822      	ldr	r2, [r4, #0]
 801c902:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c906:	4416      	add	r6, r2
 801c908:	f108 0201 	add.w	r2, r8, #1
 801c90c:	f022 0201 	bic.w	r2, r2, #1
 801c910:	9203      	str	r2, [sp, #12]
 801c912:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c914:	6812      	ldr	r2, [r2, #0]
 801c916:	9204      	str	r2, [sp, #16]
 801c918:	9a01      	ldr	r2, [sp, #4]
 801c91a:	2a00      	cmp	r2, #0
 801c91c:	dc03      	bgt.n	801c926 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c91e:	9a05      	ldr	r2, [sp, #20]
 801c920:	2a00      	cmp	r2, #0
 801c922:	f340 813a 	ble.w	801cb9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801c926:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c928:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801c92c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c92e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c932:	2b00      	cmp	r3, #0
 801c934:	dd0f      	ble.n	801c956 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c936:	142a      	asrs	r2, r5, #16
 801c938:	d406      	bmi.n	801c948 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c93a:	4590      	cmp	r8, r2
 801c93c:	dd04      	ble.n	801c948 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c93e:	1422      	asrs	r2, r4, #16
 801c940:	d402      	bmi.n	801c948 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c942:	9802      	ldr	r0, [sp, #8]
 801c944:	4282      	cmp	r2, r0
 801c946:	db07      	blt.n	801c958 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c948:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c94a:	3b01      	subs	r3, #1
 801c94c:	3603      	adds	r6, #3
 801c94e:	4415      	add	r5, r2
 801c950:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c952:	4414      	add	r4, r2
 801c954:	e7ed      	b.n	801c932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c956:	d073      	beq.n	801ca40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801c958:	1e5a      	subs	r2, r3, #1
 801c95a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c95c:	fb00 5002 	mla	r0, r0, r2, r5
 801c960:	1400      	asrs	r0, r0, #16
 801c962:	d464      	bmi.n	801ca2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c964:	4580      	cmp	r8, r0
 801c966:	dd62      	ble.n	801ca2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c968:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c96a:	fb00 4202 	mla	r2, r0, r2, r4
 801c96e:	1412      	asrs	r2, r2, #16
 801c970:	d45d      	bmi.n	801ca2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c972:	9802      	ldr	r0, [sp, #8]
 801c974:	4282      	cmp	r2, r0
 801c976:	da5a      	bge.n	801ca2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801c978:	1cf0      	adds	r0, r6, #3
 801c97a:	469a      	mov	sl, r3
 801c97c:	f1ba 0f00 	cmp.w	sl, #0
 801c980:	dd59      	ble.n	801ca36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801c982:	142a      	asrs	r2, r5, #16
 801c984:	9903      	ldr	r1, [sp, #12]
 801c986:	1427      	asrs	r7, r4, #16
 801c988:	fb01 2707 	mla	r7, r1, r7, r2
 801c98c:	9904      	ldr	r1, [sp, #16]
 801c98e:	087a      	lsrs	r2, r7, #1
 801c990:	5c8a      	ldrb	r2, [r1, r2]
 801c992:	07f9      	lsls	r1, r7, #31
 801c994:	bf54      	ite	pl
 801c996:	f002 020f 	andpl.w	r2, r2, #15
 801c99a:	1112      	asrmi	r2, r2, #4
 801c99c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c9a0:	b2d2      	uxtb	r2, r2
 801c9a2:	2a00      	cmp	r2, #0
 801c9a4:	d03b      	beq.n	801ca1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c9a6:	497e      	ldr	r1, [pc, #504]	; (801cba0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801c9a8:	2aff      	cmp	r2, #255	; 0xff
 801c9aa:	680f      	ldr	r7, [r1, #0]
 801c9ac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c9b0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c9b4:	b2ff      	uxtb	r7, r7
 801c9b6:	f000 80e9 	beq.w	801cb8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c9ba:	fa1f fe82 	uxth.w	lr, r2
 801c9be:	43d2      	mvns	r2, r2
 801c9c0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801c9c4:	fb17 f70e 	smulbb	r7, r7, lr
 801c9c8:	b2d2      	uxtb	r2, r2
 801c9ca:	fb19 f90e 	smulbb	r9, r9, lr
 801c9ce:	fb0c 7702 	mla	r7, ip, r2, r7
 801c9d2:	fb1b fe0e 	smulbb	lr, fp, lr
 801c9d6:	b2bf      	uxth	r7, r7
 801c9d8:	f107 0c01 	add.w	ip, r7, #1
 801c9dc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c9e0:	123f      	asrs	r7, r7, #8
 801c9e2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c9e6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c9ea:	fb07 9902 	mla	r9, r7, r2, r9
 801c9ee:	fa1f f989 	uxth.w	r9, r9
 801c9f2:	f109 0701 	add.w	r7, r9, #1
 801c9f6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c9fa:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c9fe:	fb07 ee02 	mla	lr, r7, r2, lr
 801ca02:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca06:	fa1f fe8e 	uxth.w	lr, lr
 801ca0a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ca0e:	f10e 0201 	add.w	r2, lr, #1
 801ca12:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ca16:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ca1a:	f800 ec01 	strb.w	lr, [r0, #-1]
 801ca1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca20:	3003      	adds	r0, #3
 801ca22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca26:	4415      	add	r5, r2
 801ca28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca2a:	4414      	add	r4, r2
 801ca2c:	e7a6      	b.n	801c97c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ca2e:	2700      	movs	r7, #0
 801ca30:	1bda      	subs	r2, r3, r7
 801ca32:	2a00      	cmp	r2, #0
 801ca34:	dc40      	bgt.n	801cab8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801ca36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca3e:	441e      	add	r6, r3
 801ca40:	9b01      	ldr	r3, [sp, #4]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	f340 80a9 	ble.w	801cb9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801ca48:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca52:	eeb0 6a62 	vmov.f32	s12, s5
 801ca56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca62:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ca66:	eeb0 6a43 	vmov.f32	s12, s6
 801ca6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ca72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca76:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca8a:	ee12 2a90 	vmov	r2, s5
 801ca8e:	eef0 2a47 	vmov.f32	s5, s14
 801ca92:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca96:	ee13 2a10 	vmov	r2, s6
 801ca9a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ca9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca9e:	eeb0 3a67 	vmov.f32	s6, s15
 801caa2:	fb92 f3f3 	sdiv	r3, r2, r3
 801caa6:	9314      	str	r3, [sp, #80]	; 0x50
 801caa8:	9b01      	ldr	r3, [sp, #4]
 801caaa:	9a05      	ldr	r2, [sp, #20]
 801caac:	3b01      	subs	r3, #1
 801caae:	9301      	str	r3, [sp, #4]
 801cab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cab2:	bf08      	it	eq
 801cab4:	4613      	moveq	r3, r2
 801cab6:	e72f      	b.n	801c918 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cab8:	142a      	asrs	r2, r5, #16
 801caba:	d458      	bmi.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cabc:	4590      	cmp	r8, r2
 801cabe:	dd56      	ble.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cac0:	1420      	asrs	r0, r4, #16
 801cac2:	d454      	bmi.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cac4:	9902      	ldr	r1, [sp, #8]
 801cac6:	4288      	cmp	r0, r1
 801cac8:	da51      	bge.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801caca:	9903      	ldr	r1, [sp, #12]
 801cacc:	fb00 2001 	mla	r0, r0, r1, r2
 801cad0:	9904      	ldr	r1, [sp, #16]
 801cad2:	0842      	lsrs	r2, r0, #1
 801cad4:	07c0      	lsls	r0, r0, #31
 801cad6:	5c8a      	ldrb	r2, [r1, r2]
 801cad8:	bf54      	ite	pl
 801cada:	f002 020f 	andpl.w	r2, r2, #15
 801cade:	1112      	asrmi	r2, r2, #4
 801cae0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cae4:	b2d2      	uxtb	r2, r2
 801cae6:	2a00      	cmp	r2, #0
 801cae8:	d041      	beq.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801caea:	492d      	ldr	r1, [pc, #180]	; (801cba0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801caec:	2aff      	cmp	r2, #255	; 0xff
 801caee:	6808      	ldr	r0, [r1, #0]
 801caf0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801caf4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801caf8:	fa5f fc80 	uxtb.w	ip, r0
 801cafc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cb00:	d03b      	beq.n	801cb7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801cb02:	fa1f f982 	uxth.w	r9, r2
 801cb06:	4438      	add	r0, r7
 801cb08:	43d2      	mvns	r2, r2
 801cb0a:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cb0e:	fb1c fc09 	smulbb	ip, ip, r9
 801cb12:	fb1a fa09 	smulbb	sl, sl, r9
 801cb16:	b2d2      	uxtb	r2, r2
 801cb18:	fb1b f909 	smulbb	r9, fp, r9
 801cb1c:	fb0e cc02 	mla	ip, lr, r2, ip
 801cb20:	fa1f fc8c 	uxth.w	ip, ip
 801cb24:	f10c 0e01 	add.w	lr, ip, #1
 801cb28:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cb2c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cb30:	f806 c000 	strb.w	ip, [r6, r0]
 801cb34:	4430      	add	r0, r6
 801cb36:	f890 c001 	ldrb.w	ip, [r0, #1]
 801cb3a:	fb0c aa02 	mla	sl, ip, r2, sl
 801cb3e:	fa1f fa8a 	uxth.w	sl, sl
 801cb42:	f10a 0c01 	add.w	ip, sl, #1
 801cb46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cb4a:	f890 c002 	ldrb.w	ip, [r0, #2]
 801cb4e:	fb0c 9902 	mla	r9, ip, r2, r9
 801cb52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb56:	fa1f f989 	uxth.w	r9, r9
 801cb5a:	f880 a001 	strb.w	sl, [r0, #1]
 801cb5e:	f109 0201 	add.w	r2, r9, #1
 801cb62:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cb66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb6a:	f880 9002 	strb.w	r9, [r0, #2]
 801cb6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb70:	3701      	adds	r7, #1
 801cb72:	4415      	add	r5, r2
 801cb74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb76:	4414      	add	r4, r2
 801cb78:	e75a      	b.n	801ca30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801cb7a:	4438      	add	r0, r7
 801cb7c:	f806 c000 	strb.w	ip, [r6, r0]
 801cb80:	4430      	add	r0, r6
 801cb82:	f880 a001 	strb.w	sl, [r0, #1]
 801cb86:	f880 b002 	strb.w	fp, [r0, #2]
 801cb8a:	e7f0      	b.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cb8c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cb90:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cb94:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cb98:	e741      	b.n	801ca1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cb9a:	b007      	add	sp, #28
 801cb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cba0:	2000bb24 	.word	0x2000bb24

0801cba4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cba4:	4770      	bx	lr

0801cba6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cba6:	4770      	bx	lr

0801cba8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cba8:	4770      	bx	lr

0801cbaa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cbaa:	4770      	bx	lr

0801cbac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cbac:	4770      	bx	lr

0801cbae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cbae:	4770      	bx	lr

0801cbb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cbb0:	4770      	bx	lr

0801cbb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cbb2:	4770      	bx	lr

0801cbb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cbb4:	4770      	bx	lr

0801cbb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cbb6:	4770      	bx	lr

0801cbb8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cbb8:	4770      	bx	lr

0801cbba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cbba:	4770      	bx	lr

0801cbbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cbbc:	4770      	bx	lr

0801cbbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cbbe:	4770      	bx	lr

0801cbc0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cbc0:	4770      	bx	lr

0801cbc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cbc2:	4770      	bx	lr

0801cbc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cbc4:	4770      	bx	lr

0801cbc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cbc6:	4770      	bx	lr

0801cbc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cbc8:	4770      	bx	lr

0801cbca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cbca:	4770      	bx	lr

0801cbcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cbcc:	2bff      	cmp	r3, #255	; 0xff
 801cbce:	b508      	push	{r3, lr}
 801cbd0:	d04f      	beq.n	801cc72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cbd2:	2a2c      	cmp	r2, #44	; 0x2c
 801cbd4:	d032      	beq.n	801cc3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801cbd6:	d80f      	bhi.n	801cbf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801cbd8:	2a08      	cmp	r2, #8
 801cbda:	d046      	beq.n	801cc6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cbdc:	d805      	bhi.n	801cbea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801cbde:	2a04      	cmp	r2, #4
 801cbe0:	d041      	beq.n	801cc66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cbe2:	2a05      	cmp	r2, #5
 801cbe4:	d03d      	beq.n	801cc62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801cbe6:	2000      	movs	r0, #0
 801cbe8:	e027      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cbea:	2a0a      	cmp	r2, #10
 801cbec:	d03d      	beq.n	801cc6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cbee:	d301      	bcc.n	801cbf4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cbf0:	2a0b      	cmp	r2, #11
 801cbf2:	d1f8      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cbf4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cbf6:	e020      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cbf8:	2a30      	cmp	r2, #48	; 0x30
 801cbfa:	d038      	beq.n	801cc6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cbfc:	d808      	bhi.n	801cc10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801cbfe:	2a2e      	cmp	r2, #46	; 0x2e
 801cc00:	684b      	ldr	r3, [r1, #4]
 801cc02:	d029      	beq.n	801cc58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801cc04:	d90b      	bls.n	801cc1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801cc06:	781b      	ldrb	r3, [r3, #0]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d1ec      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc0c:	6a00      	ldr	r0, [r0, #32]
 801cc0e:	e014      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc10:	2a32      	cmp	r2, #50	; 0x32
 801cc12:	d02c      	beq.n	801cc6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cc14:	d301      	bcc.n	801cc1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801cc16:	2a33      	cmp	r2, #51	; 0x33
 801cc18:	d1e5      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc1a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801cc1c:	e00d      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	2b01      	cmp	r3, #1
 801cc22:	d009      	beq.n	801cc38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801cc24:	d3f2      	bcc.n	801cc0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801cc26:	2b02      	cmp	r3, #2
 801cc28:	d1dd      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc2a:	4b39      	ldr	r3, [pc, #228]	; (801cd10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cc2c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801cc30:	4a38      	ldr	r2, [pc, #224]	; (801cd14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cc32:	4839      	ldr	r0, [pc, #228]	; (801cd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801cc34:	f007 ff3e 	bl	8024ab4 <__assert_func>
 801cc38:	6900      	ldr	r0, [r0, #16]
 801cc3a:	bd08      	pop	{r3, pc}
 801cc3c:	684b      	ldr	r3, [r1, #4]
 801cc3e:	781b      	ldrb	r3, [r3, #0]
 801cc40:	2b01      	cmp	r3, #1
 801cc42:	d007      	beq.n	801cc54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801cc44:	d30b      	bcc.n	801cc5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cc46:	2b02      	cmp	r3, #2
 801cc48:	d1cd      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc4a:	4b31      	ldr	r3, [pc, #196]	; (801cd10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cc4c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801cc50:	4a30      	ldr	r2, [pc, #192]	; (801cd14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cc52:	e7ee      	b.n	801cc32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cc54:	6880      	ldr	r0, [r0, #8]
 801cc56:	e7f0      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d1c3      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc5e:	6980      	ldr	r0, [r0, #24]
 801cc60:	e7eb      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cc64:	e7e9      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc66:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cc68:	e7e7      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cc6c:	e7e5      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801cc70:	e7e3      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc72:	2a2c      	cmp	r2, #44	; 0x2c
 801cc74:	d030      	beq.n	801ccd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801cc76:	d80f      	bhi.n	801cc98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801cc78:	2a08      	cmp	r2, #8
 801cc7a:	d044      	beq.n	801cd06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cc7c:	d805      	bhi.n	801cc8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cc7e:	2a04      	cmp	r2, #4
 801cc80:	d03f      	beq.n	801cd02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cc82:	2a05      	cmp	r2, #5
 801cc84:	d1af      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cc88:	e7d7      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc8a:	2a0a      	cmp	r2, #10
 801cc8c:	d03b      	beq.n	801cd06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cc8e:	d301      	bcc.n	801cc94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801cc90:	2a0b      	cmp	r2, #11
 801cc92:	d1a8      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc94:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cc96:	e7d0      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc98:	2a30      	cmp	r2, #48	; 0x30
 801cc9a:	d036      	beq.n	801cd0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cc9c:	d808      	bhi.n	801ccb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801cc9e:	2a2e      	cmp	r2, #46	; 0x2e
 801cca0:	684b      	ldr	r3, [r1, #4]
 801cca2:	d028      	beq.n	801ccf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801cca4:	d90b      	bls.n	801ccbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801cca6:	781b      	ldrb	r3, [r3, #0]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d19c      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ccac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ccae:	e7c4      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ccb0:	2a32      	cmp	r2, #50	; 0x32
 801ccb2:	d02a      	beq.n	801cd0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ccb4:	d301      	bcc.n	801ccba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801ccb6:	2a33      	cmp	r2, #51	; 0x33
 801ccb8:	d195      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ccba:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ccbc:	e7bd      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ccbe:	781b      	ldrb	r3, [r3, #0]
 801ccc0:	2b01      	cmp	r3, #1
 801ccc2:	d007      	beq.n	801ccd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801ccc4:	d3f2      	bcc.n	801ccac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801ccc6:	2b02      	cmp	r3, #2
 801ccc8:	d18d      	bne.n	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ccca:	4b11      	ldr	r3, [pc, #68]	; (801cd10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cccc:	f240 31e1 	movw	r1, #993	; 0x3e1
 801ccd0:	4a10      	ldr	r2, [pc, #64]	; (801cd14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ccd2:	e7ae      	b.n	801cc32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ccd4:	6940      	ldr	r0, [r0, #20]
 801ccd6:	e7b0      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ccd8:	684b      	ldr	r3, [r1, #4]
 801ccda:	781b      	ldrb	r3, [r3, #0]
 801ccdc:	2b01      	cmp	r3, #1
 801ccde:	d008      	beq.n	801ccf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801cce0:	d30d      	bcc.n	801ccfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cce2:	2b02      	cmp	r3, #2
 801cce4:	f47f af7f 	bne.w	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cce8:	4b09      	ldr	r3, [pc, #36]	; (801cd10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ccea:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801ccee:	4a09      	ldr	r2, [pc, #36]	; (801cd14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ccf0:	e79f      	b.n	801cc32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ccf2:	68c0      	ldr	r0, [r0, #12]
 801ccf4:	e7a1      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ccf6:	781b      	ldrb	r3, [r3, #0]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	f47f af74 	bne.w	801cbe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ccfe:	69c0      	ldr	r0, [r0, #28]
 801cd00:	e79b      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd02:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cd04:	e799      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cd08:	e797      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cd0c:	e795      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd0e:	bf00      	nop
 801cd10:	0802aab2 	.word	0x0802aab2
 801cd14:	0802b267 	.word	0x0802b267
 801cd18:	0802aafe 	.word	0x0802aafe

0801cd1c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801cd1c:	b508      	push	{r3, lr}
 801cd1e:	4b06      	ldr	r3, [pc, #24]	; (801cd38 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801cd20:	8818      	ldrh	r0, [r3, #0]
 801cd22:	b928      	cbnz	r0, 801cd30 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801cd24:	4b05      	ldr	r3, [pc, #20]	; (801cd3c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801cd26:	21d7      	movs	r1, #215	; 0xd7
 801cd28:	4a05      	ldr	r2, [pc, #20]	; (801cd40 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801cd2a:	4806      	ldr	r0, [pc, #24]	; (801cd44 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801cd2c:	f007 fec2 	bl	8024ab4 <__assert_func>
 801cd30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cd34:	b280      	uxth	r0, r0
 801cd36:	bd08      	pop	{r3, pc}
 801cd38:	2000baf6 	.word	0x2000baf6
 801cd3c:	0802ad4d 	.word	0x0802ad4d
 801cd40:	0802b22c 	.word	0x0802b22c
 801cd44:	0802ad8f 	.word	0x0802ad8f

0801cd48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd4c:	4616      	mov	r6, r2
 801cd4e:	b087      	sub	sp, #28
 801cd50:	461f      	mov	r7, r3
 801cd52:	b33b      	cbz	r3, 801cda4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cd54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cd58:	b323      	cbz	r3, 801cda4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cd5a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cd5e:	b30b      	cbz	r3, 801cda4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cd60:	6808      	ldr	r0, [r1, #0]
 801cd62:	ab04      	add	r3, sp, #16
 801cd64:	6849      	ldr	r1, [r1, #4]
 801cd66:	4c5a      	ldr	r4, [pc, #360]	; (801ced0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801cd68:	c303      	stmia	r3!, {r0, r1}
 801cd6a:	a804      	add	r0, sp, #16
 801cd6c:	f7fb fb0e 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd70:	6820      	ldr	r0, [r4, #0]
 801cd72:	6803      	ldr	r3, [r0, #0]
 801cd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd76:	4798      	blx	r3
 801cd78:	2fff      	cmp	r7, #255	; 0xff
 801cd7a:	4623      	mov	r3, r4
 801cd7c:	d015      	beq.n	801cdaa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cd7e:	f010 0f08 	tst.w	r0, #8
 801cd82:	d015      	beq.n	801cdb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801cd84:	6818      	ldr	r0, [r3, #0]
 801cd86:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cd8a:	6801      	ldr	r1, [r0, #0]
 801cd8c:	9401      	str	r4, [sp, #4]
 801cd8e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cd92:	9702      	str	r7, [sp, #8]
 801cd94:	9400      	str	r4, [sp, #0]
 801cd96:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cd9a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801cd9c:	4631      	mov	r1, r6
 801cd9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cda2:	47a0      	blx	r4
 801cda4:	b007      	add	sp, #28
 801cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdaa:	f010 0f02 	tst.w	r0, #2
 801cdae:	e7e8      	b.n	801cd82 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801cdb0:	6818      	ldr	r0, [r3, #0]
 801cdb2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801cdb6:	6803      	ldr	r3, [r0, #0]
 801cdb8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801cdbc:	6a1b      	ldr	r3, [r3, #32]
 801cdbe:	4798      	blx	r3
 801cdc0:	4944      	ldr	r1, [pc, #272]	; (801ced4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801cdc2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cdc6:	2fff      	cmp	r7, #255	; 0xff
 801cdc8:	f8b1 c000 	ldrh.w	ip, [r1]
 801cdcc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801cdd0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cdd4:	4688      	mov	r8, r1
 801cdd6:	fb0c 2303 	mla	r3, ip, r3, r2
 801cdda:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801cdde:	b2f2      	uxtb	r2, r6
 801cde0:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801cde4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cde8:	4418      	add	r0, r3
 801cdea:	d112      	bne.n	801ce12 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801cdec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cdf0:	2100      	movs	r1, #0
 801cdf2:	42a9      	cmp	r1, r5
 801cdf4:	da66      	bge.n	801cec4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	2700      	movs	r7, #0
 801cdfa:	42a7      	cmp	r7, r4
 801cdfc:	f103 0303 	add.w	r3, r3, #3
 801ce00:	da57      	bge.n	801ceb2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801ce02:	f803 2c03 	strb.w	r2, [r3, #-3]
 801ce06:	3701      	adds	r7, #1
 801ce08:	f803 ec02 	strb.w	lr, [r3, #-2]
 801ce0c:	f803 cc01 	strb.w	ip, [r3, #-1]
 801ce10:	e7f3      	b.n	801cdfa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801ce12:	b2bb      	uxth	r3, r7
 801ce14:	f04f 0800 	mov.w	r8, #0
 801ce18:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ce1c:	fb0c fc03 	mul.w	ip, ip, r3
 801ce20:	fb0e fe03 	mul.w	lr, lr, r3
 801ce24:	435a      	muls	r2, r3
 801ce26:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801ce2a:	460f      	mov	r7, r1
 801ce2c:	b29b      	uxth	r3, r3
 801ce2e:	45a8      	cmp	r8, r5
 801ce30:	da48      	bge.n	801cec4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801ce32:	4601      	mov	r1, r0
 801ce34:	f04f 0a00 	mov.w	sl, #0
 801ce38:	45a2      	cmp	sl, r4
 801ce3a:	f101 0103 	add.w	r1, r1, #3
 801ce3e:	da2f      	bge.n	801cea0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801ce40:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801ce44:	f10a 0a01 	add.w	sl, sl, #1
 801ce48:	fb19 f903 	smulbb	r9, r9, r3
 801ce4c:	4491      	add	r9, r2
 801ce4e:	fa1f f989 	uxth.w	r9, r9
 801ce52:	f109 0b01 	add.w	fp, r9, #1
 801ce56:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce5e:	f801 9c03 	strb.w	r9, [r1, #-3]
 801ce62:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801ce66:	fb19 f903 	smulbb	r9, r9, r3
 801ce6a:	44f1      	add	r9, lr
 801ce6c:	fa1f f989 	uxth.w	r9, r9
 801ce70:	f109 0b01 	add.w	fp, r9, #1
 801ce74:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce78:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce7c:	f801 9c02 	strb.w	r9, [r1, #-2]
 801ce80:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801ce84:	fb19 f903 	smulbb	r9, r9, r3
 801ce88:	44e1      	add	r9, ip
 801ce8a:	fa1f f989 	uxth.w	r9, r9
 801ce8e:	f109 0b01 	add.w	fp, r9, #1
 801ce92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce96:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce9a:	f801 9c01 	strb.w	r9, [r1, #-1]
 801ce9e:	e7cb      	b.n	801ce38 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801cea0:	8839      	ldrh	r1, [r7, #0]
 801cea2:	f108 0801 	add.w	r8, r8, #1
 801cea6:	1b09      	subs	r1, r1, r4
 801cea8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ceac:	4431      	add	r1, r6
 801ceae:	4408      	add	r0, r1
 801ceb0:	e7bd      	b.n	801ce2e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801ceb2:	f8b8 3000 	ldrh.w	r3, [r8]
 801ceb6:	3101      	adds	r1, #1
 801ceb8:	1b1b      	subs	r3, r3, r4
 801ceba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cebe:	4433      	add	r3, r6
 801cec0:	4418      	add	r0, r3
 801cec2:	e796      	b.n	801cdf2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801cec4:	4b02      	ldr	r3, [pc, #8]	; (801ced0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801cec6:	6818      	ldr	r0, [r3, #0]
 801cec8:	6803      	ldr	r3, [r0, #0]
 801ceca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cecc:	4798      	blx	r3
 801cece:	e769      	b.n	801cda4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ced0:	2000bafc 	.word	0x2000bafc
 801ced4:	2000baf6 	.word	0x2000baf6

0801ced8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cedc:	b08d      	sub	sp, #52	; 0x34
 801cede:	460c      	mov	r4, r1
 801cee0:	4617      	mov	r7, r2
 801cee2:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801cee6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ceea:	2e00      	cmp	r6, #0
 801ceec:	d04a      	beq.n	801cf84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ceee:	6810      	ldr	r0, [r2, #0]
 801cef0:	ad08      	add	r5, sp, #32
 801cef2:	6851      	ldr	r1, [r2, #4]
 801cef4:	c503      	stmia	r5!, {r0, r1}
 801cef6:	6818      	ldr	r0, [r3, #0]
 801cef8:	ad0a      	add	r5, sp, #40	; 0x28
 801cefa:	6859      	ldr	r1, [r3, #4]
 801cefc:	c503      	stmia	r5!, {r0, r1}
 801cefe:	a808      	add	r0, sp, #32
 801cf00:	f7fb fa44 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf04:	4639      	mov	r1, r7
 801cf06:	a80a      	add	r0, sp, #40	; 0x28
 801cf08:	4f59      	ldr	r7, [pc, #356]	; (801d070 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801cf0a:	f7fb fa27 	bl	801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf0e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801cf12:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801cf16:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801cf1a:	6838      	ldr	r0, [r7, #0]
 801cf1c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cf20:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801cf24:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801cf28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cf2c:	440c      	add	r4, r1
 801cf2e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cf32:	440a      	add	r2, r1
 801cf34:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cf38:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801cf3c:	4413      	add	r3, r2
 801cf3e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cf42:	6803      	ldr	r3, [r0, #0]
 801cf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf46:	4798      	blx	r3
 801cf48:	2eff      	cmp	r6, #255	; 0xff
 801cf4a:	f000 8089 	beq.w	801d060 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801cf4e:	0743      	lsls	r3, r0, #29
 801cf50:	d405      	bmi.n	801cf5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801cf52:	f1b9 0f00 	cmp.w	r9, #0
 801cf56:	d018      	beq.n	801cf8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801cf58:	f010 0f10 	tst.w	r0, #16
 801cf5c:	d015      	beq.n	801cf8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801cf5e:	6838      	ldr	r0, [r7, #0]
 801cf60:	b2ad      	uxth	r5, r5
 801cf62:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cf66:	6801      	ldr	r1, [r0, #0]
 801cf68:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cf6c:	9500      	str	r5, [sp, #0]
 801cf6e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801cf72:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801cf76:	9602      	str	r6, [sp, #8]
 801cf78:	fa1f f688 	uxth.w	r6, r8
 801cf7c:	9601      	str	r6, [sp, #4]
 801cf7e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801cf80:	4621      	mov	r1, r4
 801cf82:	47a8      	blx	r5
 801cf84:	b00d      	add	sp, #52	; 0x34
 801cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf8a:	6838      	ldr	r0, [r7, #0]
 801cf8c:	6803      	ldr	r3, [r0, #0]
 801cf8e:	6a1b      	ldr	r3, [r3, #32]
 801cf90:	4798      	blx	r3
 801cf92:	4a38      	ldr	r2, [pc, #224]	; (801d074 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801cf94:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801cf98:	2eff      	cmp	r6, #255	; 0xff
 801cf9a:	8813      	ldrh	r3, [r2, #0]
 801cf9c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801cfa0:	fb0c 1303 	mla	r3, ip, r3, r1
 801cfa4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801cfa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfac:	4418      	add	r0, r3
 801cfae:	d032      	beq.n	801d016 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801cfb0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801cfb4:	f04f 0c00 	mov.w	ip, #0
 801cfb8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801cfbc:	9306      	str	r3, [sp, #24]
 801cfbe:	45c4      	cmp	ip, r8
 801cfc0:	da49      	bge.n	801d056 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801cfc2:	4686      	mov	lr, r0
 801cfc4:	46a1      	mov	r9, r4
 801cfc6:	eba9 0304 	sub.w	r3, r9, r4
 801cfca:	428b      	cmp	r3, r1
 801cfcc:	da13      	bge.n	801cff6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801cfce:	f819 3b01 	ldrb.w	r3, [r9], #1
 801cfd2:	f89e b000 	ldrb.w	fp, [lr]
 801cfd6:	9307      	str	r3, [sp, #28]
 801cfd8:	9b06      	ldr	r3, [sp, #24]
 801cfda:	fb1b fb03 	smulbb	fp, fp, r3
 801cfde:	9b07      	ldr	r3, [sp, #28]
 801cfe0:	fb03 b306 	mla	r3, r3, r6, fp
 801cfe4:	b29b      	uxth	r3, r3
 801cfe6:	f103 0b01 	add.w	fp, r3, #1
 801cfea:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801cfee:	121b      	asrs	r3, r3, #8
 801cff0:	f80e 3b01 	strb.w	r3, [lr], #1
 801cff4:	e7e7      	b.n	801cfc6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801cff6:	8813      	ldrh	r3, [r2, #0]
 801cff8:	f10c 0c01 	add.w	ip, ip, #1
 801cffc:	1b5b      	subs	r3, r3, r5
 801cffe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d002:	4453      	add	r3, sl
 801d004:	4418      	add	r0, r3
 801d006:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d00a:	1b5b      	subs	r3, r3, r5
 801d00c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d010:	4453      	add	r3, sl
 801d012:	441c      	add	r4, r3
 801d014:	e7d3      	b.n	801cfbe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d016:	2600      	movs	r6, #0
 801d018:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d01c:	4546      	cmp	r6, r8
 801d01e:	da1a      	bge.n	801d056 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d020:	f100 3eff 	add.w	lr, r0, #4294967295
 801d024:	4623      	mov	r3, r4
 801d026:	eba3 0904 	sub.w	r9, r3, r4
 801d02a:	4589      	cmp	r9, r1
 801d02c:	da04      	bge.n	801d038 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d02e:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d032:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d036:	e7f6      	b.n	801d026 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d038:	8813      	ldrh	r3, [r2, #0]
 801d03a:	3601      	adds	r6, #1
 801d03c:	1b5b      	subs	r3, r3, r5
 801d03e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d042:	4463      	add	r3, ip
 801d044:	4418      	add	r0, r3
 801d046:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d04a:	1b5b      	subs	r3, r3, r5
 801d04c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d050:	4463      	add	r3, ip
 801d052:	441c      	add	r4, r3
 801d054:	e7e2      	b.n	801d01c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d056:	6838      	ldr	r0, [r7, #0]
 801d058:	6803      	ldr	r3, [r0, #0]
 801d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d05c:	4798      	blx	r3
 801d05e:	e791      	b.n	801cf84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d060:	f1b9 0f00 	cmp.w	r9, #0
 801d064:	f47f af78 	bne.w	801cf58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d068:	f010 0f01 	tst.w	r0, #1
 801d06c:	e776      	b.n	801cf5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d06e:	bf00      	nop
 801d070:	2000bafc 	.word	0x2000bafc
 801d074:	2000baf6 	.word	0x2000baf6

0801d078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d078:	b510      	push	{r4, lr}
 801d07a:	4604      	mov	r4, r0
 801d07c:	2104      	movs	r1, #4
 801d07e:	f007 fcee 	bl	8024a5e <_ZdlPvj>
 801d082:	4620      	mov	r0, r4
 801d084:	bd10      	pop	{r4, pc}

0801d086 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d086:	b510      	push	{r4, lr}
 801d088:	4604      	mov	r4, r0
 801d08a:	2104      	movs	r1, #4
 801d08c:	f007 fce7 	bl	8024a5e <_ZdlPvj>
 801d090:	4620      	mov	r0, r4
 801d092:	bd10      	pop	{r4, pc}

0801d094 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d094:	b510      	push	{r4, lr}
 801d096:	4604      	mov	r4, r0
 801d098:	2104      	movs	r1, #4
 801d09a:	f007 fce0 	bl	8024a5e <_ZdlPvj>
 801d09e:	4620      	mov	r0, r4
 801d0a0:	bd10      	pop	{r4, pc}

0801d0a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d0a2:	b510      	push	{r4, lr}
 801d0a4:	4604      	mov	r4, r0
 801d0a6:	2104      	movs	r1, #4
 801d0a8:	f007 fcd9 	bl	8024a5e <_ZdlPvj>
 801d0ac:	4620      	mov	r0, r4
 801d0ae:	bd10      	pop	{r4, pc}

0801d0b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d0b0:	b510      	push	{r4, lr}
 801d0b2:	4604      	mov	r4, r0
 801d0b4:	2104      	movs	r1, #4
 801d0b6:	f007 fcd2 	bl	8024a5e <_ZdlPvj>
 801d0ba:	4620      	mov	r0, r4
 801d0bc:	bd10      	pop	{r4, pc}

0801d0be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d0be:	b510      	push	{r4, lr}
 801d0c0:	4604      	mov	r4, r0
 801d0c2:	2104      	movs	r1, #4
 801d0c4:	f007 fccb 	bl	8024a5e <_ZdlPvj>
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	bd10      	pop	{r4, pc}

0801d0cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d0cc:	b510      	push	{r4, lr}
 801d0ce:	4604      	mov	r4, r0
 801d0d0:	2104      	movs	r1, #4
 801d0d2:	f007 fcc4 	bl	8024a5e <_ZdlPvj>
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	bd10      	pop	{r4, pc}

0801d0da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d0da:	b510      	push	{r4, lr}
 801d0dc:	4604      	mov	r4, r0
 801d0de:	2104      	movs	r1, #4
 801d0e0:	f007 fcbd 	bl	8024a5e <_ZdlPvj>
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	bd10      	pop	{r4, pc}

0801d0e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d0e8:	b510      	push	{r4, lr}
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	2104      	movs	r1, #4
 801d0ee:	f007 fcb6 	bl	8024a5e <_ZdlPvj>
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	bd10      	pop	{r4, pc}

0801d0f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d0f6:	b510      	push	{r4, lr}
 801d0f8:	4604      	mov	r4, r0
 801d0fa:	2104      	movs	r1, #4
 801d0fc:	f007 fcaf 	bl	8024a5e <_ZdlPvj>
 801d100:	4620      	mov	r0, r4
 801d102:	bd10      	pop	{r4, pc}

0801d104 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d104:	b510      	push	{r4, lr}
 801d106:	4604      	mov	r4, r0
 801d108:	2104      	movs	r1, #4
 801d10a:	f007 fca8 	bl	8024a5e <_ZdlPvj>
 801d10e:	4620      	mov	r0, r4
 801d110:	bd10      	pop	{r4, pc}

0801d112 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d112:	b510      	push	{r4, lr}
 801d114:	4604      	mov	r4, r0
 801d116:	2104      	movs	r1, #4
 801d118:	f007 fca1 	bl	8024a5e <_ZdlPvj>
 801d11c:	4620      	mov	r0, r4
 801d11e:	bd10      	pop	{r4, pc}

0801d120 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d120:	b510      	push	{r4, lr}
 801d122:	4604      	mov	r4, r0
 801d124:	2104      	movs	r1, #4
 801d126:	f007 fc9a 	bl	8024a5e <_ZdlPvj>
 801d12a:	4620      	mov	r0, r4
 801d12c:	bd10      	pop	{r4, pc}

0801d12e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d12e:	b510      	push	{r4, lr}
 801d130:	4604      	mov	r4, r0
 801d132:	2104      	movs	r1, #4
 801d134:	f007 fc93 	bl	8024a5e <_ZdlPvj>
 801d138:	4620      	mov	r0, r4
 801d13a:	bd10      	pop	{r4, pc}

0801d13c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d13c:	b510      	push	{r4, lr}
 801d13e:	4604      	mov	r4, r0
 801d140:	2104      	movs	r1, #4
 801d142:	f007 fc8c 	bl	8024a5e <_ZdlPvj>
 801d146:	4620      	mov	r0, r4
 801d148:	bd10      	pop	{r4, pc}

0801d14a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d14a:	b510      	push	{r4, lr}
 801d14c:	4604      	mov	r4, r0
 801d14e:	2104      	movs	r1, #4
 801d150:	f007 fc85 	bl	8024a5e <_ZdlPvj>
 801d154:	4620      	mov	r0, r4
 801d156:	bd10      	pop	{r4, pc}

0801d158 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d158:	b510      	push	{r4, lr}
 801d15a:	4604      	mov	r4, r0
 801d15c:	2104      	movs	r1, #4
 801d15e:	f007 fc7e 	bl	8024a5e <_ZdlPvj>
 801d162:	4620      	mov	r0, r4
 801d164:	bd10      	pop	{r4, pc}

0801d166 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d166:	b510      	push	{r4, lr}
 801d168:	4604      	mov	r4, r0
 801d16a:	2104      	movs	r1, #4
 801d16c:	f007 fc77 	bl	8024a5e <_ZdlPvj>
 801d170:	4620      	mov	r0, r4
 801d172:	bd10      	pop	{r4, pc}

0801d174 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d174:	b510      	push	{r4, lr}
 801d176:	4604      	mov	r4, r0
 801d178:	2104      	movs	r1, #4
 801d17a:	f007 fc70 	bl	8024a5e <_ZdlPvj>
 801d17e:	4620      	mov	r0, r4
 801d180:	bd10      	pop	{r4, pc}

0801d182 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d182:	b510      	push	{r4, lr}
 801d184:	4604      	mov	r4, r0
 801d186:	2104      	movs	r1, #4
 801d188:	f007 fc69 	bl	8024a5e <_ZdlPvj>
 801d18c:	4620      	mov	r0, r4
 801d18e:	bd10      	pop	{r4, pc}

0801d190 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d194:	4d9e      	ldr	r5, [pc, #632]	; (801d410 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801d196:	4690      	mov	r8, r2
 801d198:	b08f      	sub	sp, #60	; 0x3c
 801d19a:	4604      	mov	r4, r0
 801d19c:	682a      	ldr	r2, [r5, #0]
 801d19e:	4689      	mov	r9, r1
 801d1a0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d1a4:	2a02      	cmp	r2, #2
 801d1a6:	d106      	bne.n	801d1b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d1a8:	4b9a      	ldr	r3, [pc, #616]	; (801d414 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801d1aa:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801d1ae:	4a9a      	ldr	r2, [pc, #616]	; (801d418 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d1b0:	489a      	ldr	r0, [pc, #616]	; (801d41c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801d1b2:	f007 fc7f 	bl	8024ab4 <__assert_func>
 801d1b6:	ae0e      	add	r6, sp, #56	; 0x38
 801d1b8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801d1bc:	4630      	mov	r0, r6
 801d1be:	f7fe f8b3 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d1c2:	6823      	ldr	r3, [r4, #0]
 801d1c4:	4607      	mov	r7, r0
 801d1c6:	4620      	mov	r0, r4
 801d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1ca:	4798      	blx	r3
 801d1cc:	4287      	cmp	r7, r0
 801d1ce:	d004      	beq.n	801d1da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d1d0:	4b93      	ldr	r3, [pc, #588]	; (801d420 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d1d2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d1d6:	4a90      	ldr	r2, [pc, #576]	; (801d418 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d1d8:	e7ea      	b.n	801d1b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d1da:	4630      	mov	r0, r6
 801d1dc:	f7fe f820 	bl	801b220 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d1e0:	4607      	mov	r7, r0
 801d1e2:	b920      	cbnz	r0, 801d1ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d1e4:	4b8f      	ldr	r3, [pc, #572]	; (801d424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d1e6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d1ea:	4a8b      	ldr	r2, [pc, #556]	; (801d418 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d1ec:	e7e0      	b.n	801d1b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d1ee:	f8d8 0000 	ldr.w	r0, [r8]
 801d1f2:	ab06      	add	r3, sp, #24
 801d1f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d1f8:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d1fc:	c303      	stmia	r3!, {r0, r1}
 801d1fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d202:	ab08      	add	r3, sp, #32
 801d204:	f8d9 0000 	ldr.w	r0, [r9]
 801d208:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d20c:	c303      	stmia	r3!, {r0, r1}
 801d20e:	4630      	mov	r0, r6
 801d210:	f7fd fefe 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d214:	4680      	mov	r8, r0
 801d216:	4630      	mov	r0, r6
 801d218:	4e83      	ldr	r6, [pc, #524]	; (801d428 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d21a:	f7fd ff33 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d21e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d222:	f10d 0920 	add.w	r9, sp, #32
 801d226:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d22a:	a806      	add	r0, sp, #24
 801d22c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d230:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d234:	f7fb f8aa 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d238:	4648      	mov	r0, r9
 801d23a:	f7fb f8a7 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d23e:	a80a      	add	r0, sp, #40	; 0x28
 801d240:	f7fb f8a4 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d244:	4b79      	ldr	r3, [pc, #484]	; (801d42c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d246:	2100      	movs	r1, #0
 801d248:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d24c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d250:	4648      	mov	r0, r9
 801d252:	910c      	str	r1, [sp, #48]	; 0x30
 801d254:	a90c      	add	r1, sp, #48	; 0x30
 801d256:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d25a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d25e:	f7f7 fb61 	bl	8014924 <_ZN8touchgfx4RectaNERKS0_>
 801d262:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d266:	9602      	str	r6, [sp, #8]
 801d268:	f1bc 0f00 	cmp.w	ip, #0
 801d26c:	f000 80a4 	beq.w	801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d270:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d274:	2e00      	cmp	r6, #0
 801d276:	f000 809f 	beq.w	801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d27a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d27e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d282:	4288      	cmp	r0, r1
 801d284:	db36      	blt.n	801d2f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d286:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d28a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d28e:	429a      	cmp	r2, r3
 801d290:	db30      	blt.n	801d2f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d292:	4460      	add	r0, ip
 801d294:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d298:	4461      	add	r1, ip
 801d29a:	b200      	sxth	r0, r0
 801d29c:	b209      	sxth	r1, r1
 801d29e:	4288      	cmp	r0, r1
 801d2a0:	dc28      	bgt.n	801d2f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d2a2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d2a6:	4432      	add	r2, r6
 801d2a8:	440b      	add	r3, r1
 801d2aa:	b212      	sxth	r2, r2
 801d2ac:	b21b      	sxth	r3, r3
 801d2ae:	429a      	cmp	r2, r3
 801d2b0:	dc20      	bgt.n	801d2f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d2b2:	6823      	ldr	r3, [r4, #0]
 801d2b4:	4620      	mov	r0, r4
 801d2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2b8:	4798      	blx	r3
 801d2ba:	4682      	mov	sl, r0
 801d2bc:	6828      	ldr	r0, [r5, #0]
 801d2be:	6803      	ldr	r3, [r0, #0]
 801d2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2c2:	4798      	blx	r3
 801d2c4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d2c8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d2cc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d2d0:	9303      	str	r3, [sp, #12]
 801d2d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d2d6:	1a9b      	subs	r3, r3, r2
 801d2d8:	b29b      	uxth	r3, r3
 801d2da:	b21c      	sxth	r4, r3
 801d2dc:	2c00      	cmp	r4, #0
 801d2de:	dc0e      	bgt.n	801d2fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801d2e0:	b134      	cbz	r4, 801d2f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801d2e2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d2e6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d2ea:	4413      	add	r3, r2
 801d2ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d2f0:	463c      	mov	r4, r7
 801d2f2:	e00b      	b.n	801d30c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801d2f4:	4b4e      	ldr	r3, [pc, #312]	; (801d430 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d2f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d2fa:	4a47      	ldr	r2, [pc, #284]	; (801d418 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d2fc:	e758      	b.n	801d1b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d2fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d302:	ebab 0303 	sub.w	r3, fp, r3
 801d306:	443c      	add	r4, r7
 801d308:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d30c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d310:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d314:	1a9b      	subs	r3, r3, r2
 801d316:	b29b      	uxth	r3, r3
 801d318:	b219      	sxth	r1, r3
 801d31a:	2900      	cmp	r1, #0
 801d31c:	dd50      	ble.n	801d3c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801d31e:	9a03      	ldr	r2, [sp, #12]
 801d320:	fb02 4401 	mla	r4, r2, r1, r4
 801d324:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d328:	1ad3      	subs	r3, r2, r3
 801d32a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d32e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d332:	f1bc 0f00 	cmp.w	ip, #0
 801d336:	dd3f      	ble.n	801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d338:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d33c:	2e00      	cmp	r6, #0
 801d33e:	dd3b      	ble.n	801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d340:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d344:	2203      	movs	r2, #3
 801d346:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d34a:	fb0a f801 	mul.w	r8, sl, r1
 801d34e:	fb13 8802 	smlabb	r8, r3, r2, r8
 801d352:	9a02      	ldr	r2, [sp, #8]
 801d354:	4480      	add	r8, r0
 801d356:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d35a:	8812      	ldrh	r2, [r2, #0]
 801d35c:	4584      	cmp	ip, r0
 801d35e:	eba2 0303 	sub.w	r3, r2, r3
 801d362:	bfa8      	it	ge
 801d364:	4684      	movge	ip, r0
 801d366:	459c      	cmp	ip, r3
 801d368:	bfa8      	it	ge
 801d36a:	469c      	movge	ip, r3
 801d36c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801d370:	429e      	cmp	r6, r3
 801d372:	bfa8      	it	ge
 801d374:	461e      	movge	r6, r3
 801d376:	4b2d      	ldr	r3, [pc, #180]	; (801d42c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d378:	881b      	ldrh	r3, [r3, #0]
 801d37a:	1a59      	subs	r1, r3, r1
 801d37c:	4633      	mov	r3, r6
 801d37e:	428e      	cmp	r6, r1
 801d380:	bfa8      	it	ge
 801d382:	460b      	movge	r3, r1
 801d384:	4562      	cmp	r2, ip
 801d386:	9302      	str	r3, [sp, #8]
 801d388:	d12d      	bne.n	801d3e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d38a:	455a      	cmp	r2, fp
 801d38c:	d12b      	bne.n	801d3e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d38e:	6828      	ldr	r0, [r5, #0]
 801d390:	6803      	ldr	r3, [r0, #0]
 801d392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d394:	4798      	blx	r3
 801d396:	07c3      	lsls	r3, r0, #31
 801d398:	d51b      	bpl.n	801d3d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801d39a:	6828      	ldr	r0, [r5, #0]
 801d39c:	9b02      	ldr	r3, [sp, #8]
 801d39e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d3a2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d3a6:	6803      	ldr	r3, [r0, #0]
 801d3a8:	f8cd b000 	str.w	fp, [sp]
 801d3ac:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801d3ae:	4623      	mov	r3, r4
 801d3b0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d3b4:	47a8      	blx	r5
 801d3b6:	4607      	mov	r7, r0
 801d3b8:	4638      	mov	r0, r7
 801d3ba:	b00f      	add	sp, #60	; 0x3c
 801d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3c0:	bf1f      	itttt	ne
 801d3c2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d3c6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d3ca:	189b      	addne	r3, r3, r2
 801d3cc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d3d0:	e7ad      	b.n	801d32e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801d3d2:	6828      	ldr	r0, [r5, #0]
 801d3d4:	4642      	mov	r2, r8
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	6803      	ldr	r3, [r0, #0]
 801d3da:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801d3dc:	9b02      	ldr	r3, [sp, #8]
 801d3de:	fb03 f30a 	mul.w	r3, r3, sl
 801d3e2:	47a8      	blx	r5
 801d3e4:	e7e8      	b.n	801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d3e6:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801d3ea:	f04f 0900 	mov.w	r9, #0
 801d3ee:	9b02      	ldr	r3, [sp, #8]
 801d3f0:	454b      	cmp	r3, r9
 801d3f2:	dde1      	ble.n	801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d3f4:	6828      	ldr	r0, [r5, #0]
 801d3f6:	4642      	mov	r2, r8
 801d3f8:	4621      	mov	r1, r4
 801d3fa:	44d0      	add	r8, sl
 801d3fc:	6803      	ldr	r3, [r0, #0]
 801d3fe:	f109 0901 	add.w	r9, r9, #1
 801d402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d404:	461e      	mov	r6, r3
 801d406:	465b      	mov	r3, fp
 801d408:	47b0      	blx	r6
 801d40a:	9b03      	ldr	r3, [sp, #12]
 801d40c:	441c      	add	r4, r3
 801d40e:	e7ee      	b.n	801d3ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801d410:	2000bafc 	.word	0x2000bafc
 801d414:	0802ab30 	.word	0x0802ab30
 801d418:	0802b311 	.word	0x0802b311
 801d41c:	0802aafe 	.word	0x0802aafe
 801d420:	0802abe4 	.word	0x0802abe4
 801d424:	0802ac39 	.word	0x0802ac39
 801d428:	2000baf6 	.word	0x2000baf6
 801d42c:	2000baf8 	.word	0x2000baf8
 801d430:	0802ac77 	.word	0x0802ac77

0801d434 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d434:	4a0b      	ldr	r2, [pc, #44]	; (801d464 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801d436:	6002      	str	r2, [r0, #0]
 801d438:	2200      	movs	r2, #0
 801d43a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d43e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d442:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d446:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d44a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d44e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d452:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d456:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d45a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d45e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d462:	4770      	bx	lr
 801d464:	0802af5c 	.word	0x0802af5c

0801d468 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d46c:	b093      	sub	sp, #76	; 0x4c
 801d46e:	880c      	ldrh	r4, [r1, #0]
 801d470:	4605      	mov	r5, r0
 801d472:	460f      	mov	r7, r1
 801d474:	4691      	mov	r9, r2
 801d476:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801d47a:	b12c      	cbz	r4, 801d488 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d47c:	4b71      	ldr	r3, [pc, #452]	; (801d644 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d47e:	2167      	movs	r1, #103	; 0x67
 801d480:	4a71      	ldr	r2, [pc, #452]	; (801d648 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d482:	4872      	ldr	r0, [pc, #456]	; (801d64c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d484:	f007 fb16 	bl	8024ab4 <__assert_func>
 801d488:	6810      	ldr	r0, [r2, #0]
 801d48a:	ae0e      	add	r6, sp, #56	; 0x38
 801d48c:	6851      	ldr	r1, [r2, #4]
 801d48e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d654 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801d492:	c603      	stmia	r6!, {r0, r1}
 801d494:	6818      	ldr	r0, [r3, #0]
 801d496:	ae10      	add	r6, sp, #64	; 0x40
 801d498:	6859      	ldr	r1, [r3, #4]
 801d49a:	c603      	stmia	r6!, {r0, r1}
 801d49c:	a80e      	add	r0, sp, #56	; 0x38
 801d49e:	f7fa ff75 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4a2:	4649      	mov	r1, r9
 801d4a4:	a810      	add	r0, sp, #64	; 0x40
 801d4a6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d650 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d4aa:	f7fa ff57 	bl	801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4ae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d4b2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d4b6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d4ba:	f8d9 0000 	ldr.w	r0, [r9]
 801d4be:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d4c2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d4c6:	440d      	add	r5, r1
 801d4c8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d4cc:	440a      	add	r2, r1
 801d4ce:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d4d2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d4d6:	4413      	add	r3, r2
 801d4d8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d4dc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4e2:	6803      	ldr	r3, [r0, #0]
 801d4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d4e8:	4798      	blx	r3
 801d4ea:	2801      	cmp	r0, #1
 801d4ec:	d11e      	bne.n	801d52c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d4ee:	220b      	movs	r2, #11
 801d4f0:	9008      	str	r0, [sp, #32]
 801d4f2:	b2b6      	uxth	r6, r6
 801d4f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d4f8:	9207      	str	r2, [sp, #28]
 801d4fa:	4629      	mov	r1, r5
 801d4fc:	f8ba 2000 	ldrh.w	r2, [sl]
 801d500:	f8cd 8010 	str.w	r8, [sp, #16]
 801d504:	9601      	str	r6, [sp, #4]
 801d506:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d50a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d50e:	9203      	str	r2, [sp, #12]
 801d510:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d514:	9202      	str	r2, [sp, #8]
 801d516:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d51a:	9200      	str	r2, [sp, #0]
 801d51c:	463a      	mov	r2, r7
 801d51e:	f8d9 0000 	ldr.w	r0, [r9]
 801d522:	f7f7 fe49 	bl	80151b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d526:	b013      	add	sp, #76	; 0x4c
 801d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d52c:	f8d9 0000 	ldr.w	r0, [r9]
 801d530:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d534:	6803      	ldr	r3, [r0, #0]
 801d536:	6a1b      	ldr	r3, [r3, #32]
 801d538:	4798      	blx	r3
 801d53a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d53e:	f8ba 3000 	ldrh.w	r3, [sl]
 801d542:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d546:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d54a:	fb01 2303 	mla	r3, r1, r3, r2
 801d54e:	4621      	mov	r1, r4
 801d550:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d554:	4418      	add	r0, r3
 801d556:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d55a:	930c      	str	r3, [sp, #48]	; 0x30
 801d55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d55e:	4299      	cmp	r1, r3
 801d560:	da6a      	bge.n	801d638 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d562:	1cc2      	adds	r2, r0, #3
 801d564:	46aa      	mov	sl, r5
 801d566:	ebaa 0305 	sub.w	r3, sl, r5
 801d56a:	429e      	cmp	r6, r3
 801d56c:	dd55      	ble.n	801d61a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d56e:	2404      	movs	r4, #4
 801d570:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d574:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d578:	eb07 0e03 	add.w	lr, r7, r3
 801d57c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d580:	b184      	cbz	r4, 801d5a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d582:	2cff      	cmp	r4, #255	; 0xff
 801d584:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d588:	d10e      	bne.n	801d5a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d58a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d58e:	d10b      	bne.n	801d5a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d590:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d594:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d598:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d59c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d5a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d5a4:	3203      	adds	r2, #3
 801d5a6:	e7de      	b.n	801d566 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d5a8:	fb08 f404 	mul.w	r4, r8, r4
 801d5ac:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d5b0:	1c63      	adds	r3, r4, #1
 801d5b2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d5b6:	121b      	asrs	r3, r3, #8
 801d5b8:	b29c      	uxth	r4, r3
 801d5ba:	43db      	mvns	r3, r3
 801d5bc:	fb1b fb04 	smulbb	fp, fp, r4
 801d5c0:	b2db      	uxtb	r3, r3
 801d5c2:	fb0c bc03 	mla	ip, ip, r3, fp
 801d5c6:	fa1f fc8c 	uxth.w	ip, ip
 801d5ca:	f10c 0b01 	add.w	fp, ip, #1
 801d5ce:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5d2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d5d6:	fb1b fb03 	smulbb	fp, fp, r3
 801d5da:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5de:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d5e2:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d5e6:	fb0c bc04 	mla	ip, ip, r4, fp
 801d5ea:	fa1f fc8c 	uxth.w	ip, ip
 801d5ee:	f10c 0b01 	add.w	fp, ip, #1
 801d5f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5f6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5fa:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d5fe:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d602:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d606:	fb1c f303 	smulbb	r3, ip, r3
 801d60a:	fb0e 3304 	mla	r3, lr, r4, r3
 801d60e:	b29b      	uxth	r3, r3
 801d610:	1c5c      	adds	r4, r3, #1
 801d612:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d616:	121b      	asrs	r3, r3, #8
 801d618:	e7c2      	b.n	801d5a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d61a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d61c:	3101      	adds	r1, #1
 801d61e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d620:	881b      	ldrh	r3, [r3, #0]
 801d622:	1b9b      	subs	r3, r3, r6
 801d624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d628:	4413      	add	r3, r2
 801d62a:	4418      	add	r0, r3
 801d62c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d630:	1b9b      	subs	r3, r3, r6
 801d632:	444b      	add	r3, r9
 801d634:	441d      	add	r5, r3
 801d636:	e791      	b.n	801d55c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d638:	4b05      	ldr	r3, [pc, #20]	; (801d650 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d63a:	6818      	ldr	r0, [r3, #0]
 801d63c:	6803      	ldr	r3, [r0, #0]
 801d63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d640:	4798      	blx	r3
 801d642:	e770      	b.n	801d526 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d644:	0802aa62 	.word	0x0802aa62
 801d648:	0802b133 	.word	0x0802b133
 801d64c:	0802aafe 	.word	0x0802aafe
 801d650:	2000bafc 	.word	0x2000bafc
 801d654:	2000baf6 	.word	0x2000baf6

0801d658 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d65c:	4614      	mov	r4, r2
 801d65e:	880a      	ldrh	r2, [r1, #0]
 801d660:	b091      	sub	sp, #68	; 0x44
 801d662:	4680      	mov	r8, r0
 801d664:	2a01      	cmp	r2, #1
 801d666:	460e      	mov	r6, r1
 801d668:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d66c:	d005      	beq.n	801d67a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d66e:	4b6d      	ldr	r3, [pc, #436]	; (801d824 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d670:	21b5      	movs	r1, #181	; 0xb5
 801d672:	4a6d      	ldr	r2, [pc, #436]	; (801d828 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d674:	486d      	ldr	r0, [pc, #436]	; (801d82c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d676:	f007 fa1d 	bl	8024ab4 <__assert_func>
 801d67a:	6820      	ldr	r0, [r4, #0]
 801d67c:	ad0c      	add	r5, sp, #48	; 0x30
 801d67e:	6861      	ldr	r1, [r4, #4]
 801d680:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d830 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d684:	c503      	stmia	r5!, {r0, r1}
 801d686:	6818      	ldr	r0, [r3, #0]
 801d688:	ad0e      	add	r5, sp, #56	; 0x38
 801d68a:	6859      	ldr	r1, [r3, #4]
 801d68c:	c503      	stmia	r5!, {r0, r1}
 801d68e:	a80c      	add	r0, sp, #48	; 0x30
 801d690:	f7fa fe7c 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d694:	4621      	mov	r1, r4
 801d696:	a80e      	add	r0, sp, #56	; 0x38
 801d698:	f7fa fe60 	bl	801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d69c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d6a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d6a4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d6a8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d6ac:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d6b0:	eb08 0401 	add.w	r4, r8, r1
 801d6b4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d6b8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d834 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d6bc:	440a      	add	r2, r1
 801d6be:	f8d8 0000 	ldr.w	r0, [r8]
 801d6c2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d6c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d6ca:	4413      	add	r3, r2
 801d6cc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d6d0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d6d4:	930a      	str	r3, [sp, #40]	; 0x28
 801d6d6:	6803      	ldr	r3, [r0, #0]
 801d6d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d6dc:	4798      	blx	r3
 801d6de:	2801      	cmp	r0, #1
 801d6e0:	d11e      	bne.n	801d720 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d6e2:	220b      	movs	r2, #11
 801d6e4:	9008      	str	r0, [sp, #32]
 801d6e6:	b2ad      	uxth	r5, r5
 801d6e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d6ec:	9207      	str	r2, [sp, #28]
 801d6ee:	4621      	mov	r1, r4
 801d6f0:	f8b9 2000 	ldrh.w	r2, [r9]
 801d6f4:	9501      	str	r5, [sp, #4]
 801d6f6:	9206      	str	r2, [sp, #24]
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d6fe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d702:	9203      	str	r2, [sp, #12]
 801d704:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d708:	9202      	str	r2, [sp, #8]
 801d70a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d70e:	9200      	str	r2, [sp, #0]
 801d710:	4632      	mov	r2, r6
 801d712:	f8d8 0000 	ldr.w	r0, [r8]
 801d716:	f7f7 fd4f 	bl	80151b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d71a:	b011      	add	sp, #68	; 0x44
 801d71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d720:	f8d8 0000 	ldr.w	r0, [r8]
 801d724:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801d728:	6803      	ldr	r3, [r0, #0]
 801d72a:	6a1b      	ldr	r3, [r3, #32]
 801d72c:	4798      	blx	r3
 801d72e:	f8b9 3000 	ldrh.w	r3, [r9]
 801d732:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d736:	f04f 0e00 	mov.w	lr, #0
 801d73a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d73e:	fa1f f987 	uxth.w	r9, r7
 801d742:	fb01 2303 	mla	r3, r1, r3, r2
 801d746:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801d74a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d74e:	b289      	uxth	r1, r1
 801d750:	4418      	add	r0, r3
 801d752:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d756:	930b      	str	r3, [sp, #44]	; 0x2c
 801d758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d75a:	459e      	cmp	lr, r3
 801d75c:	da5c      	bge.n	801d818 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801d75e:	1cc3      	adds	r3, r0, #3
 801d760:	46a2      	mov	sl, r4
 801d762:	ebaa 0204 	sub.w	r2, sl, r4
 801d766:	4295      	cmp	r5, r2
 801d768:	dd46      	ble.n	801d7f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801d76a:	f04f 0c03 	mov.w	ip, #3
 801d76e:	f04f 0b04 	mov.w	fp, #4
 801d772:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801d776:	2fff      	cmp	r7, #255	; 0xff
 801d778:	fb1c b202 	smlabb	r2, ip, r2, fp
 801d77c:	eb06 0c02 	add.w	ip, r6, r2
 801d780:	f816 b002 	ldrb.w	fp, [r6, r2]
 801d784:	d02f      	beq.n	801d7e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801d786:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801d78a:	fb12 f201 	smulbb	r2, r2, r1
 801d78e:	fb0b 2209 	mla	r2, fp, r9, r2
 801d792:	b292      	uxth	r2, r2
 801d794:	f102 0b01 	add.w	fp, r2, #1
 801d798:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d79c:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801d7a0:	fb1b fb01 	smulbb	fp, fp, r1
 801d7a4:	1212      	asrs	r2, r2, #8
 801d7a6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d7aa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d7ae:	fb02 b209 	mla	r2, r2, r9, fp
 801d7b2:	b292      	uxth	r2, r2
 801d7b4:	f102 0b01 	add.w	fp, r2, #1
 801d7b8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d7bc:	1212      	asrs	r2, r2, #8
 801d7be:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d7c2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d7c6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801d7ca:	fb1c fc01 	smulbb	ip, ip, r1
 801d7ce:	fb02 c209 	mla	r2, r2, r9, ip
 801d7d2:	b292      	uxth	r2, r2
 801d7d4:	f102 0c01 	add.w	ip, r2, #1
 801d7d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d7dc:	1212      	asrs	r2, r2, #8
 801d7de:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d7e2:	3303      	adds	r3, #3
 801d7e4:	e7bd      	b.n	801d762 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801d7e6:	f803 bc03 	strb.w	fp, [r3, #-3]
 801d7ea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d7ee:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d7f2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d7f6:	e7f2      	b.n	801d7de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801d7f8:	4b0d      	ldr	r3, [pc, #52]	; (801d830 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d7fa:	f10e 0e01 	add.w	lr, lr, #1
 801d7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d800:	881b      	ldrh	r3, [r3, #0]
 801d802:	1b5b      	subs	r3, r3, r5
 801d804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d808:	4413      	add	r3, r2
 801d80a:	4418      	add	r0, r3
 801d80c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d810:	1b5b      	subs	r3, r3, r5
 801d812:	4443      	add	r3, r8
 801d814:	441c      	add	r4, r3
 801d816:	e79f      	b.n	801d758 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801d818:	4b06      	ldr	r3, [pc, #24]	; (801d834 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d81a:	6818      	ldr	r0, [r3, #0]
 801d81c:	6803      	ldr	r3, [r0, #0]
 801d81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d820:	4798      	blx	r3
 801d822:	e77a      	b.n	801d71a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801d824:	0802a96e 	.word	0x0802a96e
 801d828:	0802b026 	.word	0x0802b026
 801d82c:	0802aafe 	.word	0x0802aafe
 801d830:	2000baf6 	.word	0x2000baf6
 801d834:	2000bafc 	.word	0x2000bafc

0801d838 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d838:	b570      	push	{r4, r5, r6, lr}
 801d83a:	780d      	ldrb	r5, [r1, #0]
 801d83c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801d840:	2d01      	cmp	r5, #1
 801d842:	d00d      	beq.n	801d860 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801d844:	d307      	bcc.n	801d856 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801d846:	2d02      	cmp	r5, #2
 801d848:	d10f      	bne.n	801d86a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801d84a:	4b08      	ldr	r3, [pc, #32]	; (801d86c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801d84c:	215a      	movs	r1, #90	; 0x5a
 801d84e:	4a08      	ldr	r2, [pc, #32]	; (801d870 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801d850:	4808      	ldr	r0, [pc, #32]	; (801d874 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801d852:	f007 f92f 	bl	8024ab4 <__assert_func>
 801d856:	9404      	str	r4, [sp, #16]
 801d858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d85c:	f7ff be04 	b.w	801d468 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d860:	9404      	str	r4, [sp, #16]
 801d862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d866:	f7ff bef7 	b.w	801d658 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d86a:	bd70      	pop	{r4, r5, r6, pc}
 801d86c:	0802a923 	.word	0x0802a923
 801d870:	0802afa4 	.word	0x0802afa4
 801d874:	0802aafe 	.word	0x0802aafe

0801d878 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d87c:	b08b      	sub	sp, #44	; 0x2c
 801d87e:	460c      	mov	r4, r1
 801d880:	4680      	mov	r8, r0
 801d882:	469a      	mov	sl, r3
 801d884:	6808      	ldr	r0, [r1, #0]
 801d886:	ab06      	add	r3, sp, #24
 801d888:	6849      	ldr	r1, [r1, #4]
 801d88a:	c303      	stmia	r3!, {r0, r1}
 801d88c:	6810      	ldr	r0, [r2, #0]
 801d88e:	ab08      	add	r3, sp, #32
 801d890:	6851      	ldr	r1, [r2, #4]
 801d892:	c303      	stmia	r3!, {r0, r1}
 801d894:	a806      	add	r0, sp, #24
 801d896:	f7fa fd79 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d89a:	4621      	mov	r1, r4
 801d89c:	a808      	add	r0, sp, #32
 801d89e:	4c61      	ldr	r4, [pc, #388]	; (801da24 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801d8a0:	f7fa fd5c 	bl	801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d8a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d8ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d8b0:	6820      	ldr	r0, [r4, #0]
 801d8b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8b6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801d8ba:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801d8be:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801d8c2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d8c6:	440a      	add	r2, r1
 801d8c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d8cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d8d0:	4413      	add	r3, r2
 801d8d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d8d6:	6803      	ldr	r3, [r0, #0]
 801d8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8da:	4798      	blx	r3
 801d8dc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d8e0:	d118      	bne.n	801d914 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801d8e2:	f010 0f20 	tst.w	r0, #32
 801d8e6:	6820      	ldr	r0, [r4, #0]
 801d8e8:	d017      	beq.n	801d91a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801d8ea:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d8ee:	b2bf      	uxth	r7, r7
 801d8f0:	6801      	ldr	r1, [r0, #0]
 801d8f2:	9402      	str	r4, [sp, #8]
 801d8f4:	fa1f f489 	uxth.w	r4, r9
 801d8f8:	f8cd a00c 	str.w	sl, [sp, #12]
 801d8fc:	9401      	str	r4, [sp, #4]
 801d8fe:	9700      	str	r7, [sp, #0]
 801d900:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d904:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d906:	4641      	mov	r1, r8
 801d908:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d90c:	47a0      	blx	r4
 801d90e:	b00b      	add	sp, #44	; 0x2c
 801d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d914:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d918:	e7e5      	b.n	801d8e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d91a:	6803      	ldr	r3, [r0, #0]
 801d91c:	6a1b      	ldr	r3, [r3, #32]
 801d91e:	4798      	blx	r3
 801d920:	4b41      	ldr	r3, [pc, #260]	; (801da28 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801d922:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d926:	f04f 0c00 	mov.w	ip, #0
 801d92a:	881a      	ldrh	r2, [r3, #0]
 801d92c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d930:	fb04 1202 	mla	r2, r4, r2, r1
 801d934:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d938:	4410      	add	r0, r2
 801d93a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801d93e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801d942:	0092      	lsls	r2, r2, #2
 801d944:	9105      	str	r1, [sp, #20]
 801d946:	9204      	str	r2, [sp, #16]
 801d948:	45cc      	cmp	ip, r9
 801d94a:	da65      	bge.n	801da18 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801d94c:	1cc4      	adds	r4, r0, #3
 801d94e:	f108 0504 	add.w	r5, r8, #4
 801d952:	f04f 0e00 	mov.w	lr, #0
 801d956:	45be      	cmp	lr, r7
 801d958:	da4d      	bge.n	801d9f6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801d95a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d95e:	b181      	cbz	r1, 801d982 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801d960:	29ff      	cmp	r1, #255	; 0xff
 801d962:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801d966:	d111      	bne.n	801d98c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d968:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d96c:	d10e      	bne.n	801d98c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801d96e:	f804 bc03 	strb.w	fp, [r4, #-3]
 801d972:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801d976:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d97a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801d97e:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d982:	f10e 0e01 	add.w	lr, lr, #1
 801d986:	3403      	adds	r4, #3
 801d988:	3504      	adds	r5, #4
 801d98a:	e7e4      	b.n	801d956 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801d98c:	fb0a f101 	mul.w	r1, sl, r1
 801d990:	1c4a      	adds	r2, r1, #1
 801d992:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801d996:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d99a:	1212      	asrs	r2, r2, #8
 801d99c:	b296      	uxth	r6, r2
 801d99e:	43d2      	mvns	r2, r2
 801d9a0:	fb1b fb06 	smulbb	fp, fp, r6
 801d9a4:	b2d2      	uxtb	r2, r2
 801d9a6:	fb01 b102 	mla	r1, r1, r2, fp
 801d9aa:	b289      	uxth	r1, r1
 801d9ac:	f101 0b01 	add.w	fp, r1, #1
 801d9b0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d9b4:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801d9b8:	fb1b fb02 	smulbb	fp, fp, r2
 801d9bc:	1209      	asrs	r1, r1, #8
 801d9be:	f804 1c03 	strb.w	r1, [r4, #-3]
 801d9c2:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801d9c6:	fb01 b106 	mla	r1, r1, r6, fp
 801d9ca:	b289      	uxth	r1, r1
 801d9cc:	f101 0b01 	add.w	fp, r1, #1
 801d9d0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d9d4:	1209      	asrs	r1, r1, #8
 801d9d6:	f804 1c02 	strb.w	r1, [r4, #-2]
 801d9da:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d9de:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d9e2:	fb11 f202 	smulbb	r2, r1, r2
 801d9e6:	fb0b 2206 	mla	r2, fp, r6, r2
 801d9ea:	b292      	uxth	r2, r2
 801d9ec:	1c56      	adds	r6, r2, #1
 801d9ee:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d9f2:	1212      	asrs	r2, r2, #8
 801d9f4:	e7c3      	b.n	801d97e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801d9f6:	881a      	ldrh	r2, [r3, #0]
 801d9f8:	f10c 0c01 	add.w	ip, ip, #1
 801d9fc:	9905      	ldr	r1, [sp, #20]
 801d9fe:	1bd2      	subs	r2, r2, r7
 801da00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801da04:	440a      	add	r2, r1
 801da06:	9904      	ldr	r1, [sp, #16]
 801da08:	4410      	add	r0, r2
 801da0a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801da0e:	1bd2      	subs	r2, r2, r7
 801da10:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801da14:	4490      	add	r8, r2
 801da16:	e797      	b.n	801d948 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801da18:	4b02      	ldr	r3, [pc, #8]	; (801da24 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801da1a:	6818      	ldr	r0, [r3, #0]
 801da1c:	6803      	ldr	r3, [r0, #0]
 801da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da20:	4798      	blx	r3
 801da22:	e774      	b.n	801d90e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801da24:	2000bafc 	.word	0x2000bafc
 801da28:	2000baf6 	.word	0x2000baf6

0801da2c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801da2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da30:	b085      	sub	sp, #20
 801da32:	4606      	mov	r6, r0
 801da34:	460c      	mov	r4, r1
 801da36:	4691      	mov	r9, r2
 801da38:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801da3c:	4698      	mov	r8, r3
 801da3e:	b385      	cbz	r5, 801daa2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801da40:	4608      	mov	r0, r1
 801da42:	f7fd fae5 	bl	801b010 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801da46:	4607      	mov	r7, r0
 801da48:	4620      	mov	r0, r4
 801da4a:	f7fd fb1b 	bl	801b084 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801da4e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801da52:	4620      	mov	r0, r4
 801da54:	f8ad 9008 	strh.w	r9, [sp, #8]
 801da58:	f8ad 800a 	strh.w	r8, [sp, #10]
 801da5c:	f8ad 700c 	strh.w	r7, [sp, #12]
 801da60:	f7fd fc62 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801da64:	2801      	cmp	r0, #1
 801da66:	d00f      	beq.n	801da88 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801da68:	4620      	mov	r0, r4
 801da6a:	f7fd fc5d 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801da6e:	2802      	cmp	r0, #2
 801da70:	d00a      	beq.n	801da88 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801da72:	4620      	mov	r0, r4
 801da74:	f7fd fc58 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801da78:	280b      	cmp	r0, #11
 801da7a:	d005      	beq.n	801da88 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801da7c:	4b1b      	ldr	r3, [pc, #108]	; (801daec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801da7e:	2142      	movs	r1, #66	; 0x42
 801da80:	4a1b      	ldr	r2, [pc, #108]	; (801daf0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801da82:	481c      	ldr	r0, [pc, #112]	; (801daf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801da84:	f007 f816 	bl	8024ab4 <__assert_func>
 801da88:	4620      	mov	r0, r4
 801da8a:	f7fd fc4d 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801da8e:	2802      	cmp	r0, #2
 801da90:	4620      	mov	r0, r4
 801da92:	d109      	bne.n	801daa8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801da94:	f7fd fbc4 	bl	801b220 <_ZNK8touchgfx6Bitmap7getDataEv>
 801da98:	462b      	mov	r3, r5
 801da9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801da9c:	a902      	add	r1, sp, #8
 801da9e:	f7ff feeb 	bl	801d878 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801daa2:	b005      	add	sp, #20
 801daa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801daa8:	f7fd fc3e 	bl	801b328 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801daac:	280b      	cmp	r0, #11
 801daae:	d10e      	bne.n	801dace <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801dab0:	4620      	mov	r0, r4
 801dab2:	f7fd fbb5 	bl	801b220 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dab6:	4606      	mov	r6, r0
 801dab8:	4620      	mov	r0, r4
 801daba:	f7fd fbe3 	bl	801b284 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dabe:	9500      	str	r5, [sp, #0]
 801dac0:	4601      	mov	r1, r0
 801dac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dac4:	aa02      	add	r2, sp, #8
 801dac6:	4630      	mov	r0, r6
 801dac8:	f7ff feb6 	bl	801d838 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dacc:	e7e9      	b.n	801daa2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dace:	6833      	ldr	r3, [r6, #0]
 801dad0:	4620      	mov	r0, r4
 801dad2:	691f      	ldr	r7, [r3, #16]
 801dad4:	f7fd fba4 	bl	801b220 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dad8:	2300      	movs	r3, #0
 801dada:	4601      	mov	r1, r0
 801dadc:	aa02      	add	r2, sp, #8
 801dade:	4630      	mov	r0, r6
 801dae0:	e9cd 5300 	strd	r5, r3, [sp]
 801dae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dae6:	47b8      	blx	r7
 801dae8:	e7db      	b.n	801daa2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801daea:	bf00      	nop
 801daec:	0802a9bc 	.word	0x0802a9bc
 801daf0:	0802b0af 	.word	0x0802b0af
 801daf4:	0802aafe 	.word	0x0802aafe

0801daf8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801daf8:	b570      	push	{r4, r5, r6, lr}
 801dafa:	9d04      	ldr	r5, [sp, #16]
 801dafc:	460c      	mov	r4, r1
 801dafe:	4619      	mov	r1, r3
 801db00:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801db04:	2a0c      	cmp	r2, #12
 801db06:	d826      	bhi.n	801db56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801db08:	e8df f002 	tbb	[pc, r2]
 801db0c:	200e1407 	.word	0x200e1407
 801db10:	20202020 	.word	0x20202020
 801db14:	20202020 	.word	0x20202020
 801db18:	20          	.byte	0x20
 801db19:	00          	.byte	0x00
 801db1a:	4b0f      	ldr	r3, [pc, #60]	; (801db58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801db1c:	f240 117f 	movw	r1, #383	; 0x17f
 801db20:	4a0e      	ldr	r2, [pc, #56]	; (801db5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801db22:	480f      	ldr	r0, [pc, #60]	; (801db60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801db24:	f006 ffc6 	bl	8024ab4 <__assert_func>
 801db28:	462a      	mov	r2, r5
 801db2a:	4620      	mov	r0, r4
 801db2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db30:	f7ff bea2 	b.w	801d878 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801db34:	6802      	ldr	r2, [r0, #0]
 801db36:	2600      	movs	r6, #0
 801db38:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801db3c:	6916      	ldr	r6, [r2, #16]
 801db3e:	462b      	mov	r3, r5
 801db40:	460a      	mov	r2, r1
 801db42:	4621      	mov	r1, r4
 801db44:	46b4      	mov	ip, r6
 801db46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db4a:	4760      	bx	ip
 801db4c:	4b05      	ldr	r3, [pc, #20]	; (801db64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801db4e:	f240 1191 	movw	r1, #401	; 0x191
 801db52:	4a02      	ldr	r2, [pc, #8]	; (801db5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801db54:	e7e5      	b.n	801db22 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801db56:	bd70      	pop	{r4, r5, r6, pc}
 801db58:	0802acd7 	.word	0x0802acd7
 801db5c:	0802b397 	.word	0x0802b397
 801db60:	0802aafe 	.word	0x0802aafe
 801db64:	0802ad18 	.word	0x0802ad18

0801db68 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801db68:	b158      	cbz	r0, 801db82 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801db6a:	2902      	cmp	r1, #2
 801db6c:	d00f      	beq.n	801db8e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801db6e:	2903      	cmp	r1, #3
 801db70:	d010      	beq.n	801db94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801db72:	2901      	cmp	r1, #1
 801db74:	d101      	bne.n	801db7a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801db76:	2001      	movs	r0, #1
 801db78:	4770      	bx	lr
 801db7a:	4b08      	ldr	r3, [pc, #32]	; (801db9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801db7c:	8819      	ldrh	r1, [r3, #0]
 801db7e:	4248      	negs	r0, r1
 801db80:	4770      	bx	lr
 801db82:	2902      	cmp	r1, #2
 801db84:	d006      	beq.n	801db94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801db86:	2903      	cmp	r1, #3
 801db88:	d0f7      	beq.n	801db7a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801db8a:	2901      	cmp	r1, #1
 801db8c:	d1f3      	bne.n	801db76 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801db8e:	4b03      	ldr	r3, [pc, #12]	; (801db9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801db90:	8818      	ldrh	r0, [r3, #0]
 801db92:	4770      	bx	lr
 801db94:	f04f 30ff 	mov.w	r0, #4294967295
 801db98:	4770      	bx	lr
 801db9a:	bf00      	nop
 801db9c:	2000baf6 	.word	0x2000baf6

0801dba0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dba0:	b170      	cbz	r0, 801dbc0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801dba2:	2902      	cmp	r1, #2
 801dba4:	d012      	beq.n	801dbcc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801dba6:	2903      	cmp	r1, #3
 801dba8:	d006      	beq.n	801dbb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dbaa:	2901      	cmp	r1, #1
 801dbac:	d001      	beq.n	801dbb2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dbae:	2001      	movs	r0, #1
 801dbb0:	4770      	bx	lr
 801dbb2:	4b08      	ldr	r3, [pc, #32]	; (801dbd4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dbb4:	8818      	ldrh	r0, [r3, #0]
 801dbb6:	4770      	bx	lr
 801dbb8:	4b06      	ldr	r3, [pc, #24]	; (801dbd4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dbba:	8818      	ldrh	r0, [r3, #0]
 801dbbc:	4240      	negs	r0, r0
 801dbbe:	4770      	bx	lr
 801dbc0:	2902      	cmp	r1, #2
 801dbc2:	d0f9      	beq.n	801dbb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dbc4:	2903      	cmp	r1, #3
 801dbc6:	d0f2      	beq.n	801dbae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801dbc8:	2901      	cmp	r1, #1
 801dbca:	d1f2      	bne.n	801dbb2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbd0:	4770      	bx	lr
 801dbd2:	bf00      	nop
 801dbd4:	2000baf6 	.word	0x2000baf6

0801dbd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbdc:	b095      	sub	sp, #84	; 0x54
 801dbde:	9109      	str	r1, [sp, #36]	; 0x24
 801dbe0:	a910      	add	r1, sp, #64	; 0x40
 801dbe2:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801dbe6:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801dbea:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801dbee:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801dbf2:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801dbf6:	e881 000c 	stmia.w	r1, {r2, r3}
 801dbfa:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801dbfe:	9306      	str	r3, [sp, #24]
 801dc00:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801dc04:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801dc08:	930e      	str	r3, [sp, #56]	; 0x38
 801dc0a:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801dc0e:	798f      	ldrb	r7, [r1, #6]
 801dc10:	930a      	str	r3, [sp, #40]	; 0x28
 801dc12:	7b4b      	ldrb	r3, [r1, #13]
 801dc14:	0158      	lsls	r0, r3, #5
 801dc16:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801dc1a:	4338      	orrs	r0, r7
 801dc1c:	9008      	str	r0, [sp, #32]
 801dc1e:	f000 8174 	beq.w	801df0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801dc22:	011b      	lsls	r3, r3, #4
 801dc24:	79c8      	ldrb	r0, [r1, #7]
 801dc26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dc2a:	4303      	orrs	r3, r0
 801dc2c:	9307      	str	r3, [sp, #28]
 801dc2e:	f000 816c 	beq.w	801df0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801dc32:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801dc36:	b29b      	uxth	r3, r3
 801dc38:	2e00      	cmp	r6, #0
 801dc3a:	f000 8112 	beq.w	801de62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801dc3e:	1af6      	subs	r6, r6, r3
 801dc40:	b2b6      	uxth	r6, r6
 801dc42:	0433      	lsls	r3, r6, #16
 801dc44:	d502      	bpl.n	801dc4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801dc46:	1bad      	subs	r5, r5, r6
 801dc48:	2600      	movs	r6, #0
 801dc4a:	b22d      	sxth	r5, r5
 801dc4c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801dc50:	a810      	add	r0, sp, #64	; 0x40
 801dc52:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801dc56:	428d      	cmp	r5, r1
 801dc58:	b28b      	uxth	r3, r1
 801dc5a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801dc5e:	bfbf      	itttt	lt
 801dc60:	18f6      	addlt	r6, r6, r3
 801dc62:	1b75      	sublt	r5, r6, r5
 801dc64:	b2ae      	uxthlt	r6, r5
 801dc66:	460d      	movlt	r5, r1
 801dc68:	8891      	ldrh	r1, [r2, #4]
 801dc6a:	440b      	add	r3, r1
 801dc6c:	4629      	mov	r1, r5
 801dc6e:	b21b      	sxth	r3, r3
 801dc70:	930d      	str	r3, [sp, #52]	; 0x34
 801dc72:	88d3      	ldrh	r3, [r2, #6]
 801dc74:	9a06      	ldr	r2, [sp, #24]
 801dc76:	449a      	add	sl, r3
 801dc78:	fa0f f38a 	sxth.w	r3, sl
 801dc7c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801dc80:	930c      	str	r3, [sp, #48]	; 0x30
 801dc82:	4bb8      	ldr	r3, [pc, #736]	; (801df64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801dc84:	f893 b000 	ldrb.w	fp, [r3]
 801dc88:	f10b 3cff 	add.w	ip, fp, #4294967295
 801dc8c:	f1dc 0300 	rsbs	r3, ip, #0
 801dc90:	eb43 030c 	adc.w	r3, r3, ip
 801dc94:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc96:	464b      	mov	r3, r9
 801dc98:	f7fa fa52 	bl	8018140 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801dc9c:	4629      	mov	r1, r5
 801dc9e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801dca2:	464b      	mov	r3, r9
 801dca4:	9a06      	ldr	r2, [sp, #24]
 801dca6:	a810      	add	r0, sp, #64	; 0x40
 801dca8:	f7fa fa62 	bl	8018170 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801dcac:	a914      	add	r1, sp, #80	; 0x50
 801dcae:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801dcb2:	a813      	add	r0, sp, #76	; 0x4c
 801dcb4:	f7fa fb3c 	bl	8018330 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dcb8:	f1b9 0f00 	cmp.w	r9, #0
 801dcbc:	f040 80d4 	bne.w	801de68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801dcc0:	f1bb 0f01 	cmp.w	fp, #1
 801dcc4:	f040 80d8 	bne.w	801de78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801dcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	f040 8122 	bne.w	801df14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801dcd0:	4ba5      	ldr	r3, [pc, #660]	; (801df68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801dcd2:	6818      	ldr	r0, [r3, #0]
 801dcd4:	6803      	ldr	r3, [r0, #0]
 801dcd6:	6a1b      	ldr	r3, [r3, #32]
 801dcd8:	4798      	blx	r3
 801dcda:	4aa4      	ldr	r2, [pc, #656]	; (801df6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801dcdc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801dce0:	8811      	ldrh	r1, [r2, #0]
 801dce2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801dce6:	fb01 2303 	mla	r3, r1, r3, r2
 801dcea:	2201      	movs	r2, #1
 801dcec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcf0:	4590      	cmp	r8, r2
 801dcf2:	4403      	add	r3, r0
 801dcf4:	9307      	str	r3, [sp, #28]
 801dcf6:	fa02 f308 	lsl.w	r3, r2, r8
 801dcfa:	f103 33ff 	add.w	r3, r3, #4294967295
 801dcfe:	b2db      	uxtb	r3, r3
 801dd00:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd02:	f000 8109 	beq.w	801df18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801dd06:	f1b8 0f02 	cmp.w	r8, #2
 801dd0a:	f000 813e 	beq.w	801df8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801dd0e:	f1b8 0f04 	cmp.w	r8, #4
 801dd12:	f000 8132 	beq.w	801df7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801dd16:	b906      	cbnz	r6, 801dd1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801dd18:	b174      	cbz	r4, 801dd38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801dd1a:	fb17 6304 	smlabb	r3, r7, r4, r6
 801dd1e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801dd20:	ebaa 0a04 	sub.w	sl, sl, r4
 801dd24:	fb13 f308 	smulbb	r3, r3, r8
 801dd28:	fa1f fa8a 	uxth.w	sl, sl
 801dd2c:	b29b      	uxth	r3, r3
 801dd2e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801dd32:	f003 0407 	and.w	r4, r3, #7
 801dd36:	9124      	str	r1, [sp, #144]	; 0x90
 801dd38:	4649      	mov	r1, r9
 801dd3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dd3c:	f7ff ff14 	bl	801db68 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801dd40:	4649      	mov	r1, r9
 801dd42:	4683      	mov	fp, r0
 801dd44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dd46:	f7ff ff2b 	bl	801dba0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801dd4a:	9906      	ldr	r1, [sp, #24]
 801dd4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd4e:	1bad      	subs	r5, r5, r6
 801dd50:	1a5b      	subs	r3, r3, r1
 801dd52:	459a      	cmp	sl, r3
 801dd54:	bfa8      	it	ge
 801dd56:	469a      	movge	sl, r3
 801dd58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd5a:	1b5d      	subs	r5, r3, r5
 801dd5c:	9b08      	ldr	r3, [sp, #32]
 801dd5e:	429d      	cmp	r5, r3
 801dd60:	bfd4      	ite	le
 801dd62:	ebc6 0605 	rsble	r6, r6, r5
 801dd66:	ebc6 0603 	rsbgt	r6, r6, r3
 801dd6a:	1bbf      	subs	r7, r7, r6
 801dd6c:	fb0b 0016 	mls	r0, fp, r6, r0
 801dd70:	fb08 f307 	mul.w	r3, r8, r7
 801dd74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dd78:	9308      	str	r3, [sp, #32]
 801dd7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dd7c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801dd80:	930b      	str	r3, [sp, #44]	; 0x2c
 801dd82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dd84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dd88:	930c      	str	r3, [sp, #48]	; 0x30
 801dd8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dd8c:	b2db      	uxtb	r3, r3
 801dd8e:	930d      	str	r3, [sp, #52]	; 0x34
 801dd90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dd92:	7819      	ldrb	r1, [r3, #0]
 801dd94:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dd98:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801dd9c:	4121      	asrs	r1, r4
 801dd9e:	9306      	str	r3, [sp, #24]
 801dda0:	fb03 0b0b 	mla	fp, r3, fp, r0
 801dda4:	b2c9      	uxtb	r1, r1
 801dda6:	f1ba 0f00 	cmp.w	sl, #0
 801ddaa:	f340 80d1 	ble.w	801df50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ddae:	46b6      	mov	lr, r6
 801ddb0:	9807      	ldr	r0, [sp, #28]
 801ddb2:	f1be 0f00 	cmp.w	lr, #0
 801ddb6:	f340 80b8 	ble.w	801df2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ddba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ddbc:	400b      	ands	r3, r1
 801ddbe:	d03e      	beq.n	801de3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801ddc0:	fb13 f302 	smulbb	r3, r3, r2
 801ddc4:	2bfe      	cmp	r3, #254	; 0xfe
 801ddc6:	dd03      	ble.n	801ddd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801ddc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ddca:	2dff      	cmp	r5, #255	; 0xff
 801ddcc:	f000 80a6 	beq.w	801df1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ddd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ddd2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ddd4:	fb15 f303 	smulbb	r3, r5, r3
 801ddd8:	b29b      	uxth	r3, r3
 801ddda:	1c5d      	adds	r5, r3, #1
 801dddc:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801dde0:	7805      	ldrb	r5, [r0, #0]
 801dde2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dde6:	fa1f fc83 	uxth.w	ip, r3
 801ddea:	43db      	mvns	r3, r3
 801ddec:	fb17 f90c 	smulbb	r9, r7, ip
 801ddf0:	b2db      	uxtb	r3, r3
 801ddf2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ddf4:	fb05 9503 	mla	r5, r5, r3, r9
 801ddf8:	b2ad      	uxth	r5, r5
 801ddfa:	f105 0901 	add.w	r9, r5, #1
 801ddfe:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801de02:	fb17 f90c 	smulbb	r9, r7, ip
 801de06:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801de08:	122d      	asrs	r5, r5, #8
 801de0a:	fb17 fc0c 	smulbb	ip, r7, ip
 801de0e:	7005      	strb	r5, [r0, #0]
 801de10:	7845      	ldrb	r5, [r0, #1]
 801de12:	fb05 9503 	mla	r5, r5, r3, r9
 801de16:	b2ad      	uxth	r5, r5
 801de18:	f105 0901 	add.w	r9, r5, #1
 801de1c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801de20:	122d      	asrs	r5, r5, #8
 801de22:	7045      	strb	r5, [r0, #1]
 801de24:	7885      	ldrb	r5, [r0, #2]
 801de26:	fb05 cc03 	mla	ip, r5, r3, ip
 801de2a:	fa1f fc8c 	uxth.w	ip, ip
 801de2e:	f10c 0301 	add.w	r3, ip, #1
 801de32:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801de36:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801de3a:	f880 c002 	strb.w	ip, [r0, #2]
 801de3e:	4444      	add	r4, r8
 801de40:	f10e 3eff 	add.w	lr, lr, #4294967295
 801de44:	b2a4      	uxth	r4, r4
 801de46:	2c07      	cmp	r4, #7
 801de48:	bf89      	itett	hi
 801de4a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801de4c:	fa41 f108 	asrls.w	r1, r1, r8
 801de50:	2400      	movhi	r4, #0
 801de52:	7859      	ldrbhi	r1, [r3, #1]
 801de54:	bf8a      	itet	hi
 801de56:	3301      	addhi	r3, #1
 801de58:	b2c9      	uxtbls	r1, r1
 801de5a:	9324      	strhi	r3, [sp, #144]	; 0x90
 801de5c:	9b06      	ldr	r3, [sp, #24]
 801de5e:	4418      	add	r0, r3
 801de60:	e7a7      	b.n	801ddb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801de62:	441d      	add	r5, r3
 801de64:	b22d      	sxth	r5, r5
 801de66:	e6f1      	b.n	801dc4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801de68:	f1b9 0f01 	cmp.w	r9, #1
 801de6c:	f47f af2c 	bne.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801de70:	f1bb 0f01 	cmp.w	fp, #1
 801de74:	f47f af28 	bne.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801de78:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801df68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801de7c:	f8db 0000 	ldr.w	r0, [fp]
 801de80:	6803      	ldr	r3, [r0, #0]
 801de82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de84:	4798      	blx	r3
 801de86:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801de8a:	465a      	mov	r2, fp
 801de8c:	d006      	beq.n	801de9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801de8e:	f1b8 0f04 	cmp.w	r8, #4
 801de92:	d13d      	bne.n	801df10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801de94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de96:	3300      	adds	r3, #0
 801de98:	bf18      	it	ne
 801de9a:	2301      	movne	r3, #1
 801de9c:	05c0      	lsls	r0, r0, #23
 801de9e:	d567      	bpl.n	801df70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801dea0:	f1b8 0f08 	cmp.w	r8, #8
 801dea4:	d164      	bne.n	801df70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	bf0c      	ite	eq
 801deaa:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801deae:	2180      	movne	r1, #128	; 0x80
 801deb0:	2e00      	cmp	r6, #0
 801deb2:	f47f af09 	bne.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801deb6:	2c00      	cmp	r4, #0
 801deb8:	f47f af06 	bne.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801debc:	9b08      	ldr	r3, [sp, #32]
 801debe:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dec0:	442b      	add	r3, r5
 801dec2:	4283      	cmp	r3, r0
 801dec4:	f73f af00 	bgt.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dec8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801decc:	4403      	add	r3, r0
 801dece:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ded0:	4283      	cmp	r3, r0
 801ded2:	f73f aef9 	bgt.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ded6:	f1b8 0f08 	cmp.w	r8, #8
 801deda:	6810      	ldr	r0, [r2, #0]
 801dedc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801dee0:	bf18      	it	ne
 801dee2:	3701      	addne	r7, #1
 801dee4:	6804      	ldr	r4, [r0, #0]
 801dee6:	9105      	str	r1, [sp, #20]
 801dee8:	bf18      	it	ne
 801deea:	f027 0701 	bicne.w	r7, r7, #1
 801deee:	990a      	ldr	r1, [sp, #40]	; 0x28
 801def0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801def4:	bf18      	it	ne
 801def6:	b2bf      	uxthne	r7, r7
 801def8:	9104      	str	r1, [sp, #16]
 801defa:	9926      	ldr	r1, [sp, #152]	; 0x98
 801defc:	e9cd 7a00 	strd	r7, sl, [sp]
 801df00:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801df04:	9924      	ldr	r1, [sp, #144]	; 0x90
 801df06:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801df08:	47a0      	blx	r4
 801df0a:	b015      	add	sp, #84	; 0x54
 801df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df10:	2300      	movs	r3, #0
 801df12:	e7c3      	b.n	801de9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801df14:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df16:	e6e0      	b.n	801dcda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801df18:	22ff      	movs	r2, #255	; 0xff
 801df1a:	e6fc      	b.n	801dd16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801df1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df1e:	7003      	strb	r3, [r0, #0]
 801df20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df22:	7043      	strb	r3, [r0, #1]
 801df24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df26:	7083      	strb	r3, [r0, #2]
 801df28:	e789      	b.n	801de3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801df2a:	9b08      	ldr	r3, [sp, #32]
 801df2c:	b153      	cbz	r3, 801df44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801df2e:	441c      	add	r4, r3
 801df30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df32:	b2a4      	uxth	r4, r4
 801df34:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801df38:	f004 0407 	and.w	r4, r4, #7
 801df3c:	7819      	ldrb	r1, [r3, #0]
 801df3e:	9324      	str	r3, [sp, #144]	; 0x90
 801df40:	4121      	asrs	r1, r4
 801df42:	b2c9      	uxtb	r1, r1
 801df44:	9b07      	ldr	r3, [sp, #28]
 801df46:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df4a:	445b      	add	r3, fp
 801df4c:	9307      	str	r3, [sp, #28]
 801df4e:	e72a      	b.n	801dda6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801df50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df52:	2b00      	cmp	r3, #0
 801df54:	d1d9      	bne.n	801df0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801df56:	4b04      	ldr	r3, [pc, #16]	; (801df68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801df58:	6818      	ldr	r0, [r3, #0]
 801df5a:	6803      	ldr	r3, [r0, #0]
 801df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df5e:	4798      	blx	r3
 801df60:	e7d3      	b.n	801df0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801df62:	bf00      	nop
 801df64:	2000baf4 	.word	0x2000baf4
 801df68:	2000bafc 	.word	0x2000bafc
 801df6c:	2000baf6 	.word	0x2000baf6
 801df70:	2b00      	cmp	r3, #0
 801df72:	f43f aea9 	beq.w	801dcc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df76:	2180      	movs	r1, #128	; 0x80
 801df78:	e79a      	b.n	801deb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801df7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df7c:	b11b      	cbz	r3, 801df86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801df7e:	07fb      	lsls	r3, r7, #31
 801df80:	d501      	bpl.n	801df86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801df82:	3701      	adds	r7, #1
 801df84:	b2bf      	uxth	r7, r7
 801df86:	2211      	movs	r2, #17
 801df88:	e6c5      	b.n	801dd16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801df8a:	2255      	movs	r2, #85	; 0x55
 801df8c:	e6c3      	b.n	801dd16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801df8e:	bf00      	nop

0801df90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801df90:	b538      	push	{r3, r4, r5, lr}
 801df92:	4c15      	ldr	r4, [pc, #84]	; (801dfe8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801df94:	4605      	mov	r5, r0
 801df96:	7823      	ldrb	r3, [r4, #0]
 801df98:	f3bf 8f5b 	dmb	ish
 801df9c:	07da      	lsls	r2, r3, #31
 801df9e:	d40b      	bmi.n	801dfb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dfa0:	4620      	mov	r0, r4
 801dfa2:	f006 fd5e 	bl	8024a62 <__cxa_guard_acquire>
 801dfa6:	b138      	cbz	r0, 801dfb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	f006 fd66 	bl	8024a7a <__cxa_guard_release>
 801dfae:	4a0f      	ldr	r2, [pc, #60]	; (801dfec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801dfb0:	490f      	ldr	r1, [pc, #60]	; (801dff0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801dfb2:	4810      	ldr	r0, [pc, #64]	; (801dff4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801dfb4:	f006 fd4b 	bl	8024a4e <__aeabi_atexit>
 801dfb8:	4c0f      	ldr	r4, [pc, #60]	; (801dff8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801dfba:	7823      	ldrb	r3, [r4, #0]
 801dfbc:	f3bf 8f5b 	dmb	ish
 801dfc0:	07db      	lsls	r3, r3, #31
 801dfc2:	d40b      	bmi.n	801dfdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	f006 fd4c 	bl	8024a62 <__cxa_guard_acquire>
 801dfca:	b138      	cbz	r0, 801dfdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801dfcc:	4620      	mov	r0, r4
 801dfce:	f006 fd54 	bl	8024a7a <__cxa_guard_release>
 801dfd2:	4a06      	ldr	r2, [pc, #24]	; (801dfec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801dfd4:	4909      	ldr	r1, [pc, #36]	; (801dffc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801dfd6:	480a      	ldr	r0, [pc, #40]	; (801e000 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801dfd8:	f006 fd39 	bl	8024a4e <__aeabi_atexit>
 801dfdc:	4b05      	ldr	r3, [pc, #20]	; (801dff4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801dfde:	612b      	str	r3, [r5, #16]
 801dfe0:	4b07      	ldr	r3, [pc, #28]	; (801e000 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801dfe2:	616b      	str	r3, [r5, #20]
 801dfe4:	bd38      	pop	{r3, r4, r5, pc}
 801dfe6:	bf00      	nop
 801dfe8:	2000bc08 	.word	0x2000bc08
 801dfec:	20000000 	.word	0x20000000
 801dff0:	0801cbc7 	.word	0x0801cbc7
 801dff4:	200000a4 	.word	0x200000a4
 801dff8:	2000bc0c 	.word	0x2000bc0c
 801dffc:	0801cbc5 	.word	0x0801cbc5
 801e000:	200000a8 	.word	0x200000a8

0801e004 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e004:	b538      	push	{r3, r4, r5, lr}
 801e006:	4c15      	ldr	r4, [pc, #84]	; (801e05c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e008:	4605      	mov	r5, r0
 801e00a:	7823      	ldrb	r3, [r4, #0]
 801e00c:	f3bf 8f5b 	dmb	ish
 801e010:	07da      	lsls	r2, r3, #31
 801e012:	d40b      	bmi.n	801e02c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e014:	4620      	mov	r0, r4
 801e016:	f006 fd24 	bl	8024a62 <__cxa_guard_acquire>
 801e01a:	b138      	cbz	r0, 801e02c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e01c:	4620      	mov	r0, r4
 801e01e:	f006 fd2c 	bl	8024a7a <__cxa_guard_release>
 801e022:	4a0f      	ldr	r2, [pc, #60]	; (801e060 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e024:	490f      	ldr	r1, [pc, #60]	; (801e064 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e026:	4810      	ldr	r0, [pc, #64]	; (801e068 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e028:	f006 fd11 	bl	8024a4e <__aeabi_atexit>
 801e02c:	4c0f      	ldr	r4, [pc, #60]	; (801e06c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e02e:	7823      	ldrb	r3, [r4, #0]
 801e030:	f3bf 8f5b 	dmb	ish
 801e034:	07db      	lsls	r3, r3, #31
 801e036:	d40b      	bmi.n	801e050 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e038:	4620      	mov	r0, r4
 801e03a:	f006 fd12 	bl	8024a62 <__cxa_guard_acquire>
 801e03e:	b138      	cbz	r0, 801e050 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e040:	4620      	mov	r0, r4
 801e042:	f006 fd1a 	bl	8024a7a <__cxa_guard_release>
 801e046:	4a06      	ldr	r2, [pc, #24]	; (801e060 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e048:	4909      	ldr	r1, [pc, #36]	; (801e070 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e04a:	480a      	ldr	r0, [pc, #40]	; (801e074 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e04c:	f006 fcff 	bl	8024a4e <__aeabi_atexit>
 801e050:	4b05      	ldr	r3, [pc, #20]	; (801e068 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e052:	60ab      	str	r3, [r5, #8]
 801e054:	4b07      	ldr	r3, [pc, #28]	; (801e074 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e056:	60eb      	str	r3, [r5, #12]
 801e058:	bd38      	pop	{r3, r4, r5, pc}
 801e05a:	bf00      	nop
 801e05c:	2000bbe8 	.word	0x2000bbe8
 801e060:	20000000 	.word	0x20000000
 801e064:	0801cbcb 	.word	0x0801cbcb
 801e068:	20000084 	.word	0x20000084
 801e06c:	2000bbec 	.word	0x2000bbec
 801e070:	0801cbc9 	.word	0x0801cbc9
 801e074:	20000088 	.word	0x20000088

0801e078 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e078:	b510      	push	{r4, lr}
 801e07a:	4604      	mov	r4, r0
 801e07c:	f7ff ff88 	bl	801df90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e080:	4620      	mov	r0, r4
 801e082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e086:	f7ff bfbd 	b.w	801e004 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e08c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e08c:	b538      	push	{r3, r4, r5, lr}
 801e08e:	4c15      	ldr	r4, [pc, #84]	; (801e0e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e090:	4605      	mov	r5, r0
 801e092:	7823      	ldrb	r3, [r4, #0]
 801e094:	f3bf 8f5b 	dmb	ish
 801e098:	07da      	lsls	r2, r3, #31
 801e09a:	d40b      	bmi.n	801e0b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e09c:	4620      	mov	r0, r4
 801e09e:	f006 fce0 	bl	8024a62 <__cxa_guard_acquire>
 801e0a2:	b138      	cbz	r0, 801e0b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	f006 fce8 	bl	8024a7a <__cxa_guard_release>
 801e0aa:	4a0f      	ldr	r2, [pc, #60]	; (801e0e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e0ac:	490f      	ldr	r1, [pc, #60]	; (801e0ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e0ae:	4810      	ldr	r0, [pc, #64]	; (801e0f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e0b0:	f006 fccd 	bl	8024a4e <__aeabi_atexit>
 801e0b4:	4c0f      	ldr	r4, [pc, #60]	; (801e0f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e0b6:	7823      	ldrb	r3, [r4, #0]
 801e0b8:	f3bf 8f5b 	dmb	ish
 801e0bc:	07db      	lsls	r3, r3, #31
 801e0be:	d40b      	bmi.n	801e0d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	f006 fcce 	bl	8024a62 <__cxa_guard_acquire>
 801e0c6:	b138      	cbz	r0, 801e0d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f006 fcd6 	bl	8024a7a <__cxa_guard_release>
 801e0ce:	4a06      	ldr	r2, [pc, #24]	; (801e0e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e0d0:	4909      	ldr	r1, [pc, #36]	; (801e0f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e0d2:	480a      	ldr	r0, [pc, #40]	; (801e0fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e0d4:	f006 fcbb 	bl	8024a4e <__aeabi_atexit>
 801e0d8:	4b05      	ldr	r3, [pc, #20]	; (801e0f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e0da:	622b      	str	r3, [r5, #32]
 801e0dc:	4b07      	ldr	r3, [pc, #28]	; (801e0fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e0de:	626b      	str	r3, [r5, #36]	; 0x24
 801e0e0:	bd38      	pop	{r3, r4, r5, pc}
 801e0e2:	bf00      	nop
 801e0e4:	2000bc10 	.word	0x2000bc10
 801e0e8:	20000000 	.word	0x20000000
 801e0ec:	0801cbbf 	.word	0x0801cbbf
 801e0f0:	200000ac 	.word	0x200000ac
 801e0f4:	2000bc14 	.word	0x2000bc14
 801e0f8:	0801cbbd 	.word	0x0801cbbd
 801e0fc:	200000b0 	.word	0x200000b0

0801e100 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e100:	b538      	push	{r3, r4, r5, lr}
 801e102:	4c15      	ldr	r4, [pc, #84]	; (801e158 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e104:	4605      	mov	r5, r0
 801e106:	7823      	ldrb	r3, [r4, #0]
 801e108:	f3bf 8f5b 	dmb	ish
 801e10c:	07da      	lsls	r2, r3, #31
 801e10e:	d40b      	bmi.n	801e128 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e110:	4620      	mov	r0, r4
 801e112:	f006 fca6 	bl	8024a62 <__cxa_guard_acquire>
 801e116:	b138      	cbz	r0, 801e128 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e118:	4620      	mov	r0, r4
 801e11a:	f006 fcae 	bl	8024a7a <__cxa_guard_release>
 801e11e:	4a0f      	ldr	r2, [pc, #60]	; (801e15c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e120:	490f      	ldr	r1, [pc, #60]	; (801e160 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e122:	4810      	ldr	r0, [pc, #64]	; (801e164 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e124:	f006 fc93 	bl	8024a4e <__aeabi_atexit>
 801e128:	4c0f      	ldr	r4, [pc, #60]	; (801e168 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e12a:	7823      	ldrb	r3, [r4, #0]
 801e12c:	f3bf 8f5b 	dmb	ish
 801e130:	07db      	lsls	r3, r3, #31
 801e132:	d40b      	bmi.n	801e14c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e134:	4620      	mov	r0, r4
 801e136:	f006 fc94 	bl	8024a62 <__cxa_guard_acquire>
 801e13a:	b138      	cbz	r0, 801e14c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e13c:	4620      	mov	r0, r4
 801e13e:	f006 fc9c 	bl	8024a7a <__cxa_guard_release>
 801e142:	4a06      	ldr	r2, [pc, #24]	; (801e15c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e144:	4909      	ldr	r1, [pc, #36]	; (801e16c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e146:	480a      	ldr	r0, [pc, #40]	; (801e170 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e148:	f006 fc81 	bl	8024a4e <__aeabi_atexit>
 801e14c:	4b05      	ldr	r3, [pc, #20]	; (801e164 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e14e:	61ab      	str	r3, [r5, #24]
 801e150:	4b07      	ldr	r3, [pc, #28]	; (801e170 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e152:	61eb      	str	r3, [r5, #28]
 801e154:	bd38      	pop	{r3, r4, r5, pc}
 801e156:	bf00      	nop
 801e158:	2000bbf0 	.word	0x2000bbf0
 801e15c:	20000000 	.word	0x20000000
 801e160:	0801cbc3 	.word	0x0801cbc3
 801e164:	2000008c 	.word	0x2000008c
 801e168:	2000bbf4 	.word	0x2000bbf4
 801e16c:	0801cbc1 	.word	0x0801cbc1
 801e170:	20000090 	.word	0x20000090

0801e174 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e174:	b510      	push	{r4, lr}
 801e176:	4604      	mov	r4, r0
 801e178:	f7ff ff88 	bl	801e08c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e17c:	4620      	mov	r0, r4
 801e17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e182:	f7ff bfbd 	b.w	801e100 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e188 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e188:	b538      	push	{r3, r4, r5, lr}
 801e18a:	4c15      	ldr	r4, [pc, #84]	; (801e1e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e18c:	4605      	mov	r5, r0
 801e18e:	7823      	ldrb	r3, [r4, #0]
 801e190:	f3bf 8f5b 	dmb	ish
 801e194:	07da      	lsls	r2, r3, #31
 801e196:	d40b      	bmi.n	801e1b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e198:	4620      	mov	r0, r4
 801e19a:	f006 fc62 	bl	8024a62 <__cxa_guard_acquire>
 801e19e:	b138      	cbz	r0, 801e1b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	f006 fc6a 	bl	8024a7a <__cxa_guard_release>
 801e1a6:	4a0f      	ldr	r2, [pc, #60]	; (801e1e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e1a8:	490f      	ldr	r1, [pc, #60]	; (801e1e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e1aa:	4810      	ldr	r0, [pc, #64]	; (801e1ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e1ac:	f006 fc4f 	bl	8024a4e <__aeabi_atexit>
 801e1b0:	4c0f      	ldr	r4, [pc, #60]	; (801e1f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e1b2:	7823      	ldrb	r3, [r4, #0]
 801e1b4:	f3bf 8f5b 	dmb	ish
 801e1b8:	07db      	lsls	r3, r3, #31
 801e1ba:	d40b      	bmi.n	801e1d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e1bc:	4620      	mov	r0, r4
 801e1be:	f006 fc50 	bl	8024a62 <__cxa_guard_acquire>
 801e1c2:	b138      	cbz	r0, 801e1d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f006 fc58 	bl	8024a7a <__cxa_guard_release>
 801e1ca:	4a06      	ldr	r2, [pc, #24]	; (801e1e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e1cc:	4909      	ldr	r1, [pc, #36]	; (801e1f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e1ce:	480a      	ldr	r0, [pc, #40]	; (801e1f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e1d0:	f006 fc3d 	bl	8024a4e <__aeabi_atexit>
 801e1d4:	4b05      	ldr	r3, [pc, #20]	; (801e1ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e1d6:	632b      	str	r3, [r5, #48]	; 0x30
 801e1d8:	4b07      	ldr	r3, [pc, #28]	; (801e1f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e1da:	636b      	str	r3, [r5, #52]	; 0x34
 801e1dc:	bd38      	pop	{r3, r4, r5, pc}
 801e1de:	bf00      	nop
 801e1e0:	2000bbf8 	.word	0x2000bbf8
 801e1e4:	20000000 	.word	0x20000000
 801e1e8:	0801cbb7 	.word	0x0801cbb7
 801e1ec:	20000094 	.word	0x20000094
 801e1f0:	2000bbfc 	.word	0x2000bbfc
 801e1f4:	0801cbb5 	.word	0x0801cbb5
 801e1f8:	20000098 	.word	0x20000098

0801e1fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e1fc:	b538      	push	{r3, r4, r5, lr}
 801e1fe:	4c15      	ldr	r4, [pc, #84]	; (801e254 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e200:	4605      	mov	r5, r0
 801e202:	7823      	ldrb	r3, [r4, #0]
 801e204:	f3bf 8f5b 	dmb	ish
 801e208:	07da      	lsls	r2, r3, #31
 801e20a:	d40b      	bmi.n	801e224 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e20c:	4620      	mov	r0, r4
 801e20e:	f006 fc28 	bl	8024a62 <__cxa_guard_acquire>
 801e212:	b138      	cbz	r0, 801e224 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e214:	4620      	mov	r0, r4
 801e216:	f006 fc30 	bl	8024a7a <__cxa_guard_release>
 801e21a:	4a0f      	ldr	r2, [pc, #60]	; (801e258 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e21c:	490f      	ldr	r1, [pc, #60]	; (801e25c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e21e:	4810      	ldr	r0, [pc, #64]	; (801e260 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e220:	f006 fc15 	bl	8024a4e <__aeabi_atexit>
 801e224:	4c0f      	ldr	r4, [pc, #60]	; (801e264 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e226:	7823      	ldrb	r3, [r4, #0]
 801e228:	f3bf 8f5b 	dmb	ish
 801e22c:	07db      	lsls	r3, r3, #31
 801e22e:	d40b      	bmi.n	801e248 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e230:	4620      	mov	r0, r4
 801e232:	f006 fc16 	bl	8024a62 <__cxa_guard_acquire>
 801e236:	b138      	cbz	r0, 801e248 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e238:	4620      	mov	r0, r4
 801e23a:	f006 fc1e 	bl	8024a7a <__cxa_guard_release>
 801e23e:	4a06      	ldr	r2, [pc, #24]	; (801e258 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e240:	4909      	ldr	r1, [pc, #36]	; (801e268 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e242:	480a      	ldr	r0, [pc, #40]	; (801e26c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e244:	f006 fc03 	bl	8024a4e <__aeabi_atexit>
 801e248:	4b05      	ldr	r3, [pc, #20]	; (801e260 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e24a:	62ab      	str	r3, [r5, #40]	; 0x28
 801e24c:	4b07      	ldr	r3, [pc, #28]	; (801e26c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e24e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e250:	bd38      	pop	{r3, r4, r5, pc}
 801e252:	bf00      	nop
 801e254:	2000bbd0 	.word	0x2000bbd0
 801e258:	20000000 	.word	0x20000000
 801e25c:	0801cbbb 	.word	0x0801cbbb
 801e260:	2000006c 	.word	0x2000006c
 801e264:	2000bbd4 	.word	0x2000bbd4
 801e268:	0801cbb9 	.word	0x0801cbb9
 801e26c:	20000070 	.word	0x20000070

0801e270 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e270:	b510      	push	{r4, lr}
 801e272:	4604      	mov	r4, r0
 801e274:	f7ff ff88 	bl	801e188 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e278:	4620      	mov	r0, r4
 801e27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e27e:	f7ff bfbd 	b.w	801e1fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e284 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e284:	b538      	push	{r3, r4, r5, lr}
 801e286:	4c15      	ldr	r4, [pc, #84]	; (801e2dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e288:	4605      	mov	r5, r0
 801e28a:	7823      	ldrb	r3, [r4, #0]
 801e28c:	f3bf 8f5b 	dmb	ish
 801e290:	07da      	lsls	r2, r3, #31
 801e292:	d40b      	bmi.n	801e2ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e294:	4620      	mov	r0, r4
 801e296:	f006 fbe4 	bl	8024a62 <__cxa_guard_acquire>
 801e29a:	b138      	cbz	r0, 801e2ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e29c:	4620      	mov	r0, r4
 801e29e:	f006 fbec 	bl	8024a7a <__cxa_guard_release>
 801e2a2:	4a0f      	ldr	r2, [pc, #60]	; (801e2e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e2a4:	490f      	ldr	r1, [pc, #60]	; (801e2e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e2a6:	4810      	ldr	r0, [pc, #64]	; (801e2e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e2a8:	f006 fbd1 	bl	8024a4e <__aeabi_atexit>
 801e2ac:	4c0f      	ldr	r4, [pc, #60]	; (801e2ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e2ae:	7823      	ldrb	r3, [r4, #0]
 801e2b0:	f3bf 8f5b 	dmb	ish
 801e2b4:	07db      	lsls	r3, r3, #31
 801e2b6:	d40b      	bmi.n	801e2d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e2b8:	4620      	mov	r0, r4
 801e2ba:	f006 fbd2 	bl	8024a62 <__cxa_guard_acquire>
 801e2be:	b138      	cbz	r0, 801e2d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f006 fbda 	bl	8024a7a <__cxa_guard_release>
 801e2c6:	4a06      	ldr	r2, [pc, #24]	; (801e2e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e2c8:	4909      	ldr	r1, [pc, #36]	; (801e2f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e2ca:	480a      	ldr	r0, [pc, #40]	; (801e2f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e2cc:	f006 fbbf 	bl	8024a4e <__aeabi_atexit>
 801e2d0:	4b05      	ldr	r3, [pc, #20]	; (801e2e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e2d2:	642b      	str	r3, [r5, #64]	; 0x40
 801e2d4:	4b07      	ldr	r3, [pc, #28]	; (801e2f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e2d6:	646b      	str	r3, [r5, #68]	; 0x44
 801e2d8:	bd38      	pop	{r3, r4, r5, pc}
 801e2da:	bf00      	nop
 801e2dc:	2000bc00 	.word	0x2000bc00
 801e2e0:	20000000 	.word	0x20000000
 801e2e4:	0801cbaf 	.word	0x0801cbaf
 801e2e8:	2000009c 	.word	0x2000009c
 801e2ec:	2000bc04 	.word	0x2000bc04
 801e2f0:	0801cbad 	.word	0x0801cbad
 801e2f4:	200000a0 	.word	0x200000a0

0801e2f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e2f8:	b538      	push	{r3, r4, r5, lr}
 801e2fa:	4c15      	ldr	r4, [pc, #84]	; (801e350 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e2fc:	4605      	mov	r5, r0
 801e2fe:	7823      	ldrb	r3, [r4, #0]
 801e300:	f3bf 8f5b 	dmb	ish
 801e304:	07da      	lsls	r2, r3, #31
 801e306:	d40b      	bmi.n	801e320 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e308:	4620      	mov	r0, r4
 801e30a:	f006 fbaa 	bl	8024a62 <__cxa_guard_acquire>
 801e30e:	b138      	cbz	r0, 801e320 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e310:	4620      	mov	r0, r4
 801e312:	f006 fbb2 	bl	8024a7a <__cxa_guard_release>
 801e316:	4a0f      	ldr	r2, [pc, #60]	; (801e354 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e318:	490f      	ldr	r1, [pc, #60]	; (801e358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e31a:	4810      	ldr	r0, [pc, #64]	; (801e35c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e31c:	f006 fb97 	bl	8024a4e <__aeabi_atexit>
 801e320:	4c0f      	ldr	r4, [pc, #60]	; (801e360 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e322:	7823      	ldrb	r3, [r4, #0]
 801e324:	f3bf 8f5b 	dmb	ish
 801e328:	07db      	lsls	r3, r3, #31
 801e32a:	d40b      	bmi.n	801e344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e32c:	4620      	mov	r0, r4
 801e32e:	f006 fb98 	bl	8024a62 <__cxa_guard_acquire>
 801e332:	b138      	cbz	r0, 801e344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e334:	4620      	mov	r0, r4
 801e336:	f006 fba0 	bl	8024a7a <__cxa_guard_release>
 801e33a:	4a06      	ldr	r2, [pc, #24]	; (801e354 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e33c:	4909      	ldr	r1, [pc, #36]	; (801e364 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e33e:	480a      	ldr	r0, [pc, #40]	; (801e368 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e340:	f006 fb85 	bl	8024a4e <__aeabi_atexit>
 801e344:	4b05      	ldr	r3, [pc, #20]	; (801e35c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e346:	63ab      	str	r3, [r5, #56]	; 0x38
 801e348:	4b07      	ldr	r3, [pc, #28]	; (801e368 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e34a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e34c:	bd38      	pop	{r3, r4, r5, pc}
 801e34e:	bf00      	nop
 801e350:	2000bbe0 	.word	0x2000bbe0
 801e354:	20000000 	.word	0x20000000
 801e358:	0801cbb3 	.word	0x0801cbb3
 801e35c:	2000007c 	.word	0x2000007c
 801e360:	2000bbe4 	.word	0x2000bbe4
 801e364:	0801cbb1 	.word	0x0801cbb1
 801e368:	20000080 	.word	0x20000080

0801e36c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e36c:	b510      	push	{r4, lr}
 801e36e:	4604      	mov	r4, r0
 801e370:	f7ff ff88 	bl	801e284 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e374:	4620      	mov	r0, r4
 801e376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e37a:	f7ff bfbd 	b.w	801e2f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e380 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e380:	b538      	push	{r3, r4, r5, lr}
 801e382:	4c15      	ldr	r4, [pc, #84]	; (801e3d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e384:	4605      	mov	r5, r0
 801e386:	7823      	ldrb	r3, [r4, #0]
 801e388:	f3bf 8f5b 	dmb	ish
 801e38c:	07da      	lsls	r2, r3, #31
 801e38e:	d40b      	bmi.n	801e3a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e390:	4620      	mov	r0, r4
 801e392:	f006 fb66 	bl	8024a62 <__cxa_guard_acquire>
 801e396:	b138      	cbz	r0, 801e3a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e398:	4620      	mov	r0, r4
 801e39a:	f006 fb6e 	bl	8024a7a <__cxa_guard_release>
 801e39e:	4a0f      	ldr	r2, [pc, #60]	; (801e3dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e3a0:	490f      	ldr	r1, [pc, #60]	; (801e3e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e3a2:	4810      	ldr	r0, [pc, #64]	; (801e3e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e3a4:	f006 fb53 	bl	8024a4e <__aeabi_atexit>
 801e3a8:	4c0f      	ldr	r4, [pc, #60]	; (801e3e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e3aa:	7823      	ldrb	r3, [r4, #0]
 801e3ac:	f3bf 8f5b 	dmb	ish
 801e3b0:	07db      	lsls	r3, r3, #31
 801e3b2:	d40b      	bmi.n	801e3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e3b4:	4620      	mov	r0, r4
 801e3b6:	f006 fb54 	bl	8024a62 <__cxa_guard_acquire>
 801e3ba:	b138      	cbz	r0, 801e3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e3bc:	4620      	mov	r0, r4
 801e3be:	f006 fb5c 	bl	8024a7a <__cxa_guard_release>
 801e3c2:	4a06      	ldr	r2, [pc, #24]	; (801e3dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e3c4:	4909      	ldr	r1, [pc, #36]	; (801e3ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e3c6:	480a      	ldr	r0, [pc, #40]	; (801e3f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e3c8:	f006 fb41 	bl	8024a4e <__aeabi_atexit>
 801e3cc:	4b05      	ldr	r3, [pc, #20]	; (801e3e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e3ce:	652b      	str	r3, [r5, #80]	; 0x50
 801e3d0:	4b07      	ldr	r3, [pc, #28]	; (801e3f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e3d2:	656b      	str	r3, [r5, #84]	; 0x54
 801e3d4:	bd38      	pop	{r3, r4, r5, pc}
 801e3d6:	bf00      	nop
 801e3d8:	2000bbd8 	.word	0x2000bbd8
 801e3dc:	20000000 	.word	0x20000000
 801e3e0:	0801cba7 	.word	0x0801cba7
 801e3e4:	20000074 	.word	0x20000074
 801e3e8:	2000bbdc 	.word	0x2000bbdc
 801e3ec:	0801cba5 	.word	0x0801cba5
 801e3f0:	20000078 	.word	0x20000078

0801e3f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e3f4:	b538      	push	{r3, r4, r5, lr}
 801e3f6:	4c15      	ldr	r4, [pc, #84]	; (801e44c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e3f8:	4605      	mov	r5, r0
 801e3fa:	7823      	ldrb	r3, [r4, #0]
 801e3fc:	f3bf 8f5b 	dmb	ish
 801e400:	07da      	lsls	r2, r3, #31
 801e402:	d40b      	bmi.n	801e41c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e404:	4620      	mov	r0, r4
 801e406:	f006 fb2c 	bl	8024a62 <__cxa_guard_acquire>
 801e40a:	b138      	cbz	r0, 801e41c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e40c:	4620      	mov	r0, r4
 801e40e:	f006 fb34 	bl	8024a7a <__cxa_guard_release>
 801e412:	4a0f      	ldr	r2, [pc, #60]	; (801e450 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e414:	490f      	ldr	r1, [pc, #60]	; (801e454 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e416:	4810      	ldr	r0, [pc, #64]	; (801e458 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e418:	f006 fb19 	bl	8024a4e <__aeabi_atexit>
 801e41c:	4c0f      	ldr	r4, [pc, #60]	; (801e45c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e41e:	7823      	ldrb	r3, [r4, #0]
 801e420:	f3bf 8f5b 	dmb	ish
 801e424:	07db      	lsls	r3, r3, #31
 801e426:	d40b      	bmi.n	801e440 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e428:	4620      	mov	r0, r4
 801e42a:	f006 fb1a 	bl	8024a62 <__cxa_guard_acquire>
 801e42e:	b138      	cbz	r0, 801e440 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e430:	4620      	mov	r0, r4
 801e432:	f006 fb22 	bl	8024a7a <__cxa_guard_release>
 801e436:	4a06      	ldr	r2, [pc, #24]	; (801e450 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e438:	4909      	ldr	r1, [pc, #36]	; (801e460 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e43a:	480a      	ldr	r0, [pc, #40]	; (801e464 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e43c:	f006 fb07 	bl	8024a4e <__aeabi_atexit>
 801e440:	4b05      	ldr	r3, [pc, #20]	; (801e458 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e442:	64ab      	str	r3, [r5, #72]	; 0x48
 801e444:	4b07      	ldr	r3, [pc, #28]	; (801e464 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e446:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e448:	bd38      	pop	{r3, r4, r5, pc}
 801e44a:	bf00      	nop
 801e44c:	2000bbc8 	.word	0x2000bbc8
 801e450:	20000000 	.word	0x20000000
 801e454:	0801cbab 	.word	0x0801cbab
 801e458:	20000064 	.word	0x20000064
 801e45c:	2000bbcc 	.word	0x2000bbcc
 801e460:	0801cba9 	.word	0x0801cba9
 801e464:	20000068 	.word	0x20000068

0801e468 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e468:	b510      	push	{r4, lr}
 801e46a:	4604      	mov	r4, r0
 801e46c:	f7ff ff88 	bl	801e380 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e470:	4620      	mov	r0, r4
 801e472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e476:	f7ff bfbd 	b.w	801e3f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e47a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e47a:	b510      	push	{r4, lr}
 801e47c:	4604      	mov	r4, r0
 801e47e:	f7ff fff3 	bl	801e468 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e482:	4620      	mov	r0, r4
 801e484:	f7ff ff72 	bl	801e36c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e488:	4620      	mov	r0, r4
 801e48a:	f7ff fe73 	bl	801e174 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e48e:	4620      	mov	r0, r4
 801e490:	f7ff fdf2 	bl	801e078 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e494:	4620      	mov	r0, r4
 801e496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e49a:	f7ff bee9 	b.w	801e270 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e4a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a4:	b087      	sub	sp, #28
 801e4a6:	7888      	ldrb	r0, [r1, #2]
 801e4a8:	4616      	mov	r6, r2
 801e4aa:	9001      	str	r0, [sp, #4]
 801e4ac:	7848      	ldrb	r0, [r1, #1]
 801e4ae:	9100      	str	r1, [sp, #0]
 801e4b0:	9002      	str	r0, [sp, #8]
 801e4b2:	7808      	ldrb	r0, [r1, #0]
 801e4b4:	9901      	ldr	r1, [sp, #4]
 801e4b6:	9003      	str	r0, [sp, #12]
 801e4b8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e4bc:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e4c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e4c4:	9902      	ldr	r1, [sp, #8]
 801e4c6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e4ca:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e4ce:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e4d2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e4d6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e4da:	9005      	str	r0, [sp, #20]
 801e4dc:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e4e0:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e4e4:	2d00      	cmp	r5, #0
 801e4e6:	eb06 080a 	add.w	r8, r6, sl
 801e4ea:	db4a      	blt.n	801e582 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e4ec:	45a9      	cmp	r9, r5
 801e4ee:	dd48      	ble.n	801e582 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e4f0:	f1bc 0f00 	cmp.w	ip, #0
 801e4f4:	db43      	blt.n	801e57e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e4f6:	45e6      	cmp	lr, ip
 801e4f8:	dd41      	ble.n	801e57e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e4fa:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e4fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e502:	441e      	add	r6, r3
 801e504:	f11c 0001 	adds.w	r0, ip, #1
 801e508:	d43e      	bmi.n	801e588 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e50a:	4586      	cmp	lr, r0
 801e50c:	dd3c      	ble.n	801e588 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e50e:	2a00      	cmp	r2, #0
 801e510:	d03a      	beq.n	801e588 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e512:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e516:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e51a:	4418      	add	r0, r3
 801e51c:	3501      	adds	r5, #1
 801e51e:	d437      	bmi.n	801e590 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e520:	45a9      	cmp	r9, r5
 801e522:	dd35      	ble.n	801e590 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e524:	b3a4      	cbz	r4, 801e590 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e526:	f1bc 0f00 	cmp.w	ip, #0
 801e52a:	db2f      	blt.n	801e58c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e52c:	45e6      	cmp	lr, ip
 801e52e:	dd2d      	ble.n	801e58c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e530:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e538:	441d      	add	r5, r3
 801e53a:	f11c 0c01 	adds.w	ip, ip, #1
 801e53e:	d42a      	bmi.n	801e596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e540:	45e6      	cmp	lr, ip
 801e542:	dd28      	ble.n	801e596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e544:	b33a      	cbz	r2, 801e596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e546:	44c6      	add	lr, r8
 801e548:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e54c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e550:	4463      	add	r3, ip
 801e552:	ea6f 0c07 	mvn.w	ip, r7
 801e556:	2a0f      	cmp	r2, #15
 801e558:	f896 a000 	ldrb.w	sl, [r6]
 801e55c:	fa5f fc8c 	uxtb.w	ip, ip
 801e560:	f890 b000 	ldrb.w	fp, [r0]
 801e564:	f895 9000 	ldrb.w	r9, [r5]
 801e568:	7819      	ldrb	r1, [r3, #0]
 801e56a:	d801      	bhi.n	801e570 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e56c:	2c0f      	cmp	r4, #15
 801e56e:	d914      	bls.n	801e59a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e570:	4b40      	ldr	r3, [pc, #256]	; (801e674 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e572:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e576:	4a40      	ldr	r2, [pc, #256]	; (801e678 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e578:	4840      	ldr	r0, [pc, #256]	; (801e67c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e57a:	f006 fa9b 	bl	8024ab4 <__assert_func>
 801e57e:	ae05      	add	r6, sp, #20
 801e580:	e7c0      	b.n	801e504 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e582:	a805      	add	r0, sp, #20
 801e584:	4606      	mov	r6, r0
 801e586:	e7c9      	b.n	801e51c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e588:	a805      	add	r0, sp, #20
 801e58a:	e7c7      	b.n	801e51c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e58c:	ad05      	add	r5, sp, #20
 801e58e:	e7d4      	b.n	801e53a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e590:	ab05      	add	r3, sp, #20
 801e592:	461d      	mov	r5, r3
 801e594:	e7dd      	b.n	801e552 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e596:	ab05      	add	r3, sp, #20
 801e598:	e7db      	b.n	801e552 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e59a:	b292      	uxth	r2, r2
 801e59c:	b2a4      	uxth	r4, r4
 801e59e:	fa1f fc8c 	uxth.w	ip, ip
 801e5a2:	fb02 f804 	mul.w	r8, r2, r4
 801e5a6:	0112      	lsls	r2, r2, #4
 801e5a8:	b2bf      	uxth	r7, r7
 801e5aa:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e5ae:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e5b2:	eba2 0208 	sub.w	r2, r2, r8
 801e5b6:	b2a4      	uxth	r4, r4
 801e5b8:	b292      	uxth	r2, r2
 801e5ba:	ebae 0e04 	sub.w	lr, lr, r4
 801e5be:	fb02 fb0b 	mul.w	fp, r2, fp
 801e5c2:	fa1f fe8e 	uxth.w	lr, lr
 801e5c6:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e5ca:	fb04 aa09 	mla	sl, r4, r9, sl
 801e5ce:	fb08 aa01 	mla	sl, r8, r1, sl
 801e5d2:	9903      	ldr	r1, [sp, #12]
 801e5d4:	fb11 f90c 	smulbb	r9, r1, ip
 801e5d8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e5dc:	9900      	ldr	r1, [sp, #0]
 801e5de:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e5e2:	fa1f fa8a 	uxth.w	sl, sl
 801e5e6:	f10a 0901 	add.w	r9, sl, #1
 801e5ea:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e5ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e5f2:	f881 a000 	strb.w	sl, [r1]
 801e5f6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e5fa:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e5fe:	fb02 fa0a 	mul.w	sl, r2, sl
 801e602:	9902      	ldr	r1, [sp, #8]
 801e604:	fb0e aa09 	mla	sl, lr, r9, sl
 801e608:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e60c:	fb04 aa09 	mla	sl, r4, r9, sl
 801e610:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e614:	fb08 a909 	mla	r9, r8, r9, sl
 801e618:	fb11 fa0c 	smulbb	sl, r1, ip
 801e61c:	9900      	ldr	r1, [sp, #0]
 801e61e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e622:	fb09 a907 	mla	r9, r9, r7, sl
 801e626:	fa1f f989 	uxth.w	r9, r9
 801e62a:	f109 0a01 	add.w	sl, r9, #1
 801e62e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e632:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e636:	f881 9001 	strb.w	r9, [r1, #1]
 801e63a:	7880      	ldrb	r0, [r0, #2]
 801e63c:	78b6      	ldrb	r6, [r6, #2]
 801e63e:	4342      	muls	r2, r0
 801e640:	78a8      	ldrb	r0, [r5, #2]
 801e642:	789b      	ldrb	r3, [r3, #2]
 801e644:	fb0e 2206 	mla	r2, lr, r6, r2
 801e648:	fb04 2400 	mla	r4, r4, r0, r2
 801e64c:	fb08 4803 	mla	r8, r8, r3, r4
 801e650:	9b01      	ldr	r3, [sp, #4]
 801e652:	fb13 fc0c 	smulbb	ip, r3, ip
 801e656:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e65a:	fb08 c707 	mla	r7, r8, r7, ip
 801e65e:	b2bf      	uxth	r7, r7
 801e660:	f107 0c01 	add.w	ip, r7, #1
 801e664:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e668:	123f      	asrs	r7, r7, #8
 801e66a:	708f      	strb	r7, [r1, #2]
 801e66c:	b007      	add	sp, #28
 801e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e672:	bf00      	nop
 801e674:	0802acc6 	.word	0x0802acc6
 801e678:	0802b1be 	.word	0x0802b1be
 801e67c:	0802ad8f 	.word	0x0802ad8f

0801e680 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e684:	ed2d 8b08 	vpush	{d8-d11}
 801e688:	b095      	sub	sp, #84	; 0x54
 801e68a:	eeb0 aa40 	vmov.f32	s20, s0
 801e68e:	eef0 9a60 	vmov.f32	s19, s1
 801e692:	930a      	str	r3, [sp, #40]	; 0x28
 801e694:	eeb0 9a41 	vmov.f32	s18, s2
 801e698:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e69c:	eeb0 8a62 	vmov.f32	s16, s5
 801e6a0:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e6a2:	eef0 8a43 	vmov.f32	s17, s6
 801e6a6:	930c      	str	r3, [sp, #48]	; 0x30
 801e6a8:	eef0 ba44 	vmov.f32	s23, s8
 801e6ac:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e6b0:	eeb0 ba64 	vmov.f32	s22, s9
 801e6b4:	9013      	str	r0, [sp, #76]	; 0x4c
 801e6b6:	eef0 aa45 	vmov.f32	s21, s10
 801e6ba:	9310      	str	r3, [sp, #64]	; 0x40
 801e6bc:	6860      	ldr	r0, [r4, #4]
 801e6be:	910f      	str	r1, [sp, #60]	; 0x3c
 801e6c0:	9212      	str	r2, [sp, #72]	; 0x48
 801e6c2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e6c4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e6c8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e6cc:	fb00 1303 	mla	r3, r0, r3, r1
 801e6d0:	6821      	ldr	r1, [r4, #0]
 801e6d2:	6854      	ldr	r4, [r2, #4]
 801e6d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6d8:	18cb      	adds	r3, r1, r3
 801e6da:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6dc:	6813      	ldr	r3, [r2, #0]
 801e6de:	930e      	str	r3, [sp, #56]	; 0x38
 801e6e0:	1d23      	adds	r3, r4, #4
 801e6e2:	9309      	str	r3, [sp, #36]	; 0x24
 801e6e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6e6:	43db      	mvns	r3, r3
 801e6e8:	b2db      	uxtb	r3, r3
 801e6ea:	930d      	str	r3, [sp, #52]	; 0x34
 801e6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	dc03      	bgt.n	801e6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e6f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	f340 823c 	ble.w	801eb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e6fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	f340 8115 	ble.w	801e92c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801e702:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e704:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e706:	1412      	asrs	r2, r2, #16
 801e708:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e70c:	d431      	bmi.n	801e772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e70e:	1c51      	adds	r1, r2, #1
 801e710:	428d      	cmp	r5, r1
 801e712:	dd31      	ble.n	801e778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e714:	2b00      	cmp	r3, #0
 801e716:	db2f      	blt.n	801e778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e718:	1c59      	adds	r1, r3, #1
 801e71a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e71c:	4288      	cmp	r0, r1
 801e71e:	dd2b      	ble.n	801e778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e722:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e724:	3b01      	subs	r3, #1
 801e726:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e728:	fb02 1203 	mla	r2, r2, r3, r1
 801e72c:	1412      	asrs	r2, r2, #16
 801e72e:	d42d      	bmi.n	801e78c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e730:	3201      	adds	r2, #1
 801e732:	4295      	cmp	r5, r2
 801e734:	dd2a      	ble.n	801e78c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e736:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e738:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e73a:	fb02 1303 	mla	r3, r2, r3, r1
 801e73e:	141b      	asrs	r3, r3, #16
 801e740:	d424      	bmi.n	801e78c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e742:	3301      	adds	r3, #1
 801e744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e746:	429a      	cmp	r2, r3
 801e748:	dd20      	ble.n	801e78c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e74c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801e750:	f103 0c03 	add.w	ip, r3, #3
 801e754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e756:	9311      	str	r3, [sp, #68]	; 0x44
 801e758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	f300 814f 	bgt.w	801e9fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801e760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e76c:	441a      	add	r2, r3
 801e76e:	920b      	str	r2, [sp, #44]	; 0x2c
 801e770:	e0de      	b.n	801e930 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e772:	1c51      	adds	r1, r2, #1
 801e774:	f040 80cb 	bne.w	801e90e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e778:	42aa      	cmp	r2, r5
 801e77a:	f280 80c8 	bge.w	801e90e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e77e:	1c5f      	adds	r7, r3, #1
 801e780:	f2c0 80c5 	blt.w	801e90e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e786:	4293      	cmp	r3, r2
 801e788:	f280 80c1 	bge.w	801e90e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e78e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e790:	9311      	str	r3, [sp, #68]	; 0x44
 801e792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e794:	2b00      	cmp	r3, #0
 801e796:	dde3      	ble.n	801e760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801e798:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e79a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e79c:	141a      	asrs	r2, r3, #16
 801e79e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e7a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e7a2:	1400      	asrs	r0, r0, #16
 801e7a4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e7a8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e7ac:	f100 810e 	bmi.w	801e9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e7b0:	1c46      	adds	r6, r0, #1
 801e7b2:	42b5      	cmp	r5, r6
 801e7b4:	f340 810c 	ble.w	801e9d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e7b8:	2a00      	cmp	r2, #0
 801e7ba:	f2c0 8109 	blt.w	801e9d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e7be:	1c56      	adds	r6, r2, #1
 801e7c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e7c2:	42b4      	cmp	r4, r6
 801e7c4:	f340 8104 	ble.w	801e9d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e7c8:	fb02 0005 	mla	r0, r2, r5, r0
 801e7cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e7ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e7d0:	f814 e000 	ldrb.w	lr, [r4, r0]
 801e7d4:	4402      	add	r2, r0
 801e7d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e7d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e7dc:	eb00 080e 	add.w	r8, r0, lr
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	f000 80e4 	beq.w	801e9ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801e7e6:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e7ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e7ee:	4484      	add	ip, r0
 801e7f0:	2900      	cmp	r1, #0
 801e7f2:	f000 80e5 	beq.w	801e9c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801e7f6:	1950      	adds	r0, r2, r5
 801e7f8:	5d52      	ldrb	r2, [r2, r5]
 801e7fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e7fc:	7840      	ldrb	r0, [r0, #1]
 801e7fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e802:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e806:	4422      	add	r2, r4
 801e808:	4420      	add	r0, r4
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e80e:	b289      	uxth	r1, r1
 801e810:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801e814:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e818:	fb03 fa01 	mul.w	sl, r3, r1
 801e81c:	011b      	lsls	r3, r3, #4
 801e81e:	f89c e000 	ldrb.w	lr, [ip]
 801e822:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e826:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e82a:	eba3 030a 	sub.w	r3, r3, sl
 801e82e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e830:	b289      	uxth	r1, r1
 801e832:	b29b      	uxth	r3, r3
 801e834:	eba9 0901 	sub.w	r9, r9, r1
 801e838:	fb03 fe0e 	mul.w	lr, r3, lr
 801e83c:	fa1f f989 	uxth.w	r9, r9
 801e840:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e844:	f892 b000 	ldrb.w	fp, [r2]
 801e848:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e84c:	f890 b000 	ldrb.w	fp, [r0]
 801e850:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e854:	f897 b000 	ldrb.w	fp, [r7]
 801e858:	fb1b fb04 	smulbb	fp, fp, r4
 801e85c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e860:	fb0e be06 	mla	lr, lr, r6, fp
 801e864:	fa1f fe8e 	uxth.w	lr, lr
 801e868:	f10e 0b01 	add.w	fp, lr, #1
 801e86c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801e870:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801e874:	f887 b000 	strb.w	fp, [r7]
 801e878:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e87c:	f898 b001 	ldrb.w	fp, [r8, #1]
 801e880:	fb03 fe0e 	mul.w	lr, r3, lr
 801e884:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e888:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e88c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e890:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e894:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e898:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e89c:	fb1b fb04 	smulbb	fp, fp, r4
 801e8a0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e8a4:	fb0e be06 	mla	lr, lr, r6, fp
 801e8a8:	fa1f fe8e 	uxth.w	lr, lr
 801e8ac:	f10e 0b01 	add.w	fp, lr, #1
 801e8b0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e8b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e8b8:	f887 e001 	strb.w	lr, [r7, #1]
 801e8bc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e8c0:	f898 e002 	ldrb.w	lr, [r8, #2]
 801e8c4:	fb03 f30c 	mul.w	r3, r3, ip
 801e8c8:	fb09 330e 	mla	r3, r9, lr, r3
 801e8cc:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e8d0:	7882      	ldrb	r2, [r0, #2]
 801e8d2:	fb01 310e 	mla	r1, r1, lr, r3
 801e8d6:	fb0a 1a02 	mla	sl, sl, r2, r1
 801e8da:	78b9      	ldrb	r1, [r7, #2]
 801e8dc:	fb11 f104 	smulbb	r1, r1, r4
 801e8e0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e8e4:	fb0a 1606 	mla	r6, sl, r6, r1
 801e8e8:	b2b6      	uxth	r6, r6
 801e8ea:	1c73      	adds	r3, r6, #1
 801e8ec:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e8f0:	1236      	asrs	r6, r6, #8
 801e8f2:	70be      	strb	r6, [r7, #2]
 801e8f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e8f6:	3703      	adds	r7, #3
 801e8f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e8fa:	4413      	add	r3, r2
 801e8fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e8fe:	9327      	str	r3, [sp, #156]	; 0x9c
 801e900:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e902:	4413      	add	r3, r2
 801e904:	9328      	str	r3, [sp, #160]	; 0xa0
 801e906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e908:	3b01      	subs	r3, #1
 801e90a:	9311      	str	r3, [sp, #68]	; 0x44
 801e90c:	e741      	b.n	801e792 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801e90e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e910:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e912:	4413      	add	r3, r2
 801e914:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e916:	9327      	str	r3, [sp, #156]	; 0x9c
 801e918:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e91a:	4413      	add	r3, r2
 801e91c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e920:	3b01      	subs	r3, #1
 801e922:	930a      	str	r3, [sp, #40]	; 0x28
 801e924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e926:	3303      	adds	r3, #3
 801e928:	930b      	str	r3, [sp, #44]	; 0x2c
 801e92a:	e6e6      	b.n	801e6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e92c:	f47f aef8 	bne.w	801e720 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e932:	2b00      	cmp	r3, #0
 801e934:	f340 811d 	ble.w	801eb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e93c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e93e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e942:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e946:	eef0 6a48 	vmov.f32	s13, s16
 801e94a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e94e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e956:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801e95a:	eef0 6a68 	vmov.f32	s13, s17
 801e95e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e962:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801e966:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e96a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e96e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e972:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e976:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e97a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e97e:	ee18 2a10 	vmov	r2, s16
 801e982:	eeb0 8a47 	vmov.f32	s16, s14
 801e986:	fb92 f3f3 	sdiv	r3, r2, r3
 801e98a:	ee18 2a90 	vmov	r2, s17
 801e98e:	9329      	str	r3, [sp, #164]	; 0xa4
 801e990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e992:	eef0 8a67 	vmov.f32	s17, s15
 801e996:	fb92 f3f3 	sdiv	r3, r2, r3
 801e99a:	932a      	str	r3, [sp, #168]	; 0xa8
 801e99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e99e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9a0:	3b01      	subs	r3, #1
 801e9a2:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9a6:	bf08      	it	eq
 801e9a8:	4613      	moveq	r3, r2
 801e9aa:	930a      	str	r3, [sp, #40]	; 0x28
 801e9ac:	e69e      	b.n	801e6ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e9ae:	b151      	cbz	r1, 801e9c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801e9b0:	5d52      	ldrb	r2, [r2, r5]
 801e9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e9b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e9b8:	4402      	add	r2, r0
 801e9ba:	4640      	mov	r0, r8
 801e9bc:	46c4      	mov	ip, r8
 801e9be:	e724      	b.n	801e80a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e9c0:	4640      	mov	r0, r8
 801e9c2:	4642      	mov	r2, r8
 801e9c4:	e721      	b.n	801e80a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801e9c6:	4640      	mov	r0, r8
 801e9c8:	4642      	mov	r2, r8
 801e9ca:	e7f7      	b.n	801e9bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801e9cc:	1c46      	adds	r6, r0, #1
 801e9ce:	d191      	bne.n	801e8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e9d0:	4285      	cmp	r5, r0
 801e9d2:	dd8f      	ble.n	801e8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e9d4:	1c54      	adds	r4, r2, #1
 801e9d6:	db8d      	blt.n	801e8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e9d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e9da:	4294      	cmp	r4, r2
 801e9dc:	dd8a      	ble.n	801e8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e9de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e9e0:	9002      	str	r0, [sp, #8]
 801e9e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e9e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801e9e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9ec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e9f0:	e9cd 5300 	strd	r5, r3, [sp]
 801e9f4:	4639      	mov	r1, r7
 801e9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9f8:	f7ff fd52 	bl	801e4a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801e9fc:	e77a      	b.n	801e8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e9fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ea00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea02:	1410      	asrs	r0, r2, #16
 801ea04:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ea08:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ea0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ea0c:	1412      	asrs	r2, r2, #16
 801ea0e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ea12:	fb05 2000 	mla	r0, r5, r0, r2
 801ea16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea18:	f814 8000 	ldrb.w	r8, [r4, r0]
 801ea1c:	4402      	add	r2, r0
 801ea1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea20:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ea24:	eb00 0708 	add.w	r7, r0, r8
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	f000 8093 	beq.w	801eb54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801ea2e:	7856      	ldrb	r6, [r2, #1]
 801ea30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ea34:	4406      	add	r6, r0
 801ea36:	2900      	cmp	r1, #0
 801ea38:	f000 8095 	beq.w	801eb66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ea3c:	1950      	adds	r0, r2, r5
 801ea3e:	5d52      	ldrb	r2, [r2, r5]
 801ea40:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea42:	7840      	ldrb	r0, [r0, #1]
 801ea44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ea48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea4c:	4422      	add	r2, r4
 801ea4e:	4420      	add	r0, r4
 801ea50:	b29b      	uxth	r3, r3
 801ea52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea54:	b289      	uxth	r1, r1
 801ea56:	f10c 0c03 	add.w	ip, ip, #3
 801ea5a:	f814 b008 	ldrb.w	fp, [r4, r8]
 801ea5e:	fb03 f901 	mul.w	r9, r3, r1
 801ea62:	011b      	lsls	r3, r3, #4
 801ea64:	f896 8000 	ldrb.w	r8, [r6]
 801ea68:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ea6c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ea70:	eba3 0309 	sub.w	r3, r3, r9
 801ea74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea76:	b289      	uxth	r1, r1
 801ea78:	b29b      	uxth	r3, r3
 801ea7a:	ebae 0e01 	sub.w	lr, lr, r1
 801ea7e:	fb03 f808 	mul.w	r8, r3, r8
 801ea82:	fa1f fe8e 	uxth.w	lr, lr
 801ea86:	fb0e 880b 	mla	r8, lr, fp, r8
 801ea8a:	f892 b000 	ldrb.w	fp, [r2]
 801ea8e:	fb01 880b 	mla	r8, r1, fp, r8
 801ea92:	f890 b000 	ldrb.w	fp, [r0]
 801ea96:	fb09 880b 	mla	r8, r9, fp, r8
 801ea9a:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801ea9e:	fb1b fb04 	smulbb	fp, fp, r4
 801eaa2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801eaa6:	fb08 b80a 	mla	r8, r8, sl, fp
 801eaaa:	fa1f f888 	uxth.w	r8, r8
 801eaae:	f108 0b01 	add.w	fp, r8, #1
 801eab2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eab6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eaba:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801eabe:	f896 8001 	ldrb.w	r8, [r6, #1]
 801eac2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801eac6:	fb03 f808 	mul.w	r8, r3, r8
 801eaca:	fb0e 880b 	mla	r8, lr, fp, r8
 801eace:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ead2:	fb01 880b 	mla	r8, r1, fp, r8
 801ead6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801eada:	fb09 880b 	mla	r8, r9, fp, r8
 801eade:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801eae2:	fb1b fb04 	smulbb	fp, fp, r4
 801eae6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801eaea:	fb08 b80a 	mla	r8, r8, sl, fp
 801eaee:	fa1f f888 	uxth.w	r8, r8
 801eaf2:	f108 0b01 	add.w	fp, r8, #1
 801eaf6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eafa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eafe:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801eb02:	78b6      	ldrb	r6, [r6, #2]
 801eb04:	78bf      	ldrb	r7, [r7, #2]
 801eb06:	4373      	muls	r3, r6
 801eb08:	7896      	ldrb	r6, [r2, #2]
 801eb0a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb0c:	fb0e 3307 	mla	r3, lr, r7, r3
 801eb10:	fb01 3306 	mla	r3, r1, r6, r3
 801eb14:	7886      	ldrb	r6, [r0, #2]
 801eb16:	fb09 3906 	mla	r9, r9, r6, r3
 801eb1a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801eb1e:	fb13 f304 	smulbb	r3, r3, r4
 801eb22:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801eb26:	fb09 390a 	mla	r9, r9, sl, r3
 801eb2a:	fa1f f989 	uxth.w	r9, r9
 801eb2e:	f109 0301 	add.w	r3, r9, #1
 801eb32:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801eb36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb38:	4413      	add	r3, r2
 801eb3a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eb3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb40:	9327      	str	r3, [sp, #156]	; 0x9c
 801eb42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb44:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801eb48:	4413      	add	r3, r2
 801eb4a:	9328      	str	r3, [sp, #160]	; 0xa0
 801eb4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb4e:	3b01      	subs	r3, #1
 801eb50:	9311      	str	r3, [sp, #68]	; 0x44
 801eb52:	e601      	b.n	801e758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801eb54:	b151      	cbz	r1, 801eb6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801eb56:	5d52      	ldrb	r2, [r2, r5]
 801eb58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb5e:	4402      	add	r2, r0
 801eb60:	4638      	mov	r0, r7
 801eb62:	463e      	mov	r6, r7
 801eb64:	e774      	b.n	801ea50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801eb66:	4638      	mov	r0, r7
 801eb68:	463a      	mov	r2, r7
 801eb6a:	e771      	b.n	801ea50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801eb6c:	4638      	mov	r0, r7
 801eb6e:	463a      	mov	r2, r7
 801eb70:	e7f7      	b.n	801eb62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801eb72:	b015      	add	sp, #84	; 0x54
 801eb74:	ecbd 8b08 	vpop	{d8-d11}
 801eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801eb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb80:	780d      	ldrb	r5, [r1, #0]
 801eb82:	f891 9002 	ldrb.w	r9, [r1, #2]
 801eb86:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801eb8a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801eb8e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801eb92:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801eb96:	f891 9001 	ldrb.w	r9, [r1, #1]
 801eb9a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801eb9e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801eba2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801eba6:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801ebaa:	9501      	str	r5, [sp, #4]
 801ebac:	fb06 470c 	mla	r7, r6, ip, r4
 801ebb0:	2e00      	cmp	r6, #0
 801ebb2:	eb02 0e07 	add.w	lr, r2, r7
 801ebb6:	db46      	blt.n	801ec46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801ebb8:	45b0      	cmp	r8, r6
 801ebba:	dd44      	ble.n	801ec46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801ebbc:	2c00      	cmp	r4, #0
 801ebbe:	db40      	blt.n	801ec42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ebc0:	45a4      	cmp	ip, r4
 801ebc2:	dd3e      	ble.n	801ec42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ebc4:	5dd7      	ldrb	r7, [r2, r7]
 801ebc6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ebca:	441f      	add	r7, r3
 801ebcc:	1c62      	adds	r2, r4, #1
 801ebce:	d43d      	bmi.n	801ec4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ebd0:	4594      	cmp	ip, r2
 801ebd2:	dd3b      	ble.n	801ec4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ebd4:	f1ba 0f00 	cmp.w	sl, #0
 801ebd8:	d038      	beq.n	801ec4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ebda:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801ebde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ebe2:	441d      	add	r5, r3
 801ebe4:	3601      	adds	r6, #1
 801ebe6:	d435      	bmi.n	801ec54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ebe8:	45b0      	cmp	r8, r6
 801ebea:	dd33      	ble.n	801ec54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ebec:	b390      	cbz	r0, 801ec54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ebee:	2c00      	cmp	r4, #0
 801ebf0:	db2e      	blt.n	801ec50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ebf2:	45a4      	cmp	ip, r4
 801ebf4:	dd2c      	ble.n	801ec50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ebf6:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801ebfa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ebfe:	441e      	add	r6, r3
 801ec00:	1c62      	adds	r2, r4, #1
 801ec02:	d42a      	bmi.n	801ec5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ec04:	4594      	cmp	ip, r2
 801ec06:	dd28      	ble.n	801ec5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ec08:	f1ba 0f00 	cmp.w	sl, #0
 801ec0c:	d025      	beq.n	801ec5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ec0e:	44f4      	add	ip, lr
 801ec10:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ec14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec18:	4413      	add	r3, r2
 801ec1a:	f1ba 0f0f 	cmp.w	sl, #15
 801ec1e:	f897 8000 	ldrb.w	r8, [r7]
 801ec22:	f895 9000 	ldrb.w	r9, [r5]
 801ec26:	f896 e000 	ldrb.w	lr, [r6]
 801ec2a:	f893 c000 	ldrb.w	ip, [r3]
 801ec2e:	d801      	bhi.n	801ec34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801ec30:	280f      	cmp	r0, #15
 801ec32:	d914      	bls.n	801ec5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801ec34:	4b29      	ldr	r3, [pc, #164]	; (801ecdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801ec36:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ec3a:	4a29      	ldr	r2, [pc, #164]	; (801ece0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ec3c:	4829      	ldr	r0, [pc, #164]	; (801ece4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801ec3e:	f005 ff39 	bl	8024ab4 <__assert_func>
 801ec42:	af01      	add	r7, sp, #4
 801ec44:	e7c2      	b.n	801ebcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ec46:	ad01      	add	r5, sp, #4
 801ec48:	462f      	mov	r7, r5
 801ec4a:	e7cb      	b.n	801ebe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ec4c:	ad01      	add	r5, sp, #4
 801ec4e:	e7c9      	b.n	801ebe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ec50:	ae01      	add	r6, sp, #4
 801ec52:	e7d5      	b.n	801ec00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801ec54:	ab01      	add	r3, sp, #4
 801ec56:	461e      	mov	r6, r3
 801ec58:	e7df      	b.n	801ec1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ec5a:	ab01      	add	r3, sp, #4
 801ec5c:	e7dd      	b.n	801ec1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ec5e:	fa1f f48a 	uxth.w	r4, sl
 801ec62:	b280      	uxth	r0, r0
 801ec64:	fb04 fa00 	mul.w	sl, r4, r0
 801ec68:	0124      	lsls	r4, r4, #4
 801ec6a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ec6e:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ec72:	b282      	uxth	r2, r0
 801ec74:	eba4 000a 	sub.w	r0, r4, sl
 801ec78:	ebab 0b02 	sub.w	fp, fp, r2
 801ec7c:	b280      	uxth	r0, r0
 801ec7e:	fa1f fb8b 	uxth.w	fp, fp
 801ec82:	fb00 f909 	mul.w	r9, r0, r9
 801ec86:	fb0b 9808 	mla	r8, fp, r8, r9
 801ec8a:	fb02 8e0e 	mla	lr, r2, lr, r8
 801ec8e:	fb0a ec0c 	mla	ip, sl, ip, lr
 801ec92:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec96:	f881 c000 	strb.w	ip, [r1]
 801ec9a:	786c      	ldrb	r4, [r5, #1]
 801ec9c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801eca0:	4344      	muls	r4, r0
 801eca2:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801eca6:	7874      	ldrb	r4, [r6, #1]
 801eca8:	fb02 cc04 	mla	ip, r2, r4, ip
 801ecac:	785c      	ldrb	r4, [r3, #1]
 801ecae:	fb0a c404 	mla	r4, sl, r4, ip
 801ecb2:	1224      	asrs	r4, r4, #8
 801ecb4:	704c      	strb	r4, [r1, #1]
 801ecb6:	78ad      	ldrb	r5, [r5, #2]
 801ecb8:	78bc      	ldrb	r4, [r7, #2]
 801ecba:	4368      	muls	r0, r5
 801ecbc:	fb0b 0b04 	mla	fp, fp, r4, r0
 801ecc0:	78b0      	ldrb	r0, [r6, #2]
 801ecc2:	fb02 b000 	mla	r0, r2, r0, fp
 801ecc6:	789a      	ldrb	r2, [r3, #2]
 801ecc8:	fb0a 0a02 	mla	sl, sl, r2, r0
 801eccc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ecd0:	f881 a002 	strb.w	sl, [r1, #2]
 801ecd4:	b003      	add	sp, #12
 801ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecda:	bf00      	nop
 801ecdc:	0802acc6 	.word	0x0802acc6
 801ece0:	0802b1be 	.word	0x0802b1be
 801ece4:	0802ad8f 	.word	0x0802ad8f

0801ece8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecec:	ed2d 8b0a 	vpush	{d8-d12}
 801ecf0:	b08f      	sub	sp, #60	; 0x3c
 801ecf2:	eeb0 aa40 	vmov.f32	s20, s0
 801ecf6:	eef0 9a60 	vmov.f32	s19, s1
 801ecfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801ecfc:	eeb0 9a41 	vmov.f32	s18, s2
 801ed00:	9307      	str	r3, [sp, #28]
 801ed02:	eeb0 8a62 	vmov.f32	s16, s5
 801ed06:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801ed0a:	eef0 8a43 	vmov.f32	s17, s6
 801ed0e:	900d      	str	r0, [sp, #52]	; 0x34
 801ed10:	eeb0 ca44 	vmov.f32	s24, s8
 801ed14:	6860      	ldr	r0, [r4, #4]
 801ed16:	eef0 ba64 	vmov.f32	s23, s9
 801ed1a:	9309      	str	r3, [sp, #36]	; 0x24
 801ed1c:	eeb0 ba45 	vmov.f32	s22, s10
 801ed20:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ed24:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801ed28:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801ed2c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ed30:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ed32:	fb00 1303 	mla	r3, r0, r3, r1
 801ed36:	6821      	ldr	r1, [r4, #0]
 801ed38:	6854      	ldr	r4, [r2, #4]
 801ed3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed3e:	3404      	adds	r4, #4
 801ed40:	18cb      	adds	r3, r1, r3
 801ed42:	9308      	str	r3, [sp, #32]
 801ed44:	6813      	ldr	r3, [r2, #0]
 801ed46:	930a      	str	r3, [sp, #40]	; 0x28
 801ed48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	dc03      	bgt.n	801ed56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ed4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	f340 81d2 	ble.w	801f0fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801ed56:	9b07      	ldr	r3, [sp, #28]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	f340 80e3 	ble.w	801ef24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801ed5e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ed60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed62:	1412      	asrs	r2, r2, #16
 801ed64:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ed68:	d42f      	bmi.n	801edca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801ed6a:	1c51      	adds	r1, r2, #1
 801ed6c:	428d      	cmp	r5, r1
 801ed6e:	dd2f      	ble.n	801edd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	db2d      	blt.n	801edd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ed74:	1c59      	adds	r1, r3, #1
 801ed76:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed78:	4288      	cmp	r0, r1
 801ed7a:	dd29      	ble.n	801edd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ed7c:	9b07      	ldr	r3, [sp, #28]
 801ed7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ed80:	3b01      	subs	r3, #1
 801ed82:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801ed84:	fb02 1203 	mla	r2, r2, r3, r1
 801ed88:	1412      	asrs	r2, r2, #16
 801ed8a:	d42b      	bmi.n	801ede4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ed8c:	3201      	adds	r2, #1
 801ed8e:	4295      	cmp	r5, r2
 801ed90:	dd28      	ble.n	801ede4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ed92:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ed94:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ed96:	fb02 1303 	mla	r3, r2, r3, r1
 801ed9a:	141b      	asrs	r3, r3, #16
 801ed9c:	d422      	bmi.n	801ede4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ed9e:	3301      	adds	r3, #1
 801eda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eda2:	429a      	cmp	r2, r3
 801eda4:	dd1e      	ble.n	801ede4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801eda6:	9b08      	ldr	r3, [sp, #32]
 801eda8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801edac:	f103 0803 	add.w	r8, r3, #3
 801edb0:	f1ba 0f00 	cmp.w	sl, #0
 801edb4:	f300 8119 	bgt.w	801efea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801edb8:	9b07      	ldr	r3, [sp, #28]
 801edba:	9a08      	ldr	r2, [sp, #32]
 801edbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801edc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edc4:	441a      	add	r2, r3
 801edc6:	9208      	str	r2, [sp, #32]
 801edc8:	e0ae      	b.n	801ef28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801edca:	1c51      	adds	r1, r2, #1
 801edcc:	f040 809b 	bne.w	801ef06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801edd0:	42aa      	cmp	r2, r5
 801edd2:	f280 8098 	bge.w	801ef06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801edd6:	1c5a      	adds	r2, r3, #1
 801edd8:	f2c0 8095 	blt.w	801ef06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801eddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801edde:	4293      	cmp	r3, r2
 801ede0:	f280 8091 	bge.w	801ef06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ede4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801ede8:	f1bb 0f00 	cmp.w	fp, #0
 801edec:	dde4      	ble.n	801edb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801edee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801edf0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801edf2:	141a      	asrs	r2, r3, #16
 801edf4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801edf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801edf8:	1400      	asrs	r0, r0, #16
 801edfa:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801edfe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ee02:	f100 80dc 	bmi.w	801efbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801ee06:	1c47      	adds	r7, r0, #1
 801ee08:	42bd      	cmp	r5, r7
 801ee0a:	f340 80da 	ble.w	801efc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801ee0e:	2a00      	cmp	r2, #0
 801ee10:	f2c0 80d7 	blt.w	801efc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801ee14:	f102 0c01 	add.w	ip, r2, #1
 801ee18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ee1a:	4567      	cmp	r7, ip
 801ee1c:	f340 80d1 	ble.w	801efc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801ee20:	fb02 0005 	mla	r0, r2, r5, r0
 801ee24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ee26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee28:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ee2c:	4402      	add	r2, r0
 801ee2e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ee32:	eb04 0c08 	add.w	ip, r4, r8
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	f000 80b3 	beq.w	801efa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801ee3c:	7857      	ldrb	r7, [r2, #1]
 801ee3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ee42:	4427      	add	r7, r4
 801ee44:	2900      	cmp	r1, #0
 801ee46:	f000 80b4 	beq.w	801efb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801ee4a:	1950      	adds	r0, r2, r5
 801ee4c:	5d52      	ldrb	r2, [r2, r5]
 801ee4e:	7840      	ldrb	r0, [r0, #1]
 801ee50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee58:	4422      	add	r2, r4
 801ee5a:	4420      	add	r0, r4
 801ee5c:	b29b      	uxth	r3, r3
 801ee5e:	f814 a008 	ldrb.w	sl, [r4, r8]
 801ee62:	b289      	uxth	r1, r1
 801ee64:	f897 8000 	ldrb.w	r8, [r7]
 801ee68:	fb03 f901 	mul.w	r9, r3, r1
 801ee6c:	011b      	lsls	r3, r3, #4
 801ee6e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ee72:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ee76:	eba3 0309 	sub.w	r3, r3, r9
 801ee7a:	b289      	uxth	r1, r1
 801ee7c:	b29b      	uxth	r3, r3
 801ee7e:	ebae 0e01 	sub.w	lr, lr, r1
 801ee82:	fb03 f808 	mul.w	r8, r3, r8
 801ee86:	fa1f fe8e 	uxth.w	lr, lr
 801ee8a:	fb0e 880a 	mla	r8, lr, sl, r8
 801ee8e:	f892 a000 	ldrb.w	sl, [r2]
 801ee92:	fb01 880a 	mla	r8, r1, sl, r8
 801ee96:	f890 a000 	ldrb.w	sl, [r0]
 801ee9a:	fb09 880a 	mla	r8, r9, sl, r8
 801ee9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eea2:	f886 8000 	strb.w	r8, [r6]
 801eea6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801eeaa:	f89c a001 	ldrb.w	sl, [ip, #1]
 801eeae:	fb03 f808 	mul.w	r8, r3, r8
 801eeb2:	fb0e 880a 	mla	r8, lr, sl, r8
 801eeb6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801eeba:	fb01 880a 	mla	r8, r1, sl, r8
 801eebe:	f890 a001 	ldrb.w	sl, [r0, #1]
 801eec2:	fb09 880a 	mla	r8, r9, sl, r8
 801eec6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eeca:	f886 8001 	strb.w	r8, [r6, #1]
 801eece:	78bf      	ldrb	r7, [r7, #2]
 801eed0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801eed4:	437b      	muls	r3, r7
 801eed6:	7892      	ldrb	r2, [r2, #2]
 801eed8:	fb0e 330c 	mla	r3, lr, ip, r3
 801eedc:	fb01 3102 	mla	r1, r1, r2, r3
 801eee0:	7882      	ldrb	r2, [r0, #2]
 801eee2:	fb09 1902 	mla	r9, r9, r2, r1
 801eee6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eeea:	f886 9002 	strb.w	r9, [r6, #2]
 801eeee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eef0:	3603      	adds	r6, #3
 801eef2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801eef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eef8:	4413      	add	r3, r2
 801eefa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801eefc:	9323      	str	r3, [sp, #140]	; 0x8c
 801eefe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef00:	4413      	add	r3, r2
 801ef02:	9324      	str	r3, [sp, #144]	; 0x90
 801ef04:	e770      	b.n	801ede8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ef06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ef08:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ef0a:	4413      	add	r3, r2
 801ef0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ef0e:	9323      	str	r3, [sp, #140]	; 0x8c
 801ef10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef12:	4413      	add	r3, r2
 801ef14:	9324      	str	r3, [sp, #144]	; 0x90
 801ef16:	9b07      	ldr	r3, [sp, #28]
 801ef18:	3b01      	subs	r3, #1
 801ef1a:	9307      	str	r3, [sp, #28]
 801ef1c:	9b08      	ldr	r3, [sp, #32]
 801ef1e:	3303      	adds	r3, #3
 801ef20:	9308      	str	r3, [sp, #32]
 801ef22:	e718      	b.n	801ed56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef24:	f47f af2a 	bne.w	801ed7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801ef28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	f340 80e5 	ble.w	801f0fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801ef30:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ef34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef36:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ef3a:	eef0 6a48 	vmov.f32	s13, s16
 801ef3e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ef42:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ef46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef4a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ef4e:	eef0 6a68 	vmov.f32	s13, s17
 801ef52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef56:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801ef5a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ef5e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ef62:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ef66:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ef6a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ef6e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ef72:	ee18 2a10 	vmov	r2, s16
 801ef76:	eeb0 8a47 	vmov.f32	s16, s14
 801ef7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef7e:	ee18 2a90 	vmov	r2, s17
 801ef82:	9325      	str	r3, [sp, #148]	; 0x94
 801ef84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef86:	eef0 8a67 	vmov.f32	s17, s15
 801ef8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef8e:	9326      	str	r3, [sp, #152]	; 0x98
 801ef90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef94:	3b01      	subs	r3, #1
 801ef96:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef9a:	bf08      	it	eq
 801ef9c:	4613      	moveq	r3, r2
 801ef9e:	9307      	str	r3, [sp, #28]
 801efa0:	e6d2      	b.n	801ed48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801efa2:	b149      	cbz	r1, 801efb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801efa4:	5d52      	ldrb	r2, [r2, r5]
 801efa6:	4660      	mov	r0, ip
 801efa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801efac:	4422      	add	r2, r4
 801efae:	4667      	mov	r7, ip
 801efb0:	e754      	b.n	801ee5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801efb2:	4660      	mov	r0, ip
 801efb4:	4662      	mov	r2, ip
 801efb6:	e751      	b.n	801ee5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801efb8:	4660      	mov	r0, ip
 801efba:	4662      	mov	r2, ip
 801efbc:	e7f7      	b.n	801efae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801efbe:	1c47      	adds	r7, r0, #1
 801efc0:	d195      	bne.n	801eeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801efc2:	4285      	cmp	r5, r0
 801efc4:	dd93      	ble.n	801eeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801efc6:	1c57      	adds	r7, r2, #1
 801efc8:	db91      	blt.n	801eeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801efca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801efcc:	4297      	cmp	r7, r2
 801efce:	dd8e      	ble.n	801eeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801efd0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801efd4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801efd8:	e9cd 5700 	strd	r5, r7, [sp]
 801efdc:	4623      	mov	r3, r4
 801efde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801efe0:	4631      	mov	r1, r6
 801efe2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801efe4:	f7ff fdca 	bl	801eb7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801efe8:	e781      	b.n	801eeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801efea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801efec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801efee:	1410      	asrs	r0, r2, #16
 801eff0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eff4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801eff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eff8:	1412      	asrs	r2, r2, #16
 801effa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801effe:	fb05 2000 	mla	r0, r5, r0, r2
 801f002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f004:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f008:	4402      	add	r2, r0
 801f00a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f00e:	eb04 070e 	add.w	r7, r4, lr
 801f012:	2b00      	cmp	r3, #0
 801f014:	d063      	beq.n	801f0de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f016:	7856      	ldrb	r6, [r2, #1]
 801f018:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f01c:	4426      	add	r6, r4
 801f01e:	2900      	cmp	r1, #0
 801f020:	d065      	beq.n	801f0ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f022:	1950      	adds	r0, r2, r5
 801f024:	5d52      	ldrb	r2, [r2, r5]
 801f026:	7840      	ldrb	r0, [r0, #1]
 801f028:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f02c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f030:	4422      	add	r2, r4
 801f032:	4420      	add	r0, r4
 801f034:	b29b      	uxth	r3, r3
 801f036:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f03a:	b289      	uxth	r1, r1
 801f03c:	f896 e000 	ldrb.w	lr, [r6]
 801f040:	f108 0803 	add.w	r8, r8, #3
 801f044:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f048:	fb03 f901 	mul.w	r9, r3, r1
 801f04c:	011b      	lsls	r3, r3, #4
 801f04e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f052:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f056:	eba3 0309 	sub.w	r3, r3, r9
 801f05a:	b289      	uxth	r1, r1
 801f05c:	b29b      	uxth	r3, r3
 801f05e:	ebac 0c01 	sub.w	ip, ip, r1
 801f062:	fb03 fe0e 	mul.w	lr, r3, lr
 801f066:	fa1f fc8c 	uxth.w	ip, ip
 801f06a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f06e:	f892 b000 	ldrb.w	fp, [r2]
 801f072:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f076:	f890 b000 	ldrb.w	fp, [r0]
 801f07a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f07e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f082:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f086:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f08a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f08e:	fb03 fe0e 	mul.w	lr, r3, lr
 801f092:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f096:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f09a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f09e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f0a2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f0a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0aa:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f0ae:	78b6      	ldrb	r6, [r6, #2]
 801f0b0:	78bf      	ldrb	r7, [r7, #2]
 801f0b2:	4373      	muls	r3, r6
 801f0b4:	7896      	ldrb	r6, [r2, #2]
 801f0b6:	7882      	ldrb	r2, [r0, #2]
 801f0b8:	fb0c 3307 	mla	r3, ip, r7, r3
 801f0bc:	fb01 3306 	mla	r3, r1, r6, r3
 801f0c0:	fb09 3902 	mla	r9, r9, r2, r3
 801f0c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f0c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f0c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f0cc:	4413      	add	r3, r2
 801f0ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f0d0:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f0d4:	9323      	str	r3, [sp, #140]	; 0x8c
 801f0d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0d8:	4413      	add	r3, r2
 801f0da:	9324      	str	r3, [sp, #144]	; 0x90
 801f0dc:	e668      	b.n	801edb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f0de:	b149      	cbz	r1, 801f0f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801f0e0:	5d52      	ldrb	r2, [r2, r5]
 801f0e2:	4638      	mov	r0, r7
 801f0e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f0e8:	4422      	add	r2, r4
 801f0ea:	463e      	mov	r6, r7
 801f0ec:	e7a2      	b.n	801f034 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f0ee:	4638      	mov	r0, r7
 801f0f0:	463a      	mov	r2, r7
 801f0f2:	e79f      	b.n	801f034 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f0f4:	4638      	mov	r0, r7
 801f0f6:	463a      	mov	r2, r7
 801f0f8:	e7f7      	b.n	801f0ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801f0fa:	b00f      	add	sp, #60	; 0x3c
 801f0fc:	ecbd 8b0a 	vpop	{d8-d12}
 801f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f108:	b087      	sub	sp, #28
 801f10a:	7888      	ldrb	r0, [r1, #2]
 801f10c:	9002      	str	r0, [sp, #8]
 801f10e:	7848      	ldrb	r0, [r1, #1]
 801f110:	9e02      	ldr	r6, [sp, #8]
 801f112:	9003      	str	r0, [sp, #12]
 801f114:	7808      	ldrb	r0, [r1, #0]
 801f116:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f11a:	9004      	str	r0, [sp, #16]
 801f11c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f120:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801f124:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f128:	9e03      	ldr	r6, [sp, #12]
 801f12a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801f12e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f132:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801f136:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801f13a:	fb04 7508 	mla	r5, r4, r8, r7
 801f13e:	2c00      	cmp	r4, #0
 801f140:	eb02 0905 	add.w	r9, r2, r5
 801f144:	db45      	blt.n	801f1d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f146:	45a2      	cmp	sl, r4
 801f148:	dd43      	ble.n	801f1d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f14a:	2f00      	cmp	r7, #0
 801f14c:	db3f      	blt.n	801f1ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f14e:	45b8      	cmp	r8, r7
 801f150:	dd3d      	ble.n	801f1ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f152:	5d52      	ldrb	r2, [r2, r5]
 801f154:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f158:	1c7a      	adds	r2, r7, #1
 801f15a:	d43d      	bmi.n	801f1d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f15c:	4590      	cmp	r8, r2
 801f15e:	dd3b      	ble.n	801f1d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f160:	f1bc 0f00 	cmp.w	ip, #0
 801f164:	d038      	beq.n	801f1d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f166:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f16a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f16e:	3401      	adds	r4, #1
 801f170:	d436      	bmi.n	801f1e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f172:	45a2      	cmp	sl, r4
 801f174:	dd34      	ble.n	801f1e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f176:	f1be 0f00 	cmp.w	lr, #0
 801f17a:	d031      	beq.n	801f1e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f17c:	2f00      	cmp	r7, #0
 801f17e:	db2d      	blt.n	801f1dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f180:	45b8      	cmp	r8, r7
 801f182:	dd2b      	ble.n	801f1dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f184:	f819 2008 	ldrb.w	r2, [r9, r8]
 801f188:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f18c:	3701      	adds	r7, #1
 801f18e:	d409      	bmi.n	801f1a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f190:	45b8      	cmp	r8, r7
 801f192:	dd07      	ble.n	801f1a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f194:	f1bc 0f00 	cmp.w	ip, #0
 801f198:	d004      	beq.n	801f1a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f19a:	44c8      	add	r8, r9
 801f19c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f1a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f1a4:	f1bc 0f0f 	cmp.w	ip, #15
 801f1a8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f1ac:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f1b0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f1b4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f1b8:	d802      	bhi.n	801f1c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801f1ba:	f1be 0f0f 	cmp.w	lr, #15
 801f1be:	d911      	bls.n	801f1e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801f1c0:	4b77      	ldr	r3, [pc, #476]	; (801f3a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801f1c2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f1c6:	4a77      	ldr	r2, [pc, #476]	; (801f3a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801f1c8:	4877      	ldr	r0, [pc, #476]	; (801f3a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801f1ca:	f005 fc73 	bl	8024ab4 <__assert_func>
 801f1ce:	4606      	mov	r6, r0
 801f1d0:	e7c2      	b.n	801f158 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801f1d2:	4605      	mov	r5, r0
 801f1d4:	4606      	mov	r6, r0
 801f1d6:	e7ca      	b.n	801f16e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f1d8:	4605      	mov	r5, r0
 801f1da:	e7c8      	b.n	801f16e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f1dc:	4604      	mov	r4, r0
 801f1de:	e7d5      	b.n	801f18c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801f1e0:	4604      	mov	r4, r0
 801f1e2:	e7df      	b.n	801f1a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f1e4:	fa1f fc8c 	uxth.w	ip, ip
 801f1e8:	fa1f f28e 	uxth.w	r2, lr
 801f1ec:	fb02 fe0c 	mul.w	lr, r2, ip
 801f1f0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f1f4:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801f1f8:	ebac 070e 	sub.w	r7, ip, lr
 801f1fc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f200:	b292      	uxth	r2, r2
 801f202:	b2bf      	uxth	r7, r7
 801f204:	1a9b      	subs	r3, r3, r2
 801f206:	fb07 fc0a 	mul.w	ip, r7, sl
 801f20a:	b29b      	uxth	r3, r3
 801f20c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f210:	9301      	str	r3, [sp, #4]
 801f212:	fb02 cc09 	mla	ip, r2, r9, ip
 801f216:	fb0e cc08 	mla	ip, lr, r8, ip
 801f21a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f21e:	9305      	str	r3, [sp, #20]
 801f220:	2b00      	cmp	r3, #0
 801f222:	f000 80b9 	beq.w	801f398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801f226:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f22a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f22e:	fb0b fc0c 	mul.w	ip, fp, ip
 801f232:	fb0b f606 	mul.w	r6, fp, r6
 801f236:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f23a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f23e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f242:	44dc      	add	ip, fp
 801f244:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f248:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f24c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f250:	fb0a fb0b 	mul.w	fp, sl, fp
 801f254:	fb0a fa05 	mul.w	sl, sl, r5
 801f258:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f25c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f260:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801f264:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f268:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f26c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f270:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801f274:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f278:	0a36      	lsrs	r6, r6, #8
 801f27a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f27e:	44dc      	add	ip, fp
 801f280:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f284:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f288:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f28c:	fb09 fb0b 	mul.w	fp, r9, fp
 801f290:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f294:	fb09 f904 	mul.w	r9, r9, r4
 801f298:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f29c:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801f2a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f2a4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f2a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f2ac:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f2b0:	fb0c fc07 	mul.w	ip, ip, r7
 801f2b4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f2b8:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801f2bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f2c0:	445d      	add	r5, fp
 801f2c2:	fb08 f404 	mul.w	r4, r8, r4
 801f2c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f2ca:	fb08 f800 	mul.w	r8, r8, r0
 801f2ce:	0a2d      	lsrs	r5, r5, #8
 801f2d0:	0a20      	lsrs	r0, r4, #8
 801f2d2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f2d6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f2da:	fb07 f70a 	mul.w	r7, r7, sl
 801f2de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f2e2:	4404      	add	r4, r0
 801f2e4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f2e8:	0a24      	lsrs	r4, r4, #8
 801f2ea:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801f2ee:	9801      	ldr	r0, [sp, #4]
 801f2f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f2f4:	fb03 cc00 	mla	ip, r3, r0, ip
 801f2f8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f2fc:	fb00 7606 	mla	r6, r0, r6, r7
 801f300:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801f304:	fb04 cc0e 	mla	ip, r4, lr, ip
 801f308:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f30c:	b280      	uxth	r0, r0
 801f30e:	9c04      	ldr	r4, [sp, #16]
 801f310:	fb05 cc02 	mla	ip, r5, r2, ip
 801f314:	fb0e 6e08 	mla	lr, lr, r8, r6
 801f318:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f31c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f320:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801f324:	fb02 ec0c 	mla	ip, r2, ip, lr
 801f328:	9a05      	ldr	r2, [sp, #20]
 801f32a:	4342      	muls	r2, r0
 801f32c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f330:	1c53      	adds	r3, r2, #1
 801f332:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f336:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f33a:	ea45 0c0c 	orr.w	ip, r5, ip
 801f33e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f342:	fa5f f28c 	uxtb.w	r2, ip
 801f346:	b2db      	uxtb	r3, r3
 801f348:	fb14 f403 	smulbb	r4, r4, r3
 801f34c:	fb02 4200 	mla	r2, r2, r0, r4
 801f350:	b292      	uxth	r2, r2
 801f352:	1c54      	adds	r4, r2, #1
 801f354:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f358:	9c03      	ldr	r4, [sp, #12]
 801f35a:	fb14 f403 	smulbb	r4, r4, r3
 801f35e:	1212      	asrs	r2, r2, #8
 801f360:	700a      	strb	r2, [r1, #0]
 801f362:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801f366:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f36a:	fb02 4200 	mla	r2, r2, r0, r4
 801f36e:	b292      	uxth	r2, r2
 801f370:	1c54      	adds	r4, r2, #1
 801f372:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f376:	1212      	asrs	r2, r2, #8
 801f378:	704a      	strb	r2, [r1, #1]
 801f37a:	9a02      	ldr	r2, [sp, #8]
 801f37c:	fb12 f303 	smulbb	r3, r2, r3
 801f380:	fb0c 3c00 	mla	ip, ip, r0, r3
 801f384:	fa1f fc8c 	uxth.w	ip, ip
 801f388:	f10c 0301 	add.w	r3, ip, #1
 801f38c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f390:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f394:	f881 c002 	strb.w	ip, [r1, #2]
 801f398:	b007      	add	sp, #28
 801f39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f39e:	bf00      	nop
 801f3a0:	0802acc6 	.word	0x0802acc6
 801f3a4:	0802b1be 	.word	0x0802b1be
 801f3a8:	0802ad8f 	.word	0x0802ad8f

0801f3ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3b0:	ed2d 8b08 	vpush	{d8-d11}
 801f3b4:	b09b      	sub	sp, #108	; 0x6c
 801f3b6:	eeb0 aa40 	vmov.f32	s20, s0
 801f3ba:	eef0 9a60 	vmov.f32	s19, s1
 801f3be:	930a      	str	r3, [sp, #40]	; 0x28
 801f3c0:	eeb0 9a41 	vmov.f32	s18, s2
 801f3c4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f3c8:	eeb0 8a62 	vmov.f32	s16, s5
 801f3cc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f3ce:	eef0 8a43 	vmov.f32	s17, s6
 801f3d2:	9312      	str	r3, [sp, #72]	; 0x48
 801f3d4:	eef0 ba44 	vmov.f32	s23, s8
 801f3d8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f3dc:	eeb0 ba64 	vmov.f32	s22, s9
 801f3e0:	9019      	str	r0, [sp, #100]	; 0x64
 801f3e2:	eef0 aa45 	vmov.f32	s21, s10
 801f3e6:	9114      	str	r1, [sp, #80]	; 0x50
 801f3e8:	9317      	str	r3, [sp, #92]	; 0x5c
 801f3ea:	6868      	ldr	r0, [r5, #4]
 801f3ec:	9218      	str	r2, [sp, #96]	; 0x60
 801f3ee:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f3f0:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f3f4:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f3f8:	fb00 1303 	mla	r3, r0, r3, r1
 801f3fc:	6829      	ldr	r1, [r5, #0]
 801f3fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f402:	18cb      	adds	r3, r1, r3
 801f404:	930d      	str	r3, [sp, #52]	; 0x34
 801f406:	6813      	ldr	r3, [r2, #0]
 801f408:	9313      	str	r3, [sp, #76]	; 0x4c
 801f40a:	6853      	ldr	r3, [r2, #4]
 801f40c:	3304      	adds	r3, #4
 801f40e:	9309      	str	r3, [sp, #36]	; 0x24
 801f410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f412:	2b00      	cmp	r3, #0
 801f414:	dc03      	bgt.n	801f41e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f416:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f418:	2b00      	cmp	r3, #0
 801f41a:	f340 8352 	ble.w	801fac2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f420:	2b00      	cmp	r3, #0
 801f422:	f340 81a2 	ble.w	801f76a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801f426:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f428:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f42a:	1412      	asrs	r2, r2, #16
 801f42c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f430:	d431      	bmi.n	801f496 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f432:	1c51      	adds	r1, r2, #1
 801f434:	428c      	cmp	r4, r1
 801f436:	dd31      	ble.n	801f49c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f438:	2b00      	cmp	r3, #0
 801f43a:	db2f      	blt.n	801f49c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f43c:	1c59      	adds	r1, r3, #1
 801f43e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f440:	4288      	cmp	r0, r1
 801f442:	dd2b      	ble.n	801f49c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f446:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f448:	3b01      	subs	r3, #1
 801f44a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f44c:	fb02 1203 	mla	r2, r2, r3, r1
 801f450:	1412      	asrs	r2, r2, #16
 801f452:	d42d      	bmi.n	801f4b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f454:	3201      	adds	r2, #1
 801f456:	4294      	cmp	r4, r2
 801f458:	dd2a      	ble.n	801f4b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f45a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f45c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f45e:	fb02 1303 	mla	r3, r2, r3, r1
 801f462:	141b      	asrs	r3, r3, #16
 801f464:	d424      	bmi.n	801f4b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f466:	3301      	adds	r3, #1
 801f468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f46a:	429a      	cmp	r2, r3
 801f46c:	dd20      	ble.n	801f4b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f470:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f474:	f103 0e03 	add.w	lr, r3, #3
 801f478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f47a:	9315      	str	r3, [sp, #84]	; 0x54
 801f47c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f47e:	2b00      	cmp	r3, #0
 801f480:	f300 81de 	bgt.w	801f840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801f484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f48c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f490:	441a      	add	r2, r3
 801f492:	920d      	str	r2, [sp, #52]	; 0x34
 801f494:	e16b      	b.n	801f76e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801f496:	1c51      	adds	r1, r2, #1
 801f498:	f040 8158 	bne.w	801f74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f49c:	42a2      	cmp	r2, r4
 801f49e:	f280 8155 	bge.w	801f74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f4a2:	1c5a      	adds	r2, r3, #1
 801f4a4:	f2c0 8152 	blt.w	801f74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f4a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f4aa:	4293      	cmp	r3, r2
 801f4ac:	f280 814e 	bge.w	801f74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4b2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f4b4:	9316      	str	r3, [sp, #88]	; 0x58
 801f4b6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f4ba:	9315      	str	r3, [sp, #84]	; 0x54
 801f4bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	dde0      	ble.n	801f484 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f4c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f4c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f4c6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f4ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f4cc:	141b      	asrs	r3, r3, #16
 801f4ce:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f4d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f4d4:	1412      	asrs	r2, r2, #16
 801f4d6:	f100 819a 	bmi.w	801f80e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f4da:	1c55      	adds	r5, r2, #1
 801f4dc:	42ac      	cmp	r4, r5
 801f4de:	f340 8198 	ble.w	801f812 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	f2c0 8195 	blt.w	801f812 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f4e8:	1c5d      	adds	r5, r3, #1
 801f4ea:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f4ec:	42af      	cmp	r7, r5
 801f4ee:	f340 8190 	ble.w	801f812 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f4f2:	fb03 2304 	mla	r3, r3, r4, r2
 801f4f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f4f8:	18d5      	adds	r5, r2, r3
 801f4fa:	5cd3      	ldrb	r3, [r2, r3]
 801f4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f502:	0e1f      	lsrs	r7, r3, #24
 801f504:	2800      	cmp	r0, #0
 801f506:	f000 8171 	beq.w	801f7ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f50a:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f50e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f512:	920e      	str	r2, [sp, #56]	; 0x38
 801f514:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f518:	2900      	cmp	r1, #0
 801f51a:	f000 8172 	beq.w	801f802 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f51e:	eb05 0c04 	add.w	ip, r5, r4
 801f522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f524:	5d2d      	ldrb	r5, [r5, r4]
 801f526:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f52a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f52e:	950b      	str	r5, [sp, #44]	; 0x2c
 801f530:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f534:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f536:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f53a:	0e15      	lsrs	r5, r2, #24
 801f53c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f53e:	b280      	uxth	r0, r0
 801f540:	b289      	uxth	r1, r1
 801f542:	fb00 fa01 	mul.w	sl, r0, r1
 801f546:	0100      	lsls	r0, r0, #4
 801f548:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f54c:	eba0 080a 	sub.w	r8, r0, sl
 801f550:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f554:	b289      	uxth	r1, r1
 801f556:	fa1f f888 	uxth.w	r8, r8
 801f55a:	1a52      	subs	r2, r2, r1
 801f55c:	fb08 f00e 	mul.w	r0, r8, lr
 801f560:	b292      	uxth	r2, r2
 801f562:	fb02 0007 	mla	r0, r2, r7, r0
 801f566:	fb01 0009 	mla	r0, r1, r9, r0
 801f56a:	fb0a 0005 	mla	r0, sl, r5, r0
 801f56e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f572:	2800      	cmp	r0, #0
 801f574:	f000 80dd 	beq.w	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f578:	2fff      	cmp	r7, #255	; 0xff
 801f57a:	d01a      	beq.n	801f5b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f57c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f580:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f584:	fb07 fc0c 	mul.w	ip, r7, ip
 801f588:	435f      	muls	r7, r3
 801f58a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f58e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f592:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f596:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f59a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f59e:	4463      	add	r3, ip
 801f5a0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f5a4:	0a1b      	lsrs	r3, r3, #8
 801f5a6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f5aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f5ae:	ea43 030b 	orr.w	r3, r3, fp
 801f5b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f5b6:	d01e      	beq.n	801f5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f5b8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f5ba:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f5be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f5c2:	fb0e fb0b 	mul.w	fp, lr, fp
 801f5c6:	fb0e fe07 	mul.w	lr, lr, r7
 801f5ca:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f5ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f5d2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f5d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f5da:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f5de:	44dc      	add	ip, fp
 801f5e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f5e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5e8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f5ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f5f0:	ea4c 070e 	orr.w	r7, ip, lr
 801f5f4:	970e      	str	r7, [sp, #56]	; 0x38
 801f5f6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f5fa:	d01e      	beq.n	801f63a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f5fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f5fe:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f602:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f606:	fb09 fe0e 	mul.w	lr, r9, lr
 801f60a:	fb09 f907 	mul.w	r9, r9, r7
 801f60e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f612:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f616:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f61a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f61e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f622:	44f4      	add	ip, lr
 801f624:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f62c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f630:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f634:	ea4c 0709 	orr.w	r7, ip, r9
 801f638:	970b      	str	r7, [sp, #44]	; 0x2c
 801f63a:	2dff      	cmp	r5, #255	; 0xff
 801f63c:	d01c      	beq.n	801f678 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f63e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f640:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f644:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f648:	fb05 fe0e 	mul.w	lr, r5, lr
 801f64c:	437d      	muls	r5, r7
 801f64e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f652:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f656:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f65a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f65e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f662:	44f4      	add	ip, lr
 801f664:	0a2d      	lsrs	r5, r5, #8
 801f666:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f66a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f66e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f672:	ea4c 0505 	orr.w	r5, ip, r5
 801f676:	950f      	str	r5, [sp, #60]	; 0x3c
 801f678:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f67a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f67e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f682:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f686:	fb08 f505 	mul.w	r5, r8, r5
 801f68a:	fb02 5507 	mla	r5, r2, r7, r5
 801f68e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f690:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f694:	fb01 5507 	mla	r5, r1, r7, r5
 801f698:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f69a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f69e:	fb0a 5507 	mla	r5, sl, r7, r5
 801f6a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f6a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f6a8:	0a2d      	lsrs	r5, r5, #8
 801f6aa:	fb08 f807 	mul.w	r8, r8, r7
 801f6ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f6b2:	fb02 8303 	mla	r3, r2, r3, r8
 801f6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f6b8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f6bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6be:	fb01 330c 	mla	r3, r1, ip, r3
 801f6c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f6c6:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f6ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f6cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f6ce:	4343      	muls	r3, r0
 801f6d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6d4:	1c58      	adds	r0, r3, #1
 801f6d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f6da:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f6de:	ea45 050a 	orr.w	r5, r5, sl
 801f6e2:	7833      	ldrb	r3, [r6, #0]
 801f6e4:	b2ea      	uxtb	r2, r5
 801f6e6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f6ea:	fb12 f201 	smulbb	r2, r2, r1
 801f6ee:	b2c0      	uxtb	r0, r0
 801f6f0:	fb03 2300 	mla	r3, r3, r0, r2
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	1c5a      	adds	r2, r3, #1
 801f6f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f6fc:	7872      	ldrb	r2, [r6, #1]
 801f6fe:	fb12 f200 	smulbb	r2, r2, r0
 801f702:	121b      	asrs	r3, r3, #8
 801f704:	7033      	strb	r3, [r6, #0]
 801f706:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f70a:	0c2d      	lsrs	r5, r5, #16
 801f70c:	fb03 2301 	mla	r3, r3, r1, r2
 801f710:	b29b      	uxth	r3, r3
 801f712:	1c5a      	adds	r2, r3, #1
 801f714:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f718:	121b      	asrs	r3, r3, #8
 801f71a:	7073      	strb	r3, [r6, #1]
 801f71c:	78b3      	ldrb	r3, [r6, #2]
 801f71e:	fb13 f000 	smulbb	r0, r3, r0
 801f722:	fb05 0501 	mla	r5, r5, r1, r0
 801f726:	b2ad      	uxth	r5, r5
 801f728:	1c6b      	adds	r3, r5, #1
 801f72a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f72e:	122d      	asrs	r5, r5, #8
 801f730:	70b5      	strb	r5, [r6, #2]
 801f732:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f734:	3603      	adds	r6, #3
 801f736:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f738:	4413      	add	r3, r2
 801f73a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f73c:	932d      	str	r3, [sp, #180]	; 0xb4
 801f73e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f740:	4413      	add	r3, r2
 801f742:	932e      	str	r3, [sp, #184]	; 0xb8
 801f744:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f746:	3b01      	subs	r3, #1
 801f748:	9316      	str	r3, [sp, #88]	; 0x58
 801f74a:	e6b7      	b.n	801f4bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f74c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f74e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f750:	4413      	add	r3, r2
 801f752:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f754:	932d      	str	r3, [sp, #180]	; 0xb4
 801f756:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f758:	4413      	add	r3, r2
 801f75a:	932e      	str	r3, [sp, #184]	; 0xb8
 801f75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f75e:	3b01      	subs	r3, #1
 801f760:	930a      	str	r3, [sp, #40]	; 0x28
 801f762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f764:	3303      	adds	r3, #3
 801f766:	930d      	str	r3, [sp, #52]	; 0x34
 801f768:	e659      	b.n	801f41e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f76a:	f47f ae6b 	bne.w	801f444 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f76e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f770:	2b00      	cmp	r3, #0
 801f772:	f340 81a6 	ble.w	801fac2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f77a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f77c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f780:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f784:	eef0 6a48 	vmov.f32	s13, s16
 801f788:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f78c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f790:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f794:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f798:	eef0 6a68 	vmov.f32	s13, s17
 801f79c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7a0:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801f7a4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f7a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f7ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f7b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f7b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f7b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f7bc:	ee18 2a10 	vmov	r2, s16
 801f7c0:	eeb0 8a47 	vmov.f32	s16, s14
 801f7c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7c8:	ee18 2a90 	vmov	r2, s17
 801f7cc:	932f      	str	r3, [sp, #188]	; 0xbc
 801f7ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f7d0:	eef0 8a67 	vmov.f32	s17, s15
 801f7d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7d8:	9330      	str	r3, [sp, #192]	; 0xc0
 801f7da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f7dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f7de:	3b01      	subs	r3, #1
 801f7e0:	9314      	str	r3, [sp, #80]	; 0x50
 801f7e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f7e4:	bf08      	it	eq
 801f7e6:	4613      	moveq	r3, r2
 801f7e8:	930a      	str	r3, [sp, #40]	; 0x28
 801f7ea:	e611      	b.n	801f410 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f7ec:	b161      	cbz	r1, 801f808 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801f7ee:	5d2a      	ldrb	r2, [r5, r4]
 801f7f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f7f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f7f6:	25ff      	movs	r5, #255	; 0xff
 801f7f8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f7fc:	920b      	str	r2, [sp, #44]	; 0x2c
 801f7fe:	46ae      	mov	lr, r5
 801f800:	e69d      	b.n	801f53e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f802:	25ff      	movs	r5, #255	; 0xff
 801f804:	46a9      	mov	r9, r5
 801f806:	e69a      	b.n	801f53e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f808:	25ff      	movs	r5, #255	; 0xff
 801f80a:	46a9      	mov	r9, r5
 801f80c:	e7f7      	b.n	801f7fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801f80e:	1c57      	adds	r7, r2, #1
 801f810:	d18f      	bne.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f812:	4294      	cmp	r4, r2
 801f814:	dd8d      	ble.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f816:	1c5d      	adds	r5, r3, #1
 801f818:	db8b      	blt.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f81a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f81c:	429d      	cmp	r5, r3
 801f81e:	dd88      	ble.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f820:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801f822:	9202      	str	r2, [sp, #8]
 801f824:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f826:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801f82a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f82c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f82e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f832:	e9cd 4300 	strd	r4, r3, [sp]
 801f836:	4631      	mov	r1, r6
 801f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f83a:	f7ff fc63 	bl	801f104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f83e:	e778      	b.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f840:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f842:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f844:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f848:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f84a:	1412      	asrs	r2, r2, #16
 801f84c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f850:	141b      	asrs	r3, r3, #16
 801f852:	fb04 2303 	mla	r3, r4, r3, r2
 801f856:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f858:	18d5      	adds	r5, r2, r3
 801f85a:	5cd3      	ldrb	r3, [r2, r3]
 801f85c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f862:	0e1e      	lsrs	r6, r3, #24
 801f864:	2900      	cmp	r1, #0
 801f866:	f000 811b 	beq.w	801faa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801f86a:	786a      	ldrb	r2, [r5, #1]
 801f86c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f86e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f872:	9210      	str	r2, [sp, #64]	; 0x40
 801f874:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f878:	2800      	cmp	r0, #0
 801f87a:	f000 811c 	beq.w	801fab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801f87e:	192a      	adds	r2, r5, r4
 801f880:	5d2d      	ldrb	r5, [r5, r4]
 801f882:	7852      	ldrb	r2, [r2, #1]
 801f884:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f888:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f88c:	950c      	str	r5, [sp, #48]	; 0x30
 801f88e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f892:	0e15      	lsrs	r5, r2, #24
 801f894:	9211      	str	r2, [sp, #68]	; 0x44
 801f896:	b289      	uxth	r1, r1
 801f898:	b280      	uxth	r0, r0
 801f89a:	fb01 fa00 	mul.w	sl, r1, r0
 801f89e:	0109      	lsls	r1, r1, #4
 801f8a0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f8a4:	eba1 080a 	sub.w	r8, r1, sl
 801f8a8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f8ac:	b280      	uxth	r0, r0
 801f8ae:	fa1f f888 	uxth.w	r8, r8
 801f8b2:	1a12      	subs	r2, r2, r0
 801f8b4:	fb08 f10c 	mul.w	r1, r8, ip
 801f8b8:	b292      	uxth	r2, r2
 801f8ba:	fb02 1106 	mla	r1, r2, r6, r1
 801f8be:	fb00 1109 	mla	r1, r0, r9, r1
 801f8c2:	fb0a 1105 	mla	r1, sl, r5, r1
 801f8c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f8ca:	2900      	cmp	r1, #0
 801f8cc:	f000 80da 	beq.w	801fa84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801f8d0:	2eff      	cmp	r6, #255	; 0xff
 801f8d2:	d016      	beq.n	801f902 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801f8d4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f8d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f8dc:	4377      	muls	r7, r6
 801f8de:	435e      	muls	r6, r3
 801f8e0:	0a3b      	lsrs	r3, r7, #8
 801f8e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f8e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8ea:	443b      	add	r3, r7
 801f8ec:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f8f0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f8f4:	0a1b      	lsrs	r3, r3, #8
 801f8f6:	0a3f      	lsrs	r7, r7, #8
 801f8f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f900:	433b      	orrs	r3, r7
 801f902:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f906:	d01d      	beq.n	801f944 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801f908:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f90a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f90c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f910:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f914:	fb0c f606 	mul.w	r6, ip, r6
 801f918:	fb0c fc07 	mul.w	ip, ip, r7
 801f91c:	0a37      	lsrs	r7, r6, #8
 801f91e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f922:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f926:	4437      	add	r7, r6
 801f928:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801f92c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801f930:	0a3f      	lsrs	r7, r7, #8
 801f932:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f936:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f93a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f93e:	ea47 060c 	orr.w	r6, r7, ip
 801f942:	9610      	str	r6, [sp, #64]	; 0x40
 801f944:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f948:	d01d      	beq.n	801f986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801f94a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f94c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f950:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f954:	fb09 fc0c 	mul.w	ip, r9, ip
 801f958:	fb09 f906 	mul.w	r9, r9, r6
 801f95c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f960:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f964:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801f968:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f96c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f970:	4467      	add	r7, ip
 801f972:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f976:	0a3f      	lsrs	r7, r7, #8
 801f978:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f97c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f980:	ea47 0609 	orr.w	r6, r7, r9
 801f984:	960c      	str	r6, [sp, #48]	; 0x30
 801f986:	2dff      	cmp	r5, #255	; 0xff
 801f988:	d01a      	beq.n	801f9c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801f98a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f98c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f990:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f994:	fb05 fc0c 	mul.w	ip, r5, ip
 801f998:	4375      	muls	r5, r6
 801f99a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f99e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f9a2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f9a6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f9aa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f9ae:	4467      	add	r7, ip
 801f9b0:	0a2d      	lsrs	r5, r5, #8
 801f9b2:	0a3f      	lsrs	r7, r7, #8
 801f9b4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f9b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f9bc:	433d      	orrs	r5, r7
 801f9be:	9511      	str	r5, [sp, #68]	; 0x44
 801f9c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f9c2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801f9c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f9ca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f9ce:	fb08 f505 	mul.w	r5, r8, r5
 801f9d2:	fb02 5506 	mla	r5, r2, r6, r5
 801f9d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f9d8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f9dc:	fb00 5506 	mla	r5, r0, r6, r5
 801f9e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f9e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f9e6:	fb0a 5506 	mla	r5, sl, r6, r5
 801f9ea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f9ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f9f0:	0a2d      	lsrs	r5, r5, #8
 801f9f2:	fb08 f806 	mul.w	r8, r8, r6
 801f9f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f9fa:	fb02 8303 	mla	r3, r2, r3, r8
 801f9fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fa00:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fa04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa06:	fb00 3307 	mla	r3, r0, r7, r3
 801fa0a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fa0e:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fa12:	fb01 f30b 	mul.w	r3, r1, fp
 801fa16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa1a:	1c59      	adds	r1, r3, #1
 801fa1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fa20:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fa24:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fa28:	ea45 050c 	orr.w	r5, r5, ip
 801fa2c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fa30:	b2ea      	uxtb	r2, r5
 801fa32:	b2c9      	uxtb	r1, r1
 801fa34:	fb12 f20b 	smulbb	r2, r2, fp
 801fa38:	fb03 2301 	mla	r3, r3, r1, r2
 801fa3c:	b29b      	uxth	r3, r3
 801fa3e:	1c5a      	adds	r2, r3, #1
 801fa40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa44:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fa48:	fb12 f201 	smulbb	r2, r2, r1
 801fa4c:	121b      	asrs	r3, r3, #8
 801fa4e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fa52:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fa56:	0c2d      	lsrs	r5, r5, #16
 801fa58:	fb03 230b 	mla	r3, r3, fp, r2
 801fa5c:	b29b      	uxth	r3, r3
 801fa5e:	1c5a      	adds	r2, r3, #1
 801fa60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa64:	121b      	asrs	r3, r3, #8
 801fa66:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fa6a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fa6e:	fb13 f101 	smulbb	r1, r3, r1
 801fa72:	fb05 150b 	mla	r5, r5, fp, r1
 801fa76:	b2ad      	uxth	r5, r5
 801fa78:	1c69      	adds	r1, r5, #1
 801fa7a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fa7e:	122d      	asrs	r5, r5, #8
 801fa80:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fa84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fa86:	f10e 0e03 	add.w	lr, lr, #3
 801fa8a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fa8c:	4413      	add	r3, r2
 801fa8e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fa90:	932d      	str	r3, [sp, #180]	; 0xb4
 801fa92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa94:	4413      	add	r3, r2
 801fa96:	932e      	str	r3, [sp, #184]	; 0xb8
 801fa98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fa9a:	3b01      	subs	r3, #1
 801fa9c:	9315      	str	r3, [sp, #84]	; 0x54
 801fa9e:	e4ed      	b.n	801f47c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801faa0:	b160      	cbz	r0, 801fabc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801faa2:	5d2a      	ldrb	r2, [r5, r4]
 801faa4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801faa6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801faaa:	25ff      	movs	r5, #255	; 0xff
 801faac:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fab0:	920c      	str	r2, [sp, #48]	; 0x30
 801fab2:	46ac      	mov	ip, r5
 801fab4:	e6ef      	b.n	801f896 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fab6:	25ff      	movs	r5, #255	; 0xff
 801fab8:	46a9      	mov	r9, r5
 801faba:	e6ec      	b.n	801f896 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fabc:	25ff      	movs	r5, #255	; 0xff
 801fabe:	46a9      	mov	r9, r5
 801fac0:	e7f7      	b.n	801fab2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801fac2:	b01b      	add	sp, #108	; 0x6c
 801fac4:	ecbd 8b08 	vpop	{d8-d11}
 801fac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801facc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fad0:	b085      	sub	sp, #20
 801fad2:	7888      	ldrb	r0, [r1, #2]
 801fad4:	4692      	mov	sl, r2
 801fad6:	4698      	mov	r8, r3
 801fad8:	9000      	str	r0, [sp, #0]
 801fada:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fade:	7848      	ldrb	r0, [r1, #1]
 801fae0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fae4:	9001      	str	r0, [sp, #4]
 801fae6:	7808      	ldrb	r0, [r1, #0]
 801fae8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801faec:	9002      	str	r0, [sp, #8]
 801faee:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801faf2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801faf6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fafa:	fb04 560c 	mla	r6, r4, ip, r5
 801fafe:	2c00      	cmp	r4, #0
 801fb00:	eb02 0e06 	add.w	lr, r2, r6
 801fb04:	9a00      	ldr	r2, [sp, #0]
 801fb06:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801fb0a:	9a01      	ldr	r2, [sp, #4]
 801fb0c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801fb10:	db3e      	blt.n	801fb90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fb12:	45a1      	cmp	r9, r4
 801fb14:	dd3c      	ble.n	801fb90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fb16:	2d00      	cmp	r5, #0
 801fb18:	db38      	blt.n	801fb8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fb1a:	45ac      	cmp	ip, r5
 801fb1c:	dd36      	ble.n	801fb8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fb1e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801fb22:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801fb26:	1c6e      	adds	r6, r5, #1
 801fb28:	d435      	bmi.n	801fb96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fb2a:	45b4      	cmp	ip, r6
 801fb2c:	dd33      	ble.n	801fb96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fb2e:	b393      	cbz	r3, 801fb96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fb30:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801fb34:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801fb38:	3401      	adds	r4, #1
 801fb3a:	d430      	bmi.n	801fb9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fb3c:	45a1      	cmp	r9, r4
 801fb3e:	dd2e      	ble.n	801fb9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fb40:	b36f      	cbz	r7, 801fb9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fb42:	2d00      	cmp	r5, #0
 801fb44:	db29      	blt.n	801fb9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fb46:	45ac      	cmp	ip, r5
 801fb48:	dd27      	ble.n	801fb9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fb4a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801fb4e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801fb52:	3501      	adds	r5, #1
 801fb54:	d407      	bmi.n	801fb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fb56:	45ac      	cmp	ip, r5
 801fb58:	dd05      	ble.n	801fb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fb5a:	b123      	cbz	r3, 801fb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fb5c:	44f4      	add	ip, lr
 801fb5e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fb62:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801fb66:	2b0f      	cmp	r3, #15
 801fb68:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fb6c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fb70:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fb74:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fb78:	d801      	bhi.n	801fb7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fb7a:	2f0f      	cmp	r7, #15
 801fb7c:	d911      	bls.n	801fba2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801fb7e:	4b76      	ldr	r3, [pc, #472]	; (801fd58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801fb80:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fb84:	4a75      	ldr	r2, [pc, #468]	; (801fd5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801fb86:	4876      	ldr	r0, [pc, #472]	; (801fd60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801fb88:	f004 ff94 	bl	8024ab4 <__assert_func>
 801fb8c:	4602      	mov	r2, r0
 801fb8e:	e7ca      	b.n	801fb26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801fb90:	4606      	mov	r6, r0
 801fb92:	4602      	mov	r2, r0
 801fb94:	e7d0      	b.n	801fb38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fb96:	4606      	mov	r6, r0
 801fb98:	e7ce      	b.n	801fb38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fb9a:	4604      	mov	r4, r0
 801fb9c:	e7d9      	b.n	801fb52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801fb9e:	4604      	mov	r4, r0
 801fba0:	e7e1      	b.n	801fb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fba2:	b29b      	uxth	r3, r3
 801fba4:	b2bf      	uxth	r7, r7
 801fba6:	fb07 fe03 	mul.w	lr, r7, r3
 801fbaa:	011b      	lsls	r3, r3, #4
 801fbac:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801fbb0:	eba3 0c0e 	sub.w	ip, r3, lr
 801fbb4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fbb8:	b2bf      	uxth	r7, r7
 801fbba:	fa1f fc8c 	uxth.w	ip, ip
 801fbbe:	1bed      	subs	r5, r5, r7
 801fbc0:	fb0c f30a 	mul.w	r3, ip, sl
 801fbc4:	b2ad      	uxth	r5, r5
 801fbc6:	fb05 330b 	mla	r3, r5, fp, r3
 801fbca:	fb07 3309 	mla	r3, r7, r9, r3
 801fbce:	fb0e 3308 	mla	r3, lr, r8, r3
 801fbd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fbd6:	9303      	str	r3, [sp, #12]
 801fbd8:	2b00      	cmp	r3, #0
 801fbda:	f000 80b9 	beq.w	801fd50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801fbde:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fbe2:	d018      	beq.n	801fc16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801fbe4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fbe8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fbec:	fb0b f303 	mul.w	r3, fp, r3
 801fbf0:	fb0b fb02 	mul.w	fp, fp, r2
 801fbf4:	0a1a      	lsrs	r2, r3, #8
 801fbf6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fbfa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fbfe:	441a      	add	r2, r3
 801fc00:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801fc04:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801fc08:	0a12      	lsrs	r2, r2, #8
 801fc0a:	0a1b      	lsrs	r3, r3, #8
 801fc0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fc10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc14:	431a      	orrs	r2, r3
 801fc16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fc1a:	d019      	beq.n	801fc50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801fc1c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801fc20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fc24:	fb0a fb0b 	mul.w	fp, sl, fp
 801fc28:	fb0a fa06 	mul.w	sl, sl, r6
 801fc2c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801fc30:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fc34:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801fc38:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc3c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fc40:	445e      	add	r6, fp
 801fc42:	0a1b      	lsrs	r3, r3, #8
 801fc44:	0a36      	lsrs	r6, r6, #8
 801fc46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc4a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc4e:	431e      	orrs	r6, r3
 801fc50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fc54:	d019      	beq.n	801fc8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801fc56:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801fc5a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fc5e:	fb09 fa0a 	mul.w	sl, r9, sl
 801fc62:	fb09 f904 	mul.w	r9, r9, r4
 801fc66:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801fc6a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fc6e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801fc72:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fc76:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801fc7a:	4454      	add	r4, sl
 801fc7c:	0a1b      	lsrs	r3, r3, #8
 801fc7e:	0a24      	lsrs	r4, r4, #8
 801fc80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc84:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fc88:	431c      	orrs	r4, r3
 801fc8a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fc8e:	d019      	beq.n	801fcc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801fc90:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801fc94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fc98:	fb08 f909 	mul.w	r9, r8, r9
 801fc9c:	fb08 f800 	mul.w	r8, r8, r0
 801fca0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801fca4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801fca8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801fcac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fcb0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801fcb4:	4448      	add	r0, r9
 801fcb6:	0a1b      	lsrs	r3, r3, #8
 801fcb8:	0a00      	lsrs	r0, r0, #8
 801fcba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fcbe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fcc2:	4318      	orrs	r0, r3
 801fcc4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801fcc8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fccc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fcd0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fcd4:	fb0c f808 	mul.w	r8, ip, r8
 801fcd8:	fb0c f606 	mul.w	r6, ip, r6
 801fcdc:	fb05 8803 	mla	r8, r5, r3, r8
 801fce0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801fce4:	fb05 6202 	mla	r2, r5, r2, r6
 801fce8:	fb07 8803 	mla	r8, r7, r3, r8
 801fcec:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801fcf0:	fb0e 8303 	mla	r3, lr, r3, r8
 801fcf4:	0a1b      	lsrs	r3, r3, #8
 801fcf6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801fcfa:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801fcfe:	9c02      	ldr	r4, [sp, #8]
 801fd00:	fb07 2703 	mla	r7, r7, r3, r2
 801fd04:	9a03      	ldr	r2, [sp, #12]
 801fd06:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801fd0a:	43d2      	mvns	r2, r2
 801fd0c:	fb0e 7303 	mla	r3, lr, r3, r7
 801fd10:	b2d2      	uxtb	r2, r2
 801fd12:	0a1b      	lsrs	r3, r3, #8
 801fd14:	4354      	muls	r4, r2
 801fd16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fd1a:	1c60      	adds	r0, r4, #1
 801fd1c:	ea48 0303 	orr.w	r3, r8, r3
 801fd20:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801fd24:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fd28:	7008      	strb	r0, [r1, #0]
 801fd2a:	9801      	ldr	r0, [sp, #4]
 801fd2c:	4350      	muls	r0, r2
 801fd2e:	1c44      	adds	r4, r0, #1
 801fd30:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801fd34:	0a18      	lsrs	r0, r3, #8
 801fd36:	0c1b      	lsrs	r3, r3, #16
 801fd38:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801fd3c:	7048      	strb	r0, [r1, #1]
 801fd3e:	9800      	ldr	r0, [sp, #0]
 801fd40:	4350      	muls	r0, r2
 801fd42:	4602      	mov	r2, r0
 801fd44:	3001      	adds	r0, #1
 801fd46:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fd4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fd4e:	708b      	strb	r3, [r1, #2]
 801fd50:	b005      	add	sp, #20
 801fd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd56:	bf00      	nop
 801fd58:	0802acc6 	.word	0x0802acc6
 801fd5c:	0802b1be 	.word	0x0802b1be
 801fd60:	0802ad8f 	.word	0x0802ad8f

0801fd64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd68:	ed2d 8b08 	vpush	{d8-d11}
 801fd6c:	b097      	sub	sp, #92	; 0x5c
 801fd6e:	eeb0 aa40 	vmov.f32	s20, s0
 801fd72:	eef0 9a60 	vmov.f32	s19, s1
 801fd76:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801fd78:	eeb0 9a41 	vmov.f32	s18, s2
 801fd7c:	9308      	str	r3, [sp, #32]
 801fd7e:	eeb0 8a62 	vmov.f32	s16, s5
 801fd82:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801fd86:	eef0 8a43 	vmov.f32	s17, s6
 801fd8a:	9015      	str	r0, [sp, #84]	; 0x54
 801fd8c:	eef0 ba44 	vmov.f32	s23, s8
 801fd90:	6868      	ldr	r0, [r5, #4]
 801fd92:	eeb0 ba64 	vmov.f32	s22, s9
 801fd96:	9112      	str	r1, [sp, #72]	; 0x48
 801fd98:	eef0 aa45 	vmov.f32	s21, s10
 801fd9c:	9310      	str	r3, [sp, #64]	; 0x40
 801fd9e:	9214      	str	r2, [sp, #80]	; 0x50
 801fda0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801fda2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801fda6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fdaa:	fb00 1303 	mla	r3, r0, r3, r1
 801fdae:	6829      	ldr	r1, [r5, #0]
 801fdb0:	6855      	ldr	r5, [r2, #4]
 801fdb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fdb6:	3504      	adds	r5, #4
 801fdb8:	18cb      	adds	r3, r1, r3
 801fdba:	930b      	str	r3, [sp, #44]	; 0x2c
 801fdbc:	6813      	ldr	r3, [r2, #0]
 801fdbe:	9311      	str	r3, [sp, #68]	; 0x44
 801fdc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	dc03      	bgt.n	801fdce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801fdc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	f340 8333 	ble.w	8020434 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801fdce:	9b08      	ldr	r3, [sp, #32]
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	f340 8190 	ble.w	80200f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801fdd6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fdd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fdda:	1412      	asrs	r2, r2, #16
 801fddc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fde0:	d42f      	bmi.n	801fe42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801fde2:	1c51      	adds	r1, r2, #1
 801fde4:	428c      	cmp	r4, r1
 801fde6:	dd2f      	ble.n	801fe48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	db2d      	blt.n	801fe48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801fdec:	1c59      	adds	r1, r3, #1
 801fdee:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fdf0:	4288      	cmp	r0, r1
 801fdf2:	dd29      	ble.n	801fe48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801fdf4:	9b08      	ldr	r3, [sp, #32]
 801fdf6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fdf8:	3b01      	subs	r3, #1
 801fdfa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fdfc:	fb02 1203 	mla	r2, r2, r3, r1
 801fe00:	1412      	asrs	r2, r2, #16
 801fe02:	d42b      	bmi.n	801fe5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fe04:	3201      	adds	r2, #1
 801fe06:	4294      	cmp	r4, r2
 801fe08:	dd28      	ble.n	801fe5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fe0a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fe0c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801fe0e:	fb02 1303 	mla	r3, r2, r3, r1
 801fe12:	141b      	asrs	r3, r3, #16
 801fe14:	d422      	bmi.n	801fe5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fe16:	3301      	adds	r3, #1
 801fe18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe1a:	429a      	cmp	r2, r3
 801fe1c:	dd1e      	ble.n	801fe5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fe1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe20:	f103 0803 	add.w	r8, r3, #3
 801fe24:	9b08      	ldr	r3, [sp, #32]
 801fe26:	9307      	str	r3, [sp, #28]
 801fe28:	9b07      	ldr	r3, [sp, #28]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	f300 81ca 	bgt.w	80201c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801fe30:	9b08      	ldr	r3, [sp, #32]
 801fe32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe3c:	441a      	add	r2, r3
 801fe3e:	920b      	str	r2, [sp, #44]	; 0x2c
 801fe40:	e15b      	b.n	80200fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fe42:	1c51      	adds	r1, r2, #1
 801fe44:	f040 8148 	bne.w	80200d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801fe48:	42a2      	cmp	r2, r4
 801fe4a:	f280 8145 	bge.w	80200d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801fe4e:	1c5a      	adds	r2, r3, #1
 801fe50:	f2c0 8142 	blt.w	80200d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801fe54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe56:	4293      	cmp	r3, r2
 801fe58:	f280 813e 	bge.w	80200d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801fe5c:	9b08      	ldr	r3, [sp, #32]
 801fe5e:	9313      	str	r3, [sp, #76]	; 0x4c
 801fe60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe62:	9307      	str	r3, [sp, #28]
 801fe64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	dde2      	ble.n	801fe30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801fe6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fe6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fe6e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fe72:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fe74:	141b      	asrs	r3, r3, #16
 801fe76:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801fe7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fe7c:	1412      	asrs	r2, r2, #16
 801fe7e:	f100 818b 	bmi.w	8020198 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801fe82:	1c56      	adds	r6, r2, #1
 801fe84:	42b4      	cmp	r4, r6
 801fe86:	f340 8189 	ble.w	802019c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	f2c0 8186 	blt.w	802019c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801fe90:	1c5e      	adds	r6, r3, #1
 801fe92:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fe94:	42b7      	cmp	r7, r6
 801fe96:	f340 8181 	ble.w	802019c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801fe9a:	fb03 2304 	mla	r3, r3, r4, r2
 801fe9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fea0:	18d6      	adds	r6, r2, r3
 801fea2:	5cd3      	ldrb	r3, [r2, r3]
 801fea4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fea8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801feac:	2900      	cmp	r1, #0
 801feae:	f000 8163 	beq.w	8020178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801feb2:	7872      	ldrb	r2, [r6, #1]
 801feb4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801feb8:	920c      	str	r2, [sp, #48]	; 0x30
 801feba:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801febe:	2800      	cmp	r0, #0
 801fec0:	f000 8164 	beq.w	802018c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801fec4:	1932      	adds	r2, r6, r4
 801fec6:	5d36      	ldrb	r6, [r6, r4]
 801fec8:	7852      	ldrb	r2, [r2, #1]
 801feca:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801fece:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fed2:	9609      	str	r6, [sp, #36]	; 0x24
 801fed4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fed8:	0e16      	lsrs	r6, r2, #24
 801feda:	920d      	str	r2, [sp, #52]	; 0x34
 801fedc:	b289      	uxth	r1, r1
 801fede:	b280      	uxth	r0, r0
 801fee0:	fb01 fb00 	mul.w	fp, r1, r0
 801fee4:	0109      	lsls	r1, r1, #4
 801fee6:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801feea:	eba1 090b 	sub.w	r9, r1, fp
 801feee:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fef2:	b280      	uxth	r0, r0
 801fef4:	fa1f f989 	uxth.w	r9, r9
 801fef8:	1a12      	subs	r2, r2, r0
 801fefa:	fb09 f108 	mul.w	r1, r9, r8
 801fefe:	b292      	uxth	r2, r2
 801ff00:	fb02 110c 	mla	r1, r2, ip, r1
 801ff04:	fb00 110a 	mla	r1, r0, sl, r1
 801ff08:	fb0b 1106 	mla	r1, fp, r6, r1
 801ff0c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ff10:	2900      	cmp	r1, #0
 801ff12:	f000 80d2 	beq.w	80200ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801ff16:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ff1a:	d01b      	beq.n	801ff54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801ff1c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ff20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff24:	fb0c fe0e 	mul.w	lr, ip, lr
 801ff28:	fb0c fc03 	mul.w	ip, ip, r3
 801ff2c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801ff30:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ff34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff38:	4473      	add	r3, lr
 801ff3a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801ff3e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801ff42:	0a1b      	lsrs	r3, r3, #8
 801ff44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff4c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ff50:	ea43 030e 	orr.w	r3, r3, lr
 801ff54:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff58:	d01e      	beq.n	801ff98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801ff5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ff5c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ff60:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801ff64:	fb08 fc0c 	mul.w	ip, r8, ip
 801ff68:	fb08 f80e 	mul.w	r8, r8, lr
 801ff6c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ff70:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ff74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ff78:	44e6      	add	lr, ip
 801ff7a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801ff7e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801ff82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff86:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ff8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ff8e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ff92:	ea4e 0708 	orr.w	r7, lr, r8
 801ff96:	970c      	str	r7, [sp, #48]	; 0x30
 801ff98:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ff9c:	d01e      	beq.n	801ffdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ff9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ffa0:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801ffa4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ffa8:	fb0a f808 	mul.w	r8, sl, r8
 801ffac:	fb0a fa0c 	mul.w	sl, sl, ip
 801ffb0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801ffb4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801ffb8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ffbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ffc0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ffc4:	44c6      	add	lr, r8
 801ffc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ffce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ffd6:	ea4e 070a 	orr.w	r7, lr, sl
 801ffda:	9709      	str	r7, [sp, #36]	; 0x24
 801ffdc:	2eff      	cmp	r6, #255	; 0xff
 801ffde:	d01d      	beq.n	802001c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801ffe0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ffe2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801ffe6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ffea:	fb06 f808 	mul.w	r8, r6, r8
 801ffee:	fb06 f60c 	mul.w	r6, r6, ip
 801fff2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fff6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fffa:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fffe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020002:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020006:	44c6      	add	lr, r8
 8020008:	0a36      	lsrs	r6, r6, #8
 802000a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802000e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020012:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020016:	ea4e 0606 	orr.w	r6, lr, r6
 802001a:	960d      	str	r6, [sp, #52]	; 0x34
 802001c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802001e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020022:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020024:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020028:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802002c:	43c9      	mvns	r1, r1
 802002e:	fb09 f606 	mul.w	r6, r9, r6
 8020032:	b2c9      	uxtb	r1, r1
 8020034:	fb02 660c 	mla	r6, r2, ip, r6
 8020038:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802003c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802003e:	fb00 660c 	mla	r6, r0, ip, r6
 8020042:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020046:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020048:	fb0b 660c 	mla	r6, fp, ip, r6
 802004c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020050:	fb09 f90c 	mul.w	r9, r9, ip
 8020054:	0a36      	lsrs	r6, r6, #8
 8020056:	fb02 9303 	mla	r3, r2, r3, r9
 802005a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802005c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020060:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020066:	fb00 330e 	mla	r3, r0, lr, r3
 802006a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802006e:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020072:	9b07      	ldr	r3, [sp, #28]
 8020074:	781b      	ldrb	r3, [r3, #0]
 8020076:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802007a:	fb03 f201 	mul.w	r2, r3, r1
 802007e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020082:	1c53      	adds	r3, r2, #1
 8020084:	ea46 060b 	orr.w	r6, r6, fp
 8020088:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802008c:	9a07      	ldr	r2, [sp, #28]
 802008e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020092:	7013      	strb	r3, [r2, #0]
 8020094:	7853      	ldrb	r3, [r2, #1]
 8020096:	434b      	muls	r3, r1
 8020098:	1c5a      	adds	r2, r3, #1
 802009a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802009e:	0a33      	lsrs	r3, r6, #8
 80200a0:	0c36      	lsrs	r6, r6, #16
 80200a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80200a6:	9a07      	ldr	r2, [sp, #28]
 80200a8:	7053      	strb	r3, [r2, #1]
 80200aa:	7893      	ldrb	r3, [r2, #2]
 80200ac:	4359      	muls	r1, r3
 80200ae:	1c4b      	adds	r3, r1, #1
 80200b0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80200b4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80200b8:	7096      	strb	r6, [r2, #2]
 80200ba:	9b07      	ldr	r3, [sp, #28]
 80200bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80200be:	3303      	adds	r3, #3
 80200c0:	9307      	str	r3, [sp, #28]
 80200c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80200c4:	4413      	add	r3, r2
 80200c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80200c8:	9329      	str	r3, [sp, #164]	; 0xa4
 80200ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80200cc:	4413      	add	r3, r2
 80200ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80200d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80200d2:	3b01      	subs	r3, #1
 80200d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80200d6:	e6c5      	b.n	801fe64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80200d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80200da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80200dc:	4413      	add	r3, r2
 80200de:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80200e0:	9329      	str	r3, [sp, #164]	; 0xa4
 80200e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80200e4:	4413      	add	r3, r2
 80200e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80200e8:	9b08      	ldr	r3, [sp, #32]
 80200ea:	3b01      	subs	r3, #1
 80200ec:	9308      	str	r3, [sp, #32]
 80200ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200f0:	3303      	adds	r3, #3
 80200f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80200f4:	e66b      	b.n	801fdce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80200f6:	f47f ae7d 	bne.w	801fdf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 80200fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	f340 8199 	ble.w	8020434 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020106:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020108:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802010c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020110:	eef0 6a48 	vmov.f32	s13, s16
 8020114:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020118:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802011c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020120:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020124:	eef0 6a68 	vmov.f32	s13, s17
 8020128:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802012c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020130:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020134:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020138:	ee37 8a48 	vsub.f32	s16, s14, s16
 802013c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020140:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020144:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020148:	ee18 2a10 	vmov	r2, s16
 802014c:	eeb0 8a47 	vmov.f32	s16, s14
 8020150:	fb92 f3f3 	sdiv	r3, r2, r3
 8020154:	ee18 2a90 	vmov	r2, s17
 8020158:	932b      	str	r3, [sp, #172]	; 0xac
 802015a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802015c:	eef0 8a67 	vmov.f32	s17, s15
 8020160:	fb92 f3f3 	sdiv	r3, r2, r3
 8020164:	932c      	str	r3, [sp, #176]	; 0xb0
 8020166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802016a:	3b01      	subs	r3, #1
 802016c:	9312      	str	r3, [sp, #72]	; 0x48
 802016e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020170:	bf08      	it	eq
 8020172:	4613      	moveq	r3, r2
 8020174:	9308      	str	r3, [sp, #32]
 8020176:	e623      	b.n	801fdc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020178:	b158      	cbz	r0, 8020192 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802017a:	5d32      	ldrb	r2, [r6, r4]
 802017c:	26ff      	movs	r6, #255	; 0xff
 802017e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020182:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020186:	9209      	str	r2, [sp, #36]	; 0x24
 8020188:	46b0      	mov	r8, r6
 802018a:	e6a7      	b.n	801fedc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 802018c:	26ff      	movs	r6, #255	; 0xff
 802018e:	46b2      	mov	sl, r6
 8020190:	e6a4      	b.n	801fedc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020192:	26ff      	movs	r6, #255	; 0xff
 8020194:	46b2      	mov	sl, r6
 8020196:	e7f7      	b.n	8020188 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020198:	1c57      	adds	r7, r2, #1
 802019a:	d18e      	bne.n	80200ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802019c:	4294      	cmp	r4, r2
 802019e:	dd8c      	ble.n	80200ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80201a0:	1c5e      	adds	r6, r3, #1
 80201a2:	db8a      	blt.n	80200ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80201a4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80201a6:	429e      	cmp	r6, r3
 80201a8:	dd87      	ble.n	80200ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80201aa:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80201ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80201b2:	e9cd 4600 	strd	r4, r6, [sp]
 80201b6:	462b      	mov	r3, r5
 80201b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201ba:	9907      	ldr	r1, [sp, #28]
 80201bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80201be:	f7ff fc85 	bl	801facc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80201c2:	e77a      	b.n	80200ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80201c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80201c6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80201c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80201cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80201ce:	1409      	asrs	r1, r1, #16
 80201d0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80201d4:	141b      	asrs	r3, r3, #16
 80201d6:	fb04 1303 	mla	r3, r4, r3, r1
 80201da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80201dc:	18ce      	adds	r6, r1, r3
 80201de:	5ccb      	ldrb	r3, [r1, r3]
 80201e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80201e4:	0e1f      	lsrs	r7, r3, #24
 80201e6:	2a00      	cmp	r2, #0
 80201e8:	f000 8114 	beq.w	8020414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 80201ec:	7871      	ldrb	r1, [r6, #1]
 80201ee:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80201f2:	910e      	str	r1, [sp, #56]	; 0x38
 80201f4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80201f8:	2800      	cmp	r0, #0
 80201fa:	f000 8115 	beq.w	8020428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 80201fe:	1931      	adds	r1, r6, r4
 8020200:	5d36      	ldrb	r6, [r6, r4]
 8020202:	7849      	ldrb	r1, [r1, #1]
 8020204:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020208:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802020c:	960a      	str	r6, [sp, #40]	; 0x28
 802020e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020212:	0e0e      	lsrs	r6, r1, #24
 8020214:	910f      	str	r1, [sp, #60]	; 0x3c
 8020216:	b292      	uxth	r2, r2
 8020218:	b280      	uxth	r0, r0
 802021a:	fb02 fb00 	mul.w	fp, r2, r0
 802021e:	0112      	lsls	r2, r2, #4
 8020220:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020224:	eba2 090b 	sub.w	r9, r2, fp
 8020228:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802022c:	b280      	uxth	r0, r0
 802022e:	fa1f f989 	uxth.w	r9, r9
 8020232:	1a09      	subs	r1, r1, r0
 8020234:	fb09 f20e 	mul.w	r2, r9, lr
 8020238:	b289      	uxth	r1, r1
 802023a:	fb01 2207 	mla	r2, r1, r7, r2
 802023e:	fb00 220a 	mla	r2, r0, sl, r2
 8020242:	fb0b 2206 	mla	r2, fp, r6, r2
 8020246:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802024a:	9213      	str	r2, [sp, #76]	; 0x4c
 802024c:	2a00      	cmp	r2, #0
 802024e:	f000 80d4 	beq.w	80203fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020252:	2fff      	cmp	r7, #255	; 0xff
 8020254:	d01a      	beq.n	802028c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020256:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802025a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802025e:	fb07 fc0c 	mul.w	ip, r7, ip
 8020262:	435f      	muls	r7, r3
 8020264:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020268:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802026c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020270:	4463      	add	r3, ip
 8020272:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020276:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802027a:	0a1b      	lsrs	r3, r3, #8
 802027c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020280:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020284:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020288:	ea43 030c 	orr.w	r3, r3, ip
 802028c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020290:	d01f      	beq.n	80202d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020292:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020296:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802029a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802029e:	fb0e f707 	mul.w	r7, lr, r7
 80202a2:	fb0e fe0c 	mul.w	lr, lr, ip
 80202a6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80202aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80202ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202b2:	44bc      	add	ip, r7
 80202b4:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80202b8:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80202bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80202cc:	ea4c 020e 	orr.w	r2, ip, lr
 80202d0:	920e      	str	r2, [sp, #56]	; 0x38
 80202d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80202d6:	d01e      	beq.n	8020316 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 80202d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80202da:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80202de:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80202e2:	fb0a fe0e 	mul.w	lr, sl, lr
 80202e6:	fb0a fa07 	mul.w	sl, sl, r7
 80202ea:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80202ee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80202f2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80202f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80202fe:	44f4      	add	ip, lr
 8020300:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020304:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020308:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802030c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020310:	ea4c 020a 	orr.w	r2, ip, sl
 8020314:	920a      	str	r2, [sp, #40]	; 0x28
 8020316:	2eff      	cmp	r6, #255	; 0xff
 8020318:	d01c      	beq.n	8020354 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802031a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802031c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020320:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020324:	fb06 fe0e 	mul.w	lr, r6, lr
 8020328:	437e      	muls	r6, r7
 802032a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802032e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020332:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020336:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802033a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802033e:	44f4      	add	ip, lr
 8020340:	0a36      	lsrs	r6, r6, #8
 8020342:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020346:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802034a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802034e:	ea4c 0206 	orr.w	r2, ip, r6
 8020352:	920f      	str	r2, [sp, #60]	; 0x3c
 8020354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020356:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802035a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802035e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020364:	fb09 f606 	mul.w	r6, r9, r6
 8020368:	fb01 6607 	mla	r6, r1, r7, r6
 802036c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020372:	fb00 6607 	mla	r6, r0, r7, r6
 8020376:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 802037a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802037c:	fb0b 6607 	mla	r6, fp, r7, r6
 8020380:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020386:	fb09 f907 	mul.w	r9, r9, r7
 802038a:	0a36      	lsrs	r6, r6, #8
 802038c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020392:	fb01 9303 	mla	r3, r1, r3, r9
 8020396:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802039a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802039e:	fb00 330c 	mla	r3, r0, ip, r3
 80203a2:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80203a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80203a8:	43da      	mvns	r2, r3
 80203aa:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80203ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203b2:	b2d2      	uxtb	r2, r2
 80203b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80203b8:	fb03 f102 	mul.w	r1, r3, r2
 80203bc:	ea46 060e 	orr.w	r6, r6, lr
 80203c0:	1c4b      	adds	r3, r1, #1
 80203c2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80203c6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80203ca:	f808 3c03 	strb.w	r3, [r8, #-3]
 80203ce:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 80203d2:	4353      	muls	r3, r2
 80203d4:	1c59      	adds	r1, r3, #1
 80203d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80203da:	0a33      	lsrs	r3, r6, #8
 80203dc:	0c36      	lsrs	r6, r6, #16
 80203de:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80203e2:	f808 3c02 	strb.w	r3, [r8, #-2]
 80203e6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80203ea:	435a      	muls	r2, r3
 80203ec:	1c53      	adds	r3, r2, #1
 80203ee:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80203f2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80203f6:	f808 6c01 	strb.w	r6, [r8, #-1]
 80203fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80203fc:	f108 0803 	add.w	r8, r8, #3
 8020400:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020402:	4413      	add	r3, r2
 8020404:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020406:	9329      	str	r3, [sp, #164]	; 0xa4
 8020408:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802040a:	4413      	add	r3, r2
 802040c:	932a      	str	r3, [sp, #168]	; 0xa8
 802040e:	9b07      	ldr	r3, [sp, #28]
 8020410:	3b01      	subs	r3, #1
 8020412:	e508      	b.n	801fe26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8020414:	b158      	cbz	r0, 802042e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8020416:	5d31      	ldrb	r1, [r6, r4]
 8020418:	26ff      	movs	r6, #255	; 0xff
 802041a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802041e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020422:	910a      	str	r1, [sp, #40]	; 0x28
 8020424:	46b6      	mov	lr, r6
 8020426:	e6f6      	b.n	8020216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020428:	26ff      	movs	r6, #255	; 0xff
 802042a:	46b2      	mov	sl, r6
 802042c:	e6f3      	b.n	8020216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802042e:	26ff      	movs	r6, #255	; 0xff
 8020430:	46b2      	mov	sl, r6
 8020432:	e7f7      	b.n	8020424 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8020434:	b017      	add	sp, #92	; 0x5c
 8020436:	ecbd 8b08 	vpop	{d8-d11}
 802043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020440 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020444:	b08d      	sub	sp, #52	; 0x34
 8020446:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802044a:	9103      	str	r1, [sp, #12]
 802044c:	fb07 5803 	mla	r8, r7, r3, r5
 8020450:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020454:	9803      	ldr	r0, [sp, #12]
 8020456:	2f00      	cmp	r7, #0
 8020458:	910b      	str	r1, [sp, #44]	; 0x2c
 802045a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802045e:	9903      	ldr	r1, [sp, #12]
 8020460:	9c03      	ldr	r4, [sp, #12]
 8020462:	eb02 0608 	add.w	r6, r2, r8
 8020466:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802046a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802046e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020472:	7809      	ldrb	r1, [r1, #0]
 8020474:	7840      	ldrb	r0, [r0, #1]
 8020476:	78a4      	ldrb	r4, [r4, #2]
 8020478:	db51      	blt.n	802051e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802047a:	45be      	cmp	lr, r7
 802047c:	dd4f      	ble.n	802051e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802047e:	2d00      	cmp	r5, #0
 8020480:	db49      	blt.n	8020516 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020482:	42ab      	cmp	r3, r5
 8020484:	dd47      	ble.n	8020516 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020486:	f812 2008 	ldrb.w	r2, [r2, r8]
 802048a:	9204      	str	r2, [sp, #16]
 802048c:	7872      	ldrb	r2, [r6, #1]
 802048e:	9205      	str	r2, [sp, #20]
 8020490:	78b2      	ldrb	r2, [r6, #2]
 8020492:	9206      	str	r2, [sp, #24]
 8020494:	1c6a      	adds	r2, r5, #1
 8020496:	d449      	bmi.n	802052c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020498:	4293      	cmp	r3, r2
 802049a:	dd47      	ble.n	802052c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802049c:	f1bc 0f00 	cmp.w	ip, #0
 80204a0:	d044      	beq.n	802052c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80204a2:	7972      	ldrb	r2, [r6, #5]
 80204a4:	f896 b003 	ldrb.w	fp, [r6, #3]
 80204a8:	f896 a004 	ldrb.w	sl, [r6, #4]
 80204ac:	9201      	str	r2, [sp, #4]
 80204ae:	3701      	adds	r7, #1
 80204b0:	d444      	bmi.n	802053c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80204b2:	45be      	cmp	lr, r7
 80204b4:	dd42      	ble.n	802053c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80204b6:	f1b9 0f00 	cmp.w	r9, #0
 80204ba:	f000 80c1 	beq.w	8020640 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80204be:	2d00      	cmp	r5, #0
 80204c0:	db38      	blt.n	8020534 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80204c2:	42ab      	cmp	r3, r5
 80204c4:	dd36      	ble.n	8020534 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80204c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80204ca:	f816 8002 	ldrb.w	r8, [r6, r2]
 80204ce:	2203      	movs	r2, #3
 80204d0:	fb03 6702 	mla	r7, r3, r2, r6
 80204d4:	fb03 6202 	mla	r2, r3, r2, r6
 80204d8:	787f      	ldrb	r7, [r7, #1]
 80204da:	f892 e002 	ldrb.w	lr, [r2, #2]
 80204de:	9702      	str	r7, [sp, #8]
 80204e0:	3501      	adds	r5, #1
 80204e2:	d432      	bmi.n	802054a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80204e4:	42ab      	cmp	r3, r5
 80204e6:	dd30      	ble.n	802054a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80204e8:	f1bc 0f00 	cmp.w	ip, #0
 80204ec:	d031      	beq.n	8020552 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80204ee:	2703      	movs	r7, #3
 80204f0:	fb13 7207 	smlabb	r2, r3, r7, r7
 80204f4:	5cb5      	ldrb	r5, [r6, r2]
 80204f6:	fb03 6207 	mla	r2, r3, r7, r6
 80204fa:	fb03 6307 	mla	r3, r3, r7, r6
 80204fe:	7912      	ldrb	r2, [r2, #4]
 8020500:	795e      	ldrb	r6, [r3, #5]
 8020502:	f1bc 0f0f 	cmp.w	ip, #15
 8020506:	d927      	bls.n	8020558 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020508:	4b53      	ldr	r3, [pc, #332]	; (8020658 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802050a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802050e:	4a53      	ldr	r2, [pc, #332]	; (802065c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020510:	4853      	ldr	r0, [pc, #332]	; (8020660 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8020512:	f004 facf 	bl	8024ab4 <__assert_func>
 8020516:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802051a:	9104      	str	r1, [sp, #16]
 802051c:	e7ba      	b.n	8020494 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802051e:	9401      	str	r4, [sp, #4]
 8020520:	4682      	mov	sl, r0
 8020522:	468b      	mov	fp, r1
 8020524:	9104      	str	r1, [sp, #16]
 8020526:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802052a:	e7c0      	b.n	80204ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802052c:	9401      	str	r4, [sp, #4]
 802052e:	4682      	mov	sl, r0
 8020530:	468b      	mov	fp, r1
 8020532:	e7bc      	b.n	80204ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020534:	46a6      	mov	lr, r4
 8020536:	9002      	str	r0, [sp, #8]
 8020538:	4688      	mov	r8, r1
 802053a:	e7d1      	b.n	80204e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802053c:	4626      	mov	r6, r4
 802053e:	4602      	mov	r2, r0
 8020540:	460d      	mov	r5, r1
 8020542:	46a6      	mov	lr, r4
 8020544:	9002      	str	r0, [sp, #8]
 8020546:	4688      	mov	r8, r1
 8020548:	e7db      	b.n	8020502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802054a:	4626      	mov	r6, r4
 802054c:	4602      	mov	r2, r0
 802054e:	460d      	mov	r5, r1
 8020550:	e7d7      	b.n	8020502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020552:	4626      	mov	r6, r4
 8020554:	4602      	mov	r2, r0
 8020556:	460d      	mov	r5, r1
 8020558:	f1b9 0f0f 	cmp.w	r9, #15
 802055c:	d8d4      	bhi.n	8020508 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802055e:	fa1f f38c 	uxth.w	r3, ip
 8020562:	fa1f fc89 	uxth.w	ip, r9
 8020566:	fb03 f70c 	mul.w	r7, r3, ip
 802056a:	011b      	lsls	r3, r3, #4
 802056c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020570:	9707      	str	r7, [sp, #28]
 8020572:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020576:	fa1f fc8c 	uxth.w	ip, ip
 802057a:	eba7 070c 	sub.w	r7, r7, ip
 802057e:	b2bf      	uxth	r7, r7
 8020580:	9709      	str	r7, [sp, #36]	; 0x24
 8020582:	9f07      	ldr	r7, [sp, #28]
 8020584:	1bdb      	subs	r3, r3, r7
 8020586:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802058a:	b29b      	uxth	r3, r3
 802058c:	9708      	str	r7, [sp, #32]
 802058e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020590:	930a      	str	r3, [sp, #40]	; 0x28
 8020592:	ea6f 0907 	mvn.w	r9, r7
 8020596:	fb03 fb0b 	mul.w	fp, r3, fp
 802059a:	9f04      	ldr	r7, [sp, #16]
 802059c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802059e:	fa5f f989 	uxtb.w	r9, r9
 80205a2:	fb03 bb07 	mla	fp, r3, r7, fp
 80205a6:	9f07      	ldr	r7, [sp, #28]
 80205a8:	fb11 f109 	smulbb	r1, r1, r9
 80205ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205ae:	fb0c b808 	mla	r8, ip, r8, fp
 80205b2:	fb10 f009 	smulbb	r0, r0, r9
 80205b6:	fb14 f409 	smulbb	r4, r4, r9
 80205ba:	fb07 8805 	mla	r8, r7, r5, r8
 80205be:	9d08      	ldr	r5, [sp, #32]
 80205c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80205c2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80205c6:	fb08 1805 	mla	r8, r8, r5, r1
 80205ca:	9d05      	ldr	r5, [sp, #20]
 80205cc:	fa1f f888 	uxth.w	r8, r8
 80205d0:	f108 0101 	add.w	r1, r8, #1
 80205d4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80205d8:	9903      	ldr	r1, [sp, #12]
 80205da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80205de:	f881 8000 	strb.w	r8, [r1]
 80205e2:	fb03 f10a 	mul.w	r1, r3, sl
 80205e6:	fb07 1105 	mla	r1, r7, r5, r1
 80205ea:	9d02      	ldr	r5, [sp, #8]
 80205ec:	fb0c 1105 	mla	r1, ip, r5, r1
 80205f0:	9d07      	ldr	r5, [sp, #28]
 80205f2:	fb05 1102 	mla	r1, r5, r2, r1
 80205f6:	9a08      	ldr	r2, [sp, #32]
 80205f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80205fc:	fb01 0102 	mla	r1, r1, r2, r0
 8020600:	9a03      	ldr	r2, [sp, #12]
 8020602:	b289      	uxth	r1, r1
 8020604:	1c48      	adds	r0, r1, #1
 8020606:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802060a:	1209      	asrs	r1, r1, #8
 802060c:	7051      	strb	r1, [r2, #1]
 802060e:	9a01      	ldr	r2, [sp, #4]
 8020610:	4353      	muls	r3, r2
 8020612:	9a06      	ldr	r2, [sp, #24]
 8020614:	fb07 3702 	mla	r7, r7, r2, r3
 8020618:	9b08      	ldr	r3, [sp, #32]
 802061a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802061e:	fb05 c606 	mla	r6, r5, r6, ip
 8020622:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020626:	fb06 4603 	mla	r6, r6, r3, r4
 802062a:	9b03      	ldr	r3, [sp, #12]
 802062c:	b2b6      	uxth	r6, r6
 802062e:	f106 0e01 	add.w	lr, r6, #1
 8020632:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020636:	1236      	asrs	r6, r6, #8
 8020638:	709e      	strb	r6, [r3, #2]
 802063a:	b00d      	add	sp, #52	; 0x34
 802063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020640:	f1bc 0f0f 	cmp.w	ip, #15
 8020644:	f63f af60 	bhi.w	8020508 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020648:	4626      	mov	r6, r4
 802064a:	4602      	mov	r2, r0
 802064c:	460d      	mov	r5, r1
 802064e:	46a6      	mov	lr, r4
 8020650:	9002      	str	r0, [sp, #8]
 8020652:	4688      	mov	r8, r1
 8020654:	e783      	b.n	802055e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8020656:	bf00      	nop
 8020658:	0802acc6 	.word	0x0802acc6
 802065c:	0802b1be 	.word	0x0802b1be
 8020660:	0802ad8f 	.word	0x0802ad8f

08020664 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020668:	ed2d 8b08 	vpush	{d8-d11}
 802066c:	b0a1      	sub	sp, #132	; 0x84
 802066e:	eeb0 aa40 	vmov.f32	s20, s0
 8020672:	eef0 9a60 	vmov.f32	s19, s1
 8020676:	9307      	str	r3, [sp, #28]
 8020678:	eeb0 9a41 	vmov.f32	s18, s2
 802067c:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8020680:	eeb0 8a62 	vmov.f32	s16, s5
 8020684:	9210      	str	r2, [sp, #64]	; 0x40
 8020686:	eef0 8a43 	vmov.f32	s17, s6
 802068a:	9308      	str	r3, [sp, #32]
 802068c:	eef0 ba44 	vmov.f32	s23, s8
 8020690:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8020694:	eeb0 ba64 	vmov.f32	s22, s9
 8020698:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802069a:	eef0 aa45 	vmov.f32	s21, s10
 802069e:	930a      	str	r3, [sp, #40]	; 0x28
 80206a0:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80206a4:	901f      	str	r0, [sp, #124]	; 0x7c
 80206a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80206a8:	6850      	ldr	r0, [r2, #4]
 80206aa:	910e      	str	r1, [sp, #56]	; 0x38
 80206ac:	6812      	ldr	r2, [r2, #0]
 80206ae:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80206b2:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80206b6:	fb00 1303 	mla	r3, r0, r3, r1
 80206ba:	9908      	ldr	r1, [sp, #32]
 80206bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206c0:	18d3      	adds	r3, r2, r3
 80206c2:	2203      	movs	r2, #3
 80206c4:	9309      	str	r3, [sp, #36]	; 0x24
 80206c6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	930c      	str	r3, [sp, #48]	; 0x30
 80206cc:	f06f 0304 	mvn.w	r3, #4
 80206d0:	fb11 3302 	smlabb	r3, r1, r2, r3
 80206d4:	930d      	str	r3, [sp, #52]	; 0x34
 80206d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206d8:	43db      	mvns	r3, r3
 80206da:	b2db      	uxtb	r3, r3
 80206dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80206de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	dc03      	bgt.n	80206ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80206e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	f340 81df 	ble.w	8020aaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80206ec:	9b07      	ldr	r3, [sp, #28]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	f340 80f2 	ble.w	80208d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80206f4:	ea5f 4228 	movs.w	r2, r8, asr #16
 80206f8:	ea4f 432b 	mov.w	r3, fp, asr #16
 80206fc:	d430      	bmi.n	8020760 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80206fe:	1c51      	adds	r1, r2, #1
 8020700:	9808      	ldr	r0, [sp, #32]
 8020702:	4281      	cmp	r1, r0
 8020704:	da2f      	bge.n	8020766 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020706:	2b00      	cmp	r3, #0
 8020708:	db2d      	blt.n	8020766 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802070a:	1c59      	adds	r1, r3, #1
 802070c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802070e:	4288      	cmp	r0, r1
 8020710:	dd29      	ble.n	8020766 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020712:	9b07      	ldr	r3, [sp, #28]
 8020714:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020716:	3b01      	subs	r3, #1
 8020718:	fb02 8203 	mla	r2, r2, r3, r8
 802071c:	1412      	asrs	r2, r2, #16
 802071e:	d42d      	bmi.n	802077c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020720:	3201      	adds	r2, #1
 8020722:	9908      	ldr	r1, [sp, #32]
 8020724:	4291      	cmp	r1, r2
 8020726:	dd29      	ble.n	802077c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020728:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802072a:	fb02 b303 	mla	r3, r2, r3, fp
 802072e:	141b      	asrs	r3, r3, #16
 8020730:	d424      	bmi.n	802077c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020732:	3301      	adds	r3, #1
 8020734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020736:	429a      	cmp	r2, r3
 8020738:	dd20      	ble.n	802077c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802073a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802073c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020740:	1cde      	adds	r6, r3, #3
 8020742:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8020746:	f1bc 0f00 	cmp.w	ip, #0
 802074a:	f300 811f 	bgt.w	802098c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802074e:	9b07      	ldr	r3, [sp, #28]
 8020750:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020756:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802075a:	4423      	add	r3, r4
 802075c:	9309      	str	r3, [sp, #36]	; 0x24
 802075e:	e0bd      	b.n	80208dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020760:	1c57      	adds	r7, r2, #1
 8020762:	f040 80ae 	bne.w	80208c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020766:	9908      	ldr	r1, [sp, #32]
 8020768:	428a      	cmp	r2, r1
 802076a:	f280 80aa 	bge.w	80208c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802076e:	1c5e      	adds	r6, r3, #1
 8020770:	f2c0 80a7 	blt.w	80208c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020776:	4293      	cmp	r3, r2
 8020778:	f280 80a3 	bge.w	80208c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802077c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020780:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020782:	f1ba 0f00 	cmp.w	sl, #0
 8020786:	dde2      	ble.n	802074e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020788:	ea5f 4028 	movs.w	r0, r8, asr #16
 802078c:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020790:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020794:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020798:	f100 80df 	bmi.w	802095a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 802079c:	1c45      	adds	r5, r0, #1
 802079e:	9f08      	ldr	r7, [sp, #32]
 80207a0:	42af      	cmp	r7, r5
 80207a2:	f340 80dc 	ble.w	802095e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80207a6:	2900      	cmp	r1, #0
 80207a8:	f2c0 80d9 	blt.w	802095e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80207ac:	1c4d      	adds	r5, r1, #1
 80207ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80207b0:	42af      	cmp	r7, r5
 80207b2:	f340 80d4 	ble.w	802095e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80207b6:	9d08      	ldr	r5, [sp, #32]
 80207b8:	fb05 0101 	mla	r1, r5, r1, r0
 80207bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80207be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80207c2:	1845      	adds	r5, r0, r1
 80207c4:	5c40      	ldrb	r0, [r0, r1]
 80207c6:	792f      	ldrb	r7, [r5, #4]
 80207c8:	7869      	ldrb	r1, [r5, #1]
 80207ca:	9711      	str	r7, [sp, #68]	; 0x44
 80207cc:	796f      	ldrb	r7, [r5, #5]
 80207ce:	f895 e002 	ldrb.w	lr, [r5, #2]
 80207d2:	f895 9003 	ldrb.w	r9, [r5, #3]
 80207d6:	9712      	str	r7, [sp, #72]	; 0x48
 80207d8:	b17a      	cbz	r2, 80207fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80207da:	3505      	adds	r5, #5
 80207dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80207de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80207e0:	19ef      	adds	r7, r5, r7
 80207e2:	5d2d      	ldrb	r5, [r5, r4]
 80207e4:	787c      	ldrb	r4, [r7, #1]
 80207e6:	9513      	str	r5, [sp, #76]	; 0x4c
 80207e8:	9415      	str	r4, [sp, #84]	; 0x54
 80207ea:	78bc      	ldrb	r4, [r7, #2]
 80207ec:	9417      	str	r4, [sp, #92]	; 0x5c
 80207ee:	78fc      	ldrb	r4, [r7, #3]
 80207f0:	9414      	str	r4, [sp, #80]	; 0x50
 80207f2:	793c      	ldrb	r4, [r7, #4]
 80207f4:	9416      	str	r4, [sp, #88]	; 0x58
 80207f6:	797c      	ldrb	r4, [r7, #5]
 80207f8:	9418      	str	r4, [sp, #96]	; 0x60
 80207fa:	b29b      	uxth	r3, r3
 80207fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80207fe:	b292      	uxth	r2, r2
 8020800:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8020804:	fb03 f702 	mul.w	r7, r3, r2
 8020808:	011b      	lsls	r3, r3, #4
 802080a:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802080e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020812:	1bdb      	subs	r3, r3, r7
 8020814:	b292      	uxth	r2, r2
 8020816:	b29b      	uxth	r3, r3
 8020818:	ebac 0c02 	sub.w	ip, ip, r2
 802081c:	fb03 f909 	mul.w	r9, r3, r9
 8020820:	fa1f fc8c 	uxth.w	ip, ip
 8020824:	fb0c 9000 	mla	r0, ip, r0, r9
 8020828:	f896 9000 	ldrb.w	r9, [r6]
 802082c:	fb02 0004 	mla	r0, r2, r4, r0
 8020830:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020832:	fb07 0004 	mla	r0, r7, r4, r0
 8020836:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020838:	fb19 f904 	smulbb	r9, r9, r4
 802083c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020840:	fb00 9005 	mla	r0, r0, r5, r9
 8020844:	b280      	uxth	r0, r0
 8020846:	f100 0901 	add.w	r9, r0, #1
 802084a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802084e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020850:	4358      	muls	r0, r3
 8020852:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020856:	fb0c 0101 	mla	r1, ip, r1, r0
 802085a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802085c:	f886 9000 	strb.w	r9, [r6]
 8020860:	fb02 1100 	mla	r1, r2, r0, r1
 8020864:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020866:	fb07 1100 	mla	r1, r7, r0, r1
 802086a:	7870      	ldrb	r0, [r6, #1]
 802086c:	fb10 f004 	smulbb	r0, r0, r4
 8020870:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020874:	fb01 0105 	mla	r1, r1, r5, r0
 8020878:	b289      	uxth	r1, r1
 802087a:	1c48      	adds	r0, r1, #1
 802087c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020880:	1209      	asrs	r1, r1, #8
 8020882:	7071      	strb	r1, [r6, #1]
 8020884:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020886:	434b      	muls	r3, r1
 8020888:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802088a:	fb0c 330e 	mla	r3, ip, lr, r3
 802088e:	fb02 3201 	mla	r2, r2, r1, r3
 8020892:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020894:	fb07 2703 	mla	r7, r7, r3, r2
 8020898:	78b2      	ldrb	r2, [r6, #2]
 802089a:	fb12 f204 	smulbb	r2, r2, r4
 802089e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80208a2:	fb07 2505 	mla	r5, r7, r5, r2
 80208a6:	b2ad      	uxth	r5, r5
 80208a8:	1c6f      	adds	r7, r5, #1
 80208aa:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80208ae:	122d      	asrs	r5, r5, #8
 80208b0:	70b5      	strb	r5, [r6, #2]
 80208b2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80208b4:	3603      	adds	r6, #3
 80208b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80208ba:	4498      	add	r8, r3
 80208bc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80208be:	449b      	add	fp, r3
 80208c0:	e75f      	b.n	8020782 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80208c2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80208c4:	4498      	add	r8, r3
 80208c6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80208c8:	449b      	add	fp, r3
 80208ca:	9b07      	ldr	r3, [sp, #28]
 80208cc:	3b01      	subs	r3, #1
 80208ce:	9307      	str	r3, [sp, #28]
 80208d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208d2:	3303      	adds	r3, #3
 80208d4:	9309      	str	r3, [sp, #36]	; 0x24
 80208d6:	e709      	b.n	80206ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80208d8:	f47f af1b 	bne.w	8020712 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80208dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208de:	2b00      	cmp	r3, #0
 80208e0:	f340 80e3 	ble.w	8020aaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80208e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208e8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80208ea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80208ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80208f2:	eef0 6a48 	vmov.f32	s13, s16
 80208f6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80208fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80208fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020902:	ee16 8a90 	vmov	r8, s13
 8020906:	eef0 6a68 	vmov.f32	s13, s17
 802090a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802090e:	ee16 ba90 	vmov	fp, s13
 8020912:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020916:	ee69 7a27 	vmul.f32	s15, s18, s15
 802091a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802091e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020922:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020926:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802092a:	ee18 2a10 	vmov	r2, s16
 802092e:	eeb0 8a47 	vmov.f32	s16, s14
 8020932:	fb92 f3f3 	sdiv	r3, r2, r3
 8020936:	ee18 2a90 	vmov	r2, s17
 802093a:	9335      	str	r3, [sp, #212]	; 0xd4
 802093c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802093e:	eef0 8a67 	vmov.f32	s17, s15
 8020942:	fb92 f3f3 	sdiv	r3, r2, r3
 8020946:	9336      	str	r3, [sp, #216]	; 0xd8
 8020948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802094a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802094c:	3b01      	subs	r3, #1
 802094e:	930e      	str	r3, [sp, #56]	; 0x38
 8020950:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020952:	bf08      	it	eq
 8020954:	4613      	moveq	r3, r2
 8020956:	9307      	str	r3, [sp, #28]
 8020958:	e6c1      	b.n	80206de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802095a:	1c45      	adds	r5, r0, #1
 802095c:	d1a9      	bne.n	80208b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802095e:	9c08      	ldr	r4, [sp, #32]
 8020960:	42a0      	cmp	r0, r4
 8020962:	daa6      	bge.n	80208b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020964:	1c4c      	adds	r4, r1, #1
 8020966:	dba4      	blt.n	80208b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020968:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802096a:	428c      	cmp	r4, r1
 802096c:	dda1      	ble.n	80208b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802096e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020970:	9001      	str	r0, [sp, #4]
 8020972:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020974:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8020978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802097a:	4631      	mov	r1, r6
 802097c:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020980:	9300      	str	r3, [sp, #0]
 8020982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020984:	9b08      	ldr	r3, [sp, #32]
 8020986:	f7ff fd5b 	bl	8020440 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802098a:	e792      	b.n	80208b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802098c:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020990:	9c08      	ldr	r4, [sp, #32]
 8020992:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020996:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802099a:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802099e:	fb04 2000 	mla	r0, r4, r0, r2
 80209a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80209a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80209a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80209aa:	4402      	add	r2, r0
 80209ac:	5c25      	ldrb	r5, [r4, r0]
 80209ae:	7894      	ldrb	r4, [r2, #2]
 80209b0:	7850      	ldrb	r0, [r2, #1]
 80209b2:	9411      	str	r4, [sp, #68]	; 0x44
 80209b4:	7954      	ldrb	r4, [r2, #5]
 80209b6:	f892 a003 	ldrb.w	sl, [r2, #3]
 80209ba:	f892 9004 	ldrb.w	r9, [r2, #4]
 80209be:	9412      	str	r4, [sp, #72]	; 0x48
 80209c0:	b171      	cbz	r1, 80209e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80209c2:	3205      	adds	r2, #5
 80209c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80209c6:	1917      	adds	r7, r2, r4
 80209c8:	5d12      	ldrb	r2, [r2, r4]
 80209ca:	9219      	str	r2, [sp, #100]	; 0x64
 80209cc:	787a      	ldrb	r2, [r7, #1]
 80209ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80209d0:	78ba      	ldrb	r2, [r7, #2]
 80209d2:	921d      	str	r2, [sp, #116]	; 0x74
 80209d4:	78fa      	ldrb	r2, [r7, #3]
 80209d6:	921a      	str	r2, [sp, #104]	; 0x68
 80209d8:	793a      	ldrb	r2, [r7, #4]
 80209da:	921c      	str	r2, [sp, #112]	; 0x70
 80209dc:	797a      	ldrb	r2, [r7, #5]
 80209de:	921e      	str	r2, [sp, #120]	; 0x78
 80209e0:	b29b      	uxth	r3, r3
 80209e2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80209e4:	b289      	uxth	r1, r1
 80209e6:	3603      	adds	r6, #3
 80209e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80209ec:	fb03 f201 	mul.w	r2, r3, r1
 80209f0:	011b      	lsls	r3, r3, #4
 80209f2:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80209f6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80209fa:	1a9b      	subs	r3, r3, r2
 80209fc:	b289      	uxth	r1, r1
 80209fe:	b29b      	uxth	r3, r3
 8020a00:	1a7f      	subs	r7, r7, r1
 8020a02:	fb03 fa0a 	mul.w	sl, r3, sl
 8020a06:	b2bf      	uxth	r7, r7
 8020a08:	fb03 f909 	mul.w	r9, r3, r9
 8020a0c:	fb07 a505 	mla	r5, r7, r5, sl
 8020a10:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020a14:	fb07 9000 	mla	r0, r7, r0, r9
 8020a18:	fb01 5504 	mla	r5, r1, r4, r5
 8020a1c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020a1e:	fb02 5504 	mla	r5, r2, r4, r5
 8020a22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a24:	fb1a fa04 	smulbb	sl, sl, r4
 8020a28:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020a2c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020a2e:	fb05 a50e 	mla	r5, r5, lr, sl
 8020a32:	fb01 0004 	mla	r0, r1, r4, r0
 8020a36:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020a38:	b2ad      	uxth	r5, r5
 8020a3a:	fb02 0004 	mla	r0, r2, r4, r0
 8020a3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a40:	f105 0a01 	add.w	sl, r5, #1
 8020a44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020a48:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020a4c:	122d      	asrs	r5, r5, #8
 8020a4e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020a52:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020a56:	fb15 f504 	smulbb	r5, r5, r4
 8020a5a:	fb00 500e 	mla	r0, r0, lr, r5
 8020a5e:	b280      	uxth	r0, r0
 8020a60:	1c45      	adds	r5, r0, #1
 8020a62:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020a66:	1200      	asrs	r0, r0, #8
 8020a68:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020a6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020a6e:	4343      	muls	r3, r0
 8020a70:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a72:	fb07 3300 	mla	r3, r7, r0, r3
 8020a76:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020a78:	fb01 3100 	mla	r1, r1, r0, r3
 8020a7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020a7e:	fb02 1203 	mla	r2, r2, r3, r1
 8020a82:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8020a86:	fb11 f104 	smulbb	r1, r1, r4
 8020a8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020a8e:	fb02 120e 	mla	r2, r2, lr, r1
 8020a92:	b292      	uxth	r2, r2
 8020a94:	1c53      	adds	r3, r2, #1
 8020a96:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020a9a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020a9c:	1212      	asrs	r2, r2, #8
 8020a9e:	4498      	add	r8, r3
 8020aa0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020aa2:	f806 2c04 	strb.w	r2, [r6, #-4]
 8020aa6:	449b      	add	fp, r3
 8020aa8:	e64d      	b.n	8020746 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020aaa:	b021      	add	sp, #132	; 0x84
 8020aac:	ecbd 8b08 	vpop	{d8-d11}
 8020ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ab8:	b085      	sub	sp, #20
 8020aba:	784d      	ldrb	r5, [r1, #1]
 8020abc:	788e      	ldrb	r6, [r1, #2]
 8020abe:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020ac2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020ac6:	9403      	str	r4, [sp, #12]
 8020ac8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020acc:	780c      	ldrb	r4, [r1, #0]
 8020ace:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020ad2:	fb07 ce03 	mla	lr, r7, r3, ip
 8020ad6:	2f00      	cmp	r7, #0
 8020ad8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020adc:	eb02 0b0e 	add.w	fp, r2, lr
 8020ae0:	db56      	blt.n	8020b90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020ae2:	45b9      	cmp	r9, r7
 8020ae4:	dd54      	ble.n	8020b90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020ae6:	f1bc 0f00 	cmp.w	ip, #0
 8020aea:	db4d      	blt.n	8020b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020aec:	4563      	cmp	r3, ip
 8020aee:	dd4b      	ble.n	8020b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020af0:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020af4:	9200      	str	r2, [sp, #0]
 8020af6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020afa:	9201      	str	r2, [sp, #4]
 8020afc:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020b00:	9202      	str	r2, [sp, #8]
 8020b02:	f11c 0201 	adds.w	r2, ip, #1
 8020b06:	d44a      	bmi.n	8020b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020b08:	4293      	cmp	r3, r2
 8020b0a:	dd48      	ble.n	8020b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020b0c:	2800      	cmp	r0, #0
 8020b0e:	d046      	beq.n	8020b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020b10:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020b14:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020b18:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020b1c:	3701      	adds	r7, #1
 8020b1e:	d446      	bmi.n	8020bae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020b20:	45b9      	cmp	r9, r7
 8020b22:	dd44      	ble.n	8020bae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020b24:	9a03      	ldr	r2, [sp, #12]
 8020b26:	2a00      	cmp	r2, #0
 8020b28:	d045      	beq.n	8020bb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020b2a:	f1bc 0f00 	cmp.w	ip, #0
 8020b2e:	db3a      	blt.n	8020ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020b30:	4563      	cmp	r3, ip
 8020b32:	dd38      	ble.n	8020ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020b34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020b38:	f04f 0903 	mov.w	r9, #3
 8020b3c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020b40:	fb03 b209 	mla	r2, r3, r9, fp
 8020b44:	fb03 b909 	mla	r9, r3, r9, fp
 8020b48:	7852      	ldrb	r2, [r2, #1]
 8020b4a:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020b4e:	f11c 0c01 	adds.w	ip, ip, #1
 8020b52:	d40d      	bmi.n	8020b70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020b54:	4563      	cmp	r3, ip
 8020b56:	dd0b      	ble.n	8020b70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020b58:	b160      	cbz	r0, 8020b74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020b5a:	2603      	movs	r6, #3
 8020b5c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020b60:	fb03 b506 	mla	r5, r3, r6, fp
 8020b64:	fb03 b306 	mla	r3, r3, r6, fp
 8020b68:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020b6c:	792d      	ldrb	r5, [r5, #4]
 8020b6e:	795e      	ldrb	r6, [r3, #5]
 8020b70:	280f      	cmp	r0, #15
 8020b72:	d802      	bhi.n	8020b7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020b74:	9b03      	ldr	r3, [sp, #12]
 8020b76:	2b0f      	cmp	r3, #15
 8020b78:	d922      	bls.n	8020bc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020b7a:	4b2f      	ldr	r3, [pc, #188]	; (8020c38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020b7c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020b80:	4a2e      	ldr	r2, [pc, #184]	; (8020c3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020b82:	482f      	ldr	r0, [pc, #188]	; (8020c40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020b84:	f003 ff96 	bl	8024ab4 <__assert_func>
 8020b88:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020b8c:	9400      	str	r4, [sp, #0]
 8020b8e:	e7b8      	b.n	8020b02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020b90:	46b2      	mov	sl, r6
 8020b92:	46a8      	mov	r8, r5
 8020b94:	46a6      	mov	lr, r4
 8020b96:	9400      	str	r4, [sp, #0]
 8020b98:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020b9c:	e7be      	b.n	8020b1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020b9e:	46b2      	mov	sl, r6
 8020ba0:	46a8      	mov	r8, r5
 8020ba2:	46a6      	mov	lr, r4
 8020ba4:	e7ba      	b.n	8020b1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020ba6:	46b1      	mov	r9, r6
 8020ba8:	462a      	mov	r2, r5
 8020baa:	4627      	mov	r7, r4
 8020bac:	e7cf      	b.n	8020b4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020bae:	46b1      	mov	r9, r6
 8020bb0:	462a      	mov	r2, r5
 8020bb2:	4627      	mov	r7, r4
 8020bb4:	e7dc      	b.n	8020b70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020bb6:	280f      	cmp	r0, #15
 8020bb8:	d8df      	bhi.n	8020b7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020bba:	46b1      	mov	r9, r6
 8020bbc:	462a      	mov	r2, r5
 8020bbe:	4627      	mov	r7, r4
 8020bc0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020bc4:	b280      	uxth	r0, r0
 8020bc6:	fb00 f30b 	mul.w	r3, r0, fp
 8020bca:	0100      	lsls	r0, r0, #4
 8020bcc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020bd0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020bd4:	1ac0      	subs	r0, r0, r3
 8020bd6:	fa1f fb8b 	uxth.w	fp, fp
 8020bda:	b280      	uxth	r0, r0
 8020bdc:	ebac 0c0b 	sub.w	ip, ip, fp
 8020be0:	9003      	str	r0, [sp, #12]
 8020be2:	fa1f fc8c 	uxth.w	ip, ip
 8020be6:	fb00 fe0e 	mul.w	lr, r0, lr
 8020bea:	9800      	ldr	r0, [sp, #0]
 8020bec:	fb0c ee00 	mla	lr, ip, r0, lr
 8020bf0:	9803      	ldr	r0, [sp, #12]
 8020bf2:	fb00 f808 	mul.w	r8, r0, r8
 8020bf6:	9801      	ldr	r0, [sp, #4]
 8020bf8:	fb0b ee07 	mla	lr, fp, r7, lr
 8020bfc:	fb0c 8800 	mla	r8, ip, r0, r8
 8020c00:	fb03 ee04 	mla	lr, r3, r4, lr
 8020c04:	fb0b 8202 	mla	r2, fp, r2, r8
 8020c08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c0c:	fb03 2505 	mla	r5, r3, r5, r2
 8020c10:	9a03      	ldr	r2, [sp, #12]
 8020c12:	f881 e000 	strb.w	lr, [r1]
 8020c16:	fb02 f00a 	mul.w	r0, r2, sl
 8020c1a:	9a02      	ldr	r2, [sp, #8]
 8020c1c:	122d      	asrs	r5, r5, #8
 8020c1e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020c22:	704d      	strb	r5, [r1, #1]
 8020c24:	fb0b c909 	mla	r9, fp, r9, ip
 8020c28:	fb03 9606 	mla	r6, r3, r6, r9
 8020c2c:	1236      	asrs	r6, r6, #8
 8020c2e:	708e      	strb	r6, [r1, #2]
 8020c30:	b005      	add	sp, #20
 8020c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c36:	bf00      	nop
 8020c38:	0802acc6 	.word	0x0802acc6
 8020c3c:	0802b1be 	.word	0x0802b1be
 8020c40:	0802ad8f 	.word	0x0802ad8f

08020c44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c48:	ed2d 8b0a 	vpush	{d8-d12}
 8020c4c:	b09d      	sub	sp, #116	; 0x74
 8020c4e:	eeb0 aa40 	vmov.f32	s20, s0
 8020c52:	eef0 9a60 	vmov.f32	s19, s1
 8020c56:	9306      	str	r3, [sp, #24]
 8020c58:	eeb0 9a41 	vmov.f32	s18, s2
 8020c5c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8020c60:	eeb0 8a62 	vmov.f32	s16, s5
 8020c64:	901b      	str	r0, [sp, #108]	; 0x6c
 8020c66:	eef0 8a43 	vmov.f32	s17, s6
 8020c6a:	9307      	str	r3, [sp, #28]
 8020c6c:	eeb0 ca44 	vmov.f32	s24, s8
 8020c70:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020c74:	eef0 ba64 	vmov.f32	s23, s9
 8020c78:	eeb0 ba45 	vmov.f32	s22, s10
 8020c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c7e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020c82:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8020c86:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020c88:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020c8c:	6850      	ldr	r0, [r2, #4]
 8020c8e:	6812      	ldr	r2, [r2, #0]
 8020c90:	fb00 1303 	mla	r3, r0, r3, r1
 8020c94:	9907      	ldr	r1, [sp, #28]
 8020c96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c9a:	18d3      	adds	r3, r2, r3
 8020c9c:	2203      	movs	r2, #3
 8020c9e:	9308      	str	r3, [sp, #32]
 8020ca0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8020ca6:	f06f 0304 	mvn.w	r3, #4
 8020caa:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020cae:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	dc03      	bgt.n	8020cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	f340 8193 	ble.w	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020cc2:	9b06      	ldr	r3, [sp, #24]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	f340 80d0 	ble.w	8020e6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020cca:	1432      	asrs	r2, r6, #16
 8020ccc:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020cd0:	d42f      	bmi.n	8020d32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020cd2:	1c51      	adds	r1, r2, #1
 8020cd4:	9807      	ldr	r0, [sp, #28]
 8020cd6:	4281      	cmp	r1, r0
 8020cd8:	da2e      	bge.n	8020d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	db2c      	blt.n	8020d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020cde:	1c59      	adds	r1, r3, #1
 8020ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ce2:	4288      	cmp	r0, r1
 8020ce4:	dd28      	ble.n	8020d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020ce6:	9b06      	ldr	r3, [sp, #24]
 8020ce8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020cea:	3b01      	subs	r3, #1
 8020cec:	fb02 6203 	mla	r2, r2, r3, r6
 8020cf0:	1412      	asrs	r2, r2, #16
 8020cf2:	d42c      	bmi.n	8020d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020cf4:	3201      	adds	r2, #1
 8020cf6:	9907      	ldr	r1, [sp, #28]
 8020cf8:	4291      	cmp	r1, r2
 8020cfa:	dd28      	ble.n	8020d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020cfc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020cfe:	fb02 5303 	mla	r3, r2, r3, r5
 8020d02:	141b      	asrs	r3, r3, #16
 8020d04:	d423      	bmi.n	8020d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020d06:	3301      	adds	r3, #1
 8020d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d0a:	429a      	cmp	r2, r3
 8020d0c:	dd1f      	ble.n	8020d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020d0e:	9b08      	ldr	r3, [sp, #32]
 8020d10:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020d14:	f103 0c03 	add.w	ip, r3, #3
 8020d18:	f1be 0f00 	cmp.w	lr, #0
 8020d1c:	f300 80fa 	bgt.w	8020f14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020d20:	9b06      	ldr	r3, [sp, #24]
 8020d22:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020d26:	9b08      	ldr	r3, [sp, #32]
 8020d28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020d2c:	4423      	add	r3, r4
 8020d2e:	9308      	str	r3, [sp, #32]
 8020d30:	e09d      	b.n	8020e6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8020d32:	1c51      	adds	r1, r2, #1
 8020d34:	f040 808e 	bne.w	8020e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020d38:	9907      	ldr	r1, [sp, #28]
 8020d3a:	428a      	cmp	r2, r1
 8020d3c:	f280 808a 	bge.w	8020e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020d40:	1c5f      	adds	r7, r3, #1
 8020d42:	f2c0 8087 	blt.w	8020e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d48:	4293      	cmp	r3, r2
 8020d4a:	f280 8083 	bge.w	8020e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020d4e:	9f06      	ldr	r7, [sp, #24]
 8020d50:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020d54:	2f00      	cmp	r7, #0
 8020d56:	dde3      	ble.n	8020d20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020d58:	1432      	asrs	r2, r6, #16
 8020d5a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020d5e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020d62:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8020d66:	f100 80bf 	bmi.w	8020ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8020d6a:	1c50      	adds	r0, r2, #1
 8020d6c:	9c07      	ldr	r4, [sp, #28]
 8020d6e:	4284      	cmp	r4, r0
 8020d70:	f340 80bc 	ble.w	8020eec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	f2c0 80b9 	blt.w	8020eec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020d7a:	1c58      	adds	r0, r3, #1
 8020d7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020d7e:	4284      	cmp	r4, r0
 8020d80:	f340 80b4 	ble.w	8020eec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020d84:	9807      	ldr	r0, [sp, #28]
 8020d86:	fb00 2303 	mla	r3, r0, r3, r2
 8020d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020d8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020d8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d92:	441a      	add	r2, r3
 8020d94:	f810 c003 	ldrb.w	ip, [r0, r3]
 8020d98:	7953      	ldrb	r3, [r2, #5]
 8020d9a:	7850      	ldrb	r0, [r2, #1]
 8020d9c:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020da0:	f892 9003 	ldrb.w	r9, [r2, #3]
 8020da4:	f892 8004 	ldrb.w	r8, [r2, #4]
 8020da8:	930e      	str	r3, [sp, #56]	; 0x38
 8020daa:	f1bb 0f00 	cmp.w	fp, #0
 8020dae:	d00f      	beq.n	8020dd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020db0:	3205      	adds	r2, #5
 8020db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020db4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020db6:	18d3      	adds	r3, r2, r3
 8020db8:	5d12      	ldrb	r2, [r2, r4]
 8020dba:	920f      	str	r2, [sp, #60]	; 0x3c
 8020dbc:	785a      	ldrb	r2, [r3, #1]
 8020dbe:	9211      	str	r2, [sp, #68]	; 0x44
 8020dc0:	789a      	ldrb	r2, [r3, #2]
 8020dc2:	9213      	str	r2, [sp, #76]	; 0x4c
 8020dc4:	78da      	ldrb	r2, [r3, #3]
 8020dc6:	9210      	str	r2, [sp, #64]	; 0x40
 8020dc8:	791a      	ldrb	r2, [r3, #4]
 8020dca:	795b      	ldrb	r3, [r3, #5]
 8020dcc:	9212      	str	r2, [sp, #72]	; 0x48
 8020dce:	9314      	str	r3, [sp, #80]	; 0x50
 8020dd0:	b28b      	uxth	r3, r1
 8020dd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020dd4:	fa1f f28b 	uxth.w	r2, fp
 8020dd8:	fb03 fb02 	mul.w	fp, r3, r2
 8020ddc:	011b      	lsls	r3, r3, #4
 8020dde:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020de2:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8020de6:	eba3 030b 	sub.w	r3, r3, fp
 8020dea:	b292      	uxth	r2, r2
 8020dec:	b29b      	uxth	r3, r3
 8020dee:	1a89      	subs	r1, r1, r2
 8020df0:	fb03 f808 	mul.w	r8, r3, r8
 8020df4:	b289      	uxth	r1, r1
 8020df6:	fb03 f909 	mul.w	r9, r3, r9
 8020dfa:	fb01 8800 	mla	r8, r1, r0, r8
 8020dfe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e00:	fb01 990c 	mla	r9, r1, ip, r9
 8020e04:	fb02 8800 	mla	r8, r2, r0, r8
 8020e08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e0a:	fb02 9904 	mla	r9, r2, r4, r9
 8020e0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e10:	fb0b 8800 	mla	r8, fp, r0, r8
 8020e14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020e16:	fb0b 9904 	mla	r9, fp, r4, r9
 8020e1a:	4343      	muls	r3, r0
 8020e1c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e20:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e24:	fb01 330e 	mla	r3, r1, lr, r3
 8020e28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020e2a:	f88a 9000 	strb.w	r9, [sl]
 8020e2e:	fb02 3201 	mla	r2, r2, r1, r3
 8020e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020e34:	f88a 8001 	strb.w	r8, [sl, #1]
 8020e38:	fb0b 2b03 	mla	fp, fp, r3, r2
 8020e3c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8020e40:	f88a b002 	strb.w	fp, [sl, #2]
 8020e44:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020e46:	f10a 0a03 	add.w	sl, sl, #3
 8020e4a:	3f01      	subs	r7, #1
 8020e4c:	441e      	add	r6, r3
 8020e4e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e50:	441d      	add	r5, r3
 8020e52:	e77f      	b.n	8020d54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020e54:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020e56:	441e      	add	r6, r3
 8020e58:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e5a:	441d      	add	r5, r3
 8020e5c:	9b06      	ldr	r3, [sp, #24]
 8020e5e:	3b01      	subs	r3, #1
 8020e60:	9306      	str	r3, [sp, #24]
 8020e62:	9b08      	ldr	r3, [sp, #32]
 8020e64:	3303      	adds	r3, #3
 8020e66:	9308      	str	r3, [sp, #32]
 8020e68:	e72b      	b.n	8020cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020e6a:	f47f af3c 	bne.w	8020ce6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8020e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	f340 80b9 	ble.w	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020e76:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020e7a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020e7c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020e80:	eef0 6a48 	vmov.f32	s13, s16
 8020e84:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020e88:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020e8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e90:	ee16 6a90 	vmov	r6, s13
 8020e94:	eef0 6a68 	vmov.f32	s13, s17
 8020e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e9c:	ee16 5a90 	vmov	r5, s13
 8020ea0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020ea4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020ea8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020eac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020eb0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020eb4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020eb8:	ee18 2a10 	vmov	r2, s16
 8020ebc:	eeb0 8a47 	vmov.f32	s16, s14
 8020ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ec4:	ee18 2a90 	vmov	r2, s17
 8020ec8:	9333      	str	r3, [sp, #204]	; 0xcc
 8020eca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ecc:	eef0 8a67 	vmov.f32	s17, s15
 8020ed0:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ed4:	9334      	str	r3, [sp, #208]	; 0xd0
 8020ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020eda:	3b01      	subs	r3, #1
 8020edc:	930c      	str	r3, [sp, #48]	; 0x30
 8020ede:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ee0:	bf08      	it	eq
 8020ee2:	4613      	moveq	r3, r2
 8020ee4:	9306      	str	r3, [sp, #24]
 8020ee6:	e6e5      	b.n	8020cb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8020ee8:	1c54      	adds	r4, r2, #1
 8020eea:	d1ab      	bne.n	8020e44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020eec:	9807      	ldr	r0, [sp, #28]
 8020eee:	4282      	cmp	r2, r0
 8020ef0:	daa8      	bge.n	8020e44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020ef2:	1c58      	adds	r0, r3, #1
 8020ef4:	dba6      	blt.n	8020e44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ef8:	4298      	cmp	r0, r3
 8020efa:	dda3      	ble.n	8020e44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020efc:	9000      	str	r0, [sp, #0]
 8020efe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020f00:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8020f04:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8020f08:	9b07      	ldr	r3, [sp, #28]
 8020f0a:	4651      	mov	r1, sl
 8020f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f0e:	f7ff fdd1 	bl	8020ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020f12:	e797      	b.n	8020e44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8020f14:	1431      	asrs	r1, r6, #16
 8020f16:	9c07      	ldr	r4, [sp, #28]
 8020f18:	1428      	asrs	r0, r5, #16
 8020f1a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020f1e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8020f22:	fb04 1000 	mla	r0, r4, r0, r1
 8020f26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020f2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020f2e:	4401      	add	r1, r0
 8020f30:	5c20      	ldrb	r0, [r4, r0]
 8020f32:	f891 8002 	ldrb.w	r8, [r1, #2]
 8020f36:	900e      	str	r0, [sp, #56]	; 0x38
 8020f38:	f891 a003 	ldrb.w	sl, [r1, #3]
 8020f3c:	7848      	ldrb	r0, [r1, #1]
 8020f3e:	f891 9004 	ldrb.w	r9, [r1, #4]
 8020f42:	f891 b005 	ldrb.w	fp, [r1, #5]
 8020f46:	b172      	cbz	r2, 8020f66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8020f48:	3105      	adds	r1, #5
 8020f4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f4c:	190f      	adds	r7, r1, r4
 8020f4e:	5d09      	ldrb	r1, [r1, r4]
 8020f50:	9115      	str	r1, [sp, #84]	; 0x54
 8020f52:	7879      	ldrb	r1, [r7, #1]
 8020f54:	9117      	str	r1, [sp, #92]	; 0x5c
 8020f56:	78b9      	ldrb	r1, [r7, #2]
 8020f58:	9119      	str	r1, [sp, #100]	; 0x64
 8020f5a:	78f9      	ldrb	r1, [r7, #3]
 8020f5c:	9116      	str	r1, [sp, #88]	; 0x58
 8020f5e:	7939      	ldrb	r1, [r7, #4]
 8020f60:	9118      	str	r1, [sp, #96]	; 0x60
 8020f62:	7979      	ldrb	r1, [r7, #5]
 8020f64:	911a      	str	r1, [sp, #104]	; 0x68
 8020f66:	b29b      	uxth	r3, r3
 8020f68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f6a:	b292      	uxth	r2, r2
 8020f6c:	f10c 0c03 	add.w	ip, ip, #3
 8020f70:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020f74:	fb03 f102 	mul.w	r1, r3, r2
 8020f78:	011b      	lsls	r3, r3, #4
 8020f7a:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8020f7e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020f82:	1a5b      	subs	r3, r3, r1
 8020f84:	b292      	uxth	r2, r2
 8020f86:	b29b      	uxth	r3, r3
 8020f88:	1abf      	subs	r7, r7, r2
 8020f8a:	fb03 f909 	mul.w	r9, r3, r9
 8020f8e:	b2bf      	uxth	r7, r7
 8020f90:	fb03 fa0a 	mul.w	sl, r3, sl
 8020f94:	fb03 f30b 	mul.w	r3, r3, fp
 8020f98:	fb07 9900 	mla	r9, r7, r0, r9
 8020f9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020f9e:	fb07 aa04 	mla	sl, r7, r4, sl
 8020fa2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020fa4:	fb02 9900 	mla	r9, r2, r0, r9
 8020fa8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020faa:	fb07 3308 	mla	r3, r7, r8, r3
 8020fae:	fb01 9900 	mla	r9, r1, r0, r9
 8020fb2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020fb4:	fb02 aa04 	mla	sl, r2, r4, sl
 8020fb8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020fba:	fb02 3200 	mla	r2, r2, r0, r3
 8020fbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020fc0:	fb01 aa04 	mla	sl, r1, r4, sl
 8020fc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020fc8:	fb01 2103 	mla	r1, r1, r3, r2
 8020fcc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020fce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020fd2:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8020fd6:	1209      	asrs	r1, r1, #8
 8020fd8:	441e      	add	r6, r3
 8020fda:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020fdc:	f80c ac06 	strb.w	sl, [ip, #-6]
 8020fe0:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8020fe4:	441d      	add	r5, r3
 8020fe6:	e697      	b.n	8020d18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8020fe8:	b01d      	add	sp, #116	; 0x74
 8020fea:	ecbd 8b0a 	vpop	{d8-d12}
 8020fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ff8:	b085      	sub	sp, #20
 8020ffa:	7888      	ldrb	r0, [r1, #2]
 8020ffc:	4691      	mov	r9, r2
 8020ffe:	9000      	str	r0, [sp, #0]
 8021000:	7848      	ldrb	r0, [r1, #1]
 8021002:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021006:	9001      	str	r0, [sp, #4]
 8021008:	7808      	ldrb	r0, [r1, #0]
 802100a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802100e:	9002      	str	r0, [sp, #8]
 8021010:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021014:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021018:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802101c:	fb04 c603 	mla	r6, r4, r3, ip
 8021020:	2c00      	cmp	r4, #0
 8021022:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021026:	9a00      	ldr	r2, [sp, #0]
 8021028:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802102c:	9a01      	ldr	r2, [sp, #4]
 802102e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021032:	db3a      	blt.n	80210aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021034:	45a0      	cmp	r8, r4
 8021036:	dd38      	ble.n	80210aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021038:	f1bc 0f00 	cmp.w	ip, #0
 802103c:	db33      	blt.n	80210a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802103e:	4563      	cmp	r3, ip
 8021040:	dd31      	ble.n	80210a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021042:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021046:	f11c 0601 	adds.w	r6, ip, #1
 802104a:	d431      	bmi.n	80210b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802104c:	42b3      	cmp	r3, r6
 802104e:	dd2f      	ble.n	80210b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021050:	b375      	cbz	r5, 80210b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021052:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021056:	3401      	adds	r4, #1
 8021058:	d42e      	bmi.n	80210b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802105a:	45a0      	cmp	r8, r4
 802105c:	dd2c      	ble.n	80210b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802105e:	b35f      	cbz	r7, 80210b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021060:	f1bc 0f00 	cmp.w	ip, #0
 8021064:	db26      	blt.n	80210b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021066:	4563      	cmp	r3, ip
 8021068:	dd24      	ble.n	80210b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802106a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802106e:	f11c 0c01 	adds.w	ip, ip, #1
 8021072:	d405      	bmi.n	8021080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021074:	4563      	cmp	r3, ip
 8021076:	dd03      	ble.n	8021080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021078:	b115      	cbz	r5, 8021080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802107a:	3301      	adds	r3, #1
 802107c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021080:	2d0f      	cmp	r5, #15
 8021082:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021086:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802108a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802108e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021092:	d801      	bhi.n	8021098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021094:	2f0f      	cmp	r7, #15
 8021096:	d911      	bls.n	80210bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021098:	4b80      	ldr	r3, [pc, #512]	; (802129c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802109a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802109e:	4a80      	ldr	r2, [pc, #512]	; (80212a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80210a0:	4880      	ldr	r0, [pc, #512]	; (80212a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80210a2:	f003 fd07 	bl	8024ab4 <__assert_func>
 80210a6:	4602      	mov	r2, r0
 80210a8:	e7cd      	b.n	8021046 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80210aa:	4606      	mov	r6, r0
 80210ac:	4602      	mov	r2, r0
 80210ae:	e7d2      	b.n	8021056 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80210b0:	4606      	mov	r6, r0
 80210b2:	e7d0      	b.n	8021056 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80210b4:	4604      	mov	r4, r0
 80210b6:	e7da      	b.n	802106e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80210b8:	4604      	mov	r4, r0
 80210ba:	e7e1      	b.n	8021080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80210bc:	b2ab      	uxth	r3, r5
 80210be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80210c2:	b2bf      	uxth	r7, r7
 80210c4:	fb03 fe07 	mul.w	lr, r3, r7
 80210c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80210cc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80210d0:	eba3 0c0e 	sub.w	ip, r3, lr
 80210d4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80210d8:	b2bf      	uxth	r7, r7
 80210da:	fa1f fc8c 	uxth.w	ip, ip
 80210de:	eba5 0507 	sub.w	r5, r5, r7
 80210e2:	fb0c f30a 	mul.w	r3, ip, sl
 80210e6:	b2ad      	uxth	r5, r5
 80210e8:	fb05 330b 	mla	r3, r5, fp, r3
 80210ec:	fb07 3309 	mla	r3, r7, r9, r3
 80210f0:	fb0e 3308 	mla	r3, lr, r8, r3
 80210f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80210f8:	9303      	str	r3, [sp, #12]
 80210fa:	d018      	beq.n	802112e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 80210fc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021100:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021104:	fb0b f303 	mul.w	r3, fp, r3
 8021108:	fb0b fb02 	mul.w	fp, fp, r2
 802110c:	0a1a      	lsrs	r2, r3, #8
 802110e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021112:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021116:	441a      	add	r2, r3
 8021118:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802111c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021120:	0a12      	lsrs	r2, r2, #8
 8021122:	0a1b      	lsrs	r3, r3, #8
 8021124:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021128:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802112c:	431a      	orrs	r2, r3
 802112e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021132:	d019      	beq.n	8021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021134:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021138:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802113c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021140:	fb0a fa06 	mul.w	sl, sl, r6
 8021144:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021148:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802114c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021150:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021154:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021158:	445e      	add	r6, fp
 802115a:	0a1b      	lsrs	r3, r3, #8
 802115c:	0a36      	lsrs	r6, r6, #8
 802115e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021162:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021166:	431e      	orrs	r6, r3
 8021168:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802116c:	d019      	beq.n	80211a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 802116e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021172:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021176:	fb09 fa0a 	mul.w	sl, r9, sl
 802117a:	fb09 f904 	mul.w	r9, r9, r4
 802117e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021182:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021186:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802118a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802118e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021192:	4454      	add	r4, sl
 8021194:	0a1b      	lsrs	r3, r3, #8
 8021196:	0a24      	lsrs	r4, r4, #8
 8021198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802119c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80211a0:	431c      	orrs	r4, r3
 80211a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80211a6:	d019      	beq.n	80211dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80211a8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80211ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80211b0:	fb08 f909 	mul.w	r9, r8, r9
 80211b4:	fb08 f800 	mul.w	r8, r8, r0
 80211b8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80211bc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80211c0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80211c4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80211c8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80211cc:	4448      	add	r0, r9
 80211ce:	0a1b      	lsrs	r3, r3, #8
 80211d0:	0a00      	lsrs	r0, r0, #8
 80211d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80211da:	4318      	orrs	r0, r3
 80211dc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80211e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80211e4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80211e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80211ec:	fb0c f808 	mul.w	r8, ip, r8
 80211f0:	fb0c f606 	mul.w	r6, ip, r6
 80211f4:	fb05 8803 	mla	r8, r5, r3, r8
 80211f8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80211fc:	fb05 6202 	mla	r2, r5, r2, r6
 8021200:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021204:	fb07 8803 	mla	r8, r7, r3, r8
 8021208:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802120c:	fb07 2704 	mla	r7, r7, r4, r2
 8021210:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021214:	fb0e 8303 	mla	r3, lr, r3, r8
 8021218:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 802121c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021220:	9803      	ldr	r0, [sp, #12]
 8021222:	b292      	uxth	r2, r2
 8021224:	9c02      	ldr	r4, [sp, #8]
 8021226:	0a1b      	lsrs	r3, r3, #8
 8021228:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802122c:	4350      	muls	r0, r2
 802122e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021232:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021236:	ea43 0e0e 	orr.w	lr, r3, lr
 802123a:	1c43      	adds	r3, r0, #1
 802123c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021240:	fa5f f08e 	uxtb.w	r0, lr
 8021244:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021248:	b2db      	uxtb	r3, r3
 802124a:	fb14 f403 	smulbb	r4, r4, r3
 802124e:	fb00 4002 	mla	r0, r0, r2, r4
 8021252:	b280      	uxth	r0, r0
 8021254:	1c44      	adds	r4, r0, #1
 8021256:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802125a:	9c01      	ldr	r4, [sp, #4]
 802125c:	fb14 f403 	smulbb	r4, r4, r3
 8021260:	1200      	asrs	r0, r0, #8
 8021262:	7008      	strb	r0, [r1, #0]
 8021264:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021268:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802126c:	fb00 4002 	mla	r0, r0, r2, r4
 8021270:	b280      	uxth	r0, r0
 8021272:	1c44      	adds	r4, r0, #1
 8021274:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021278:	1200      	asrs	r0, r0, #8
 802127a:	7048      	strb	r0, [r1, #1]
 802127c:	9800      	ldr	r0, [sp, #0]
 802127e:	fb10 f303 	smulbb	r3, r0, r3
 8021282:	fb0e 3202 	mla	r2, lr, r2, r3
 8021286:	b292      	uxth	r2, r2
 8021288:	f102 0e01 	add.w	lr, r2, #1
 802128c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021290:	1212      	asrs	r2, r2, #8
 8021292:	708a      	strb	r2, [r1, #2]
 8021294:	b005      	add	sp, #20
 8021296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802129a:	bf00      	nop
 802129c:	0802acc6 	.word	0x0802acc6
 80212a0:	0802b1be 	.word	0x0802b1be
 80212a4:	0802ad8f 	.word	0x0802ad8f

080212a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80212a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212ac:	ed2d 8b08 	vpush	{d8-d11}
 80212b0:	b099      	sub	sp, #100	; 0x64
 80212b2:	eeb0 aa40 	vmov.f32	s20, s0
 80212b6:	eef0 9a60 	vmov.f32	s19, s1
 80212ba:	9306      	str	r3, [sp, #24]
 80212bc:	eeb0 9a41 	vmov.f32	s18, s2
 80212c0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80212c4:	eeb0 8a62 	vmov.f32	s16, s5
 80212c8:	9216      	str	r2, [sp, #88]	; 0x58
 80212ca:	eef0 8a43 	vmov.f32	s17, s6
 80212ce:	9307      	str	r3, [sp, #28]
 80212d0:	eef0 ba44 	vmov.f32	s23, s8
 80212d4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 80212d8:	eeb0 ba64 	vmov.f32	s22, s9
 80212dc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80212de:	eef0 aa45 	vmov.f32	s21, s10
 80212e2:	9310      	str	r3, [sp, #64]	; 0x40
 80212e4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80212e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80212ea:	9112      	str	r1, [sp, #72]	; 0x48
 80212ec:	6850      	ldr	r0, [r2, #4]
 80212ee:	9315      	str	r3, [sp, #84]	; 0x54
 80212f0:	6812      	ldr	r2, [r2, #0]
 80212f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80212f4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80212f8:	fb00 1303 	mla	r3, r0, r3, r1
 80212fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021300:	18d3      	adds	r3, r2, r3
 8021302:	930a      	str	r3, [sp, #40]	; 0x28
 8021304:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	9311      	str	r3, [sp, #68]	; 0x44
 802130a:	9b07      	ldr	r3, [sp, #28]
 802130c:	009b      	lsls	r3, r3, #2
 802130e:	930e      	str	r3, [sp, #56]	; 0x38
 8021310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021312:	2b00      	cmp	r3, #0
 8021314:	dc03      	bgt.n	802131e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021316:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021318:	2b00      	cmp	r3, #0
 802131a:	f340 833b 	ble.w	8021994 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802131e:	9b06      	ldr	r3, [sp, #24]
 8021320:	2b00      	cmp	r3, #0
 8021322:	f340 8197 	ble.w	8021654 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021326:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021328:	1423      	asrs	r3, r4, #16
 802132a:	1412      	asrs	r2, r2, #16
 802132c:	d432      	bmi.n	8021394 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 802132e:	1c51      	adds	r1, r2, #1
 8021330:	9807      	ldr	r0, [sp, #28]
 8021332:	4288      	cmp	r0, r1
 8021334:	dd31      	ble.n	802139a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021336:	2b00      	cmp	r3, #0
 8021338:	db2f      	blt.n	802139a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802133a:	1c59      	adds	r1, r3, #1
 802133c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802133e:	4288      	cmp	r0, r1
 8021340:	dd2b      	ble.n	802139a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021342:	9b06      	ldr	r3, [sp, #24]
 8021344:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021346:	3b01      	subs	r3, #1
 8021348:	992b      	ldr	r1, [sp, #172]	; 0xac
 802134a:	fb02 1203 	mla	r2, r2, r3, r1
 802134e:	1412      	asrs	r2, r2, #16
 8021350:	d42e      	bmi.n	80213b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021352:	3201      	adds	r2, #1
 8021354:	9907      	ldr	r1, [sp, #28]
 8021356:	4291      	cmp	r1, r2
 8021358:	dd2a      	ble.n	80213b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802135a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802135c:	fb02 4303 	mla	r3, r2, r3, r4
 8021360:	141b      	asrs	r3, r3, #16
 8021362:	d425      	bmi.n	80213b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021364:	3301      	adds	r3, #1
 8021366:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021368:	429a      	cmp	r2, r3
 802136a:	dd21      	ble.n	80213b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802136c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802136e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021372:	f103 0e03 	add.w	lr, r3, #3
 8021376:	9b06      	ldr	r3, [sp, #24]
 8021378:	9313      	str	r3, [sp, #76]	; 0x4c
 802137a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802137c:	2b00      	cmp	r3, #0
 802137e:	f300 81d2 	bgt.w	8021726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8021382:	9b06      	ldr	r3, [sp, #24]
 8021384:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802138a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802138e:	4423      	add	r3, r4
 8021390:	930a      	str	r3, [sp, #40]	; 0x28
 8021392:	e161      	b.n	8021658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021394:	1c51      	adds	r1, r2, #1
 8021396:	f040 8150 	bne.w	802163a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802139a:	9907      	ldr	r1, [sp, #28]
 802139c:	428a      	cmp	r2, r1
 802139e:	f280 814c 	bge.w	802163a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80213a2:	1c5a      	adds	r2, r3, #1
 80213a4:	f2c0 8149 	blt.w	802163a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80213a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80213aa:	4293      	cmp	r3, r2
 80213ac:	f280 8145 	bge.w	802163a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80213b0:	9b06      	ldr	r3, [sp, #24]
 80213b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80213b4:	9314      	str	r3, [sp, #80]	; 0x50
 80213b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80213ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80213bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80213be:	2b00      	cmp	r3, #0
 80213c0:	dddf      	ble.n	8021382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80213c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80213c4:	1423      	asrs	r3, r4, #16
 80213c6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80213ca:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80213ce:	1412      	asrs	r2, r2, #16
 80213d0:	f100 8190 	bmi.w	80216f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80213d4:	1c55      	adds	r5, r2, #1
 80213d6:	9f07      	ldr	r7, [sp, #28]
 80213d8:	42af      	cmp	r7, r5
 80213da:	f340 818d 	ble.w	80216f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80213de:	2b00      	cmp	r3, #0
 80213e0:	f2c0 818a 	blt.w	80216f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80213e4:	1c5d      	adds	r5, r3, #1
 80213e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80213e8:	42af      	cmp	r7, r5
 80213ea:	f340 8185 	ble.w	80216f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80213ee:	9d07      	ldr	r5, [sp, #28]
 80213f0:	fb03 2305 	mla	r3, r3, r5, r2
 80213f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213f6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80213fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80213fe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021402:	2800      	cmp	r0, #0
 8021404:	f000 8167 	beq.w	80216d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021408:	686a      	ldr	r2, [r5, #4]
 802140a:	920b      	str	r2, [sp, #44]	; 0x2c
 802140c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021410:	2900      	cmp	r1, #0
 8021412:	f000 8169 	beq.w	80216e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021418:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802141a:	18aa      	adds	r2, r5, r2
 802141c:	59ed      	ldr	r5, [r5, r7]
 802141e:	6852      	ldr	r2, [r2, #4]
 8021420:	9508      	str	r5, [sp, #32]
 8021422:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021426:	0e15      	lsrs	r5, r2, #24
 8021428:	920c      	str	r2, [sp, #48]	; 0x30
 802142a:	b280      	uxth	r0, r0
 802142c:	b289      	uxth	r1, r1
 802142e:	fb00 fb01 	mul.w	fp, r0, r1
 8021432:	0100      	lsls	r0, r0, #4
 8021434:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8021438:	eba0 090b 	sub.w	r9, r0, fp
 802143c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8021440:	b289      	uxth	r1, r1
 8021442:	fa1f f989 	uxth.w	r9, r9
 8021446:	1a52      	subs	r2, r2, r1
 8021448:	fb09 f008 	mul.w	r0, r9, r8
 802144c:	b292      	uxth	r2, r2
 802144e:	fb02 000c 	mla	r0, r2, ip, r0
 8021452:	fb01 000a 	mla	r0, r1, sl, r0
 8021456:	fb0b 0005 	mla	r0, fp, r5, r0
 802145a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802145e:	2800      	cmp	r0, #0
 8021460:	f000 80e0 	beq.w	8021624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021464:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021468:	d01b      	beq.n	80214a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 802146a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802146e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021472:	fb0c fe0e 	mul.w	lr, ip, lr
 8021476:	fb0c fc03 	mul.w	ip, ip, r3
 802147a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802147e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021482:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021486:	4473      	add	r3, lr
 8021488:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802148c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021490:	0a1b      	lsrs	r3, r3, #8
 8021492:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021496:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802149a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802149e:	ea43 030e 	orr.w	r3, r3, lr
 80214a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80214a6:	d01e      	beq.n	80214e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80214a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80214aa:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80214ae:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80214b2:	fb08 fc0c 	mul.w	ip, r8, ip
 80214b6:	fb08 f80e 	mul.w	r8, r8, lr
 80214ba:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80214be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80214c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214c6:	44e6      	add	lr, ip
 80214c8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80214cc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80214d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214d4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80214d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214dc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80214e0:	ea4e 0708 	orr.w	r7, lr, r8
 80214e4:	970b      	str	r7, [sp, #44]	; 0x2c
 80214e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80214ea:	d01e      	beq.n	802152a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80214ec:	9f08      	ldr	r7, [sp, #32]
 80214ee:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80214f2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80214f6:	fb0a f808 	mul.w	r8, sl, r8
 80214fa:	fb0a fa0c 	mul.w	sl, sl, ip
 80214fe:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021502:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021506:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802150a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802150e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021512:	44c6      	add	lr, r8
 8021514:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021518:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802151c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021520:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021524:	ea4e 070a 	orr.w	r7, lr, sl
 8021528:	9708      	str	r7, [sp, #32]
 802152a:	2dff      	cmp	r5, #255	; 0xff
 802152c:	d01d      	beq.n	802156a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802152e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021530:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021534:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021538:	fb05 f808 	mul.w	r8, r5, r8
 802153c:	fb05 f50c 	mul.w	r5, r5, ip
 8021540:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021544:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021548:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802154c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021550:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021554:	44c6      	add	lr, r8
 8021556:	0a2d      	lsrs	r5, r5, #8
 8021558:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802155c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021560:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021564:	ea4e 0505 	orr.w	r5, lr, r5
 8021568:	950c      	str	r5, [sp, #48]	; 0x30
 802156a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802156c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021570:	9f08      	ldr	r7, [sp, #32]
 8021572:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021576:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802157a:	fb09 f505 	mul.w	r5, r9, r5
 802157e:	fb02 550c 	mla	r5, r2, ip, r5
 8021582:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021586:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021588:	fb01 550c 	mla	r5, r1, ip, r5
 802158c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021590:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021592:	fb0b 550c 	mla	r5, fp, ip, r5
 8021596:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802159a:	fb09 f90c 	mul.w	r9, r9, ip
 802159e:	0a2d      	lsrs	r5, r5, #8
 80215a0:	fb02 9303 	mla	r3, r2, r3, r9
 80215a4:	9a08      	ldr	r2, [sp, #32]
 80215a6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80215aa:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80215ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80215b0:	fb01 330e 	mla	r3, r1, lr, r3
 80215b4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80215b8:	fb0b 3b01 	mla	fp, fp, r1, r3
 80215bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80215be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80215c0:	4343      	muls	r3, r0
 80215c2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80215c6:	1c58      	adds	r0, r3, #1
 80215c8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80215cc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80215d0:	ea45 050b 	orr.w	r5, r5, fp
 80215d4:	7833      	ldrb	r3, [r6, #0]
 80215d6:	b2ea      	uxtb	r2, r5
 80215d8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80215dc:	fb12 f201 	smulbb	r2, r2, r1
 80215e0:	b2c0      	uxtb	r0, r0
 80215e2:	fb03 2300 	mla	r3, r3, r0, r2
 80215e6:	b29b      	uxth	r3, r3
 80215e8:	1c5a      	adds	r2, r3, #1
 80215ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80215ee:	7872      	ldrb	r2, [r6, #1]
 80215f0:	fb12 f200 	smulbb	r2, r2, r0
 80215f4:	121b      	asrs	r3, r3, #8
 80215f6:	7033      	strb	r3, [r6, #0]
 80215f8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80215fc:	0c2d      	lsrs	r5, r5, #16
 80215fe:	fb03 2301 	mla	r3, r3, r1, r2
 8021602:	b29b      	uxth	r3, r3
 8021604:	1c5a      	adds	r2, r3, #1
 8021606:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802160a:	121b      	asrs	r3, r3, #8
 802160c:	7073      	strb	r3, [r6, #1]
 802160e:	78b3      	ldrb	r3, [r6, #2]
 8021610:	fb13 f000 	smulbb	r0, r3, r0
 8021614:	fb05 0501 	mla	r5, r5, r1, r0
 8021618:	b2ad      	uxth	r5, r5
 802161a:	1c6b      	adds	r3, r5, #1
 802161c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021620:	122d      	asrs	r5, r5, #8
 8021622:	70b5      	strb	r5, [r6, #2]
 8021624:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021626:	3603      	adds	r6, #3
 8021628:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802162a:	4413      	add	r3, r2
 802162c:	932b      	str	r3, [sp, #172]	; 0xac
 802162e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021630:	441c      	add	r4, r3
 8021632:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021634:	3b01      	subs	r3, #1
 8021636:	9314      	str	r3, [sp, #80]	; 0x50
 8021638:	e6c0      	b.n	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802163a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802163c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802163e:	4413      	add	r3, r2
 8021640:	932b      	str	r3, [sp, #172]	; 0xac
 8021642:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021644:	441c      	add	r4, r3
 8021646:	9b06      	ldr	r3, [sp, #24]
 8021648:	3b01      	subs	r3, #1
 802164a:	9306      	str	r3, [sp, #24]
 802164c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802164e:	3303      	adds	r3, #3
 8021650:	930a      	str	r3, [sp, #40]	; 0x28
 8021652:	e664      	b.n	802131e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021654:	f47f ae75 	bne.w	8021342 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8021658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802165a:	2b00      	cmp	r3, #0
 802165c:	f340 819a 	ble.w	8021994 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021664:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021666:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802166a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802166e:	eef0 6a48 	vmov.f32	s13, s16
 8021672:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021676:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802167a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802167e:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8021682:	eef0 6a68 	vmov.f32	s13, s17
 8021686:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802168a:	ee16 4a90 	vmov	r4, s13
 802168e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021692:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021696:	ee37 8a48 	vsub.f32	s16, s14, s16
 802169a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802169e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80216a2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80216a6:	ee18 2a10 	vmov	r2, s16
 80216aa:	eeb0 8a47 	vmov.f32	s16, s14
 80216ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80216b2:	ee18 2a90 	vmov	r2, s17
 80216b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80216b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80216ba:	eef0 8a67 	vmov.f32	s17, s15
 80216be:	fb92 f3f3 	sdiv	r3, r2, r3
 80216c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80216c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80216c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80216c8:	3b01      	subs	r3, #1
 80216ca:	9312      	str	r3, [sp, #72]	; 0x48
 80216cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80216ce:	bf08      	it	eq
 80216d0:	4613      	moveq	r3, r2
 80216d2:	9306      	str	r3, [sp, #24]
 80216d4:	e61c      	b.n	8021310 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80216d6:	b151      	cbz	r1, 80216ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80216d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80216da:	58aa      	ldr	r2, [r5, r2]
 80216dc:	25ff      	movs	r5, #255	; 0xff
 80216de:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80216e2:	9208      	str	r2, [sp, #32]
 80216e4:	46a8      	mov	r8, r5
 80216e6:	e6a0      	b.n	802142a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80216e8:	25ff      	movs	r5, #255	; 0xff
 80216ea:	46aa      	mov	sl, r5
 80216ec:	e69d      	b.n	802142a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80216ee:	25ff      	movs	r5, #255	; 0xff
 80216f0:	46aa      	mov	sl, r5
 80216f2:	e7f7      	b.n	80216e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80216f4:	1c57      	adds	r7, r2, #1
 80216f6:	d195      	bne.n	8021624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80216f8:	9d07      	ldr	r5, [sp, #28]
 80216fa:	4295      	cmp	r5, r2
 80216fc:	dd92      	ble.n	8021624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80216fe:	1c5d      	adds	r5, r3, #1
 8021700:	db90      	blt.n	8021624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021702:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021704:	429d      	cmp	r5, r3
 8021706:	dd8d      	ble.n	8021624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021708:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802170a:	9201      	str	r2, [sp, #4]
 802170c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802170e:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8021712:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021714:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021716:	9300      	str	r3, [sp, #0]
 8021718:	9b07      	ldr	r3, [sp, #28]
 802171a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802171e:	4631      	mov	r1, r6
 8021720:	f7ff fc68 	bl	8020ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021724:	e77e      	b.n	8021624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021726:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021728:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802172c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802172e:	9d07      	ldr	r5, [sp, #28]
 8021730:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021734:	1412      	asrs	r2, r2, #16
 8021736:	1423      	asrs	r3, r4, #16
 8021738:	fb05 2303 	mla	r3, r5, r3, r2
 802173c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802173e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021746:	0e1e      	lsrs	r6, r3, #24
 8021748:	2900      	cmp	r1, #0
 802174a:	f000 8114 	beq.w	8021976 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802174e:	686a      	ldr	r2, [r5, #4]
 8021750:	920d      	str	r2, [sp, #52]	; 0x34
 8021752:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8021756:	2800      	cmp	r0, #0
 8021758:	f000 8116 	beq.w	8021988 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 802175c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802175e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021760:	18aa      	adds	r2, r5, r2
 8021762:	59ed      	ldr	r5, [r5, r7]
 8021764:	6852      	ldr	r2, [r2, #4]
 8021766:	9509      	str	r5, [sp, #36]	; 0x24
 8021768:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802176c:	0e15      	lsrs	r5, r2, #24
 802176e:	920f      	str	r2, [sp, #60]	; 0x3c
 8021770:	b289      	uxth	r1, r1
 8021772:	b280      	uxth	r0, r0
 8021774:	fb01 fa00 	mul.w	sl, r1, r0
 8021778:	0109      	lsls	r1, r1, #4
 802177a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802177e:	eba1 080a 	sub.w	r8, r1, sl
 8021782:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021786:	b280      	uxth	r0, r0
 8021788:	fa1f f888 	uxth.w	r8, r8
 802178c:	1a12      	subs	r2, r2, r0
 802178e:	fb08 f10c 	mul.w	r1, r8, ip
 8021792:	b292      	uxth	r2, r2
 8021794:	fb02 1106 	mla	r1, r2, r6, r1
 8021798:	fb00 1109 	mla	r1, r0, r9, r1
 802179c:	fb0a 1105 	mla	r1, sl, r5, r1
 80217a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80217a4:	2900      	cmp	r1, #0
 80217a6:	f000 80da 	beq.w	802195e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80217aa:	2eff      	cmp	r6, #255	; 0xff
 80217ac:	d016      	beq.n	80217dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80217ae:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80217b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217b6:	4377      	muls	r7, r6
 80217b8:	435e      	muls	r6, r3
 80217ba:	0a3b      	lsrs	r3, r7, #8
 80217bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80217c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217c4:	443b      	add	r3, r7
 80217c6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80217ca:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80217ce:	0a1b      	lsrs	r3, r3, #8
 80217d0:	0a3f      	lsrs	r7, r7, #8
 80217d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80217da:	433b      	orrs	r3, r7
 80217dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80217e0:	d01d      	beq.n	802181e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80217e2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80217e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80217e6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80217ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80217ee:	fb0c f606 	mul.w	r6, ip, r6
 80217f2:	fb0c fc07 	mul.w	ip, ip, r7
 80217f6:	0a37      	lsrs	r7, r6, #8
 80217f8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80217fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021800:	4437      	add	r7, r6
 8021802:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021806:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802180a:	0a3f      	lsrs	r7, r7, #8
 802180c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021810:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021814:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021818:	ea47 060c 	orr.w	r6, r7, ip
 802181c:	960d      	str	r6, [sp, #52]	; 0x34
 802181e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021822:	d01d      	beq.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8021824:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021826:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802182a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802182e:	fb09 fc0c 	mul.w	ip, r9, ip
 8021832:	fb09 f906 	mul.w	r9, r9, r6
 8021836:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802183a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802183e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8021842:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021846:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802184a:	4467      	add	r7, ip
 802184c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021850:	0a3f      	lsrs	r7, r7, #8
 8021852:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021856:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802185a:	ea47 0609 	orr.w	r6, r7, r9
 802185e:	9609      	str	r6, [sp, #36]	; 0x24
 8021860:	2dff      	cmp	r5, #255	; 0xff
 8021862:	d01a      	beq.n	802189a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8021864:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021866:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802186a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802186e:	fb05 fc0c 	mul.w	ip, r5, ip
 8021872:	4375      	muls	r5, r6
 8021874:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021878:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802187c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021880:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021884:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021888:	4467      	add	r7, ip
 802188a:	0a2d      	lsrs	r5, r5, #8
 802188c:	0a3f      	lsrs	r7, r7, #8
 802188e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021892:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021896:	433d      	orrs	r5, r7
 8021898:	950f      	str	r5, [sp, #60]	; 0x3c
 802189a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802189c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80218a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218a4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80218a8:	fb08 f505 	mul.w	r5, r8, r5
 80218ac:	fb02 5506 	mla	r5, r2, r6, r5
 80218b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80218b2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80218b6:	fb00 5506 	mla	r5, r0, r6, r5
 80218ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80218bc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80218c0:	fb0a 5506 	mla	r5, sl, r6, r5
 80218c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80218c6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80218ca:	0a2d      	lsrs	r5, r5, #8
 80218cc:	fb08 f806 	mul.w	r8, r8, r6
 80218d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80218d4:	fb02 8303 	mla	r3, r2, r3, r8
 80218d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218da:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80218de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80218e0:	fb00 3307 	mla	r3, r0, r7, r3
 80218e4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80218e8:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80218ec:	fb01 f30b 	mul.w	r3, r1, fp
 80218f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218f4:	1c59      	adds	r1, r3, #1
 80218f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80218fa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80218fe:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021902:	ea45 050c 	orr.w	r5, r5, ip
 8021906:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802190a:	b2ea      	uxtb	r2, r5
 802190c:	b2c9      	uxtb	r1, r1
 802190e:	fb12 f20b 	smulbb	r2, r2, fp
 8021912:	fb03 2301 	mla	r3, r3, r1, r2
 8021916:	b29b      	uxth	r3, r3
 8021918:	1c5a      	adds	r2, r3, #1
 802191a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802191e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021922:	fb12 f201 	smulbb	r2, r2, r1
 8021926:	121b      	asrs	r3, r3, #8
 8021928:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802192c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021930:	0c2d      	lsrs	r5, r5, #16
 8021932:	fb03 230b 	mla	r3, r3, fp, r2
 8021936:	b29b      	uxth	r3, r3
 8021938:	1c5a      	adds	r2, r3, #1
 802193a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802193e:	121b      	asrs	r3, r3, #8
 8021940:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021944:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021948:	fb13 f101 	smulbb	r1, r3, r1
 802194c:	fb05 150b 	mla	r5, r5, fp, r1
 8021950:	b2ad      	uxth	r5, r5
 8021952:	1c69      	adds	r1, r5, #1
 8021954:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021958:	122d      	asrs	r5, r5, #8
 802195a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802195e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021960:	f10e 0e03 	add.w	lr, lr, #3
 8021964:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021966:	4413      	add	r3, r2
 8021968:	932b      	str	r3, [sp, #172]	; 0xac
 802196a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802196c:	441c      	add	r4, r3
 802196e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021970:	3b01      	subs	r3, #1
 8021972:	9313      	str	r3, [sp, #76]	; 0x4c
 8021974:	e501      	b.n	802137a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021976:	b150      	cbz	r0, 802198e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8021978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802197a:	58aa      	ldr	r2, [r5, r2]
 802197c:	25ff      	movs	r5, #255	; 0xff
 802197e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021982:	9209      	str	r2, [sp, #36]	; 0x24
 8021984:	46ac      	mov	ip, r5
 8021986:	e6f3      	b.n	8021770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021988:	25ff      	movs	r5, #255	; 0xff
 802198a:	46a9      	mov	r9, r5
 802198c:	e6f0      	b.n	8021770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802198e:	25ff      	movs	r5, #255	; 0xff
 8021990:	46a9      	mov	r9, r5
 8021992:	e7f7      	b.n	8021984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021994:	b019      	add	sp, #100	; 0x64
 8021996:	ecbd 8b08 	vpop	{d8-d11}
 802199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080219a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80219a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219a4:	b085      	sub	sp, #20
 80219a6:	7888      	ldrb	r0, [r1, #2]
 80219a8:	4691      	mov	r9, r2
 80219aa:	9000      	str	r0, [sp, #0]
 80219ac:	7848      	ldrb	r0, [r1, #1]
 80219ae:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80219b2:	9001      	str	r0, [sp, #4]
 80219b4:	7808      	ldrb	r0, [r1, #0]
 80219b6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80219ba:	9002      	str	r0, [sp, #8]
 80219bc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80219c0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80219c4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80219c8:	fb04 c603 	mla	r6, r4, r3, ip
 80219cc:	2c00      	cmp	r4, #0
 80219ce:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80219d2:	9a00      	ldr	r2, [sp, #0]
 80219d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80219d8:	9a01      	ldr	r2, [sp, #4]
 80219da:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80219de:	db3a      	blt.n	8021a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80219e0:	45a0      	cmp	r8, r4
 80219e2:	dd38      	ble.n	8021a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80219e4:	f1bc 0f00 	cmp.w	ip, #0
 80219e8:	db33      	blt.n	8021a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80219ea:	4563      	cmp	r3, ip
 80219ec:	dd31      	ble.n	8021a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80219ee:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80219f2:	f11c 0601 	adds.w	r6, ip, #1
 80219f6:	d431      	bmi.n	8021a5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80219f8:	42b3      	cmp	r3, r6
 80219fa:	dd2f      	ble.n	8021a5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80219fc:	b375      	cbz	r5, 8021a5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80219fe:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021a02:	3401      	adds	r4, #1
 8021a04:	d42e      	bmi.n	8021a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021a06:	45a0      	cmp	r8, r4
 8021a08:	dd2c      	ble.n	8021a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021a0a:	b35f      	cbz	r7, 8021a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021a0c:	f1bc 0f00 	cmp.w	ip, #0
 8021a10:	db26      	blt.n	8021a60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021a12:	4563      	cmp	r3, ip
 8021a14:	dd24      	ble.n	8021a60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021a16:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021a1a:	f11c 0c01 	adds.w	ip, ip, #1
 8021a1e:	d405      	bmi.n	8021a2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021a20:	4563      	cmp	r3, ip
 8021a22:	dd03      	ble.n	8021a2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021a24:	b115      	cbz	r5, 8021a2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021a26:	3301      	adds	r3, #1
 8021a28:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021a2c:	2d0f      	cmp	r5, #15
 8021a2e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021a32:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021a36:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021a3a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021a3e:	d801      	bhi.n	8021a44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021a40:	2f0f      	cmp	r7, #15
 8021a42:	d911      	bls.n	8021a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021a44:	4b77      	ldr	r3, [pc, #476]	; (8021c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021a46:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021a4a:	4a77      	ldr	r2, [pc, #476]	; (8021c28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021a4c:	4877      	ldr	r0, [pc, #476]	; (8021c2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8021a4e:	f003 f831 	bl	8024ab4 <__assert_func>
 8021a52:	4602      	mov	r2, r0
 8021a54:	e7cd      	b.n	80219f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021a56:	4606      	mov	r6, r0
 8021a58:	4602      	mov	r2, r0
 8021a5a:	e7d2      	b.n	8021a02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021a5c:	4606      	mov	r6, r0
 8021a5e:	e7d0      	b.n	8021a02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021a60:	4604      	mov	r4, r0
 8021a62:	e7da      	b.n	8021a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8021a64:	4604      	mov	r4, r0
 8021a66:	e7e1      	b.n	8021a2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021a68:	b2ab      	uxth	r3, r5
 8021a6a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021a6e:	b2bf      	uxth	r7, r7
 8021a70:	fb03 fe07 	mul.w	lr, r3, r7
 8021a74:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021a78:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021a7c:	eba3 0c0e 	sub.w	ip, r3, lr
 8021a80:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021a84:	b2bf      	uxth	r7, r7
 8021a86:	fa1f fc8c 	uxth.w	ip, ip
 8021a8a:	eba5 0507 	sub.w	r5, r5, r7
 8021a8e:	fb0c f30a 	mul.w	r3, ip, sl
 8021a92:	b2ad      	uxth	r5, r5
 8021a94:	fb05 330b 	mla	r3, r5, fp, r3
 8021a98:	fb07 3309 	mla	r3, r7, r9, r3
 8021a9c:	fb0e 3308 	mla	r3, lr, r8, r3
 8021aa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021aa4:	9303      	str	r3, [sp, #12]
 8021aa6:	d018      	beq.n	8021ada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021aa8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021aac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ab0:	fb0b f303 	mul.w	r3, fp, r3
 8021ab4:	fb0b fb02 	mul.w	fp, fp, r2
 8021ab8:	0a1a      	lsrs	r2, r3, #8
 8021aba:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021abe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ac2:	441a      	add	r2, r3
 8021ac4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021ac8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021acc:	0a12      	lsrs	r2, r2, #8
 8021ace:	0a1b      	lsrs	r3, r3, #8
 8021ad0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ad4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ad8:	431a      	orrs	r2, r3
 8021ada:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021ade:	d019      	beq.n	8021b14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021ae0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021ae4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ae8:	fb0a fb0b 	mul.w	fp, sl, fp
 8021aec:	fb0a fa06 	mul.w	sl, sl, r6
 8021af0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021af4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021af8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021afc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021b00:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021b04:	445e      	add	r6, fp
 8021b06:	0a1b      	lsrs	r3, r3, #8
 8021b08:	0a36      	lsrs	r6, r6, #8
 8021b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b0e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021b12:	431e      	orrs	r6, r3
 8021b14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021b18:	d019      	beq.n	8021b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021b1a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021b1e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021b22:	fb09 fa0a 	mul.w	sl, r9, sl
 8021b26:	fb09 f904 	mul.w	r9, r9, r4
 8021b2a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021b2e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021b32:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021b36:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021b3a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021b3e:	4454      	add	r4, sl
 8021b40:	0a1b      	lsrs	r3, r3, #8
 8021b42:	0a24      	lsrs	r4, r4, #8
 8021b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b48:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021b4c:	431c      	orrs	r4, r3
 8021b4e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021b52:	d019      	beq.n	8021b88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021b54:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021b58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021b5c:	fb08 f909 	mul.w	r9, r8, r9
 8021b60:	fb08 f800 	mul.w	r8, r8, r0
 8021b64:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021b68:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021b6c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021b70:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b74:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021b78:	4448      	add	r0, r9
 8021b7a:	0a1b      	lsrs	r3, r3, #8
 8021b7c:	0a00      	lsrs	r0, r0, #8
 8021b7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b82:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b86:	4318      	orrs	r0, r3
 8021b88:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021b8c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b90:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021b94:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b98:	fb0c f808 	mul.w	r8, ip, r8
 8021b9c:	fb0c f606 	mul.w	r6, ip, r6
 8021ba0:	fb05 8803 	mla	r8, r5, r3, r8
 8021ba4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021ba8:	fb05 6202 	mla	r2, r5, r2, r6
 8021bac:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021bb0:	fb07 8803 	mla	r8, r7, r3, r8
 8021bb4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021bb8:	fb07 2704 	mla	r7, r7, r4, r2
 8021bbc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021bc0:	fb0e 8303 	mla	r3, lr, r3, r8
 8021bc4:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021bc8:	9802      	ldr	r0, [sp, #8]
 8021bca:	0a1b      	lsrs	r3, r3, #8
 8021bcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021bd4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021bd8:	ea43 0e0e 	orr.w	lr, r3, lr
 8021bdc:	9b03      	ldr	r3, [sp, #12]
 8021bde:	43db      	mvns	r3, r3
 8021be0:	b2db      	uxtb	r3, r3
 8021be2:	4358      	muls	r0, r3
 8021be4:	1c42      	adds	r2, r0, #1
 8021be6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021bea:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021bee:	700a      	strb	r2, [r1, #0]
 8021bf0:	9a01      	ldr	r2, [sp, #4]
 8021bf2:	435a      	muls	r2, r3
 8021bf4:	1c50      	adds	r0, r2, #1
 8021bf6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021bfa:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021bfe:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021c02:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021c06:	704a      	strb	r2, [r1, #1]
 8021c08:	9a00      	ldr	r2, [sp, #0]
 8021c0a:	435a      	muls	r2, r3
 8021c0c:	4613      	mov	r3, r2
 8021c0e:	3201      	adds	r2, #1
 8021c10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021c14:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021c18:	f881 e002 	strb.w	lr, [r1, #2]
 8021c1c:	b005      	add	sp, #20
 8021c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c22:	bf00      	nop
 8021c24:	0802acc6 	.word	0x0802acc6
 8021c28:	0802b1be 	.word	0x0802b1be
 8021c2c:	0802ad8f 	.word	0x0802ad8f

08021c30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c34:	ed2d 8b08 	vpush	{d8-d11}
 8021c38:	b097      	sub	sp, #92	; 0x5c
 8021c3a:	eeb0 aa40 	vmov.f32	s20, s0
 8021c3e:	eef0 9a60 	vmov.f32	s19, s1
 8021c42:	9306      	str	r3, [sp, #24]
 8021c44:	eeb0 9a41 	vmov.f32	s18, s2
 8021c48:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021c4c:	eeb0 8a62 	vmov.f32	s16, s5
 8021c50:	9214      	str	r2, [sp, #80]	; 0x50
 8021c52:	eef0 8a43 	vmov.f32	s17, s6
 8021c56:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021c58:	eef0 ba44 	vmov.f32	s23, s8
 8021c5c:	9307      	str	r3, [sp, #28]
 8021c5e:	eeb0 ba64 	vmov.f32	s22, s9
 8021c62:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021c66:	eef0 aa45 	vmov.f32	s21, s10
 8021c6a:	9015      	str	r0, [sp, #84]	; 0x54
 8021c6c:	9112      	str	r1, [sp, #72]	; 0x48
 8021c6e:	6850      	ldr	r0, [r2, #4]
 8021c70:	9310      	str	r3, [sp, #64]	; 0x40
 8021c72:	6812      	ldr	r2, [r2, #0]
 8021c74:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021c76:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021c7a:	fb00 1303 	mla	r3, r0, r3, r1
 8021c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c82:	18d3      	adds	r3, r2, r3
 8021c84:	930a      	str	r3, [sp, #40]	; 0x28
 8021c86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8021c8c:	9b07      	ldr	r3, [sp, #28]
 8021c8e:	009b      	lsls	r3, r3, #2
 8021c90:	930e      	str	r3, [sp, #56]	; 0x38
 8021c92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	dc03      	bgt.n	8021ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	f340 832e 	ble.w	80222fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021ca0:	9b06      	ldr	r3, [sp, #24]
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	f340 8186 	ble.w	8021fb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8021ca8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021caa:	1423      	asrs	r3, r4, #16
 8021cac:	1412      	asrs	r2, r2, #16
 8021cae:	d42f      	bmi.n	8021d10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021cb0:	1c51      	adds	r1, r2, #1
 8021cb2:	9807      	ldr	r0, [sp, #28]
 8021cb4:	4288      	cmp	r0, r1
 8021cb6:	dd2e      	ble.n	8021d16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	db2c      	blt.n	8021d16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021cbc:	1c59      	adds	r1, r3, #1
 8021cbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021cc0:	4288      	cmp	r0, r1
 8021cc2:	dd28      	ble.n	8021d16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021cc4:	9b06      	ldr	r3, [sp, #24]
 8021cc6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021cc8:	3b01      	subs	r3, #1
 8021cca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021ccc:	fb02 1203 	mla	r2, r2, r3, r1
 8021cd0:	1412      	asrs	r2, r2, #16
 8021cd2:	d42b      	bmi.n	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021cd4:	3201      	adds	r2, #1
 8021cd6:	9907      	ldr	r1, [sp, #28]
 8021cd8:	4291      	cmp	r1, r2
 8021cda:	dd27      	ble.n	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021cdc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021cde:	fb02 4303 	mla	r3, r2, r3, r4
 8021ce2:	141b      	asrs	r3, r3, #16
 8021ce4:	d422      	bmi.n	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021ce6:	3301      	adds	r3, #1
 8021ce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cea:	429a      	cmp	r2, r3
 8021cec:	dd1e      	ble.n	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cf0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021cf4:	1cdd      	adds	r5, r3, #3
 8021cf6:	f1bb 0f00 	cmp.w	fp, #0
 8021cfa:	f300 81c4 	bgt.w	8022086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021cfe:	9b06      	ldr	r3, [sp, #24]
 8021d00:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d0a:	4423      	add	r3, r4
 8021d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8021d0e:	e153      	b.n	8021fb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8021d10:	1c51      	adds	r1, r2, #1
 8021d12:	f040 8142 	bne.w	8021f9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021d16:	9907      	ldr	r1, [sp, #28]
 8021d18:	428a      	cmp	r2, r1
 8021d1a:	f280 813e 	bge.w	8021f9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021d1e:	1c5a      	adds	r2, r3, #1
 8021d20:	f2c0 813b 	blt.w	8021f9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021d26:	4293      	cmp	r3, r2
 8021d28:	f280 8137 	bge.w	8021f9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021d2c:	9b06      	ldr	r3, [sp, #24]
 8021d2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021d30:	9313      	str	r3, [sp, #76]	; 0x4c
 8021d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	dde2      	ble.n	8021cfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021d38:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021d3a:	1423      	asrs	r3, r4, #16
 8021d3c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021d3e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021d42:	1409      	asrs	r1, r1, #16
 8021d44:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8021d48:	f100 8187 	bmi.w	802205a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8021d4c:	1c4e      	adds	r6, r1, #1
 8021d4e:	9f07      	ldr	r7, [sp, #28]
 8021d50:	42b7      	cmp	r7, r6
 8021d52:	f340 8184 	ble.w	802205e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	f2c0 8181 	blt.w	802205e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021d5c:	1c5e      	adds	r6, r3, #1
 8021d5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021d60:	42b7      	cmp	r7, r6
 8021d62:	f340 817c 	ble.w	802205e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021d66:	9e07      	ldr	r6, [sp, #28]
 8021d68:	fb03 1306 	mla	r3, r3, r6, r1
 8021d6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021d6e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021d72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021d76:	0e1f      	lsrs	r7, r3, #24
 8021d78:	2a00      	cmp	r2, #0
 8021d7a:	f000 815c 	beq.w	8022036 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021d7e:	6871      	ldr	r1, [r6, #4]
 8021d80:	910b      	str	r1, [sp, #44]	; 0x2c
 8021d82:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021d86:	2800      	cmp	r0, #0
 8021d88:	f000 815e 	beq.w	8022048 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8021d8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021d8e:	eb06 0c01 	add.w	ip, r6, r1
 8021d92:	5876      	ldr	r6, [r6, r1]
 8021d94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021d98:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021d9c:	9608      	str	r6, [sp, #32]
 8021d9e:	0e0e      	lsrs	r6, r1, #24
 8021da0:	910c      	str	r1, [sp, #48]	; 0x30
 8021da2:	b292      	uxth	r2, r2
 8021da4:	b280      	uxth	r0, r0
 8021da6:	fb02 fa00 	mul.w	sl, r2, r0
 8021daa:	0112      	lsls	r2, r2, #4
 8021dac:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021db0:	eba2 080a 	sub.w	r8, r2, sl
 8021db4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021db8:	b280      	uxth	r0, r0
 8021dba:	fa1f f888 	uxth.w	r8, r8
 8021dbe:	1a09      	subs	r1, r1, r0
 8021dc0:	fb08 f20e 	mul.w	r2, r8, lr
 8021dc4:	b289      	uxth	r1, r1
 8021dc6:	fb01 2207 	mla	r2, r1, r7, r2
 8021dca:	fb00 2209 	mla	r2, r0, r9, r2
 8021dce:	fb0a 2206 	mla	r2, sl, r6, r2
 8021dd2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021dd6:	2a00      	cmp	r2, #0
 8021dd8:	f000 80d4 	beq.w	8021f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021ddc:	2fff      	cmp	r7, #255	; 0xff
 8021dde:	d01a      	beq.n	8021e16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8021de0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021de8:	fb07 fc0c 	mul.w	ip, r7, ip
 8021dec:	435f      	muls	r7, r3
 8021dee:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021df2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021df6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8021dfa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021dfe:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8021e02:	4463      	add	r3, ip
 8021e04:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021e08:	0a1b      	lsrs	r3, r3, #8
 8021e0a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021e0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e12:	ea43 030b 	orr.w	r3, r3, fp
 8021e16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021e1a:	d01e      	beq.n	8021e5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021e1c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021e1e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021e22:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e26:	fb0e fb0b 	mul.w	fp, lr, fp
 8021e2a:	fb0e fe07 	mul.w	lr, lr, r7
 8021e2e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021e32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e36:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021e3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e3e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021e42:	44dc      	add	ip, fp
 8021e44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e4c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021e50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e54:	ea4c 070e 	orr.w	r7, ip, lr
 8021e58:	970b      	str	r7, [sp, #44]	; 0x2c
 8021e5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e5e:	d01e      	beq.n	8021e9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021e60:	9f08      	ldr	r7, [sp, #32]
 8021e62:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021e66:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e6a:	fb09 fe0e 	mul.w	lr, r9, lr
 8021e6e:	fb09 f907 	mul.w	r9, r9, r7
 8021e72:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021e76:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021e7a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021e7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e82:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021e86:	44f4      	add	ip, lr
 8021e88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e90:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021e94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e98:	ea4c 0709 	orr.w	r7, ip, r9
 8021e9c:	9708      	str	r7, [sp, #32]
 8021e9e:	2eff      	cmp	r6, #255	; 0xff
 8021ea0:	d01c      	beq.n	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8021ea2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021ea4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021ea8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021eac:	fb06 fe0e 	mul.w	lr, r6, lr
 8021eb0:	437e      	muls	r6, r7
 8021eb2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021eb6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021eba:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021ebe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ec2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021ec6:	44f4      	add	ip, lr
 8021ec8:	0a36      	lsrs	r6, r6, #8
 8021eca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ece:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ed6:	ea4c 0606 	orr.w	r6, ip, r6
 8021eda:	960c      	str	r6, [sp, #48]	; 0x30
 8021edc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021ede:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ee6:	2aff      	cmp	r2, #255	; 0xff
 8021ee8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021eec:	fb08 f606 	mul.w	r6, r8, r6
 8021ef0:	fb01 6607 	mla	r6, r1, r7, r6
 8021ef4:	9f08      	ldr	r7, [sp, #32]
 8021ef6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021efa:	fb00 6607 	mla	r6, r0, r7, r6
 8021efe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021f00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021f04:	fb0a 6607 	mla	r6, sl, r7, r6
 8021f08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021f0a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021f0e:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8021f12:	fb08 f807 	mul.w	r8, r8, r7
 8021f16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021f1a:	fb01 8303 	mla	r3, r1, r3, r8
 8021f1e:	9908      	ldr	r1, [sp, #32]
 8021f20:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021f24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021f26:	fb00 330c 	mla	r3, r0, ip, r3
 8021f2a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021f2e:	fb0a 3a00 	mla	sl, sl, r0, r3
 8021f32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f3a:	ea46 060a 	orr.w	r6, r6, sl
 8021f3e:	b2f0      	uxtb	r0, r6
 8021f40:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8021f44:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021f48:	f000 8084 	beq.w	8022054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021f4c:	43d2      	mvns	r2, r2
 8021f4e:	782b      	ldrb	r3, [r5, #0]
 8021f50:	b2d2      	uxtb	r2, r2
 8021f52:	fb03 f702 	mul.w	r7, r3, r2
 8021f56:	1c7b      	adds	r3, r7, #1
 8021f58:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021f5c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021f60:	702b      	strb	r3, [r5, #0]
 8021f62:	786b      	ldrb	r3, [r5, #1]
 8021f64:	fb03 f002 	mul.w	r0, r3, r2
 8021f68:	1c43      	adds	r3, r0, #1
 8021f6a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021f6e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021f72:	706b      	strb	r3, [r5, #1]
 8021f74:	78ab      	ldrb	r3, [r5, #2]
 8021f76:	4353      	muls	r3, r2
 8021f78:	1c5a      	adds	r2, r3, #1
 8021f7a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021f7e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021f82:	70ae      	strb	r6, [r5, #2]
 8021f84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021f86:	3503      	adds	r5, #3
 8021f88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f8a:	4413      	add	r3, r2
 8021f8c:	9329      	str	r3, [sp, #164]	; 0xa4
 8021f8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021f90:	441c      	add	r4, r3
 8021f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f94:	3b01      	subs	r3, #1
 8021f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f98:	e6cb      	b.n	8021d32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021f9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021f9c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f9e:	4413      	add	r3, r2
 8021fa0:	9329      	str	r3, [sp, #164]	; 0xa4
 8021fa2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021fa4:	441c      	add	r4, r3
 8021fa6:	9b06      	ldr	r3, [sp, #24]
 8021fa8:	3b01      	subs	r3, #1
 8021faa:	9306      	str	r3, [sp, #24]
 8021fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fae:	3303      	adds	r3, #3
 8021fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8021fb2:	e675      	b.n	8021ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021fb4:	f47f ae86 	bne.w	8021cc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8021fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	f340 819e 	ble.w	80222fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021fc6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021fca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021fce:	eef0 6a48 	vmov.f32	s13, s16
 8021fd2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021fd6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021fda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fde:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021fe2:	eef0 6a68 	vmov.f32	s13, s17
 8021fe6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fea:	ee16 4a90 	vmov	r4, s13
 8021fee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021ff2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021ff6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021ffa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021ffe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022002:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022006:	ee18 2a10 	vmov	r2, s16
 802200a:	eeb0 8a47 	vmov.f32	s16, s14
 802200e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022012:	ee18 2a90 	vmov	r2, s17
 8022016:	932b      	str	r3, [sp, #172]	; 0xac
 8022018:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802201a:	eef0 8a67 	vmov.f32	s17, s15
 802201e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022022:	932c      	str	r3, [sp, #176]	; 0xb0
 8022024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022026:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022028:	3b01      	subs	r3, #1
 802202a:	9312      	str	r3, [sp, #72]	; 0x48
 802202c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802202e:	bf08      	it	eq
 8022030:	4613      	moveq	r3, r2
 8022032:	9306      	str	r3, [sp, #24]
 8022034:	e62d      	b.n	8021c92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022036:	b150      	cbz	r0, 802204e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022038:	990e      	ldr	r1, [sp, #56]	; 0x38
 802203a:	5871      	ldr	r1, [r6, r1]
 802203c:	26ff      	movs	r6, #255	; 0xff
 802203e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022042:	9108      	str	r1, [sp, #32]
 8022044:	46b6      	mov	lr, r6
 8022046:	e6ac      	b.n	8021da2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022048:	26ff      	movs	r6, #255	; 0xff
 802204a:	46b1      	mov	r9, r6
 802204c:	e6a9      	b.n	8021da2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802204e:	26ff      	movs	r6, #255	; 0xff
 8022050:	46b1      	mov	r9, r6
 8022052:	e7f7      	b.n	8022044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022054:	7028      	strb	r0, [r5, #0]
 8022056:	7069      	strb	r1, [r5, #1]
 8022058:	e793      	b.n	8021f82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802205a:	1c4f      	adds	r7, r1, #1
 802205c:	d192      	bne.n	8021f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802205e:	9e07      	ldr	r6, [sp, #28]
 8022060:	428e      	cmp	r6, r1
 8022062:	dd8f      	ble.n	8021f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022064:	1c5e      	adds	r6, r3, #1
 8022066:	db8d      	blt.n	8021f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022068:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802206a:	429e      	cmp	r6, r3
 802206c:	dd8a      	ble.n	8021f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802206e:	9600      	str	r6, [sp, #0]
 8022070:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022074:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022078:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802207a:	4629      	mov	r1, r5
 802207c:	9b07      	ldr	r3, [sp, #28]
 802207e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022080:	f7ff fc8e 	bl	80219a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022084:	e77e      	b.n	8021f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022086:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022088:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802208c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802208e:	9e07      	ldr	r6, [sp, #28]
 8022090:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022094:	1409      	asrs	r1, r1, #16
 8022096:	1423      	asrs	r3, r4, #16
 8022098:	fb06 1303 	mla	r3, r6, r3, r1
 802209c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802209e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80220a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80220a6:	0e1f      	lsrs	r7, r3, #24
 80220a8:	2a00      	cmp	r2, #0
 80220aa:	f000 8113 	beq.w	80222d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80220ae:	6871      	ldr	r1, [r6, #4]
 80220b0:	910d      	str	r1, [sp, #52]	; 0x34
 80220b2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80220b6:	2800      	cmp	r0, #0
 80220b8:	f000 8115 	beq.w	80222e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80220bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80220be:	eb06 0c01 	add.w	ip, r6, r1
 80220c2:	5876      	ldr	r6, [r6, r1]
 80220c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80220c8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80220cc:	9609      	str	r6, [sp, #36]	; 0x24
 80220ce:	0e0e      	lsrs	r6, r1, #24
 80220d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80220d2:	b292      	uxth	r2, r2
 80220d4:	b280      	uxth	r0, r0
 80220d6:	fb02 fa00 	mul.w	sl, r2, r0
 80220da:	0112      	lsls	r2, r2, #4
 80220dc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80220e0:	eba2 080a 	sub.w	r8, r2, sl
 80220e4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80220e8:	b280      	uxth	r0, r0
 80220ea:	fa1f f888 	uxth.w	r8, r8
 80220ee:	1a09      	subs	r1, r1, r0
 80220f0:	fb08 f20e 	mul.w	r2, r8, lr
 80220f4:	b289      	uxth	r1, r1
 80220f6:	fb01 2207 	mla	r2, r1, r7, r2
 80220fa:	fb00 2209 	mla	r2, r0, r9, r2
 80220fe:	fb0a 2206 	mla	r2, sl, r6, r2
 8022102:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022106:	2a00      	cmp	r2, #0
 8022108:	f000 80da 	beq.w	80222c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 802210c:	2fff      	cmp	r7, #255	; 0xff
 802210e:	d01a      	beq.n	8022146 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022110:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022118:	fb07 fc0c 	mul.w	ip, r7, ip
 802211c:	435f      	muls	r7, r3
 802211e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022122:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022126:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802212a:	4463      	add	r3, ip
 802212c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022130:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022134:	0a1b      	lsrs	r3, r3, #8
 8022136:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802213a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802213e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022142:	ea43 030c 	orr.w	r3, r3, ip
 8022146:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802214a:	d021      	beq.n	8022190 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 802214c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802214e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022152:	fb0e f707 	mul.w	r7, lr, r7
 8022156:	9713      	str	r7, [sp, #76]	; 0x4c
 8022158:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802215a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802215e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022160:	fb0e fe0c 	mul.w	lr, lr, ip
 8022164:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022168:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802216c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022170:	44bc      	add	ip, r7
 8022172:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022176:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802217a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802217e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022182:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022186:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802218a:	ea4c 070e 	orr.w	r7, ip, lr
 802218e:	970d      	str	r7, [sp, #52]	; 0x34
 8022190:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022194:	d01e      	beq.n	80221d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022196:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022198:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802219c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80221a0:	fb09 fe0e 	mul.w	lr, r9, lr
 80221a4:	fb09 f907 	mul.w	r9, r9, r7
 80221a8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80221ac:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80221b0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80221b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221b8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80221bc:	44f4      	add	ip, lr
 80221be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80221c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221c6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80221ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221ce:	ea4c 0709 	orr.w	r7, ip, r9
 80221d2:	9709      	str	r7, [sp, #36]	; 0x24
 80221d4:	2eff      	cmp	r6, #255	; 0xff
 80221d6:	d01c      	beq.n	8022212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 80221d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80221da:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80221de:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80221e2:	fb06 fe0e 	mul.w	lr, r6, lr
 80221e6:	437e      	muls	r6, r7
 80221e8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80221ec:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80221f0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80221f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221f8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80221fc:	44f4      	add	ip, lr
 80221fe:	0a36      	lsrs	r6, r6, #8
 8022200:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022204:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802220c:	ea4c 0606 	orr.w	r6, ip, r6
 8022210:	960f      	str	r6, [sp, #60]	; 0x3c
 8022212:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022214:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022218:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802221c:	2aff      	cmp	r2, #255	; 0xff
 802221e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022222:	fb08 f606 	mul.w	r6, r8, r6
 8022226:	fb01 6607 	mla	r6, r1, r7, r6
 802222a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802222c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022230:	fb00 6607 	mla	r6, r0, r7, r6
 8022234:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022236:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802223a:	fb0a 6607 	mla	r6, sl, r7, r6
 802223e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022240:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022244:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022248:	fb08 f807 	mul.w	r8, r8, r7
 802224c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022250:	fb01 8303 	mla	r3, r1, r3, r8
 8022254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022256:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802225a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802225c:	fb00 330c 	mla	r3, r0, ip, r3
 8022260:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022264:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022268:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802226c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022270:	ea46 060e 	orr.w	r6, r6, lr
 8022274:	b2f0      	uxtb	r0, r6
 8022276:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802227a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 802227e:	d038      	beq.n	80222f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022280:	43d2      	mvns	r2, r2
 8022282:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022286:	b2d2      	uxtb	r2, r2
 8022288:	4357      	muls	r7, r2
 802228a:	1c7b      	adds	r3, r7, #1
 802228c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022290:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022294:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022298:	4350      	muls	r0, r2
 802229a:	f805 3c03 	strb.w	r3, [r5, #-3]
 802229e:	1c43      	adds	r3, r0, #1
 80222a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80222a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80222a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80222ac:	4353      	muls	r3, r2
 80222ae:	f805 1c02 	strb.w	r1, [r5, #-2]
 80222b2:	1c5a      	adds	r2, r3, #1
 80222b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80222b8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80222bc:	f805 6c01 	strb.w	r6, [r5, #-1]
 80222c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80222c2:	3503      	adds	r5, #3
 80222c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80222c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80222ca:	4413      	add	r3, r2
 80222cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80222ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222d0:	441c      	add	r4, r3
 80222d2:	e510      	b.n	8021cf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 80222d4:	b150      	cbz	r0, 80222ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80222d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80222d8:	5871      	ldr	r1, [r6, r1]
 80222da:	26ff      	movs	r6, #255	; 0xff
 80222dc:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80222e0:	9109      	str	r1, [sp, #36]	; 0x24
 80222e2:	46b6      	mov	lr, r6
 80222e4:	e6f5      	b.n	80220d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80222e6:	26ff      	movs	r6, #255	; 0xff
 80222e8:	46b1      	mov	r9, r6
 80222ea:	e6f2      	b.n	80220d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80222ec:	26ff      	movs	r6, #255	; 0xff
 80222ee:	46b1      	mov	r9, r6
 80222f0:	e7f7      	b.n	80222e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80222f2:	f805 0c03 	strb.w	r0, [r5, #-3]
 80222f6:	f805 1c02 	strb.w	r1, [r5, #-2]
 80222fa:	e7df      	b.n	80222bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 80222fc:	b017      	add	sp, #92	; 0x5c
 80222fe:	ecbd 8b08 	vpop	{d8-d11}
 8022302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022308 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802230c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022310:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022314:	2800      	cmp	r0, #0
 8022316:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802231a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802231e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022322:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022326:	db6b      	blt.n	8022400 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022328:	4580      	cmp	r8, r0
 802232a:	dd69      	ble.n	8022400 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802232c:	f1bc 0f00 	cmp.w	ip, #0
 8022330:	db66      	blt.n	8022400 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022332:	45e1      	cmp	r9, ip
 8022334:	dd64      	ble.n	8022400 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022336:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802233a:	f01e 0f01 	tst.w	lr, #1
 802233e:	5d16      	ldrb	r6, [r2, r4]
 8022340:	bf0c      	ite	eq
 8022342:	f006 060f 	andeq.w	r6, r6, #15
 8022346:	1136      	asrne	r6, r6, #4
 8022348:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802234c:	b2f6      	uxtb	r6, r6
 802234e:	f110 0a01 	adds.w	sl, r0, #1
 8022352:	d457      	bmi.n	8022404 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022354:	45d0      	cmp	r8, sl
 8022356:	dd55      	ble.n	8022404 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022358:	f1bc 0f00 	cmp.w	ip, #0
 802235c:	db52      	blt.n	8022404 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802235e:	45e1      	cmp	r9, ip
 8022360:	dd50      	ble.n	8022404 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022362:	2f00      	cmp	r7, #0
 8022364:	f000 80ac 	beq.w	80224c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022368:	f10e 0b01 	add.w	fp, lr, #1
 802236c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022370:	f01b 0f01 	tst.w	fp, #1
 8022374:	5d14      	ldrb	r4, [r2, r4]
 8022376:	bf0c      	ite	eq
 8022378:	f004 040f 	andeq.w	r4, r4, #15
 802237c:	1124      	asrne	r4, r4, #4
 802237e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022382:	b2e4      	uxtb	r4, r4
 8022384:	2d00      	cmp	r5, #0
 8022386:	f000 8096 	beq.w	80224b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 802238a:	2800      	cmp	r0, #0
 802238c:	f10c 0c01 	add.w	ip, ip, #1
 8022390:	db3c      	blt.n	802240c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022392:	4580      	cmp	r8, r0
 8022394:	dd3a      	ble.n	802240c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022396:	f1bc 0f00 	cmp.w	ip, #0
 802239a:	db37      	blt.n	802240c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802239c:	45e1      	cmp	r9, ip
 802239e:	dd35      	ble.n	802240c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80223a0:	eb03 0b0e 	add.w	fp, r3, lr
 80223a4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80223a8:	f01b 0f01 	tst.w	fp, #1
 80223ac:	5c10      	ldrb	r0, [r2, r0]
 80223ae:	bf0c      	ite	eq
 80223b0:	f000 000f 	andeq.w	r0, r0, #15
 80223b4:	1100      	asrne	r0, r0, #4
 80223b6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80223ba:	b2c0      	uxtb	r0, r0
 80223bc:	f1ba 0f00 	cmp.w	sl, #0
 80223c0:	db26      	blt.n	8022410 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80223c2:	45d0      	cmp	r8, sl
 80223c4:	dd24      	ble.n	8022410 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80223c6:	f1bc 0f00 	cmp.w	ip, #0
 80223ca:	db21      	blt.n	8022410 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80223cc:	45e1      	cmp	r9, ip
 80223ce:	dd1f      	ble.n	8022410 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80223d0:	b307      	cbz	r7, 8022414 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80223d2:	3301      	adds	r3, #1
 80223d4:	449e      	add	lr, r3
 80223d6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80223da:	f01e 0f01 	tst.w	lr, #1
 80223de:	5cd3      	ldrb	r3, [r2, r3]
 80223e0:	bf0c      	ite	eq
 80223e2:	f003 030f 	andeq.w	r3, r3, #15
 80223e6:	111b      	asrne	r3, r3, #4
 80223e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80223ec:	b2db      	uxtb	r3, r3
 80223ee:	2f0f      	cmp	r7, #15
 80223f0:	d911      	bls.n	8022416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80223f2:	4b35      	ldr	r3, [pc, #212]	; (80224c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80223f4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80223f8:	4a34      	ldr	r2, [pc, #208]	; (80224cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80223fa:	4835      	ldr	r0, [pc, #212]	; (80224d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80223fc:	f002 fb5a 	bl	8024ab4 <__assert_func>
 8022400:	2600      	movs	r6, #0
 8022402:	e7a4      	b.n	802234e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022404:	2400      	movs	r4, #0
 8022406:	e7bd      	b.n	8022384 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022408:	463c      	mov	r4, r7
 802240a:	e7be      	b.n	802238a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 802240c:	2000      	movs	r0, #0
 802240e:	e7d5      	b.n	80223bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022410:	2300      	movs	r3, #0
 8022412:	e7ec      	b.n	80223ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022414:	463b      	mov	r3, r7
 8022416:	2d0f      	cmp	r5, #15
 8022418:	d8eb      	bhi.n	80223f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802241a:	b2bf      	uxth	r7, r7
 802241c:	b2ad      	uxth	r5, r5
 802241e:	fb07 f205 	mul.w	r2, r7, r5
 8022422:	013f      	lsls	r7, r7, #4
 8022424:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022428:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802242c:	1abf      	subs	r7, r7, r2
 802242e:	b2ad      	uxth	r5, r5
 8022430:	b2bf      	uxth	r7, r7
 8022432:	ebac 0c05 	sub.w	ip, ip, r5
 8022436:	437c      	muls	r4, r7
 8022438:	fa1f fc8c 	uxth.w	ip, ip
 802243c:	fb06 440c 	mla	r4, r6, ip, r4
 8022440:	fb05 4400 	mla	r4, r5, r0, r4
 8022444:	fb02 4203 	mla	r2, r2, r3, r4
 8022448:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802244c:	b38a      	cbz	r2, 80224b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802244e:	4b21      	ldr	r3, [pc, #132]	; (80224d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8022450:	681c      	ldr	r4, [r3, #0]
 8022452:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8022456:	b2e5      	uxtb	r5, r4
 8022458:	4353      	muls	r3, r2
 802245a:	1c5a      	adds	r2, r3, #1
 802245c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022460:	1212      	asrs	r2, r2, #8
 8022462:	b290      	uxth	r0, r2
 8022464:	43d2      	mvns	r2, r2
 8022466:	fb15 f500 	smulbb	r5, r5, r0
 802246a:	b2d3      	uxtb	r3, r2
 802246c:	780a      	ldrb	r2, [r1, #0]
 802246e:	fb02 5203 	mla	r2, r2, r3, r5
 8022472:	b292      	uxth	r2, r2
 8022474:	1c55      	adds	r5, r2, #1
 8022476:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802247a:	784d      	ldrb	r5, [r1, #1]
 802247c:	fb15 f503 	smulbb	r5, r5, r3
 8022480:	1212      	asrs	r2, r2, #8
 8022482:	700a      	strb	r2, [r1, #0]
 8022484:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022488:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802248c:	fb02 5200 	mla	r2, r2, r0, r5
 8022490:	b292      	uxth	r2, r2
 8022492:	1c55      	adds	r5, r2, #1
 8022494:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022498:	1212      	asrs	r2, r2, #8
 802249a:	704a      	strb	r2, [r1, #1]
 802249c:	788a      	ldrb	r2, [r1, #2]
 802249e:	fb12 f303 	smulbb	r3, r2, r3
 80224a2:	fb04 3300 	mla	r3, r4, r0, r3
 80224a6:	b29b      	uxth	r3, r3
 80224a8:	1c5a      	adds	r2, r3, #1
 80224aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80224ae:	121b      	asrs	r3, r3, #8
 80224b0:	708b      	strb	r3, [r1, #2]
 80224b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224b6:	2f0f      	cmp	r7, #15
 80224b8:	d89b      	bhi.n	80223f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80224ba:	462b      	mov	r3, r5
 80224bc:	4628      	mov	r0, r5
 80224be:	e7ac      	b.n	802241a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80224c0:	2d00      	cmp	r5, #0
 80224c2:	d1a1      	bne.n	8022408 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80224c4:	462c      	mov	r4, r5
 80224c6:	e7f8      	b.n	80224ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80224c8:	0802acc6 	.word	0x0802acc6
 80224cc:	0802b1be 	.word	0x0802b1be
 80224d0:	0802ad8f 	.word	0x0802ad8f
 80224d4:	2000bb24 	.word	0x2000bb24

080224d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80224d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224dc:	ed2d 8b08 	vpush	{d8-d11}
 80224e0:	b097      	sub	sp, #92	; 0x5c
 80224e2:	eeb0 aa40 	vmov.f32	s20, s0
 80224e6:	eef0 9a60 	vmov.f32	s19, s1
 80224ea:	9308      	str	r3, [sp, #32]
 80224ec:	eeb0 9a41 	vmov.f32	s18, s2
 80224f0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80224f4:	eeb0 8a62 	vmov.f32	s16, s5
 80224f8:	9214      	str	r2, [sp, #80]	; 0x50
 80224fa:	eef0 8a43 	vmov.f32	s17, s6
 80224fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022500:	eef0 ba44 	vmov.f32	s23, s8
 8022504:	9309      	str	r3, [sp, #36]	; 0x24
 8022506:	eeb0 ba64 	vmov.f32	s22, s9
 802250a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 802250e:	eef0 aa45 	vmov.f32	s21, s10
 8022512:	9015      	str	r0, [sp, #84]	; 0x54
 8022514:	910c      	str	r1, [sp, #48]	; 0x30
 8022516:	930e      	str	r3, [sp, #56]	; 0x38
 8022518:	6850      	ldr	r0, [r2, #4]
 802251a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802251e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022522:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022526:	fb00 1803 	mla	r8, r0, r3, r1
 802252a:	6813      	ldr	r3, [r2, #0]
 802252c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022530:	4498      	add	r8, r3
 8022532:	f10b 0301 	add.w	r3, fp, #1
 8022536:	f023 0301 	bic.w	r3, r3, #1
 802253a:	930f      	str	r3, [sp, #60]	; 0x3c
 802253c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802253e:	681f      	ldr	r7, [r3, #0]
 8022540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022542:	2b00      	cmp	r3, #0
 8022544:	dc03      	bgt.n	802254e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022548:	2b00      	cmp	r3, #0
 802254a:	f340 8238 	ble.w	80229be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802254e:	9b08      	ldr	r3, [sp, #32]
 8022550:	2b00      	cmp	r3, #0
 8022552:	f340 810c 	ble.w	802276e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022556:	142a      	asrs	r2, r5, #16
 8022558:	ea4f 4326 	mov.w	r3, r6, asr #16
 802255c:	d42c      	bmi.n	80225b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802255e:	1c51      	adds	r1, r2, #1
 8022560:	458b      	cmp	fp, r1
 8022562:	dd2c      	ble.n	80225be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022564:	2b00      	cmp	r3, #0
 8022566:	db2a      	blt.n	80225be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022568:	1c59      	adds	r1, r3, #1
 802256a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802256c:	4288      	cmp	r0, r1
 802256e:	dd26      	ble.n	80225be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022570:	9b08      	ldr	r3, [sp, #32]
 8022572:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022574:	3b01      	subs	r3, #1
 8022576:	fb02 5203 	mla	r2, r2, r3, r5
 802257a:	1412      	asrs	r2, r2, #16
 802257c:	d429      	bmi.n	80225d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802257e:	3201      	adds	r2, #1
 8022580:	4593      	cmp	fp, r2
 8022582:	dd26      	ble.n	80225d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022584:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022586:	fb02 6303 	mla	r3, r2, r3, r6
 802258a:	141b      	asrs	r3, r3, #16
 802258c:	d421      	bmi.n	80225d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802258e:	3301      	adds	r3, #1
 8022590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022592:	429a      	cmp	r2, r3
 8022594:	dd1d      	ble.n	80225d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022596:	f108 0e03 	add.w	lr, r8, #3
 802259a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802259e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80225a2:	f1b9 0f00 	cmp.w	r9, #0
 80225a6:	f300 814f 	bgt.w	8022848 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80225aa:	9b08      	ldr	r3, [sp, #32]
 80225ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80225b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80225b4:	44a0      	add	r8, r4
 80225b6:	e0dc      	b.n	8022772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80225b8:	1c51      	adds	r1, r2, #1
 80225ba:	f040 80ce 	bne.w	802275a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80225be:	4593      	cmp	fp, r2
 80225c0:	f340 80cb 	ble.w	802275a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80225c4:	1c5a      	adds	r2, r3, #1
 80225c6:	f2c0 80c8 	blt.w	802275a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80225ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225cc:	4293      	cmp	r3, r2
 80225ce:	f280 80c4 	bge.w	802275a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80225d2:	9b08      	ldr	r3, [sp, #32]
 80225d4:	46c1      	mov	r9, r8
 80225d6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80225da:	930d      	str	r3, [sp, #52]	; 0x34
 80225dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225de:	2b00      	cmp	r3, #0
 80225e0:	dde3      	ble.n	80225aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80225e2:	1428      	asrs	r0, r5, #16
 80225e4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80225e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80225ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80225f0:	f100 8111 	bmi.w	8022816 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80225f4:	f100 0c01 	add.w	ip, r0, #1
 80225f8:	45e3      	cmp	fp, ip
 80225fa:	f340 810e 	ble.w	802281a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80225fe:	2b00      	cmp	r3, #0
 8022600:	f2c0 810b 	blt.w	802281a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022604:	f103 0c01 	add.w	ip, r3, #1
 8022608:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802260a:	4564      	cmp	r4, ip
 802260c:	f340 8105 	ble.w	802281a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022610:	fb03 030a 	mla	r3, r3, sl, r0
 8022614:	0858      	lsrs	r0, r3, #1
 8022616:	07dc      	lsls	r4, r3, #31
 8022618:	5c38      	ldrb	r0, [r7, r0]
 802261a:	bf54      	ite	pl
 802261c:	f000 000f 	andpl.w	r0, r0, #15
 8022620:	1100      	asrmi	r0, r0, #4
 8022622:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022626:	b2c0      	uxtb	r0, r0
 8022628:	2a00      	cmp	r2, #0
 802262a:	f000 80e1 	beq.w	80227f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802262e:	f103 0e01 	add.w	lr, r3, #1
 8022632:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022636:	f01e 0f01 	tst.w	lr, #1
 802263a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802263e:	bf0c      	ite	eq
 8022640:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022644:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022648:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802264c:	fa5f f48c 	uxtb.w	r4, ip
 8022650:	9410      	str	r4, [sp, #64]	; 0x40
 8022652:	b1f9      	cbz	r1, 8022694 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022654:	4453      	add	r3, sl
 8022656:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802265a:	07dc      	lsls	r4, r3, #31
 802265c:	f103 0301 	add.w	r3, r3, #1
 8022660:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022664:	bf54      	ite	pl
 8022666:	f00c 0c0f 	andpl.w	ip, ip, #15
 802266a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802266e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022672:	fa5f f48c 	uxtb.w	r4, ip
 8022676:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802267a:	940a      	str	r4, [sp, #40]	; 0x28
 802267c:	07dc      	lsls	r4, r3, #31
 802267e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022682:	bf54      	ite	pl
 8022684:	f00c 030f 	andpl.w	r3, ip, #15
 8022688:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802268c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022690:	b2db      	uxtb	r3, r3
 8022692:	9311      	str	r3, [sp, #68]	; 0x44
 8022694:	b292      	uxth	r2, r2
 8022696:	b289      	uxth	r1, r1
 8022698:	0113      	lsls	r3, r2, #4
 802269a:	fb02 fc01 	mul.w	ip, r2, r1
 802269e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80226a0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80226a4:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80226a8:	eba3 030c 	sub.w	r3, r3, ip
 80226ac:	b289      	uxth	r1, r1
 80226ae:	b29b      	uxth	r3, r3
 80226b0:	ebae 0e01 	sub.w	lr, lr, r1
 80226b4:	4353      	muls	r3, r2
 80226b6:	fa1f fe8e 	uxth.w	lr, lr
 80226ba:	fb00 320e 	mla	r2, r0, lr, r3
 80226be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226c0:	fb01 2203 	mla	r2, r1, r3, r2
 80226c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226c6:	fb0c 2203 	mla	r2, ip, r3, r2
 80226ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80226ce:	2a00      	cmp	r2, #0
 80226d0:	d039      	beq.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80226d2:	4bbd      	ldr	r3, [pc, #756]	; (80229c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80226d4:	6819      	ldr	r1, [r3, #0]
 80226d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226d8:	fa5f fc81 	uxtb.w	ip, r1
 80226dc:	435a      	muls	r2, r3
 80226de:	1c53      	adds	r3, r2, #1
 80226e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80226e4:	1212      	asrs	r2, r2, #8
 80226e6:	b290      	uxth	r0, r2
 80226e8:	43d2      	mvns	r2, r2
 80226ea:	fb1c fc00 	smulbb	ip, ip, r0
 80226ee:	b2d3      	uxtb	r3, r2
 80226f0:	f899 2000 	ldrb.w	r2, [r9]
 80226f4:	fb02 c203 	mla	r2, r2, r3, ip
 80226f8:	b292      	uxth	r2, r2
 80226fa:	f102 0c01 	add.w	ip, r2, #1
 80226fe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022702:	f899 c001 	ldrb.w	ip, [r9, #1]
 8022706:	fb1c fc03 	smulbb	ip, ip, r3
 802270a:	1212      	asrs	r2, r2, #8
 802270c:	f889 2000 	strb.w	r2, [r9]
 8022710:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022714:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022718:	fb02 c200 	mla	r2, r2, r0, ip
 802271c:	b292      	uxth	r2, r2
 802271e:	f102 0c01 	add.w	ip, r2, #1
 8022722:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022726:	1212      	asrs	r2, r2, #8
 8022728:	f889 2001 	strb.w	r2, [r9, #1]
 802272c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8022730:	fb12 f303 	smulbb	r3, r2, r3
 8022734:	fb01 3300 	mla	r3, r1, r0, r3
 8022738:	b29b      	uxth	r3, r3
 802273a:	1c5a      	adds	r2, r3, #1
 802273c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022740:	121b      	asrs	r3, r3, #8
 8022742:	f889 3002 	strb.w	r3, [r9, #2]
 8022746:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022748:	f109 0903 	add.w	r9, r9, #3
 802274c:	441d      	add	r5, r3
 802274e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022750:	441e      	add	r6, r3
 8022752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022754:	3b01      	subs	r3, #1
 8022756:	930d      	str	r3, [sp, #52]	; 0x34
 8022758:	e740      	b.n	80225dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802275a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802275c:	f108 0803 	add.w	r8, r8, #3
 8022760:	441d      	add	r5, r3
 8022762:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022764:	441e      	add	r6, r3
 8022766:	9b08      	ldr	r3, [sp, #32]
 8022768:	3b01      	subs	r3, #1
 802276a:	9308      	str	r3, [sp, #32]
 802276c:	e6ef      	b.n	802254e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802276e:	f47f aeff 	bne.w	8022570 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022774:	2b00      	cmp	r3, #0
 8022776:	f340 8122 	ble.w	80229be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802277a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802277e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022780:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022784:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022788:	eef0 6a48 	vmov.f32	s13, s16
 802278c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022790:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022798:	ee16 5a90 	vmov	r5, s13
 802279c:	eef0 6a68 	vmov.f32	s13, s17
 80227a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80227a4:	ee16 6a90 	vmov	r6, s13
 80227a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80227ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80227b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80227b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80227b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80227bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80227c0:	ee18 2a10 	vmov	r2, s16
 80227c4:	eeb0 8a47 	vmov.f32	s16, s14
 80227c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80227cc:	ee18 2a90 	vmov	r2, s17
 80227d0:	932b      	str	r3, [sp, #172]	; 0xac
 80227d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80227d4:	eef0 8a67 	vmov.f32	s17, s15
 80227d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80227dc:	932c      	str	r3, [sp, #176]	; 0xb0
 80227de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80227e2:	3b01      	subs	r3, #1
 80227e4:	930c      	str	r3, [sp, #48]	; 0x30
 80227e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80227e8:	bf08      	it	eq
 80227ea:	4613      	moveq	r3, r2
 80227ec:	9308      	str	r3, [sp, #32]
 80227ee:	e6a7      	b.n	8022540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80227f0:	2900      	cmp	r1, #0
 80227f2:	f43f af4f 	beq.w	8022694 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80227f6:	4453      	add	r3, sl
 80227f8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80227fc:	07db      	lsls	r3, r3, #31
 80227fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022802:	bf54      	ite	pl
 8022804:	f00c 030f 	andpl.w	r3, ip, #15
 8022808:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802280c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022810:	b2db      	uxtb	r3, r3
 8022812:	930a      	str	r3, [sp, #40]	; 0x28
 8022814:	e73e      	b.n	8022694 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022816:	1c44      	adds	r4, r0, #1
 8022818:	d195      	bne.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802281a:	4583      	cmp	fp, r0
 802281c:	dd93      	ble.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802281e:	1c5c      	adds	r4, r3, #1
 8022820:	db91      	blt.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022822:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022824:	429c      	cmp	r4, r3
 8022826:	dd8e      	ble.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022828:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802282a:	9002      	str	r0, [sp, #8]
 802282c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802282e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022834:	463a      	mov	r2, r7
 8022836:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802283a:	e9cd b300 	strd	fp, r3, [sp]
 802283e:	4649      	mov	r1, r9
 8022840:	4653      	mov	r3, sl
 8022842:	f7ff fd61 	bl	8022308 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022846:	e77e      	b.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022848:	142a      	asrs	r2, r5, #16
 802284a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802284e:	1433      	asrs	r3, r6, #16
 8022850:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022854:	fb0a 2303 	mla	r3, sl, r3, r2
 8022858:	085a      	lsrs	r2, r3, #1
 802285a:	07dc      	lsls	r4, r3, #31
 802285c:	5cba      	ldrb	r2, [r7, r2]
 802285e:	bf54      	ite	pl
 8022860:	f002 020f 	andpl.w	r2, r2, #15
 8022864:	1112      	asrmi	r2, r2, #4
 8022866:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802286a:	b2d2      	uxtb	r2, r2
 802286c:	2900      	cmp	r1, #0
 802286e:	f000 8093 	beq.w	8022998 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8022872:	1c5c      	adds	r4, r3, #1
 8022874:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8022878:	07e4      	lsls	r4, r4, #31
 802287a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802287e:	bf54      	ite	pl
 8022880:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022884:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022888:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802288c:	fa5f f48c 	uxtb.w	r4, ip
 8022890:	9412      	str	r4, [sp, #72]	; 0x48
 8022892:	b300      	cbz	r0, 80228d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022894:	4453      	add	r3, sl
 8022896:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802289a:	07dc      	lsls	r4, r3, #31
 802289c:	f103 0301 	add.w	r3, r3, #1
 80228a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228a4:	bf54      	ite	pl
 80228a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80228b2:	fa5f f48c 	uxtb.w	r4, ip
 80228b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80228ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80228bc:	07dc      	lsls	r4, r3, #31
 80228be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228c2:	bf54      	ite	pl
 80228c4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80228d0:	fa5f f38c 	uxtb.w	r3, ip
 80228d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80228d6:	b289      	uxth	r1, r1
 80228d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80228da:	b280      	uxth	r0, r0
 80228dc:	fb01 f300 	mul.w	r3, r1, r0
 80228e0:	0109      	lsls	r1, r1, #4
 80228e2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80228e6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80228ea:	1ac9      	subs	r1, r1, r3
 80228ec:	b280      	uxth	r0, r0
 80228ee:	b289      	uxth	r1, r1
 80228f0:	ebac 0c00 	sub.w	ip, ip, r0
 80228f4:	4361      	muls	r1, r4
 80228f6:	fa1f fc8c 	uxth.w	ip, ip
 80228fa:	fb02 120c 	mla	r2, r2, ip, r1
 80228fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022900:	fb00 2001 	mla	r0, r0, r1, r2
 8022904:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022906:	fb03 0302 	mla	r3, r3, r2, r0
 802290a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802290e:	2b00      	cmp	r3, #0
 8022910:	d039      	beq.n	8022986 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8022912:	4a2d      	ldr	r2, [pc, #180]	; (80229c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022914:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022918:	6810      	ldr	r0, [r2, #0]
 802291a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802291c:	fa5f fc80 	uxtb.w	ip, r0
 8022920:	4353      	muls	r3, r2
 8022922:	1c5a      	adds	r2, r3, #1
 8022924:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022928:	121b      	asrs	r3, r3, #8
 802292a:	b29a      	uxth	r2, r3
 802292c:	43db      	mvns	r3, r3
 802292e:	fb1c fc02 	smulbb	ip, ip, r2
 8022932:	b2db      	uxtb	r3, r3
 8022934:	fb01 c103 	mla	r1, r1, r3, ip
 8022938:	b289      	uxth	r1, r1
 802293a:	f101 0c01 	add.w	ip, r1, #1
 802293e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022942:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022946:	fb1c fc03 	smulbb	ip, ip, r3
 802294a:	1209      	asrs	r1, r1, #8
 802294c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022950:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022954:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022958:	fb01 c102 	mla	r1, r1, r2, ip
 802295c:	b289      	uxth	r1, r1
 802295e:	f101 0c01 	add.w	ip, r1, #1
 8022962:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022966:	1209      	asrs	r1, r1, #8
 8022968:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802296c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022970:	fb11 f303 	smulbb	r3, r1, r3
 8022974:	fb00 3002 	mla	r0, r0, r2, r3
 8022978:	b280      	uxth	r0, r0
 802297a:	1c42      	adds	r2, r0, #1
 802297c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022980:	1200      	asrs	r0, r0, #8
 8022982:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022986:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022988:	f10e 0e03 	add.w	lr, lr, #3
 802298c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022990:	441d      	add	r5, r3
 8022992:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022994:	441e      	add	r6, r3
 8022996:	e604      	b.n	80225a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022998:	2800      	cmp	r0, #0
 802299a:	d09c      	beq.n	80228d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802299c:	4453      	add	r3, sl
 802299e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80229a2:	07db      	lsls	r3, r3, #31
 80229a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80229a8:	bf54      	ite	pl
 80229aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80229ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80229b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80229b6:	fa5f f38c 	uxtb.w	r3, ip
 80229ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80229bc:	e78b      	b.n	80228d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80229be:	b017      	add	sp, #92	; 0x5c
 80229c0:	ecbd 8b08 	vpop	{d8-d11}
 80229c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229c8:	2000bb24 	.word	0x2000bb24

080229cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80229cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80229d4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80229d8:	2800      	cmp	r0, #0
 80229da:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80229de:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80229e2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80229e6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80229ea:	db6b      	blt.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80229ec:	4580      	cmp	r8, r0
 80229ee:	dd69      	ble.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80229f0:	f1bc 0f00 	cmp.w	ip, #0
 80229f4:	db66      	blt.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80229f6:	45e1      	cmp	r9, ip
 80229f8:	dd64      	ble.n	8022ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80229fa:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80229fe:	f01e 0f01 	tst.w	lr, #1
 8022a02:	5d16      	ldrb	r6, [r2, r4]
 8022a04:	bf0c      	ite	eq
 8022a06:	f006 060f 	andeq.w	r6, r6, #15
 8022a0a:	1136      	asrne	r6, r6, #4
 8022a0c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022a10:	b2f6      	uxtb	r6, r6
 8022a12:	f110 0a01 	adds.w	sl, r0, #1
 8022a16:	d457      	bmi.n	8022ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022a18:	45d0      	cmp	r8, sl
 8022a1a:	dd55      	ble.n	8022ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022a1c:	f1bc 0f00 	cmp.w	ip, #0
 8022a20:	db52      	blt.n	8022ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022a22:	45e1      	cmp	r9, ip
 8022a24:	dd50      	ble.n	8022ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022a26:	2f00      	cmp	r7, #0
 8022a28:	f000 80a5 	beq.w	8022b76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022a2c:	f10e 0b01 	add.w	fp, lr, #1
 8022a30:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022a34:	f01b 0f01 	tst.w	fp, #1
 8022a38:	5d14      	ldrb	r4, [r2, r4]
 8022a3a:	bf0c      	ite	eq
 8022a3c:	f004 040f 	andeq.w	r4, r4, #15
 8022a40:	1124      	asrne	r4, r4, #4
 8022a42:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022a46:	b2e4      	uxtb	r4, r4
 8022a48:	2d00      	cmp	r5, #0
 8022a4a:	f000 808f 	beq.w	8022b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022a4e:	2800      	cmp	r0, #0
 8022a50:	f10c 0c01 	add.w	ip, ip, #1
 8022a54:	db3c      	blt.n	8022ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022a56:	4580      	cmp	r8, r0
 8022a58:	dd3a      	ble.n	8022ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022a5a:	f1bc 0f00 	cmp.w	ip, #0
 8022a5e:	db37      	blt.n	8022ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022a60:	45e1      	cmp	r9, ip
 8022a62:	dd35      	ble.n	8022ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022a64:	eb03 0b0e 	add.w	fp, r3, lr
 8022a68:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022a6c:	f01b 0f01 	tst.w	fp, #1
 8022a70:	5c10      	ldrb	r0, [r2, r0]
 8022a72:	bf0c      	ite	eq
 8022a74:	f000 000f 	andeq.w	r0, r0, #15
 8022a78:	1100      	asrne	r0, r0, #4
 8022a7a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022a7e:	b2c0      	uxtb	r0, r0
 8022a80:	f1ba 0f00 	cmp.w	sl, #0
 8022a84:	db26      	blt.n	8022ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022a86:	45d0      	cmp	r8, sl
 8022a88:	dd24      	ble.n	8022ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022a8a:	f1bc 0f00 	cmp.w	ip, #0
 8022a8e:	db21      	blt.n	8022ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022a90:	45e1      	cmp	r9, ip
 8022a92:	dd1f      	ble.n	8022ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022a94:	b307      	cbz	r7, 8022ad8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022a96:	3301      	adds	r3, #1
 8022a98:	449e      	add	lr, r3
 8022a9a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022a9e:	f01e 0f01 	tst.w	lr, #1
 8022aa2:	5cd3      	ldrb	r3, [r2, r3]
 8022aa4:	bf0c      	ite	eq
 8022aa6:	f003 030f 	andeq.w	r3, r3, #15
 8022aaa:	111b      	asrne	r3, r3, #4
 8022aac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ab0:	b2db      	uxtb	r3, r3
 8022ab2:	2f0f      	cmp	r7, #15
 8022ab4:	d911      	bls.n	8022ada <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022ab6:	4b32      	ldr	r3, [pc, #200]	; (8022b80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022ab8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022abc:	4a31      	ldr	r2, [pc, #196]	; (8022b84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022abe:	4832      	ldr	r0, [pc, #200]	; (8022b88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022ac0:	f001 fff8 	bl	8024ab4 <__assert_func>
 8022ac4:	2600      	movs	r6, #0
 8022ac6:	e7a4      	b.n	8022a12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022ac8:	2400      	movs	r4, #0
 8022aca:	e7bd      	b.n	8022a48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022acc:	463c      	mov	r4, r7
 8022ace:	e7be      	b.n	8022a4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022ad0:	2000      	movs	r0, #0
 8022ad2:	e7d5      	b.n	8022a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	e7ec      	b.n	8022ab2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022ad8:	463b      	mov	r3, r7
 8022ada:	2d0f      	cmp	r5, #15
 8022adc:	d8eb      	bhi.n	8022ab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022ade:	b2bf      	uxth	r7, r7
 8022ae0:	b2ad      	uxth	r5, r5
 8022ae2:	fb07 f205 	mul.w	r2, r7, r5
 8022ae6:	013f      	lsls	r7, r7, #4
 8022ae8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022aec:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022af0:	1abf      	subs	r7, r7, r2
 8022af2:	b2ad      	uxth	r5, r5
 8022af4:	b2bf      	uxth	r7, r7
 8022af6:	ebac 0c05 	sub.w	ip, ip, r5
 8022afa:	437c      	muls	r4, r7
 8022afc:	fa1f fc8c 	uxth.w	ip, ip
 8022b00:	fb06 440c 	mla	r4, r6, ip, r4
 8022b04:	fb05 4400 	mla	r4, r5, r0, r4
 8022b08:	fb02 4303 	mla	r3, r2, r3, r4
 8022b0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b10:	b353      	cbz	r3, 8022b68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022b12:	4a1e      	ldr	r2, [pc, #120]	; (8022b8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022b14:	7808      	ldrb	r0, [r1, #0]
 8022b16:	6814      	ldr	r4, [r2, #0]
 8022b18:	b29a      	uxth	r2, r3
 8022b1a:	43db      	mvns	r3, r3
 8022b1c:	b2e5      	uxtb	r5, r4
 8022b1e:	b2db      	uxtb	r3, r3
 8022b20:	fb15 f502 	smulbb	r5, r5, r2
 8022b24:	fb00 5003 	mla	r0, r0, r3, r5
 8022b28:	b280      	uxth	r0, r0
 8022b2a:	1c45      	adds	r5, r0, #1
 8022b2c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b30:	784d      	ldrb	r5, [r1, #1]
 8022b32:	fb15 f503 	smulbb	r5, r5, r3
 8022b36:	1200      	asrs	r0, r0, #8
 8022b38:	7008      	strb	r0, [r1, #0]
 8022b3a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022b3e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022b42:	fb00 5002 	mla	r0, r0, r2, r5
 8022b46:	b280      	uxth	r0, r0
 8022b48:	1c45      	adds	r5, r0, #1
 8022b4a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b4e:	1200      	asrs	r0, r0, #8
 8022b50:	7048      	strb	r0, [r1, #1]
 8022b52:	7888      	ldrb	r0, [r1, #2]
 8022b54:	fb10 f303 	smulbb	r3, r0, r3
 8022b58:	fb04 3202 	mla	r2, r4, r2, r3
 8022b5c:	b292      	uxth	r2, r2
 8022b5e:	1c53      	adds	r3, r2, #1
 8022b60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022b64:	1212      	asrs	r2, r2, #8
 8022b66:	708a      	strb	r2, [r1, #2]
 8022b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b6c:	2f0f      	cmp	r7, #15
 8022b6e:	d8a2      	bhi.n	8022ab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022b70:	462b      	mov	r3, r5
 8022b72:	4628      	mov	r0, r5
 8022b74:	e7b3      	b.n	8022ade <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022b76:	2d00      	cmp	r5, #0
 8022b78:	d1a8      	bne.n	8022acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022b7a:	462c      	mov	r4, r5
 8022b7c:	e7f8      	b.n	8022b70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022b7e:	bf00      	nop
 8022b80:	0802acc6 	.word	0x0802acc6
 8022b84:	0802b1be 	.word	0x0802b1be
 8022b88:	0802ad8f 	.word	0x0802ad8f
 8022b8c:	2000bb24 	.word	0x2000bb24

08022b90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b94:	ed2d 8b08 	vpush	{d8-d11}
 8022b98:	b095      	sub	sp, #84	; 0x54
 8022b9a:	461c      	mov	r4, r3
 8022b9c:	eeb0 aa40 	vmov.f32	s20, s0
 8022ba0:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022ba4:	eef0 9a60 	vmov.f32	s19, s1
 8022ba8:	920e      	str	r2, [sp, #56]	; 0x38
 8022baa:	eeb0 9a41 	vmov.f32	s18, s2
 8022bae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022bb0:	eeb0 8a62 	vmov.f32	s16, s5
 8022bb4:	9307      	str	r3, [sp, #28]
 8022bb6:	eef0 8a43 	vmov.f32	s17, s6
 8022bba:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022bbe:	eef0 ba44 	vmov.f32	s23, s8
 8022bc2:	9013      	str	r0, [sp, #76]	; 0x4c
 8022bc4:	eeb0 ba64 	vmov.f32	s22, s9
 8022bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8022bca:	eef0 aa45 	vmov.f32	s21, s10
 8022bce:	9308      	str	r3, [sp, #32]
 8022bd0:	6850      	ldr	r0, [r2, #4]
 8022bd2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022bd6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022bda:	fb00 1803 	mla	r8, r0, r3, r1
 8022bde:	6813      	ldr	r3, [r2, #0]
 8022be0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022be4:	4498      	add	r8, r3
 8022be6:	9b07      	ldr	r3, [sp, #28]
 8022be8:	3301      	adds	r3, #1
 8022bea:	f023 0301 	bic.w	r3, r3, #1
 8022bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bf0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022bf2:	681f      	ldr	r7, [r3, #0]
 8022bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	dc03      	bgt.n	8022c02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	f340 8238 	ble.w	8023072 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022c02:	2c00      	cmp	r4, #0
 8022c04:	f340 8109 	ble.w	8022e1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022c08:	142a      	asrs	r2, r5, #16
 8022c0a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c0e:	d42b      	bmi.n	8022c68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022c10:	1c51      	adds	r1, r2, #1
 8022c12:	9807      	ldr	r0, [sp, #28]
 8022c14:	4288      	cmp	r0, r1
 8022c16:	dd2a      	ble.n	8022c6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	db28      	blt.n	8022c6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022c1c:	1c59      	adds	r1, r3, #1
 8022c1e:	9808      	ldr	r0, [sp, #32]
 8022c20:	4288      	cmp	r0, r1
 8022c22:	dd24      	ble.n	8022c6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022c24:	1e63      	subs	r3, r4, #1
 8022c26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022c28:	fb02 5203 	mla	r2, r2, r3, r5
 8022c2c:	1412      	asrs	r2, r2, #16
 8022c2e:	d429      	bmi.n	8022c84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022c30:	3201      	adds	r2, #1
 8022c32:	9907      	ldr	r1, [sp, #28]
 8022c34:	4291      	cmp	r1, r2
 8022c36:	dd25      	ble.n	8022c84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022c38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022c3a:	fb02 6303 	mla	r3, r2, r3, r6
 8022c3e:	141b      	asrs	r3, r3, #16
 8022c40:	d420      	bmi.n	8022c84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022c42:	3301      	adds	r3, #1
 8022c44:	9a08      	ldr	r2, [sp, #32]
 8022c46:	429a      	cmp	r2, r3
 8022c48:	dd1c      	ble.n	8022c84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022c4a:	f108 0e03 	add.w	lr, r8, #3
 8022c4e:	46a1      	mov	r9, r4
 8022c50:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022c54:	f1b9 0f00 	cmp.w	r9, #0
 8022c58:	f300 8155 	bgt.w	8022f06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022c5c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022c60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022c64:	44a0      	add	r8, r4
 8022c66:	e0da      	b.n	8022e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022c68:	1c50      	adds	r0, r2, #1
 8022c6a:	f040 80ce 	bne.w	8022e0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022c6e:	9907      	ldr	r1, [sp, #28]
 8022c70:	4291      	cmp	r1, r2
 8022c72:	f340 80ca 	ble.w	8022e0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022c76:	1c59      	adds	r1, r3, #1
 8022c78:	f2c0 80c7 	blt.w	8022e0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022c7c:	9a08      	ldr	r2, [sp, #32]
 8022c7e:	4293      	cmp	r3, r2
 8022c80:	f280 80c3 	bge.w	8022e0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022c84:	46a3      	mov	fp, r4
 8022c86:	46c1      	mov	r9, r8
 8022c88:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022c8c:	f1bb 0f00 	cmp.w	fp, #0
 8022c90:	dde4      	ble.n	8022c5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022c92:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022c96:	1428      	asrs	r0, r5, #16
 8022c98:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c9c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ca0:	920a      	str	r2, [sp, #40]	; 0x28
 8022ca2:	f100 8116 	bmi.w	8022ed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022ca6:	f100 0c01 	add.w	ip, r0, #1
 8022caa:	9a07      	ldr	r2, [sp, #28]
 8022cac:	4562      	cmp	r2, ip
 8022cae:	f340 8112 	ble.w	8022ed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022cb2:	2b00      	cmp	r3, #0
 8022cb4:	f2c0 810f 	blt.w	8022ed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022cb8:	f103 0c01 	add.w	ip, r3, #1
 8022cbc:	9a08      	ldr	r2, [sp, #32]
 8022cbe:	4562      	cmp	r2, ip
 8022cc0:	f340 8109 	ble.w	8022ed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022cc4:	fb03 030a 	mla	r3, r3, sl, r0
 8022cc8:	0858      	lsrs	r0, r3, #1
 8022cca:	07da      	lsls	r2, r3, #31
 8022ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022cce:	5c38      	ldrb	r0, [r7, r0]
 8022cd0:	bf54      	ite	pl
 8022cd2:	f000 000f 	andpl.w	r0, r0, #15
 8022cd6:	1100      	asrmi	r0, r0, #4
 8022cd8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022cdc:	b2c0      	uxtb	r0, r0
 8022cde:	2a00      	cmp	r2, #0
 8022ce0:	f000 80dd 	beq.w	8022e9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022ce4:	f103 0e01 	add.w	lr, r3, #1
 8022ce8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022cec:	f01e 0f01 	tst.w	lr, #1
 8022cf0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022cf4:	bf0c      	ite	eq
 8022cf6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022cfa:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022cfe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022d02:	fa5f fc8c 	uxtb.w	ip, ip
 8022d06:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022d0a:	b301      	cbz	r1, 8022d4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022d0c:	4453      	add	r3, sl
 8022d0e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022d12:	07da      	lsls	r2, r3, #31
 8022d14:	f103 0301 	add.w	r3, r3, #1
 8022d18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022d1c:	bf54      	ite	pl
 8022d1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022d22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022d26:	07da      	lsls	r2, r3, #31
 8022d28:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022d2c:	fa5f fc8c 	uxtb.w	ip, ip
 8022d30:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8022d34:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022d38:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022d3c:	bf54      	ite	pl
 8022d3e:	f00c 030f 	andpl.w	r3, ip, #15
 8022d42:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022d46:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022d4a:	b2db      	uxtb	r3, r3
 8022d4c:	9310      	str	r3, [sp, #64]	; 0x40
 8022d4e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022d52:	b289      	uxth	r1, r1
 8022d54:	fb02 f301 	mul.w	r3, r2, r1
 8022d58:	0112      	lsls	r2, r2, #4
 8022d5a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022d5e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022d62:	1ad2      	subs	r2, r2, r3
 8022d64:	fa1f fe81 	uxth.w	lr, r1
 8022d68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022d6a:	b292      	uxth	r2, r2
 8022d6c:	ebac 0c0e 	sub.w	ip, ip, lr
 8022d70:	434a      	muls	r2, r1
 8022d72:	fa1f fc8c 	uxth.w	ip, ip
 8022d76:	fb00 200c 	mla	r0, r0, ip, r2
 8022d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d7c:	fb0e 0002 	mla	r0, lr, r2, r0
 8022d80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d82:	fb03 0002 	mla	r0, r3, r2, r0
 8022d86:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022d8a:	b3a8      	cbz	r0, 8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022d8c:	4bbb      	ldr	r3, [pc, #748]	; (802307c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022d8e:	28ff      	cmp	r0, #255	; 0xff
 8022d90:	681b      	ldr	r3, [r3, #0]
 8022d92:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8022d96:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8022d9a:	b2db      	uxtb	r3, r3
 8022d9c:	f000 8092 	beq.w	8022ec4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8022da0:	b282      	uxth	r2, r0
 8022da2:	43c0      	mvns	r0, r0
 8022da4:	f899 e000 	ldrb.w	lr, [r9]
 8022da8:	fb13 f302 	smulbb	r3, r3, r2
 8022dac:	b2c0      	uxtb	r0, r0
 8022dae:	fb11 f102 	smulbb	r1, r1, r2
 8022db2:	fb0e 3300 	mla	r3, lr, r0, r3
 8022db6:	fb1c f202 	smulbb	r2, ip, r2
 8022dba:	b29b      	uxth	r3, r3
 8022dbc:	f103 0e01 	add.w	lr, r3, #1
 8022dc0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022dc4:	121b      	asrs	r3, r3, #8
 8022dc6:	f889 3000 	strb.w	r3, [r9]
 8022dca:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022dce:	fb03 1100 	mla	r1, r3, r0, r1
 8022dd2:	b289      	uxth	r1, r1
 8022dd4:	1c4b      	adds	r3, r1, #1
 8022dd6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022dda:	f899 3002 	ldrb.w	r3, [r9, #2]
 8022dde:	fb03 2000 	mla	r0, r3, r0, r2
 8022de2:	1209      	asrs	r1, r1, #8
 8022de4:	b280      	uxth	r0, r0
 8022de6:	f889 1001 	strb.w	r1, [r9, #1]
 8022dea:	f100 0c01 	add.w	ip, r0, #1
 8022dee:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8022df2:	1200      	asrs	r0, r0, #8
 8022df4:	f889 0002 	strb.w	r0, [r9, #2]
 8022df8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022dfa:	f109 0903 	add.w	r9, r9, #3
 8022dfe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022e02:	441d      	add	r5, r3
 8022e04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e06:	441e      	add	r6, r3
 8022e08:	e740      	b.n	8022c8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022e0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022e0c:	3c01      	subs	r4, #1
 8022e0e:	f108 0803 	add.w	r8, r8, #3
 8022e12:	441d      	add	r5, r3
 8022e14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e16:	441e      	add	r6, r3
 8022e18:	e6f3      	b.n	8022c02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022e1a:	f47f af03 	bne.w	8022c24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	f340 8126 	ble.w	8023072 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e2c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022e30:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022e34:	eef0 6a48 	vmov.f32	s13, s16
 8022e38:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022e3c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022e40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e44:	ee16 5a90 	vmov	r5, s13
 8022e48:	eef0 6a68 	vmov.f32	s13, s17
 8022e4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e50:	ee16 6a90 	vmov	r6, s13
 8022e54:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022e58:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022e5c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022e60:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022e64:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022e68:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022e6c:	ee18 2a10 	vmov	r2, s16
 8022e70:	eeb0 8a47 	vmov.f32	s16, s14
 8022e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e78:	ee18 2a90 	vmov	r2, s17
 8022e7c:	9329      	str	r3, [sp, #164]	; 0xa4
 8022e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e80:	eef0 8a67 	vmov.f32	s17, s15
 8022e84:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e88:	932a      	str	r3, [sp, #168]	; 0xa8
 8022e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e8e:	3b01      	subs	r3, #1
 8022e90:	9309      	str	r3, [sp, #36]	; 0x24
 8022e92:	bf08      	it	eq
 8022e94:	4614      	moveq	r4, r2
 8022e96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e98:	bf18      	it	ne
 8022e9a:	461c      	movne	r4, r3
 8022e9c:	e6aa      	b.n	8022bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022e9e:	2900      	cmp	r1, #0
 8022ea0:	f43f af55 	beq.w	8022d4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022ea4:	4453      	add	r3, sl
 8022ea6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022eaa:	07db      	lsls	r3, r3, #31
 8022eac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022eb0:	bf54      	ite	pl
 8022eb2:	f00c 030f 	andpl.w	r3, ip, #15
 8022eb6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022eba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ebe:	b2db      	uxtb	r3, r3
 8022ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8022ec2:	e744      	b.n	8022d4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022ec4:	f889 3000 	strb.w	r3, [r9]
 8022ec8:	f889 1001 	strb.w	r1, [r9, #1]
 8022ecc:	f889 c002 	strb.w	ip, [r9, #2]
 8022ed0:	e792      	b.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022ed2:	1c42      	adds	r2, r0, #1
 8022ed4:	d190      	bne.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022ed6:	9a07      	ldr	r2, [sp, #28]
 8022ed8:	4282      	cmp	r2, r0
 8022eda:	dd8d      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022edc:	1c5a      	adds	r2, r3, #1
 8022ede:	db8b      	blt.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022ee0:	9a08      	ldr	r2, [sp, #32]
 8022ee2:	429a      	cmp	r2, r3
 8022ee4:	dd88      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ee8:	9105      	str	r1, [sp, #20]
 8022eea:	4649      	mov	r1, r9
 8022eec:	9002      	str	r0, [sp, #8]
 8022eee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022ef0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022ef4:	9b08      	ldr	r3, [sp, #32]
 8022ef6:	463a      	mov	r2, r7
 8022ef8:	9301      	str	r3, [sp, #4]
 8022efa:	9b07      	ldr	r3, [sp, #28]
 8022efc:	9300      	str	r3, [sp, #0]
 8022efe:	4653      	mov	r3, sl
 8022f00:	f7ff fd64 	bl	80229cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022f04:	e778      	b.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022f06:	142a      	asrs	r2, r5, #16
 8022f08:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022f0c:	1433      	asrs	r3, r6, #16
 8022f0e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022f12:	fb0a 2303 	mla	r3, sl, r3, r2
 8022f16:	085a      	lsrs	r2, r3, #1
 8022f18:	07d9      	lsls	r1, r3, #31
 8022f1a:	5cba      	ldrb	r2, [r7, r2]
 8022f1c:	bf54      	ite	pl
 8022f1e:	f002 020f 	andpl.w	r2, r2, #15
 8022f22:	1112      	asrmi	r2, r2, #4
 8022f24:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f28:	b2d2      	uxtb	r2, r2
 8022f2a:	2800      	cmp	r0, #0
 8022f2c:	f000 808a 	beq.w	8023044 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8022f30:	f103 0b01 	add.w	fp, r3, #1
 8022f34:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8022f38:	f01b 0f01 	tst.w	fp, #1
 8022f3c:	5c79      	ldrb	r1, [r7, r1]
 8022f3e:	bf0c      	ite	eq
 8022f40:	f001 010f 	andeq.w	r1, r1, #15
 8022f44:	1109      	asrne	r1, r1, #4
 8022f46:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f4a:	b2c9      	uxtb	r1, r1
 8022f4c:	9111      	str	r1, [sp, #68]	; 0x44
 8022f4e:	f1bc 0f00 	cmp.w	ip, #0
 8022f52:	d019      	beq.n	8022f88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022f54:	4453      	add	r3, sl
 8022f56:	0859      	lsrs	r1, r3, #1
 8022f58:	f013 0f01 	tst.w	r3, #1
 8022f5c:	f103 0301 	add.w	r3, r3, #1
 8022f60:	5c79      	ldrb	r1, [r7, r1]
 8022f62:	bf0c      	ite	eq
 8022f64:	f001 010f 	andeq.w	r1, r1, #15
 8022f68:	1109      	asrne	r1, r1, #4
 8022f6a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f6e:	b2c9      	uxtb	r1, r1
 8022f70:	910d      	str	r1, [sp, #52]	; 0x34
 8022f72:	0859      	lsrs	r1, r3, #1
 8022f74:	07db      	lsls	r3, r3, #31
 8022f76:	5c79      	ldrb	r1, [r7, r1]
 8022f78:	bf54      	ite	pl
 8022f7a:	f001 010f 	andpl.w	r1, r1, #15
 8022f7e:	1109      	asrmi	r1, r1, #4
 8022f80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f84:	b2c9      	uxtb	r1, r1
 8022f86:	9112      	str	r1, [sp, #72]	; 0x48
 8022f88:	b280      	uxth	r0, r0
 8022f8a:	fa1f fc8c 	uxth.w	ip, ip
 8022f8e:	fb00 f30c 	mul.w	r3, r0, ip
 8022f92:	0100      	lsls	r0, r0, #4
 8022f94:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022f98:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022f9c:	1ac0      	subs	r0, r0, r3
 8022f9e:	fa1f fc8c 	uxth.w	ip, ip
 8022fa2:	b280      	uxth	r0, r0
 8022fa4:	eba1 010c 	sub.w	r1, r1, ip
 8022fa8:	fa1f fb81 	uxth.w	fp, r1
 8022fac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022fae:	4348      	muls	r0, r1
 8022fb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022fb2:	fb02 020b 	mla	r2, r2, fp, r0
 8022fb6:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022fbc:	fb03 c302 	mla	r3, r3, r2, ip
 8022fc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fc4:	b3ab      	cbz	r3, 8023032 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022fc6:	4a2d      	ldr	r2, [pc, #180]	; (802307c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022fc8:	2bff      	cmp	r3, #255	; 0xff
 8022fca:	6811      	ldr	r1, [r2, #0]
 8022fcc:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8022fd0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8022fd4:	b2c9      	uxtb	r1, r1
 8022fd6:	d045      	beq.n	8023064 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8022fd8:	b298      	uxth	r0, r3
 8022fda:	43db      	mvns	r3, r3
 8022fdc:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8022fe0:	fb11 f100 	smulbb	r1, r1, r0
 8022fe4:	b2db      	uxtb	r3, r3
 8022fe6:	fb1c fc00 	smulbb	ip, ip, r0
 8022fea:	fb02 1103 	mla	r1, r2, r3, r1
 8022fee:	fb1b f000 	smulbb	r0, fp, r0
 8022ff2:	b289      	uxth	r1, r1
 8022ff4:	1c4a      	adds	r2, r1, #1
 8022ff6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022ffa:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022ffe:	fb02 cc03 	mla	ip, r2, r3, ip
 8023002:	1209      	asrs	r1, r1, #8
 8023004:	fa1f fc8c 	uxth.w	ip, ip
 8023008:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802300c:	f10c 0201 	add.w	r2, ip, #1
 8023010:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023014:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023018:	fb02 0303 	mla	r3, r2, r3, r0
 802301c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023020:	b29b      	uxth	r3, r3
 8023022:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023026:	1c5a      	adds	r2, r3, #1
 8023028:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802302c:	121b      	asrs	r3, r3, #8
 802302e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023032:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023034:	f10e 0e03 	add.w	lr, lr, #3
 8023038:	f109 39ff 	add.w	r9, r9, #4294967295
 802303c:	441d      	add	r5, r3
 802303e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023040:	441e      	add	r6, r3
 8023042:	e607      	b.n	8022c54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023044:	f1bc 0f00 	cmp.w	ip, #0
 8023048:	d09e      	beq.n	8022f88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802304a:	4453      	add	r3, sl
 802304c:	0859      	lsrs	r1, r3, #1
 802304e:	07db      	lsls	r3, r3, #31
 8023050:	5c79      	ldrb	r1, [r7, r1]
 8023052:	bf54      	ite	pl
 8023054:	f001 010f 	andpl.w	r1, r1, #15
 8023058:	1109      	asrmi	r1, r1, #4
 802305a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802305e:	b2c9      	uxtb	r1, r1
 8023060:	910d      	str	r1, [sp, #52]	; 0x34
 8023062:	e791      	b.n	8022f88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023064:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023068:	f80e cc02 	strb.w	ip, [lr, #-2]
 802306c:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023070:	e7df      	b.n	8023032 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023072:	b015      	add	sp, #84	; 0x54
 8023074:	ecbd 8b08 	vpop	{d8-d11}
 8023078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802307c:	2000bb24 	.word	0x2000bb24

08023080 <CRC_Lock>:
 8023080:	4a1d      	ldr	r2, [pc, #116]	; (80230f8 <CRC_Lock+0x78>)
 8023082:	b530      	push	{r4, r5, lr}
 8023084:	6813      	ldr	r3, [r2, #0]
 8023086:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802308a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802308e:	f023 0301 	bic.w	r3, r3, #1
 8023092:	6013      	str	r3, [r2, #0]
 8023094:	4b19      	ldr	r3, [pc, #100]	; (80230fc <CRC_Lock+0x7c>)
 8023096:	681a      	ldr	r2, [r3, #0]
 8023098:	4022      	ands	r2, r4
 802309a:	42aa      	cmp	r2, r5
 802309c:	d005      	beq.n	80230aa <CRC_Lock+0x2a>
 802309e:	681b      	ldr	r3, [r3, #0]
 80230a0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80230a4:	4023      	ands	r3, r4
 80230a6:	4293      	cmp	r3, r2
 80230a8:	d11d      	bne.n	80230e6 <CRC_Lock+0x66>
 80230aa:	4b15      	ldr	r3, [pc, #84]	; (8023100 <CRC_Lock+0x80>)
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	b9d3      	cbnz	r3, 80230e6 <CRC_Lock+0x66>
 80230b0:	4a14      	ldr	r2, [pc, #80]	; (8023104 <CRC_Lock+0x84>)
 80230b2:	6813      	ldr	r3, [r2, #0]
 80230b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80230b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80230bc:	d006      	beq.n	80230cc <CRC_Lock+0x4c>
 80230be:	6813      	ldr	r3, [r2, #0]
 80230c0:	f240 4283 	movw	r2, #1155	; 0x483
 80230c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80230c8:	4293      	cmp	r3, r2
 80230ca:	d10c      	bne.n	80230e6 <CRC_Lock+0x66>
 80230cc:	4b0e      	ldr	r3, [pc, #56]	; (8023108 <CRC_Lock+0x88>)
 80230ce:	2201      	movs	r2, #1
 80230d0:	601a      	str	r2, [r3, #0]
 80230d2:	681a      	ldr	r2, [r3, #0]
 80230d4:	2a00      	cmp	r2, #0
 80230d6:	d1fc      	bne.n	80230d2 <CRC_Lock+0x52>
 80230d8:	4b0c      	ldr	r3, [pc, #48]	; (802310c <CRC_Lock+0x8c>)
 80230da:	6018      	str	r0, [r3, #0]
 80230dc:	6818      	ldr	r0, [r3, #0]
 80230de:	1a43      	subs	r3, r0, r1
 80230e0:	4258      	negs	r0, r3
 80230e2:	4158      	adcs	r0, r3
 80230e4:	bd30      	pop	{r4, r5, pc}
 80230e6:	4b0a      	ldr	r3, [pc, #40]	; (8023110 <CRC_Lock+0x90>)
 80230e8:	2201      	movs	r2, #1
 80230ea:	601a      	str	r2, [r3, #0]
 80230ec:	681a      	ldr	r2, [r3, #0]
 80230ee:	2a00      	cmp	r2, #0
 80230f0:	d1fc      	bne.n	80230ec <CRC_Lock+0x6c>
 80230f2:	4b08      	ldr	r3, [pc, #32]	; (8023114 <CRC_Lock+0x94>)
 80230f4:	e7f1      	b.n	80230da <CRC_Lock+0x5a>
 80230f6:	bf00      	nop
 80230f8:	e0002000 	.word	0xe0002000
 80230fc:	e000ed00 	.word	0xe000ed00
 8023100:	e0042000 	.word	0xe0042000
 8023104:	5c001000 	.word	0x5c001000
 8023108:	58024c08 	.word	0x58024c08
 802310c:	58024c00 	.word	0x58024c00
 8023110:	40023008 	.word	0x40023008
 8023114:	40023000 	.word	0x40023000

08023118 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023118:	6101      	str	r1, [r0, #16]
 802311a:	4770      	bx	lr

0802311c <_ZN8touchgfx8Gestures4tickEv>:
 802311c:	7b83      	ldrb	r3, [r0, #14]
 802311e:	b14b      	cbz	r3, 8023134 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023120:	8903      	ldrh	r3, [r0, #8]
 8023122:	3301      	adds	r3, #1
 8023124:	b29b      	uxth	r3, r3
 8023126:	2b07      	cmp	r3, #7
 8023128:	8103      	strh	r3, [r0, #8]
 802312a:	bf81      	itttt	hi
 802312c:	2300      	movhi	r3, #0
 802312e:	8143      	strhhi	r3, [r0, #10]
 8023130:	8183      	strhhi	r3, [r0, #12]
 8023132:	7383      	strbhi	r3, [r0, #14]
 8023134:	4770      	bx	lr
	...

08023138 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023138:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802313c:	4604      	mov	r4, r0
 802313e:	4698      	mov	r8, r3
 8023140:	8880      	ldrh	r0, [r0, #4]
 8023142:	4617      	mov	r7, r2
 8023144:	4b1d      	ldr	r3, [pc, #116]	; (80231bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023146:	460e      	mov	r6, r1
 8023148:	f8ad 0006 	strh.w	r0, [sp, #6]
 802314c:	eba8 0000 	sub.w	r0, r8, r0
 8023150:	9300      	str	r3, [sp, #0]
 8023152:	2300      	movs	r3, #0
 8023154:	b280      	uxth	r0, r0
 8023156:	8aa2      	ldrh	r2, [r4, #20]
 8023158:	f88d 3004 	strb.w	r3, [sp, #4]
 802315c:	b203      	sxth	r3, r0
 802315e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023162:	88e1      	ldrh	r1, [r4, #6]
 8023164:	2b00      	cmp	r3, #0
 8023166:	f8ad 800a 	strh.w	r8, [sp, #10]
 802316a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802316e:	bfb8      	it	lt
 8023170:	4240      	neglt	r0, r0
 8023172:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023176:	bfb8      	it	lt
 8023178:	b203      	sxthlt	r3, r0
 802317a:	4293      	cmp	r3, r2
 802317c:	dc08      	bgt.n	8023190 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802317e:	1a69      	subs	r1, r5, r1
 8023180:	b289      	uxth	r1, r1
 8023182:	b20b      	sxth	r3, r1
 8023184:	2b00      	cmp	r3, #0
 8023186:	bfbc      	itt	lt
 8023188:	4249      	neglt	r1, r1
 802318a:	b20b      	sxthlt	r3, r1
 802318c:	429a      	cmp	r2, r3
 802318e:	da13      	bge.n	80231b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023190:	6920      	ldr	r0, [r4, #16]
 8023192:	4669      	mov	r1, sp
 8023194:	eba8 0606 	sub.w	r6, r8, r6
 8023198:	1bef      	subs	r7, r5, r7
 802319a:	6803      	ldr	r3, [r0, #0]
 802319c:	685b      	ldr	r3, [r3, #4]
 802319e:	4798      	blx	r3
 80231a0:	2300      	movs	r3, #0
 80231a2:	2001      	movs	r0, #1
 80231a4:	8166      	strh	r6, [r4, #10]
 80231a6:	8123      	strh	r3, [r4, #8]
 80231a8:	81a7      	strh	r7, [r4, #12]
 80231aa:	f8a4 8004 	strh.w	r8, [r4, #4]
 80231ae:	80e5      	strh	r5, [r4, #6]
 80231b0:	73a0      	strb	r0, [r4, #14]
 80231b2:	b004      	add	sp, #16
 80231b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231b8:	2000      	movs	r0, #0
 80231ba:	e7fa      	b.n	80231b2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80231bc:	08029170 	.word	0x08029170

080231c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80231c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231c2:	461e      	mov	r6, r3
 80231c4:	1e4b      	subs	r3, r1, #1
 80231c6:	b085      	sub	sp, #20
 80231c8:	4604      	mov	r4, r0
 80231ca:	2b01      	cmp	r3, #1
 80231cc:	460d      	mov	r5, r1
 80231ce:	4617      	mov	r7, r2
 80231d0:	d84b      	bhi.n	802326a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80231d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80231d6:	1cd3      	adds	r3, r2, #3
 80231d8:	b29b      	uxth	r3, r3
 80231da:	2b06      	cmp	r3, #6
 80231dc:	d916      	bls.n	802320c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80231de:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023278 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80231e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80231e6:	f8cd c004 	str.w	ip, [sp, #4]
 80231ea:	f04f 0c00 	mov.w	ip, #0
 80231ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80231f2:	6900      	ldr	r0, [r0, #16]
 80231f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80231f8:	a901      	add	r1, sp, #4
 80231fa:	f88d c008 	strb.w	ip, [sp, #8]
 80231fe:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023202:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023206:	6803      	ldr	r3, [r0, #0]
 8023208:	689b      	ldr	r3, [r3, #8]
 802320a:	4798      	blx	r3
 802320c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023210:	1cd3      	adds	r3, r2, #3
 8023212:	b29b      	uxth	r3, r3
 8023214:	2b06      	cmp	r3, #6
 8023216:	d916      	bls.n	8023246 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023218:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023278 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802321c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023220:	f8cd c004 	str.w	ip, [sp, #4]
 8023224:	f04f 0c01 	mov.w	ip, #1
 8023228:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802322c:	6920      	ldr	r0, [r4, #16]
 802322e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023232:	a901      	add	r1, sp, #4
 8023234:	f88d c008 	strb.w	ip, [sp, #8]
 8023238:	f8ad 200a 	strh.w	r2, [sp, #10]
 802323c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023240:	6803      	ldr	r3, [r0, #0]
 8023242:	689b      	ldr	r3, [r3, #8]
 8023244:	4798      	blx	r3
 8023246:	4b0b      	ldr	r3, [pc, #44]	; (8023274 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023248:	a901      	add	r1, sp, #4
 802324a:	6920      	ldr	r0, [r4, #16]
 802324c:	9301      	str	r3, [sp, #4]
 802324e:	2300      	movs	r3, #0
 8023250:	f88d 5008 	strb.w	r5, [sp, #8]
 8023254:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023258:	f8ad 600c 	strh.w	r6, [sp, #12]
 802325c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023260:	6803      	ldr	r3, [r0, #0]
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	4798      	blx	r3
 8023266:	b005      	add	sp, #20
 8023268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802326a:	2900      	cmp	r1, #0
 802326c:	d1eb      	bne.n	8023246 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802326e:	80a2      	strh	r2, [r4, #4]
 8023270:	80c6      	strh	r6, [r0, #6]
 8023272:	e7e8      	b.n	8023246 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023274:	0802915c 	.word	0x0802915c
 8023278:	08029184 	.word	0x08029184

0802327c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 802327c:	10c9      	asrs	r1, r1, #3
 802327e:	2900      	cmp	r1, #0
 8023280:	bfb8      	it	lt
 8023282:	4249      	neglt	r1, r1
 8023284:	2801      	cmp	r0, #1
 8023286:	d108      	bne.n	802329a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023288:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802328c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023290:	4601      	mov	r1, r0
 8023292:	dd02      	ble.n	802329a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023294:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023298:	4770      	bx	lr
 802329a:	29ff      	cmp	r1, #255	; 0xff
 802329c:	bfa8      	it	ge
 802329e:	21ff      	movge	r1, #255	; 0xff
 80232a0:	4608      	mov	r0, r1
 80232a2:	4770      	bx	lr

080232a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80232a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232a8:	688c      	ldr	r4, [r1, #8]
 80232aa:	b087      	sub	sp, #28
 80232ac:	4607      	mov	r7, r0
 80232ae:	2c00      	cmp	r4, #0
 80232b0:	db2b      	blt.n	802330a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80232b2:	6803      	ldr	r3, [r0, #0]
 80232b4:	68da      	ldr	r2, [r3, #12]
 80232b6:	42a2      	cmp	r2, r4
 80232b8:	dd27      	ble.n	802330a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80232ba:	681a      	ldr	r2, [r3, #0]
 80232bc:	691e      	ldr	r6, [r3, #16]
 80232be:	68cd      	ldr	r5, [r1, #12]
 80232c0:	fb06 2604 	mla	r6, r6, r4, r2
 80232c4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80232c8:	698a      	ldr	r2, [r1, #24]
 80232ca:	f893 a004 	ldrb.w	sl, [r3, #4]
 80232ce:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80232d2:	9205      	str	r2, [sp, #20]
 80232d4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80232d8:	9b05      	ldr	r3, [sp, #20]
 80232da:	6839      	ldr	r1, [r7, #0]
 80232dc:	eb03 0c02 	add.w	ip, r3, r2
 80232e0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80232e4:	6889      	ldr	r1, [r1, #8]
 80232e6:	1898      	adds	r0, r3, r2
 80232e8:	4288      	cmp	r0, r1
 80232ea:	db02      	blt.n	80232f2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80232ec:	1a8b      	subs	r3, r1, r2
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	dd09      	ble.n	8023306 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80232f2:	6878      	ldr	r0, [r7, #4]
 80232f4:	6801      	ldr	r1, [r0, #0]
 80232f6:	9400      	str	r4, [sp, #0]
 80232f8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80232fc:	4653      	mov	r3, sl
 80232fe:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023302:	4631      	mov	r1, r6
 8023304:	47d8      	blx	fp
 8023306:	3d01      	subs	r5, #1
 8023308:	d1e4      	bne.n	80232d4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802330a:	b007      	add	sp, #28
 802330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023310 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023310:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023314:	b90b      	cbnz	r3, 802331a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023316:	f001 b974 	b.w	8024602 <_ZN8touchgfx7Outline6lineToEii>
 802331a:	4770      	bx	lr

0802331c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023320:	4604      	mov	r4, r0
 8023322:	2600      	movs	r6, #0
 8023324:	4b8e      	ldr	r3, [pc, #568]	; (8023560 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8023326:	f100 0518 	add.w	r5, r0, #24
 802332a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 802332e:	b086      	sub	sp, #24
 8023330:	4690      	mov	r8, r2
 8023332:	e9c0 3100 	strd	r3, r1, [r0]
 8023336:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802333a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802333e:	4628      	mov	r0, r5
 8023340:	f001 fb75 	bl	8024a2e <_ZN8touchgfx15RenderingBufferC1Ev>
 8023344:	4638      	mov	r0, r7
 8023346:	f000 fb45 	bl	80239d4 <_ZN8touchgfx7OutlineC1Ev>
 802334a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802334e:	f001 fb23 	bl	8024998 <_ZN8touchgfx8ScanlineC1Ev>
 8023352:	2301      	movs	r3, #1
 8023354:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8023358:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 802335c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023360:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8023364:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8023368:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 802336c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8023370:	f7f3 fd1c 	bl	8016dac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023374:	b928      	cbnz	r0, 8023382 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8023376:	4b7b      	ldr	r3, [pc, #492]	; (8023564 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023378:	2118      	movs	r1, #24
 802337a:	4a7b      	ldr	r2, [pc, #492]	; (8023568 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802337c:	487b      	ldr	r0, [pc, #492]	; (802356c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802337e:	f001 fb99 	bl	8024ab4 <__assert_func>
 8023382:	f9b8 2000 	ldrsh.w	r2, [r8]
 8023386:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802338a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802338e:	4410      	add	r0, r2
 8023390:	9602      	str	r6, [sp, #8]
 8023392:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8023396:	b280      	uxth	r0, r0
 8023398:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802339c:	fa0f fa80 	sxth.w	sl, r0
 80233a0:	f1ba 0f00 	cmp.w	sl, #0
 80233a4:	dd70      	ble.n	8023488 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80233a6:	4591      	cmp	r9, r2
 80233a8:	dd6e      	ble.n	8023488 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80233aa:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80233ae:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80233b2:	440b      	add	r3, r1
 80233b4:	b29b      	uxth	r3, r3
 80233b6:	b21e      	sxth	r6, r3
 80233b8:	2e00      	cmp	r6, #0
 80233ba:	dd65      	ble.n	8023488 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80233bc:	458e      	cmp	lr, r1
 80233be:	dd63      	ble.n	8023488 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80233c0:	45d1      	cmp	r9, sl
 80233c2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80233c6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80233ca:	bfb8      	it	lt
 80233cc:	fa1f f089 	uxthlt.w	r0, r9
 80233d0:	45b6      	cmp	lr, r6
 80233d2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80233d6:	bfb8      	it	lt
 80233d8:	fa1f f38e 	uxthlt.w	r3, lr
 80233dc:	1a80      	subs	r0, r0, r2
 80233de:	f8ad 100a 	strh.w	r1, [sp, #10]
 80233e2:	1a5b      	subs	r3, r3, r1
 80233e4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80233e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80233ec:	f10d 0808 	add.w	r8, sp, #8
 80233f0:	ae04      	add	r6, sp, #16
 80233f2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80233f6:	e886 0003 	stmia.w	r6, {r0, r1}
 80233fa:	f8dc 3000 	ldr.w	r3, [ip]
 80233fe:	4660      	mov	r0, ip
 8023400:	4631      	mov	r1, r6
 8023402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023404:	4798      	blx	r3
 8023406:	6861      	ldr	r1, [r4, #4]
 8023408:	4640      	mov	r0, r8
 802340a:	3104      	adds	r1, #4
 802340c:	f7f4 ffa6 	bl	801835c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023410:	4630      	mov	r0, r6
 8023412:	f7f4 ffbb 	bl	801838c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023416:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802341a:	f7f3 fc57 	bl	8016ccc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802341e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8023422:	4638      	mov	r0, r7
 8023424:	f000 fab2 	bl	802398c <_ZN8touchgfx7Outline5resetEv>
 8023428:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802342c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023430:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8023434:	015b      	lsls	r3, r3, #5
 8023436:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 802343a:	0152      	lsls	r2, r2, #5
 802343c:	60e3      	str	r3, [r4, #12]
 802343e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023442:	60a2      	str	r2, [r4, #8]
 8023444:	015b      	lsls	r3, r3, #5
 8023446:	6123      	str	r3, [r4, #16]
 8023448:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802344c:	015b      	lsls	r3, r3, #5
 802344e:	6163      	str	r3, [r4, #20]
 8023450:	4b47      	ldr	r3, [pc, #284]	; (8023570 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8023452:	6818      	ldr	r0, [r3, #0]
 8023454:	6803      	ldr	r3, [r0, #0]
 8023456:	6a1b      	ldr	r3, [r3, #32]
 8023458:	4798      	blx	r3
 802345a:	4606      	mov	r6, r0
 802345c:	f7df f85a 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 8023460:	6803      	ldr	r3, [r0, #0]
 8023462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023464:	4798      	blx	r3
 8023466:	4607      	mov	r7, r0
 8023468:	f7df f854 	bl	8002514 <_ZN8touchgfx3HAL3lcdEv>
 802346c:	6803      	ldr	r3, [r0, #0]
 802346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023470:	4798      	blx	r3
 8023472:	280c      	cmp	r0, #12
 8023474:	d854      	bhi.n	8023520 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8023476:	e8df f000 	tbb	[pc, r0]
 802347a:	554b      	.short	0x554b
 802347c:	2b6e0a66 	.word	0x2b6e0a66
 8023480:	5f5f5f3b 	.word	0x5f5f5f3b
 8023484:	5f5f      	.short	0x5f5f
 8023486:	6e          	.byte	0x6e
 8023487:	00          	.byte	0x00
 8023488:	2300      	movs	r3, #0
 802348a:	9303      	str	r3, [sp, #12]
 802348c:	e7ae      	b.n	80233ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 802348e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023492:	2108      	movs	r1, #8
 8023494:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023498:	fb92 f1f1 	sdiv	r1, r2, r1
 802349c:	fb07 1303 	mla	r3, r7, r3, r1
 80234a0:	441e      	add	r6, r3
 80234a2:	4253      	negs	r3, r2
 80234a4:	f002 0207 	and.w	r2, r2, #7
 80234a8:	f003 0307 	and.w	r3, r3, #7
 80234ac:	bf58      	it	pl
 80234ae:	425a      	negpl	r2, r3
 80234b0:	b2d2      	uxtb	r2, r2
 80234b2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80234b6:	4628      	mov	r0, r5
 80234b8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80234bc:	66e1      	str	r1, [r4, #108]	; 0x6c
 80234be:	e9cd 1700 	strd	r1, r7, [sp]
 80234c2:	4631      	mov	r1, r6
 80234c4:	f001 fabb 	bl	8024a3e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80234c8:	4620      	mov	r0, r4
 80234ca:	b006      	add	sp, #24
 80234cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80234d4:	2104      	movs	r1, #4
 80234d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80234da:	fb92 f1f1 	sdiv	r1, r2, r1
 80234de:	fb07 1303 	mla	r3, r7, r3, r1
 80234e2:	441e      	add	r6, r3
 80234e4:	4253      	negs	r3, r2
 80234e6:	f002 0203 	and.w	r2, r2, #3
 80234ea:	f003 0303 	and.w	r3, r3, #3
 80234ee:	e7dd      	b.n	80234ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80234f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80234f4:	2102      	movs	r1, #2
 80234f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80234fa:	2a00      	cmp	r2, #0
 80234fc:	fb92 f1f1 	sdiv	r1, r2, r1
 8023500:	f002 0201 	and.w	r2, r2, #1
 8023504:	fb07 1303 	mla	r3, r7, r3, r1
 8023508:	bfb8      	it	lt
 802350a:	4252      	neglt	r2, r2
 802350c:	441e      	add	r6, r3
 802350e:	e7cf      	b.n	80234b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023510:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023514:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023518:	437b      	muls	r3, r7
 802351a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802351e:	441e      	add	r6, r3
 8023520:	2200      	movs	r2, #0
 8023522:	e7c6      	b.n	80234b2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023524:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023528:	2103      	movs	r1, #3
 802352a:	fb07 f203 	mul.w	r2, r7, r3
 802352e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023532:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023536:	e7f2      	b.n	802351e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023538:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802353c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023540:	fb07 2303 	mla	r3, r7, r3, r2
 8023544:	e7eb      	b.n	802351e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023546:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802354a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802354e:	437b      	muls	r3, r7
 8023550:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023554:	e7e3      	b.n	802351e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023556:	4b07      	ldr	r3, [pc, #28]	; (8023574 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8023558:	2156      	movs	r1, #86	; 0x56
 802355a:	4a03      	ldr	r2, [pc, #12]	; (8023568 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802355c:	e70e      	b.n	802337c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802355e:	bf00      	nop
 8023560:	0802b4e4 	.word	0x0802b4e4
 8023564:	0802b42e 	.word	0x0802b42e
 8023568:	0802b4ec 	.word	0x0802b4ec
 802356c:	0802b48a 	.word	0x0802b48a
 8023570:	2000bafc 	.word	0x2000bafc
 8023574:	0802b4be 	.word	0x0802b4be

08023578 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8023578:	6812      	ldr	r2, [r2, #0]
 802357a:	2a00      	cmp	r2, #0
 802357c:	db0b      	blt.n	8023596 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802357e:	9800      	ldr	r0, [sp, #0]
 8023580:	6800      	ldr	r0, [r0, #0]
 8023582:	4290      	cmp	r0, r2
 8023584:	bfd4      	ite	le
 8023586:	2002      	movle	r0, #2
 8023588:	2000      	movgt	r0, #0
 802358a:	680a      	ldr	r2, [r1, #0]
 802358c:	2a00      	cmp	r2, #0
 802358e:	da04      	bge.n	802359a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023590:	f040 0004 	orr.w	r0, r0, #4
 8023594:	4770      	bx	lr
 8023596:	2001      	movs	r0, #1
 8023598:	e7f7      	b.n	802358a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802359a:	681b      	ldr	r3, [r3, #0]
 802359c:	4293      	cmp	r3, r2
 802359e:	bfd8      	it	le
 80235a0:	f040 0008 	orrle.w	r0, r0, #8
 80235a4:	4770      	bx	lr
	...

080235a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80235a8:	4b07      	ldr	r3, [pc, #28]	; (80235c8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80235aa:	b510      	push	{r4, lr}
 80235ac:	781b      	ldrb	r3, [r3, #0]
 80235ae:	2b01      	cmp	r3, #1
 80235b0:	d108      	bne.n	80235c4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80235b2:	6843      	ldr	r3, [r0, #4]
 80235b4:	6814      	ldr	r4, [r2, #0]
 80235b6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80235ba:	680b      	ldr	r3, [r1, #0]
 80235bc:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80235c0:	6013      	str	r3, [r2, #0]
 80235c2:	600c      	str	r4, [r1, #0]
 80235c4:	bd10      	pop	{r4, pc}
 80235c6:	bf00      	nop
 80235c8:	2000baf4 	.word	0x2000baf4

080235cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80235cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235ce:	b085      	sub	sp, #20
 80235d0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80235d4:	4604      	mov	r4, r0
 80235d6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80235da:	b33b      	cbz	r3, 802362c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80235dc:	aa02      	add	r2, sp, #8
 80235de:	a903      	add	r1, sp, #12
 80235e0:	f7ff ffe2 	bl	80235a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80235e4:	68a3      	ldr	r3, [r4, #8]
 80235e6:	9e03      	ldr	r6, [sp, #12]
 80235e8:	aa02      	add	r2, sp, #8
 80235ea:	9f02      	ldr	r7, [sp, #8]
 80235ec:	a903      	add	r1, sp, #12
 80235ee:	1af6      	subs	r6, r6, r3
 80235f0:	68e3      	ldr	r3, [r4, #12]
 80235f2:	4620      	mov	r0, r4
 80235f4:	1aff      	subs	r7, r7, r3
 80235f6:	f104 0314 	add.w	r3, r4, #20
 80235fa:	9603      	str	r6, [sp, #12]
 80235fc:	9300      	str	r3, [sp, #0]
 80235fe:	f104 0310 	add.w	r3, r4, #16
 8023602:	9702      	str	r7, [sp, #8]
 8023604:	f7ff ffb8 	bl	8023578 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023608:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 802360c:	4605      	mov	r5, r0
 802360e:	b97b      	cbnz	r3, 8023630 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023610:	463a      	mov	r2, r7
 8023612:	4631      	mov	r1, r6
 8023614:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023618:	f7ff fe7a 	bl	8023310 <_ZN8touchgfx10Rasterizer6lineToEii>
 802361c:	9b03      	ldr	r3, [sp, #12]
 802361e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8023622:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8023626:	9b02      	ldr	r3, [sp, #8]
 8023628:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802362c:	b005      	add	sp, #20
 802362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023630:	b110      	cbz	r0, 8023638 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8023632:	ea13 0200 	ands.w	r2, r3, r0
 8023636:	d11c      	bne.n	8023672 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023638:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 802363c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8023640:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8023644:	b188      	cbz	r0, 802366a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023646:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 802364a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802364e:	b913      	cbnz	r3, 8023656 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8023650:	4630      	mov	r0, r6
 8023652:	f001 f806 	bl	8024662 <_ZN8touchgfx7Outline6moveToEii>
 8023656:	2300      	movs	r3, #0
 8023658:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802365c:	2301      	movs	r3, #1
 802365e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023662:	4630      	mov	r0, r6
 8023664:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023668:	e7d6      	b.n	8023618 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802366a:	4630      	mov	r0, r6
 802366c:	f7ff fe50 	bl	8023310 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023670:	e7f7      	b.n	8023662 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8023672:	4615      	mov	r5, r2
 8023674:	e7d2      	b.n	802361c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08023676 <_ZN8touchgfx6Canvas5closeEv>:
 8023676:	b538      	push	{r3, r4, r5, lr}
 8023678:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802367c:	4604      	mov	r4, r0
 802367e:	b993      	cbnz	r3, 80236a6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023680:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8023684:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8023688:	4213      	tst	r3, r2
 802368a:	d10c      	bne.n	80236a6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802368c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8023690:	b123      	cbz	r3, 802369c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023692:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8023696:	4628      	mov	r0, r5
 8023698:	f7ff fe3a 	bl	8023310 <_ZN8touchgfx10Rasterizer6lineToEii>
 802369c:	4628      	mov	r0, r5
 802369e:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80236a2:	f7ff fe35 	bl	8023310 <_ZN8touchgfx10Rasterizer6lineToEii>
 80236a6:	2300      	movs	r3, #0
 80236a8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80236ac:	bd38      	pop	{r3, r4, r5, pc}

080236ae <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80236ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236b0:	b085      	sub	sp, #20
 80236b2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80236b6:	4604      	mov	r4, r0
 80236b8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80236bc:	b353      	cbz	r3, 8023714 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80236be:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80236c2:	b90b      	cbnz	r3, 80236c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80236c4:	f7ff ffd7 	bl	8023676 <_ZN8touchgfx6Canvas5closeEv>
 80236c8:	aa02      	add	r2, sp, #8
 80236ca:	a903      	add	r1, sp, #12
 80236cc:	4620      	mov	r0, r4
 80236ce:	f7ff ff6b 	bl	80235a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80236d2:	68a3      	ldr	r3, [r4, #8]
 80236d4:	9d03      	ldr	r5, [sp, #12]
 80236d6:	aa02      	add	r2, sp, #8
 80236d8:	9e02      	ldr	r6, [sp, #8]
 80236da:	a903      	add	r1, sp, #12
 80236dc:	1aed      	subs	r5, r5, r3
 80236de:	68e3      	ldr	r3, [r4, #12]
 80236e0:	4620      	mov	r0, r4
 80236e2:	1af6      	subs	r6, r6, r3
 80236e4:	f104 0314 	add.w	r3, r4, #20
 80236e8:	9503      	str	r5, [sp, #12]
 80236ea:	9300      	str	r3, [sp, #0]
 80236ec:	f104 0310 	add.w	r3, r4, #16
 80236f0:	9602      	str	r6, [sp, #8]
 80236f2:	f7ff ff41 	bl	8023578 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80236f6:	4607      	mov	r7, r0
 80236f8:	b170      	cbz	r0, 8023718 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80236fa:	2301      	movs	r3, #1
 80236fc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023700:	9a03      	ldr	r2, [sp, #12]
 8023702:	9b02      	ldr	r3, [sp, #8]
 8023704:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8023708:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 802370c:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8023710:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8023714:	b005      	add	sp, #20
 8023716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023718:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802371c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8023720:	b92b      	cbnz	r3, 802372e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8023722:	4632      	mov	r2, r6
 8023724:	4629      	mov	r1, r5
 8023726:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802372a:	f000 ff9a 	bl	8024662 <_ZN8touchgfx7Outline6moveToEii>
 802372e:	2300      	movs	r3, #0
 8023730:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023734:	2301      	movs	r3, #1
 8023736:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802373a:	e7e1      	b.n	8023700 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802373c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023740:	4604      	mov	r4, r0
 8023742:	b087      	sub	sp, #28
 8023744:	9105      	str	r1, [sp, #20]
 8023746:	f001 f8d0 	bl	80248ea <_ZN8touchgfx7Outline8getCellsEv>
 802374a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802374e:	4605      	mov	r5, r0
 8023750:	f1b9 0f00 	cmp.w	r9, #0
 8023754:	d103      	bne.n	802375e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8023756:	2001      	movs	r0, #1
 8023758:	b007      	add	sp, #28
 802375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802375e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8023762:	2e00      	cmp	r6, #0
 8023764:	d139      	bne.n	80237da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8023766:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802376a:	f105 0708 	add.w	r7, r5, #8
 802376e:	4640      	mov	r0, r8
 8023770:	f001 f8fd 	bl	802496e <_ZN8touchgfx8Scanline5resetEv>
 8023774:	f109 33ff 	add.w	r3, r9, #4294967295
 8023778:	9303      	str	r3, [sp, #12]
 802377a:	f9b5 b000 	ldrsh.w	fp, [r5]
 802377e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8023782:	46da      	mov	sl, fp
 8023784:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8023788:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802378c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023790:	9b03      	ldr	r3, [sp, #12]
 8023792:	4416      	add	r6, r2
 8023794:	9504      	str	r5, [sp, #16]
 8023796:	463d      	mov	r5, r7
 8023798:	3b01      	subs	r3, #1
 802379a:	9303      	str	r3, [sp, #12]
 802379c:	3301      	adds	r3, #1
 802379e:	d01e      	beq.n	80237de <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80237a0:	3708      	adds	r7, #8
 80237a2:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80237a6:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80237aa:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80237ae:	4290      	cmp	r0, r2
 80237b0:	d11e      	bne.n	80237f0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80237b2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80237b6:	4411      	add	r1, r2
 80237b8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80237bc:	e7e8      	b.n	8023790 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80237be:	1c91      	adds	r1, r2, #2
 80237c0:	f04f 0301 	mov.w	r3, #1
 80237c4:	65e1      	str	r1, [r4, #92]	; 0x5c
 80237c6:	8053      	strh	r3, [r2, #2]
 80237c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80237ca:	1c91      	adds	r1, r2, #2
 80237cc:	65a1      	str	r1, [r4, #88]	; 0x58
 80237ce:	f8a2 b002 	strh.w	fp, [r2, #2]
 80237d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80237d4:	3201      	adds	r2, #1
 80237d6:	6562      	str	r2, [r4, #84]	; 0x54
 80237d8:	e03a      	b.n	8023850 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80237da:	2000      	movs	r0, #0
 80237dc:	e7bc      	b.n	8023758 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80237de:	b951      	cbnz	r1, 80237f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80237e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	d0b7      	beq.n	8023756 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80237e6:	4641      	mov	r1, r8
 80237e8:	9805      	ldr	r0, [sp, #20]
 80237ea:	f7ff fd5b 	bl	80232a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80237ee:	e7b2      	b.n	8023756 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80237f0:	2900      	cmp	r1, #0
 80237f2:	d035      	beq.n	8023860 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80237f4:	9504      	str	r5, [sp, #16]
 80237f6:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80237fa:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80237fe:	f7ff fd3d 	bl	802327c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023802:	4605      	mov	r5, r0
 8023804:	b330      	cbz	r0, 8023854 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023806:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023808:	b182      	cbz	r2, 802382c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802380a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802380c:	454a      	cmp	r2, r9
 802380e:	d00d      	beq.n	802382c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023810:	4641      	mov	r1, r8
 8023812:	9805      	ldr	r0, [sp, #20]
 8023814:	f7ff fd46 	bl	80232a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023818:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802381c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802381e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023822:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023824:	2300      	movs	r3, #0
 8023826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023828:	6563      	str	r3, [r4, #84]	; 0x54
 802382a:	65a2      	str	r2, [r4, #88]	; 0x58
 802382c:	f1bb 0f00 	cmp.w	fp, #0
 8023830:	db10      	blt.n	8023854 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023832:	f7f3 fac9 	bl	8016dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023836:	4583      	cmp	fp, r0
 8023838:	d20c      	bcs.n	8023854 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802383a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802383c:	f802 500b 	strb.w	r5, [r2, fp]
 8023840:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8023842:	3201      	adds	r2, #1
 8023844:	455a      	cmp	r2, fp
 8023846:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023848:	d1b9      	bne.n	80237be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802384a:	8811      	ldrh	r1, [r2, #0]
 802384c:	3101      	adds	r1, #1
 802384e:	8011      	strh	r1, [r2, #0]
 8023850:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023854:	9b03      	ldr	r3, [sp, #12]
 8023856:	3301      	adds	r3, #1
 8023858:	d0c2      	beq.n	80237e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802385a:	f10b 0a01 	add.w	sl, fp, #1
 802385e:	9d04      	ldr	r5, [sp, #16]
 8023860:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023864:	4553      	cmp	r3, sl
 8023866:	dd88      	ble.n	802377a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023868:	01b1      	lsls	r1, r6, #6
 802386a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802386e:	f7ff fd05 	bl	802327c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023872:	4683      	mov	fp, r0
 8023874:	2800      	cmp	r0, #0
 8023876:	d080      	beq.n	802377a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023878:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802387a:	b183      	cbz	r3, 802389e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802387c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802387e:	454b      	cmp	r3, r9
 8023880:	d00d      	beq.n	802389e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023882:	4641      	mov	r1, r8
 8023884:	9805      	ldr	r0, [sp, #20]
 8023886:	f7ff fd0d 	bl	80232a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802388a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802388e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023892:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023894:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023898:	65a3      	str	r3, [r4, #88]	; 0x58
 802389a:	2300      	movs	r3, #0
 802389c:	6563      	str	r3, [r4, #84]	; 0x54
 802389e:	f9b5 3000 	ldrsh.w	r3, [r5]
 80238a2:	464a      	mov	r2, r9
 80238a4:	f8cd b000 	str.w	fp, [sp]
 80238a8:	4651      	mov	r1, sl
 80238aa:	eba3 030a 	sub.w	r3, r3, sl
 80238ae:	4640      	mov	r0, r8
 80238b0:	f001 f884 	bl	80249bc <_ZN8touchgfx8Scanline7addSpanEiijj>
 80238b4:	e761      	b.n	802377a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080238b6 <_ZN8touchgfx6Canvas6renderEv>:
 80238b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80238b8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80238bc:	4604      	mov	r4, r0
 80238be:	b913      	cbnz	r3, 80238c6 <_ZN8touchgfx6Canvas6renderEv+0x10>
 80238c0:	2001      	movs	r0, #1
 80238c2:	b003      	add	sp, #12
 80238c4:	bd30      	pop	{r4, r5, pc}
 80238c6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	d131      	bne.n	8023932 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80238ce:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80238d2:	2b00      	cmp	r3, #0
 80238d4:	d0f4      	beq.n	80238c0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80238d6:	6840      	ldr	r0, [r0, #4]
 80238d8:	6803      	ldr	r3, [r0, #0]
 80238da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80238dc:	4798      	blx	r3
 80238de:	2800      	cmp	r0, #0
 80238e0:	d0ee      	beq.n	80238c0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80238e2:	4620      	mov	r0, r4
 80238e4:	f7ff fec7 	bl	8023676 <_ZN8touchgfx6Canvas5closeEv>
 80238e8:	6860      	ldr	r0, [r4, #4]
 80238ea:	6803      	ldr	r3, [r0, #0]
 80238ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80238ee:	4798      	blx	r3
 80238f0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80238f4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80238f8:	f7f2 fac5 	bl	8015e86 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 80238fc:	6860      	ldr	r0, [r4, #4]
 80238fe:	6803      	ldr	r3, [r0, #0]
 8023900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023902:	4798      	blx	r3
 8023904:	4605      	mov	r5, r0
 8023906:	6860      	ldr	r0, [r4, #4]
 8023908:	6803      	ldr	r3, [r0, #0]
 802390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802390c:	4798      	blx	r3
 802390e:	4601      	mov	r1, r0
 8023910:	4628      	mov	r0, r5
 8023912:	f7f2 fabb 	bl	8015e8c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023916:	6860      	ldr	r0, [r4, #4]
 8023918:	6803      	ldr	r3, [r0, #0]
 802391a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802391c:	4798      	blx	r3
 802391e:	f104 0318 	add.w	r3, r4, #24
 8023922:	4669      	mov	r1, sp
 8023924:	e9cd 3000 	strd	r3, r0, [sp]
 8023928:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802392c:	f7ff ff06 	bl	802373c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023930:	e7c7      	b.n	80238c2 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8023932:	2000      	movs	r0, #0
 8023934:	e7c5      	b.n	80238c2 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023938 <_ZN8touchgfx6CanvasD1Ev>:
 8023938:	b538      	push	{r3, r4, r5, lr}
 802393a:	4605      	mov	r5, r0
 802393c:	4b08      	ldr	r3, [pc, #32]	; (8023960 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802393e:	4604      	mov	r4, r0
 8023940:	f845 3b2c 	str.w	r3, [r5], #44
 8023944:	4b07      	ldr	r3, [pc, #28]	; (8023964 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023946:	6818      	ldr	r0, [r3, #0]
 8023948:	6803      	ldr	r3, [r0, #0]
 802394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802394c:	4798      	blx	r3
 802394e:	4628      	mov	r0, r5
 8023950:	f000 f814 	bl	802397c <_ZN8touchgfx7OutlineD1Ev>
 8023954:	f104 0018 	add.w	r0, r4, #24
 8023958:	f001 f870 	bl	8024a3c <_ZN8touchgfx15RenderingBufferD1Ev>
 802395c:	4620      	mov	r0, r4
 802395e:	bd38      	pop	{r3, r4, r5, pc}
 8023960:	0802b4e4 	.word	0x0802b4e4
 8023964:	2000bafc 	.word	0x2000bafc

08023968 <_ZN8touchgfx6CanvasD0Ev>:
 8023968:	b510      	push	{r4, lr}
 802396a:	4604      	mov	r4, r0
 802396c:	f7ff ffe4 	bl	8023938 <_ZN8touchgfx6CanvasD1Ev>
 8023970:	21b8      	movs	r1, #184	; 0xb8
 8023972:	4620      	mov	r0, r4
 8023974:	f001 f873 	bl	8024a5e <_ZdlPvj>
 8023978:	4620      	mov	r0, r4
 802397a:	bd10      	pop	{r4, pc}

0802397c <_ZN8touchgfx7OutlineD1Ev>:
 802397c:	4770      	bx	lr

0802397e <_ZN8touchgfx7OutlineD0Ev>:
 802397e:	b510      	push	{r4, lr}
 8023980:	4604      	mov	r4, r0
 8023982:	2148      	movs	r1, #72	; 0x48
 8023984:	f001 f86b 	bl	8024a5e <_ZdlPvj>
 8023988:	4620      	mov	r0, r4
 802398a:	bd10      	pop	{r4, pc}

0802398c <_ZN8touchgfx7Outline5resetEv>:
 802398c:	b510      	push	{r4, lr}
 802398e:	4604      	mov	r4, r0
 8023990:	f7f3 fa32 	bl	8016df8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023994:	60e0      	str	r0, [r4, #12]
 8023996:	f7f3 fa35 	bl	8016e04 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802399a:	68e3      	ldr	r3, [r4, #12]
 802399c:	2200      	movs	r2, #0
 802399e:	08c0      	lsrs	r0, r0, #3
 80239a0:	6123      	str	r3, [r4, #16]
 80239a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80239a6:	6060      	str	r0, [r4, #4]
 80239a8:	82a3      	strh	r3, [r4, #20]
 80239aa:	82e3      	strh	r3, [r4, #22]
 80239ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80239ae:	60a2      	str	r2, [r4, #8]
 80239b0:	f023 0301 	bic.w	r3, r3, #1
 80239b4:	8322      	strh	r2, [r4, #24]
 80239b6:	8362      	strh	r2, [r4, #26]
 80239b8:	f043 0302 	orr.w	r3, r3, #2
 80239bc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80239c0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80239c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80239c6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80239ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80239ce:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80239d2:	bd10      	pop	{r4, pc}

080239d4 <_ZN8touchgfx7OutlineC1Ev>:
 80239d4:	4b0f      	ldr	r3, [pc, #60]	; (8023a14 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80239d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80239da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80239de:	b510      	push	{r4, lr}
 80239e0:	6003      	str	r3, [r0, #0]
 80239e2:	2300      	movs	r3, #0
 80239e4:	4604      	mov	r4, r0
 80239e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80239ea:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80239ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80239f2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80239f6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80239fa:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80239fe:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023a02:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023a06:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023a0a:	f7ff ffbf 	bl	802398c <_ZN8touchgfx7Outline5resetEv>
 8023a0e:	4620      	mov	r0, r4
 8023a10:	bd10      	pop	{r4, pc}
 8023a12:	bf00      	nop
 8023a14:	0802b544 	.word	0x0802b544

08023a18 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a1c:	b093      	sub	sp, #76	; 0x4c
 8023a1e:	4604      	mov	r4, r0
 8023a20:	1156      	asrs	r6, r2, #5
 8023a22:	f002 0e1f 	and.w	lr, r2, #31
 8023a26:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023a28:	9305      	str	r3, [sp, #20]
 8023a2a:	1143      	asrs	r3, r0, #5
 8023a2c:	1145      	asrs	r5, r0, #5
 8023a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8023a30:	f000 031f 	and.w	r3, r0, #31
 8023a34:	9303      	str	r3, [sp, #12]
 8023a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023a38:	42b3      	cmp	r3, r6
 8023a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023a3c:	bfc8      	it	gt
 8023a3e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023a40:	42b3      	cmp	r3, r6
 8023a42:	bfdc      	itt	le
 8023a44:	1c73      	addle	r3, r6, #1
 8023a46:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023a48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023a4a:	42ab      	cmp	r3, r5
 8023a4c:	bfc8      	it	gt
 8023a4e:	462b      	movgt	r3, r5
 8023a50:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023a54:	bfc8      	it	gt
 8023a56:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023a58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023a5a:	42ab      	cmp	r3, r5
 8023a5c:	bfd8      	it	le
 8023a5e:	462b      	movle	r3, r5
 8023a60:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023a64:	bfdc      	itt	le
 8023a66:	3301      	addle	r3, #1
 8023a68:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023a6a:	9b05      	ldr	r3, [sp, #20]
 8023a6c:	eba3 0a01 	sub.w	sl, r3, r1
 8023a70:	1143      	asrs	r3, r0, #5
 8023a72:	429e      	cmp	r6, r3
 8023a74:	f040 8119 	bne.w	8023caa <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8023a78:	9b05      	ldr	r3, [sp, #20]
 8023a7a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023a7e:	9b03      	ldr	r3, [sp, #12]
 8023a80:	459e      	cmp	lr, r3
 8023a82:	d12c      	bne.n	8023ade <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023a84:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023a88:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023a8c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023a90:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023a94:	4291      	cmp	r1, r2
 8023a96:	d037      	beq.n	8023b08 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023a98:	8b61      	ldrh	r1, [r4, #26]
 8023a9a:	8b22      	ldrh	r2, [r4, #24]
 8023a9c:	430a      	orrs	r2, r1
 8023a9e:	d00b      	beq.n	8023ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023aa0:	2b00      	cmp	r3, #0
 8023aa2:	db09      	blt.n	8023ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023aa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023aa6:	429a      	cmp	r2, r3
 8023aa8:	dd06      	ble.n	8023ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023aaa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023aae:	429a      	cmp	r2, r3
 8023ab0:	d308      	bcc.n	8023ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023ab2:	2301      	movs	r3, #1
 8023ab4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023ab8:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023abc:	82e6      	strh	r6, [r4, #22]
 8023abe:	2300      	movs	r3, #0
 8023ac0:	8323      	strh	r3, [r4, #24]
 8023ac2:	e0c6      	b.n	8023c52 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023ac4:	f104 0314 	add.w	r3, r4, #20
 8023ac8:	6922      	ldr	r2, [r4, #16]
 8023aca:	cb03      	ldmia	r3!, {r0, r1}
 8023acc:	6010      	str	r0, [r2, #0]
 8023ace:	6051      	str	r1, [r2, #4]
 8023ad0:	6923      	ldr	r3, [r4, #16]
 8023ad2:	3308      	adds	r3, #8
 8023ad4:	6123      	str	r3, [r4, #16]
 8023ad6:	68a3      	ldr	r3, [r4, #8]
 8023ad8:	3301      	adds	r3, #1
 8023ada:	60a3      	str	r3, [r4, #8]
 8023adc:	e7ec      	b.n	8023ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023ade:	9b05      	ldr	r3, [sp, #20]
 8023ae0:	45ac      	cmp	ip, r5
 8023ae2:	f001 011f 	and.w	r1, r1, #31
 8023ae6:	8b20      	ldrh	r0, [r4, #24]
 8023ae8:	f003 031f 	and.w	r3, r3, #31
 8023aec:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023af0:	9304      	str	r3, [sp, #16]
 8023af2:	9b03      	ldr	r3, [sp, #12]
 8023af4:	eba3 020e 	sub.w	r2, r3, lr
 8023af8:	d109      	bne.n	8023b0e <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023afa:	9b04      	ldr	r3, [sp, #16]
 8023afc:	4410      	add	r0, r2
 8023afe:	4419      	add	r1, r3
 8023b00:	8320      	strh	r0, [r4, #24]
 8023b02:	fb02 8201 	mla	r2, r2, r1, r8
 8023b06:	8362      	strh	r2, [r4, #26]
 8023b08:	b013      	add	sp, #76	; 0x4c
 8023b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b0e:	f1ba 0f00 	cmp.w	sl, #0
 8023b12:	f2c0 80a0 	blt.w	8023c56 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023b16:	f1c1 0320 	rsb	r3, r1, #32
 8023b1a:	f04f 0b20 	mov.w	fp, #32
 8023b1e:	435a      	muls	r2, r3
 8023b20:	2301      	movs	r3, #1
 8023b22:	9302      	str	r3, [sp, #8]
 8023b24:	4459      	add	r1, fp
 8023b26:	fb92 f7fa 	sdiv	r7, r2, sl
 8023b2a:	fb0a 2217 	mls	r2, sl, r7, r2
 8023b2e:	2a00      	cmp	r2, #0
 8023b30:	bfbc      	itt	lt
 8023b32:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023b36:	4452      	addlt	r2, sl
 8023b38:	fb07 8101 	mla	r1, r7, r1, r8
 8023b3c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023b40:	4438      	add	r0, r7
 8023b42:	b20b      	sxth	r3, r1
 8023b44:	9902      	ldr	r1, [sp, #8]
 8023b46:	b200      	sxth	r0, r0
 8023b48:	9301      	str	r3, [sp, #4]
 8023b4a:	8363      	strh	r3, [r4, #26]
 8023b4c:	186b      	adds	r3, r5, r1
 8023b4e:	0435      	lsls	r5, r6, #16
 8023b50:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023b54:	8320      	strh	r0, [r4, #24]
 8023b56:	eb03 0905 	add.w	r9, r3, r5
 8023b5a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8023b5e:	9300      	str	r3, [sp, #0]
 8023b60:	45c1      	cmp	r9, r8
 8023b62:	9505      	str	r5, [sp, #20]
 8023b64:	d014      	beq.n	8023b90 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8023b66:	9b01      	ldr	r3, [sp, #4]
 8023b68:	4303      	orrs	r3, r0
 8023b6a:	d00b      	beq.n	8023b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023b6c:	2900      	cmp	r1, #0
 8023b6e:	db09      	blt.n	8023b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023b72:	428b      	cmp	r3, r1
 8023b74:	dd06      	ble.n	8023b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023b76:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023b7a:	4299      	cmp	r1, r3
 8023b7c:	d374      	bcc.n	8023c68 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023b7e:	2301      	movs	r3, #1
 8023b80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023b84:	9b00      	ldr	r3, [sp, #0]
 8023b86:	82e6      	strh	r6, [r4, #22]
 8023b88:	82a3      	strh	r3, [r4, #20]
 8023b8a:	2300      	movs	r3, #0
 8023b8c:	8323      	strh	r3, [r4, #24]
 8023b8e:	8363      	strh	r3, [r4, #26]
 8023b90:	9900      	ldr	r1, [sp, #0]
 8023b92:	eb0e 0307 	add.w	r3, lr, r7
 8023b96:	458c      	cmp	ip, r1
 8023b98:	d04e      	beq.n	8023c38 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8023b9a:	9903      	ldr	r1, [sp, #12]
 8023b9c:	eba2 020a 	sub.w	r2, r2, sl
 8023ba0:	1ac9      	subs	r1, r1, r3
 8023ba2:	9201      	str	r2, [sp, #4]
 8023ba4:	440f      	add	r7, r1
 8023ba6:	017f      	lsls	r7, r7, #5
 8023ba8:	fb97 fefa 	sdiv	lr, r7, sl
 8023bac:	fb0a 771e 	mls	r7, sl, lr, r7
 8023bb0:	2f00      	cmp	r7, #0
 8023bb2:	bfbc      	itt	lt
 8023bb4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023bb8:	4457      	addlt	r7, sl
 8023bba:	f10e 0101 	add.w	r1, lr, #1
 8023bbe:	9106      	str	r1, [sp, #24]
 8023bc0:	9a01      	ldr	r2, [sp, #4]
 8023bc2:	8b20      	ldrh	r0, [r4, #24]
 8023bc4:	19d2      	adds	r2, r2, r7
 8023bc6:	8b61      	ldrh	r1, [r4, #26]
 8023bc8:	9d02      	ldr	r5, [sp, #8]
 8023bca:	9201      	str	r2, [sp, #4]
 8023bcc:	bf5b      	ittet	pl
 8023bce:	eba2 020a 	subpl.w	r2, r2, sl
 8023bd2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023bd6:	46f0      	movmi	r8, lr
 8023bd8:	9201      	strpl	r2, [sp, #4]
 8023bda:	9a00      	ldr	r2, [sp, #0]
 8023bdc:	4440      	add	r0, r8
 8023bde:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023be2:	4443      	add	r3, r8
 8023be4:	442a      	add	r2, r5
 8023be6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023bea:	9d05      	ldr	r5, [sp, #20]
 8023bec:	b200      	sxth	r0, r0
 8023bee:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023bf2:	b209      	sxth	r1, r1
 8023bf4:	4415      	add	r5, r2
 8023bf6:	8320      	strh	r0, [r4, #24]
 8023bf8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023bfc:	8361      	strh	r1, [r4, #26]
 8023bfe:	9200      	str	r2, [sp, #0]
 8023c00:	454d      	cmp	r5, r9
 8023c02:	d016      	beq.n	8023c32 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023c04:	4301      	orrs	r1, r0
 8023c06:	d00d      	beq.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023c08:	f1b8 0f00 	cmp.w	r8, #0
 8023c0c:	db0a      	blt.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023c0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023c10:	4541      	cmp	r1, r8
 8023c12:	dd07      	ble.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023c14:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023c18:	4288      	cmp	r0, r1
 8023c1a:	d335      	bcc.n	8023c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023c1c:	f04f 0101 	mov.w	r1, #1
 8023c20:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023c24:	9900      	ldr	r1, [sp, #0]
 8023c26:	82e6      	strh	r6, [r4, #22]
 8023c28:	82a1      	strh	r1, [r4, #20]
 8023c2a:	f04f 0100 	mov.w	r1, #0
 8023c2e:	8321      	strh	r1, [r4, #24]
 8023c30:	8361      	strh	r1, [r4, #26]
 8023c32:	9a00      	ldr	r2, [sp, #0]
 8023c34:	4594      	cmp	ip, r2
 8023c36:	d1c3      	bne.n	8023bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023c38:	9a03      	ldr	r2, [sp, #12]
 8023c3a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023c3e:	1ad3      	subs	r3, r2, r3
 8023c40:	8b22      	ldrh	r2, [r4, #24]
 8023c42:	441a      	add	r2, r3
 8023c44:	8322      	strh	r2, [r4, #24]
 8023c46:	9a04      	ldr	r2, [sp, #16]
 8023c48:	3220      	adds	r2, #32
 8023c4a:	eba2 020b 	sub.w	r2, r2, fp
 8023c4e:	fb03 c302 	mla	r3, r3, r2, ip
 8023c52:	8363      	strh	r3, [r4, #26]
 8023c54:	e758      	b.n	8023b08 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023c56:	f04f 33ff 	mov.w	r3, #4294967295
 8023c5a:	434a      	muls	r2, r1
 8023c5c:	f1ca 0a00 	rsb	sl, sl, #0
 8023c60:	f04f 0b00 	mov.w	fp, #0
 8023c64:	9302      	str	r3, [sp, #8]
 8023c66:	e75d      	b.n	8023b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8023c68:	f104 0314 	add.w	r3, r4, #20
 8023c6c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023c70:	cb03      	ldmia	r3!, {r0, r1}
 8023c72:	f8c8 0000 	str.w	r0, [r8]
 8023c76:	f8c8 1004 	str.w	r1, [r8, #4]
 8023c7a:	6923      	ldr	r3, [r4, #16]
 8023c7c:	3308      	adds	r3, #8
 8023c7e:	6123      	str	r3, [r4, #16]
 8023c80:	68a3      	ldr	r3, [r4, #8]
 8023c82:	3301      	adds	r3, #1
 8023c84:	60a3      	str	r3, [r4, #8]
 8023c86:	e77d      	b.n	8023b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023c88:	f104 0814 	add.w	r8, r4, #20
 8023c8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023c90:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023c94:	f8c9 0000 	str.w	r0, [r9]
 8023c98:	f8c9 1004 	str.w	r1, [r9, #4]
 8023c9c:	6921      	ldr	r1, [r4, #16]
 8023c9e:	3108      	adds	r1, #8
 8023ca0:	6121      	str	r1, [r4, #16]
 8023ca2:	68a1      	ldr	r1, [r4, #8]
 8023ca4:	3101      	adds	r1, #1
 8023ca6:	60a1      	str	r1, [r4, #8]
 8023ca8:	e7bc      	b.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023caa:	1a83      	subs	r3, r0, r2
 8023cac:	9301      	str	r3, [sp, #4]
 8023cae:	f1ba 0f00 	cmp.w	sl, #0
 8023cb2:	f040 8094 	bne.w	8023dde <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8023cb6:	9a01      	ldr	r2, [sp, #4]
 8023cb8:	0049      	lsls	r1, r1, #1
 8023cba:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023cbe:	2a00      	cmp	r2, #0
 8023cc0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023cc4:	8b62      	ldrh	r2, [r4, #26]
 8023cc6:	bfaa      	itet	ge
 8023cc8:	f04f 0a20 	movge.w	sl, #32
 8023ccc:	f04f 38ff 	movlt.w	r8, #4294967295
 8023cd0:	f04f 0801 	movge.w	r8, #1
 8023cd4:	8b21      	ldrh	r1, [r4, #24]
 8023cd6:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023cda:	4471      	add	r1, lr
 8023cdc:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023ce0:	eb08 0206 	add.w	r2, r8, r6
 8023ce4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023ce8:	b209      	sxth	r1, r1
 8023cea:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023cee:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8023cf2:	8321      	strh	r1, [r4, #24]
 8023cf4:	fa0f fe8e 	sxth.w	lr, lr
 8023cf8:	42b7      	cmp	r7, r6
 8023cfa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023cfe:	d013      	beq.n	8023d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8023d00:	ea51 010e 	orrs.w	r1, r1, lr
 8023d04:	d00b      	beq.n	8023d1e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023d06:	2800      	cmp	r0, #0
 8023d08:	db09      	blt.n	8023d1e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023d0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023d0c:	4281      	cmp	r1, r0
 8023d0e:	dd06      	ble.n	8023d1e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023d10:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023d14:	4288      	cmp	r0, r1
 8023d16:	d339      	bcc.n	8023d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8023d18:	2101      	movs	r1, #1
 8023d1a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023d1e:	2100      	movs	r1, #0
 8023d20:	82a5      	strh	r5, [r4, #20]
 8023d22:	82e2      	strh	r2, [r4, #22]
 8023d24:	8321      	strh	r1, [r4, #24]
 8023d26:	8361      	strh	r1, [r4, #26]
 8023d28:	f1aa 0610 	sub.w	r6, sl, #16
 8023d2c:	f04f 0e00 	mov.w	lr, #0
 8023d30:	f04f 0b01 	mov.w	fp, #1
 8023d34:	0076      	lsls	r6, r6, #1
 8023d36:	fb06 f703 	mul.w	r7, r6, r3
 8023d3a:	b236      	sxth	r6, r6
 8023d3c:	b23f      	sxth	r7, r7
 8023d3e:	ea46 0107 	orr.w	r1, r6, r7
 8023d42:	9100      	str	r1, [sp, #0]
 8023d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d46:	428a      	cmp	r2, r1
 8023d48:	d03e      	beq.n	8023dc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8023d4a:	4442      	add	r2, r8
 8023d4c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023d50:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023d54:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8023d58:	8326      	strh	r6, [r4, #24]
 8023d5a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023d5e:	8367      	strh	r7, [r4, #26]
 8023d60:	4584      	cmp	ip, r0
 8023d62:	d0ef      	beq.n	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023d64:	9800      	ldr	r0, [sp, #0]
 8023d66:	b150      	cbz	r0, 8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023d68:	2900      	cmp	r1, #0
 8023d6a:	db08      	blt.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023d6c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023d6e:	4288      	cmp	r0, r1
 8023d70:	dd05      	ble.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023d72:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023d76:	4288      	cmp	r0, r1
 8023d78:	d315      	bcc.n	8023da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023d7a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8023d7e:	82a5      	strh	r5, [r4, #20]
 8023d80:	82e2      	strh	r2, [r4, #22]
 8023d82:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023d86:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023d8a:	e7db      	b.n	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023d8c:	f104 0614 	add.w	r6, r4, #20
 8023d90:	6927      	ldr	r7, [r4, #16]
 8023d92:	ce03      	ldmia	r6!, {r0, r1}
 8023d94:	6038      	str	r0, [r7, #0]
 8023d96:	6079      	str	r1, [r7, #4]
 8023d98:	6921      	ldr	r1, [r4, #16]
 8023d9a:	3108      	adds	r1, #8
 8023d9c:	6121      	str	r1, [r4, #16]
 8023d9e:	68a1      	ldr	r1, [r4, #8]
 8023da0:	3101      	adds	r1, #1
 8023da2:	60a1      	str	r1, [r4, #8]
 8023da4:	e7bb      	b.n	8023d1e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023da6:	f104 0c14 	add.w	ip, r4, #20
 8023daa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023dae:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8023db2:	f8c9 0000 	str.w	r0, [r9]
 8023db6:	f8c9 1004 	str.w	r1, [r9, #4]
 8023dba:	6921      	ldr	r1, [r4, #16]
 8023dbc:	3108      	adds	r1, #8
 8023dbe:	6121      	str	r1, [r4, #16]
 8023dc0:	68a1      	ldr	r1, [r4, #8]
 8023dc2:	3101      	adds	r1, #1
 8023dc4:	60a1      	str	r1, [r4, #8]
 8023dc6:	e7da      	b.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023dc8:	9a03      	ldr	r2, [sp, #12]
 8023dca:	8b61      	ldrh	r1, [r4, #26]
 8023dcc:	f1a2 0c20 	sub.w	ip, r2, #32
 8023dd0:	8b22      	ldrh	r2, [r4, #24]
 8023dd2:	44d4      	add	ip, sl
 8023dd4:	4462      	add	r2, ip
 8023dd6:	fb0c 1303 	mla	r3, ip, r3, r1
 8023dda:	8322      	strh	r2, [r4, #24]
 8023ddc:	e739      	b.n	8023c52 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023dde:	9b01      	ldr	r3, [sp, #4]
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	db3f      	blt.n	8023e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8023de4:	2201      	movs	r2, #1
 8023de6:	f1ce 0320 	rsb	r3, lr, #32
 8023dea:	920b      	str	r2, [sp, #44]	; 0x2c
 8023dec:	2220      	movs	r2, #32
 8023dee:	fb0a f303 	mul.w	r3, sl, r3
 8023df2:	9202      	str	r2, [sp, #8]
 8023df4:	9a01      	ldr	r2, [sp, #4]
 8023df6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023dfa:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023dfe:	fb93 f7f2 	sdiv	r7, r3, r2
 8023e02:	fb02 3317 	mls	r3, r2, r7, r3
 8023e06:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023e0a:	2b00      	cmp	r3, #0
 8023e0c:	9308      	str	r3, [sp, #32]
 8023e0e:	bfbc      	itt	lt
 8023e10:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023e14:	189b      	addlt	r3, r3, r2
 8023e16:	eb07 0b01 	add.w	fp, r7, r1
 8023e1a:	bfb8      	it	lt
 8023e1c:	9308      	strlt	r3, [sp, #32]
 8023e1e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023e22:	9304      	str	r3, [sp, #16]
 8023e24:	9b02      	ldr	r3, [sp, #8]
 8023e26:	4573      	cmp	r3, lr
 8023e28:	d133      	bne.n	8023e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8023e2a:	9b04      	ldr	r3, [sp, #16]
 8023e2c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8023e30:	454b      	cmp	r3, r9
 8023e32:	d045      	beq.n	8023ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023e34:	8b62      	ldrh	r2, [r4, #26]
 8023e36:	8b23      	ldrh	r3, [r4, #24]
 8023e38:	4313      	orrs	r3, r2
 8023e3a:	d00c      	beq.n	8023e56 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023e3c:	f1b8 0f00 	cmp.w	r8, #0
 8023e40:	db09      	blt.n	8023e56 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023e44:	4543      	cmp	r3, r8
 8023e46:	dd06      	ble.n	8023e56 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023e48:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023e4c:	429a      	cmp	r2, r3
 8023e4e:	d313      	bcc.n	8023e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8023e50:	2301      	movs	r3, #1
 8023e52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023e56:	9b04      	ldr	r3, [sp, #16]
 8023e58:	82e6      	strh	r6, [r4, #22]
 8023e5a:	82a3      	strh	r3, [r4, #20]
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	8323      	strh	r3, [r4, #24]
 8023e60:	8363      	strh	r3, [r4, #26]
 8023e62:	e02d      	b.n	8023ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023e64:	9a01      	ldr	r2, [sp, #4]
 8023e66:	fb0a f30e 	mul.w	r3, sl, lr
 8023e6a:	4252      	negs	r2, r2
 8023e6c:	9201      	str	r2, [sp, #4]
 8023e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8023e72:	920b      	str	r2, [sp, #44]	; 0x2c
 8023e74:	2200      	movs	r2, #0
 8023e76:	e7bc      	b.n	8023df2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8023e78:	f104 0314 	add.w	r3, r4, #20
 8023e7c:	6922      	ldr	r2, [r4, #16]
 8023e7e:	cb03      	ldmia	r3!, {r0, r1}
 8023e80:	6010      	str	r0, [r2, #0]
 8023e82:	6051      	str	r1, [r2, #4]
 8023e84:	6923      	ldr	r3, [r4, #16]
 8023e86:	3308      	adds	r3, #8
 8023e88:	6123      	str	r3, [r4, #16]
 8023e8a:	68a3      	ldr	r3, [r4, #8]
 8023e8c:	3301      	adds	r3, #1
 8023e8e:	60a3      	str	r3, [r4, #8]
 8023e90:	e7e1      	b.n	8023e56 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023e92:	f00b 031f 	and.w	r3, fp, #31
 8023e96:	f001 011f 	and.w	r1, r1, #31
 8023e9a:	8b20      	ldrh	r0, [r4, #24]
 8023e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8023e9e:	9b02      	ldr	r3, [sp, #8]
 8023ea0:	eba3 020e 	sub.w	r2, r3, lr
 8023ea4:	8b63      	ldrh	r3, [r4, #26]
 8023ea6:	9300      	str	r3, [sp, #0]
 8023ea8:	9b04      	ldr	r3, [sp, #16]
 8023eaa:	42ab      	cmp	r3, r5
 8023eac:	f040 80ef 	bne.w	802408e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8023eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023eb2:	4410      	add	r0, r2
 8023eb4:	4419      	add	r1, r3
 8023eb6:	9b00      	ldr	r3, [sp, #0]
 8023eb8:	8320      	strh	r0, [r4, #24]
 8023eba:	fb02 3101 	mla	r1, r2, r1, r3
 8023ebe:	8361      	strh	r1, [r4, #26]
 8023ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ec2:	9904      	ldr	r1, [sp, #16]
 8023ec4:	4433      	add	r3, r6
 8023ec6:	9300      	str	r3, [sp, #0]
 8023ec8:	9a00      	ldr	r2, [sp, #0]
 8023eca:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023ece:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8023ed2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023ed6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023eda:	4288      	cmp	r0, r1
 8023edc:	d018      	beq.n	8023f10 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8023ede:	8b60      	ldrh	r0, [r4, #26]
 8023ee0:	8b21      	ldrh	r1, [r4, #24]
 8023ee2:	ea50 0201 	orrs.w	r2, r0, r1
 8023ee6:	d00c      	beq.n	8023f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	db0a      	blt.n	8023f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023eec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023eee:	4299      	cmp	r1, r3
 8023ef0:	dd07      	ble.n	8023f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8023ef2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023ef6:	4299      	cmp	r1, r3
 8023ef8:	f0c0 818b 	bcc.w	8024212 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8023efc:	2301      	movs	r3, #1
 8023efe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023f02:	9b04      	ldr	r3, [sp, #16]
 8023f04:	82a3      	strh	r3, [r4, #20]
 8023f06:	9b00      	ldr	r3, [sp, #0]
 8023f08:	82e3      	strh	r3, [r4, #22]
 8023f0a:	2300      	movs	r3, #0
 8023f0c:	8323      	strh	r3, [r4, #24]
 8023f0e:	8363      	strh	r3, [r4, #26]
 8023f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f12:	9a00      	ldr	r2, [sp, #0]
 8023f14:	4293      	cmp	r3, r2
 8023f16:	f000 808d 	beq.w	8024034 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8023f1a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8023f1e:	9901      	ldr	r1, [sp, #4]
 8023f20:	9801      	ldr	r0, [sp, #4]
 8023f22:	fb93 f1f1 	sdiv	r1, r3, r1
 8023f26:	fb00 3311 	mls	r3, r0, r1, r3
 8023f2a:	9106      	str	r1, [sp, #24]
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	9307      	str	r3, [sp, #28]
 8023f30:	da04      	bge.n	8023f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8023f32:	1e4b      	subs	r3, r1, #1
 8023f34:	9306      	str	r3, [sp, #24]
 8023f36:	9b07      	ldr	r3, [sp, #28]
 8023f38:	4403      	add	r3, r0
 8023f3a:	9307      	str	r3, [sp, #28]
 8023f3c:	9b08      	ldr	r3, [sp, #32]
 8023f3e:	f04f 0c00 	mov.w	ip, #0
 8023f42:	9901      	ldr	r1, [sp, #4]
 8023f44:	1a5b      	subs	r3, r3, r1
 8023f46:	4659      	mov	r1, fp
 8023f48:	9308      	str	r3, [sp, #32]
 8023f4a:	9b02      	ldr	r3, [sp, #8]
 8023f4c:	f1c3 0320 	rsb	r3, r3, #32
 8023f50:	930a      	str	r3, [sp, #40]	; 0x28
 8023f52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023f54:	9b02      	ldr	r3, [sp, #8]
 8023f56:	1a1b      	subs	r3, r3, r0
 8023f58:	9309      	str	r3, [sp, #36]	; 0x24
 8023f5a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8023f5e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023f62:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8023f66:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8023f6a:	181b      	adds	r3, r3, r0
 8023f6c:	bf58      	it	pl
 8023f6e:	9801      	ldrpl	r0, [sp, #4]
 8023f70:	9308      	str	r3, [sp, #32]
 8023f72:	bf54      	ite	pl
 8023f74:	1a1b      	subpl	r3, r3, r0
 8023f76:	9d06      	ldrmi	r5, [sp, #24]
 8023f78:	9802      	ldr	r0, [sp, #8]
 8023f7a:	bf5e      	ittt	pl
 8023f7c:	9308      	strpl	r3, [sp, #32]
 8023f7e:	9b06      	ldrpl	r3, [sp, #24]
 8023f80:	1c5d      	addpl	r5, r3, #1
 8023f82:	44ab      	add	fp, r5
 8023f84:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023f88:	9304      	str	r3, [sp, #16]
 8023f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f8c:	4283      	cmp	r3, r0
 8023f8e:	f040 815a 	bne.w	8024246 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8023f92:	9b04      	ldr	r3, [sp, #16]
 8023f94:	9a00      	ldr	r2, [sp, #0]
 8023f96:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8023f9a:	4543      	cmp	r3, r8
 8023f9c:	d01a      	beq.n	8023fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023f9e:	8b61      	ldrh	r1, [r4, #26]
 8023fa0:	8b23      	ldrh	r3, [r4, #24]
 8023fa2:	430b      	orrs	r3, r1
 8023fa4:	d00e      	beq.n	8023fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023fa6:	f1be 0f00 	cmp.w	lr, #0
 8023faa:	db0b      	blt.n	8023fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023fae:	4573      	cmp	r3, lr
 8023fb0:	dd08      	ble.n	8023fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023fb2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023fb6:	4299      	cmp	r1, r3
 8023fb8:	f0c0 8138 	bcc.w	802422c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8023fbc:	f04f 0301 	mov.w	r3, #1
 8023fc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023fc4:	9b04      	ldr	r3, [sp, #16]
 8023fc6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8023fca:	82a3      	strh	r3, [r4, #20]
 8023fcc:	9b00      	ldr	r3, [sp, #0]
 8023fce:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023fd2:	82e3      	strh	r3, [r4, #22]
 8023fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023fd6:	9a00      	ldr	r2, [sp, #0]
 8023fd8:	441a      	add	r2, r3
 8023fda:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023fde:	9200      	str	r2, [sp, #0]
 8023fe0:	9900      	ldr	r1, [sp, #0]
 8023fe2:	9a04      	ldr	r2, [sp, #16]
 8023fe4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8023fe8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023ff0:	4288      	cmp	r0, r1
 8023ff2:	d01a      	beq.n	802402a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8023ff4:	8b60      	ldrh	r0, [r4, #26]
 8023ff6:	8b21      	ldrh	r1, [r4, #24]
 8023ff8:	ea50 0201 	orrs.w	r2, r0, r1
 8023ffc:	d00d      	beq.n	802401a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8023ffe:	2b00      	cmp	r3, #0
 8024000:	db0b      	blt.n	802401a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024002:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024004:	4299      	cmp	r1, r3
 8024006:	dd08      	ble.n	802401a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024008:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802400c:	4299      	cmp	r1, r3
 802400e:	f0c0 81f9 	bcc.w	8024404 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024012:	f04f 0301 	mov.w	r3, #1
 8024016:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802401a:	9b04      	ldr	r3, [sp, #16]
 802401c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024020:	82a3      	strh	r3, [r4, #20]
 8024022:	9b00      	ldr	r3, [sp, #0]
 8024024:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024028:	82e3      	strh	r3, [r4, #22]
 802402a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802402c:	4659      	mov	r1, fp
 802402e:	9a00      	ldr	r2, [sp, #0]
 8024030:	4293      	cmp	r3, r2
 8024032:	d192      	bne.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024034:	9b02      	ldr	r3, [sp, #8]
 8024036:	f1c3 0c20 	rsb	ip, r3, #32
 802403a:	9b05      	ldr	r3, [sp, #20]
 802403c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024040:	9b03      	ldr	r3, [sp, #12]
 8024042:	459c      	cmp	ip, r3
 8024044:	f040 81f8 	bne.w	8024438 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024048:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802404c:	9a00      	ldr	r2, [sp, #0]
 802404e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024052:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024056:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802405a:	4288      	cmp	r0, r1
 802405c:	f43f ad54 	beq.w	8023b08 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024060:	8b60      	ldrh	r0, [r4, #26]
 8024062:	8b21      	ldrh	r1, [r4, #24]
 8024064:	ea50 0201 	orrs.w	r2, r0, r1
 8024068:	d00c      	beq.n	8024084 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802406a:	2b00      	cmp	r3, #0
 802406c:	db0a      	blt.n	8024084 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802406e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024070:	4299      	cmp	r1, r3
 8024072:	dd07      	ble.n	8024084 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024074:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024078:	4299      	cmp	r1, r3
 802407a:	f0c0 81d0 	bcc.w	802441e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 802407e:	2301      	movs	r3, #1
 8024080:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024084:	9b00      	ldr	r3, [sp, #0]
 8024086:	f8a4 e014 	strh.w	lr, [r4, #20]
 802408a:	82e3      	strh	r3, [r4, #22]
 802408c:	e517      	b.n	8023abe <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802408e:	2f00      	cmp	r7, #0
 8024090:	f2c0 8097 	blt.w	80241c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024094:	2301      	movs	r3, #1
 8024096:	f1c1 0c20 	rsb	ip, r1, #32
 802409a:	9307      	str	r3, [sp, #28]
 802409c:	2320      	movs	r3, #32
 802409e:	fb02 f20c 	mul.w	r2, r2, ip
 80240a2:	9306      	str	r3, [sp, #24]
 80240a4:	9b06      	ldr	r3, [sp, #24]
 80240a6:	fb92 fcf7 	sdiv	ip, r2, r7
 80240aa:	fb07 221c 	mls	r2, r7, ip, r2
 80240ae:	4419      	add	r1, r3
 80240b0:	9b00      	ldr	r3, [sp, #0]
 80240b2:	2a00      	cmp	r2, #0
 80240b4:	bfbc      	itt	lt
 80240b6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80240ba:	19d2      	addlt	r2, r2, r7
 80240bc:	fb0c 3101 	mla	r1, ip, r1, r3
 80240c0:	9b07      	ldr	r3, [sp, #28]
 80240c2:	4460      	add	r0, ip
 80240c4:	441d      	add	r5, r3
 80240c6:	0433      	lsls	r3, r6, #16
 80240c8:	b200      	sxth	r0, r0
 80240ca:	930a      	str	r3, [sp, #40]	; 0x28
 80240cc:	18eb      	adds	r3, r5, r3
 80240ce:	b209      	sxth	r1, r1
 80240d0:	8320      	strh	r0, [r4, #24]
 80240d2:	454b      	cmp	r3, r9
 80240d4:	8361      	strh	r1, [r4, #26]
 80240d6:	d014      	beq.n	8024102 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 80240d8:	ea50 0301 	orrs.w	r3, r0, r1
 80240dc:	d00c      	beq.n	80240f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80240de:	f1b8 0f00 	cmp.w	r8, #0
 80240e2:	db09      	blt.n	80240f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80240e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80240e6:	4543      	cmp	r3, r8
 80240e8:	dd06      	ble.n	80240f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80240ea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80240ee:	4299      	cmp	r1, r3
 80240f0:	d36e      	bcc.n	80241d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80240f2:	2301      	movs	r3, #1
 80240f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80240f8:	2300      	movs	r3, #0
 80240fa:	82a5      	strh	r5, [r4, #20]
 80240fc:	82e6      	strh	r6, [r4, #22]
 80240fe:	8323      	strh	r3, [r4, #24]
 8024100:	8363      	strh	r3, [r4, #26]
 8024102:	9904      	ldr	r1, [sp, #16]
 8024104:	eb0e 030c 	add.w	r3, lr, ip
 8024108:	42a9      	cmp	r1, r5
 802410a:	d04d      	beq.n	80241a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 802410c:	9902      	ldr	r1, [sp, #8]
 802410e:	1bd2      	subs	r2, r2, r7
 8024110:	1ac9      	subs	r1, r1, r3
 8024112:	9200      	str	r2, [sp, #0]
 8024114:	448c      	add	ip, r1
 8024116:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802411a:	fb9c fef7 	sdiv	lr, ip, r7
 802411e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024122:	f1bc 0f00 	cmp.w	ip, #0
 8024126:	bfbc      	itt	lt
 8024128:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802412c:	44bc      	addlt	ip, r7
 802412e:	f10e 0101 	add.w	r1, lr, #1
 8024132:	910d      	str	r1, [sp, #52]	; 0x34
 8024134:	9a00      	ldr	r2, [sp, #0]
 8024136:	8b20      	ldrh	r0, [r4, #24]
 8024138:	eb12 020c 	adds.w	r2, r2, ip
 802413c:	8b61      	ldrh	r1, [r4, #26]
 802413e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024142:	9200      	str	r2, [sp, #0]
 8024144:	bf5b      	ittet	pl
 8024146:	1bd2      	subpl	r2, r2, r7
 8024148:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 802414c:	46f0      	movmi	r8, lr
 802414e:	9200      	strpl	r2, [sp, #0]
 8024150:	9a07      	ldr	r2, [sp, #28]
 8024152:	4440      	add	r0, r8
 8024154:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024158:	4443      	add	r3, r8
 802415a:	4415      	add	r5, r2
 802415c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024162:	b200      	sxth	r0, r0
 8024164:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024168:	442a      	add	r2, r5
 802416a:	b209      	sxth	r1, r1
 802416c:	8320      	strh	r0, [r4, #24]
 802416e:	454a      	cmp	r2, r9
 8024170:	8361      	strh	r1, [r4, #26]
 8024172:	d016      	beq.n	80241a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024174:	ea50 0201 	orrs.w	r2, r0, r1
 8024178:	d00d      	beq.n	8024196 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802417a:	f1b8 0f00 	cmp.w	r8, #0
 802417e:	db0a      	blt.n	8024196 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024180:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024182:	4541      	cmp	r1, r8
 8024184:	dd07      	ble.n	8024196 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024186:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802418a:	4288      	cmp	r0, r1
 802418c:	d330      	bcc.n	80241f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802418e:	f04f 0201 	mov.w	r2, #1
 8024192:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024196:	f04f 0200 	mov.w	r2, #0
 802419a:	82a5      	strh	r5, [r4, #20]
 802419c:	82e6      	strh	r6, [r4, #22]
 802419e:	8322      	strh	r2, [r4, #24]
 80241a0:	8362      	strh	r2, [r4, #26]
 80241a2:	9904      	ldr	r1, [sp, #16]
 80241a4:	42a9      	cmp	r1, r5
 80241a6:	d1c5      	bne.n	8024134 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 80241a8:	9a02      	ldr	r2, [sp, #8]
 80241aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80241ac:	1ad3      	subs	r3, r2, r3
 80241ae:	8b22      	ldrh	r2, [r4, #24]
 80241b0:	3120      	adds	r1, #32
 80241b2:	441a      	add	r2, r3
 80241b4:	8322      	strh	r2, [r4, #24]
 80241b6:	9a06      	ldr	r2, [sp, #24]
 80241b8:	1a89      	subs	r1, r1, r2
 80241ba:	8b62      	ldrh	r2, [r4, #26]
 80241bc:	fb03 2301 	mla	r3, r3, r1, r2
 80241c0:	e64e      	b.n	8023e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80241c2:	f04f 33ff 	mov.w	r3, #4294967295
 80241c6:	434a      	muls	r2, r1
 80241c8:	427f      	negs	r7, r7
 80241ca:	9307      	str	r3, [sp, #28]
 80241cc:	2300      	movs	r3, #0
 80241ce:	e768      	b.n	80240a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 80241d0:	f104 0314 	add.w	r3, r4, #20
 80241d4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80241d8:	cb03      	ldmia	r3!, {r0, r1}
 80241da:	f8c8 0000 	str.w	r0, [r8]
 80241de:	f8c8 1004 	str.w	r1, [r8, #4]
 80241e2:	6923      	ldr	r3, [r4, #16]
 80241e4:	3308      	adds	r3, #8
 80241e6:	6123      	str	r3, [r4, #16]
 80241e8:	68a3      	ldr	r3, [r4, #8]
 80241ea:	3301      	adds	r3, #1
 80241ec:	60a3      	str	r3, [r4, #8]
 80241ee:	e783      	b.n	80240f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80241f0:	f104 0814 	add.w	r8, r4, #20
 80241f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80241f8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80241fc:	f8c9 0000 	str.w	r0, [r9]
 8024200:	f8c9 1004 	str.w	r1, [r9, #4]
 8024204:	6921      	ldr	r1, [r4, #16]
 8024206:	3108      	adds	r1, #8
 8024208:	6121      	str	r1, [r4, #16]
 802420a:	68a1      	ldr	r1, [r4, #8]
 802420c:	3101      	adds	r1, #1
 802420e:	60a1      	str	r1, [r4, #8]
 8024210:	e7c1      	b.n	8024196 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024212:	f104 0314 	add.w	r3, r4, #20
 8024216:	6925      	ldr	r5, [r4, #16]
 8024218:	cb03      	ldmia	r3!, {r0, r1}
 802421a:	6028      	str	r0, [r5, #0]
 802421c:	6069      	str	r1, [r5, #4]
 802421e:	6923      	ldr	r3, [r4, #16]
 8024220:	3308      	adds	r3, #8
 8024222:	6123      	str	r3, [r4, #16]
 8024224:	68a3      	ldr	r3, [r4, #8]
 8024226:	3301      	adds	r3, #1
 8024228:	60a3      	str	r3, [r4, #8]
 802422a:	e66a      	b.n	8023f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802422c:	f104 0314 	add.w	r3, r4, #20
 8024230:	6925      	ldr	r5, [r4, #16]
 8024232:	cb03      	ldmia	r3!, {r0, r1}
 8024234:	6028      	str	r0, [r5, #0]
 8024236:	6069      	str	r1, [r5, #4]
 8024238:	6923      	ldr	r3, [r4, #16]
 802423a:	3308      	adds	r3, #8
 802423c:	6123      	str	r3, [r4, #16]
 802423e:	68a3      	ldr	r3, [r4, #8]
 8024240:	3301      	adds	r3, #1
 8024242:	60a3      	str	r3, [r4, #8]
 8024244:	e6be      	b.n	8023fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024246:	f00b 031f 	and.w	r3, fp, #31
 802424a:	114f      	asrs	r7, r1, #5
 802424c:	8b20      	ldrh	r0, [r4, #24]
 802424e:	f001 011f 	and.w	r1, r1, #31
 8024252:	930f      	str	r3, [sp, #60]	; 0x3c
 8024254:	9b04      	ldr	r3, [sp, #16]
 8024256:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802425a:	429f      	cmp	r7, r3
 802425c:	d10a      	bne.n	8024274 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802425e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024260:	4418      	add	r0, r3
 8024262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024264:	4419      	add	r1, r3
 8024266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024268:	8320      	strh	r0, [r4, #24]
 802426a:	fb03 9901 	mla	r9, r3, r1, r9
 802426e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024272:	e6af      	b.n	8023fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024274:	2d00      	cmp	r5, #0
 8024276:	f2c0 809b 	blt.w	80243b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802427a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802427c:	f1c1 0320 	rsb	r3, r1, #32
 8024280:	4373      	muls	r3, r6
 8024282:	2601      	movs	r6, #1
 8024284:	960e      	str	r6, [sp, #56]	; 0x38
 8024286:	2620      	movs	r6, #32
 8024288:	960d      	str	r6, [sp, #52]	; 0x34
 802428a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802428c:	fb93 f6f5 	sdiv	r6, r3, r5
 8024290:	4411      	add	r1, r2
 8024292:	fb05 3316 	mls	r3, r5, r6, r3
 8024296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024298:	2b00      	cmp	r3, #0
 802429a:	4417      	add	r7, r2
 802429c:	9a00      	ldr	r2, [sp, #0]
 802429e:	bfbc      	itt	lt
 80242a0:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80242a4:	195b      	addlt	r3, r3, r5
 80242a6:	0412      	lsls	r2, r2, #16
 80242a8:	fb06 9101 	mla	r1, r6, r1, r9
 80242ac:	4430      	add	r0, r6
 80242ae:	eb07 0902 	add.w	r9, r7, r2
 80242b2:	9210      	str	r2, [sp, #64]	; 0x40
 80242b4:	b200      	sxth	r0, r0
 80242b6:	b209      	sxth	r1, r1
 80242b8:	45c1      	cmp	r9, r8
 80242ba:	8320      	strh	r0, [r4, #24]
 80242bc:	8361      	strh	r1, [r4, #26]
 80242be:	d017      	beq.n	80242f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80242c0:	ea50 0201 	orrs.w	r2, r0, r1
 80242c4:	d00d      	beq.n	80242e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80242c6:	f1be 0f00 	cmp.w	lr, #0
 80242ca:	db0a      	blt.n	80242e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80242cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80242ce:	4571      	cmp	r1, lr
 80242d0:	dd07      	ble.n	80242e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80242d2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80242d6:	4288      	cmp	r0, r1
 80242d8:	d372      	bcc.n	80243c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80242da:	f04f 0201 	mov.w	r2, #1
 80242de:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80242e2:	9a00      	ldr	r2, [sp, #0]
 80242e4:	82a7      	strh	r7, [r4, #20]
 80242e6:	82e2      	strh	r2, [r4, #22]
 80242e8:	f8a4 c018 	strh.w	ip, [r4, #24]
 80242ec:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80242f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80242f2:	eb02 0e06 	add.w	lr, r2, r6
 80242f6:	9a04      	ldr	r2, [sp, #16]
 80242f8:	42ba      	cmp	r2, r7
 80242fa:	d049      	beq.n	8024390 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80242fc:	9a02      	ldr	r2, [sp, #8]
 80242fe:	1b5b      	subs	r3, r3, r5
 8024300:	eba2 010e 	sub.w	r1, r2, lr
 8024304:	440e      	add	r6, r1
 8024306:	0176      	lsls	r6, r6, #5
 8024308:	fb96 f8f5 	sdiv	r8, r6, r5
 802430c:	fb05 6618 	mls	r6, r5, r8, r6
 8024310:	2e00      	cmp	r6, #0
 8024312:	bfbc      	itt	lt
 8024314:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024318:	1976      	addlt	r6, r6, r5
 802431a:	f108 0201 	add.w	r2, r8, #1
 802431e:	9211      	str	r2, [sp, #68]	; 0x44
 8024320:	199b      	adds	r3, r3, r6
 8024322:	8b20      	ldrh	r0, [r4, #24]
 8024324:	8b61      	ldrh	r1, [r4, #26]
 8024326:	bf54      	ite	pl
 8024328:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 802432c:	46c1      	movmi	r9, r8
 802432e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024330:	bf58      	it	pl
 8024332:	1b5b      	subpl	r3, r3, r5
 8024334:	4448      	add	r0, r9
 8024336:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802433a:	4417      	add	r7, r2
 802433c:	44ce      	add	lr, r9
 802433e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024340:	b200      	sxth	r0, r0
 8024342:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024346:	b209      	sxth	r1, r1
 8024348:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802434c:	443a      	add	r2, r7
 802434e:	8320      	strh	r0, [r4, #24]
 8024350:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024354:	8361      	strh	r1, [r4, #26]
 8024356:	4552      	cmp	r2, sl
 8024358:	d017      	beq.n	802438a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802435a:	ea50 0201 	orrs.w	r2, r0, r1
 802435e:	d00d      	beq.n	802437c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024360:	f1b9 0f00 	cmp.w	r9, #0
 8024364:	db0a      	blt.n	802437c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024366:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024368:	4549      	cmp	r1, r9
 802436a:	dd07      	ble.n	802437c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802436c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024370:	4288      	cmp	r0, r1
 8024372:	d336      	bcc.n	80243e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024374:	f04f 0201 	mov.w	r2, #1
 8024378:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802437c:	9a00      	ldr	r2, [sp, #0]
 802437e:	82a7      	strh	r7, [r4, #20]
 8024380:	82e2      	strh	r2, [r4, #22]
 8024382:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024386:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802438a:	9a04      	ldr	r2, [sp, #16]
 802438c:	42ba      	cmp	r2, r7
 802438e:	d1c7      	bne.n	8024320 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024390:	9b02      	ldr	r3, [sp, #8]
 8024392:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024394:	eba3 0e0e 	sub.w	lr, r3, lr
 8024398:	8b23      	ldrh	r3, [r4, #24]
 802439a:	3120      	adds	r1, #32
 802439c:	4473      	add	r3, lr
 802439e:	8323      	strh	r3, [r4, #24]
 80243a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243a2:	1ac9      	subs	r1, r1, r3
 80243a4:	8b63      	ldrh	r3, [r4, #26]
 80243a6:	fb0e 3e01 	mla	lr, lr, r1, r3
 80243aa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80243ae:	e611      	b.n	8023fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80243b0:	f04f 36ff 	mov.w	r6, #4294967295
 80243b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243b6:	426d      	negs	r5, r5
 80243b8:	960e      	str	r6, [sp, #56]	; 0x38
 80243ba:	2600      	movs	r6, #0
 80243bc:	434b      	muls	r3, r1
 80243be:	e763      	b.n	8024288 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80243c0:	f104 0e14 	add.w	lr, r4, #20
 80243c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80243c8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80243cc:	f8c8 0000 	str.w	r0, [r8]
 80243d0:	f8c8 1004 	str.w	r1, [r8, #4]
 80243d4:	6921      	ldr	r1, [r4, #16]
 80243d6:	3108      	adds	r1, #8
 80243d8:	6121      	str	r1, [r4, #16]
 80243da:	68a1      	ldr	r1, [r4, #8]
 80243dc:	3101      	adds	r1, #1
 80243de:	60a1      	str	r1, [r4, #8]
 80243e0:	e77f      	b.n	80242e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80243e2:	f104 0914 	add.w	r9, r4, #20
 80243e6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80243ea:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80243ee:	f8ca 0000 	str.w	r0, [sl]
 80243f2:	f8ca 1004 	str.w	r1, [sl, #4]
 80243f6:	6921      	ldr	r1, [r4, #16]
 80243f8:	3108      	adds	r1, #8
 80243fa:	6121      	str	r1, [r4, #16]
 80243fc:	68a1      	ldr	r1, [r4, #8]
 80243fe:	3101      	adds	r1, #1
 8024400:	60a1      	str	r1, [r4, #8]
 8024402:	e7bb      	b.n	802437c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024404:	f104 0314 	add.w	r3, r4, #20
 8024408:	6925      	ldr	r5, [r4, #16]
 802440a:	cb03      	ldmia	r3!, {r0, r1}
 802440c:	6028      	str	r0, [r5, #0]
 802440e:	6069      	str	r1, [r5, #4]
 8024410:	6923      	ldr	r3, [r4, #16]
 8024412:	3308      	adds	r3, #8
 8024414:	6123      	str	r3, [r4, #16]
 8024416:	68a3      	ldr	r3, [r4, #8]
 8024418:	3301      	adds	r3, #1
 802441a:	60a3      	str	r3, [r4, #8]
 802441c:	e5fd      	b.n	802401a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802441e:	f104 0314 	add.w	r3, r4, #20
 8024422:	6925      	ldr	r5, [r4, #16]
 8024424:	cb03      	ldmia	r3!, {r0, r1}
 8024426:	6028      	str	r0, [r5, #0]
 8024428:	6069      	str	r1, [r5, #4]
 802442a:	6923      	ldr	r3, [r4, #16]
 802442c:	3308      	adds	r3, #8
 802442e:	6123      	str	r3, [r4, #16]
 8024430:	68a3      	ldr	r3, [r4, #8]
 8024432:	3301      	adds	r3, #1
 8024434:	60a3      	str	r3, [r4, #8]
 8024436:	e625      	b.n	8024084 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024438:	9b05      	ldr	r3, [sp, #20]
 802443a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802443e:	f00b 081f 	and.w	r8, fp, #31
 8024442:	8b20      	ldrh	r0, [r4, #24]
 8024444:	f003 031f 	and.w	r3, r3, #31
 8024448:	4577      	cmp	r7, lr
 802444a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802444e:	9302      	str	r3, [sp, #8]
 8024450:	9b03      	ldr	r3, [sp, #12]
 8024452:	eba3 050c 	sub.w	r5, r3, ip
 8024456:	d108      	bne.n	802446a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8024458:	9b02      	ldr	r3, [sp, #8]
 802445a:	4428      	add	r0, r5
 802445c:	4498      	add	r8, r3
 802445e:	8320      	strh	r0, [r4, #24]
 8024460:	fb05 9508 	mla	r5, r5, r8, r9
 8024464:	8365      	strh	r5, [r4, #26]
 8024466:	f7ff bb4f 	b.w	8023b08 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802446a:	9b05      	ldr	r3, [sp, #20]
 802446c:	ebb3 030b 	subs.w	r3, r3, fp
 8024470:	f100 809c 	bmi.w	80245ac <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8024474:	f1c8 0120 	rsb	r1, r8, #32
 8024478:	2201      	movs	r2, #1
 802447a:	f04f 0b20 	mov.w	fp, #32
 802447e:	434d      	muls	r5, r1
 8024480:	9201      	str	r2, [sp, #4]
 8024482:	9a01      	ldr	r2, [sp, #4]
 8024484:	44d8      	add	r8, fp
 8024486:	fb95 f6f3 	sdiv	r6, r5, r3
 802448a:	fb03 5516 	mls	r5, r3, r6, r5
 802448e:	4417      	add	r7, r2
 8024490:	9a00      	ldr	r2, [sp, #0]
 8024492:	2d00      	cmp	r5, #0
 8024494:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8024498:	bfbc      	itt	lt
 802449a:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802449e:	18ed      	addlt	r5, r5, r3
 80244a0:	eb07 0a02 	add.w	sl, r7, r2
 80244a4:	9204      	str	r2, [sp, #16]
 80244a6:	fb06 9808 	mla	r8, r6, r8, r9
 80244aa:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80244ae:	4430      	add	r0, r6
 80244b0:	fa0f f188 	sxth.w	r1, r8
 80244b4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80244b8:	b200      	sxth	r0, r0
 80244ba:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80244be:	8361      	strh	r1, [r4, #26]
 80244c0:	8320      	strh	r0, [r4, #24]
 80244c2:	45ca      	cmp	sl, r9
 80244c4:	d015      	beq.n	80244f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80244c6:	ea50 0201 	orrs.w	r2, r0, r1
 80244ca:	d00c      	beq.n	80244e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80244cc:	f1b8 0f00 	cmp.w	r8, #0
 80244d0:	db09      	blt.n	80244e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80244d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80244d4:	4541      	cmp	r1, r8
 80244d6:	dd06      	ble.n	80244e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80244d8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80244dc:	4288      	cmp	r0, r1
 80244de:	d36e      	bcc.n	80245be <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80244e0:	2101      	movs	r1, #1
 80244e2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80244e6:	2100      	movs	r1, #0
 80244e8:	9a00      	ldr	r2, [sp, #0]
 80244ea:	82a7      	strh	r7, [r4, #20]
 80244ec:	82e2      	strh	r2, [r4, #22]
 80244ee:	8321      	strh	r1, [r4, #24]
 80244f0:	8361      	strh	r1, [r4, #26]
 80244f2:	45be      	cmp	lr, r7
 80244f4:	44b4      	add	ip, r6
 80244f6:	d048      	beq.n	802458a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 80244f8:	9a03      	ldr	r2, [sp, #12]
 80244fa:	1aed      	subs	r5, r5, r3
 80244fc:	eba2 010c 	sub.w	r1, r2, ip
 8024500:	440e      	add	r6, r1
 8024502:	0176      	lsls	r6, r6, #5
 8024504:	fb96 f8f3 	sdiv	r8, r6, r3
 8024508:	fb03 6618 	mls	r6, r3, r8, r6
 802450c:	2e00      	cmp	r6, #0
 802450e:	bfbc      	itt	lt
 8024510:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024514:	18f6      	addlt	r6, r6, r3
 8024516:	f108 0201 	add.w	r2, r8, #1
 802451a:	9205      	str	r2, [sp, #20]
 802451c:	19ad      	adds	r5, r5, r6
 802451e:	8b20      	ldrh	r0, [r4, #24]
 8024520:	8b61      	ldrh	r1, [r4, #26]
 8024522:	bf54      	ite	pl
 8024524:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024528:	46c1      	movmi	r9, r8
 802452a:	9a01      	ldr	r2, [sp, #4]
 802452c:	bf58      	it	pl
 802452e:	1aed      	subpl	r5, r5, r3
 8024530:	4448      	add	r0, r9
 8024532:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024536:	4417      	add	r7, r2
 8024538:	44cc      	add	ip, r9
 802453a:	9a04      	ldr	r2, [sp, #16]
 802453c:	b200      	sxth	r0, r0
 802453e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024542:	b209      	sxth	r1, r1
 8024544:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024548:	443a      	add	r2, r7
 802454a:	8320      	strh	r0, [r4, #24]
 802454c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024550:	8361      	strh	r1, [r4, #26]
 8024552:	4552      	cmp	r2, sl
 8024554:	d017      	beq.n	8024586 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8024556:	ea50 0201 	orrs.w	r2, r0, r1
 802455a:	d00d      	beq.n	8024578 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802455c:	f1b9 0f00 	cmp.w	r9, #0
 8024560:	db0a      	blt.n	8024578 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024562:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024564:	4549      	cmp	r1, r9
 8024566:	dd07      	ble.n	8024578 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024568:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802456c:	4288      	cmp	r0, r1
 802456e:	d337      	bcc.n	80245e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8024570:	f04f 0201 	mov.w	r2, #1
 8024574:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024578:	9a00      	ldr	r2, [sp, #0]
 802457a:	82a7      	strh	r7, [r4, #20]
 802457c:	82e2      	strh	r2, [r4, #22]
 802457e:	f04f 0200 	mov.w	r2, #0
 8024582:	8322      	strh	r2, [r4, #24]
 8024584:	8362      	strh	r2, [r4, #26]
 8024586:	45be      	cmp	lr, r7
 8024588:	d1c8      	bne.n	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802458a:	9b03      	ldr	r3, [sp, #12]
 802458c:	8b62      	ldrh	r2, [r4, #26]
 802458e:	eba3 0c0c 	sub.w	ip, r3, ip
 8024592:	8b23      	ldrh	r3, [r4, #24]
 8024594:	4463      	add	r3, ip
 8024596:	8323      	strh	r3, [r4, #24]
 8024598:	9b02      	ldr	r3, [sp, #8]
 802459a:	3320      	adds	r3, #32
 802459c:	eba3 030b 	sub.w	r3, r3, fp
 80245a0:	fb0c 2c03 	mla	ip, ip, r3, r2
 80245a4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80245a8:	f7ff baae 	b.w	8023b08 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80245ac:	f04f 32ff 	mov.w	r2, #4294967295
 80245b0:	fb05 f508 	mul.w	r5, r5, r8
 80245b4:	425b      	negs	r3, r3
 80245b6:	f04f 0b00 	mov.w	fp, #0
 80245ba:	9201      	str	r2, [sp, #4]
 80245bc:	e761      	b.n	8024482 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80245be:	f104 0814 	add.w	r8, r4, #20
 80245c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80245c6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80245ca:	f8c9 0000 	str.w	r0, [r9]
 80245ce:	f8c9 1004 	str.w	r1, [r9, #4]
 80245d2:	6921      	ldr	r1, [r4, #16]
 80245d4:	3108      	adds	r1, #8
 80245d6:	6121      	str	r1, [r4, #16]
 80245d8:	68a1      	ldr	r1, [r4, #8]
 80245da:	3101      	adds	r1, #1
 80245dc:	60a1      	str	r1, [r4, #8]
 80245de:	e782      	b.n	80244e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80245e0:	f104 0914 	add.w	r9, r4, #20
 80245e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80245e8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80245ec:	f8ca 0000 	str.w	r0, [sl]
 80245f0:	f8ca 1004 	str.w	r1, [sl, #4]
 80245f4:	6921      	ldr	r1, [r4, #16]
 80245f6:	3108      	adds	r1, #8
 80245f8:	6121      	str	r1, [r4, #16]
 80245fa:	68a1      	ldr	r1, [r4, #8]
 80245fc:	3101      	adds	r1, #1
 80245fe:	60a1      	str	r1, [r4, #8]
 8024600:	e7ba      	b.n	8024578 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08024602 <_ZN8touchgfx7Outline6lineToEii>:
 8024602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024604:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024606:	4604      	mov	r4, r0
 8024608:	460d      	mov	r5, r1
 802460a:	4616      	mov	r6, r2
 802460c:	079b      	lsls	r3, r3, #30
 802460e:	d526      	bpl.n	802465e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024610:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024614:	ea85 0001 	eor.w	r0, r5, r1
 8024618:	ea86 0302 	eor.w	r3, r6, r2
 802461c:	4303      	orrs	r3, r0
 802461e:	d01e      	beq.n	802465e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024620:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024622:	114b      	asrs	r3, r1, #5
 8024624:	9600      	str	r6, [sp, #0]
 8024626:	4283      	cmp	r3, r0
 8024628:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802462a:	bfb8      	it	lt
 802462c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802462e:	3301      	adds	r3, #1
 8024630:	4283      	cmp	r3, r0
 8024632:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024634:	bfc8      	it	gt
 8024636:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024638:	116b      	asrs	r3, r5, #5
 802463a:	4283      	cmp	r3, r0
 802463c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802463e:	bfb8      	it	lt
 8024640:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024642:	3301      	adds	r3, #1
 8024644:	4283      	cmp	r3, r0
 8024646:	4620      	mov	r0, r4
 8024648:	bfc8      	it	gt
 802464a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802464c:	462b      	mov	r3, r5
 802464e:	f7ff f9e3 	bl	8023a18 <_ZN8touchgfx7Outline10renderLineEiiii>
 8024652:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024654:	f043 0301 	orr.w	r3, r3, #1
 8024658:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802465c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802465e:	b002      	add	sp, #8
 8024660:	bd70      	pop	{r4, r5, r6, pc}

08024662 <_ZN8touchgfx7Outline6moveToEii>:
 8024662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024664:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024666:	4615      	mov	r5, r2
 8024668:	4604      	mov	r4, r0
 802466a:	460e      	mov	r6, r1
 802466c:	079a      	lsls	r2, r3, #30
 802466e:	d401      	bmi.n	8024674 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024670:	f7ff f98c 	bl	802398c <_ZN8touchgfx7Outline5resetEv>
 8024674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024676:	07db      	lsls	r3, r3, #31
 8024678:	d504      	bpl.n	8024684 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802467a:	4620      	mov	r0, r4
 802467c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024680:	f7ff ffbf 	bl	8024602 <_ZN8touchgfx7Outline6lineToEii>
 8024684:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8024688:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802468c:	116f      	asrs	r7, r5, #5
 802468e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024692:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8024696:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802469a:	4291      	cmp	r1, r2
 802469c:	d015      	beq.n	80246ca <_ZN8touchgfx7Outline6moveToEii+0x68>
 802469e:	8b61      	ldrh	r1, [r4, #26]
 80246a0:	8b22      	ldrh	r2, [r4, #24]
 80246a2:	430a      	orrs	r2, r1
 80246a4:	d00b      	beq.n	80246be <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80246a6:	2b00      	cmp	r3, #0
 80246a8:	db09      	blt.n	80246be <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80246aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80246ac:	429a      	cmp	r2, r3
 80246ae:	dd06      	ble.n	80246be <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80246b0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80246b4:	429a      	cmp	r2, r3
 80246b6:	d30d      	bcc.n	80246d4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80246b8:	2301      	movs	r3, #1
 80246ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80246be:	2300      	movs	r3, #0
 80246c0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80246c4:	82e7      	strh	r7, [r4, #22]
 80246c6:	8323      	strh	r3, [r4, #24]
 80246c8:	8363      	strh	r3, [r4, #26]
 80246ca:	61e6      	str	r6, [r4, #28]
 80246cc:	62a5      	str	r5, [r4, #40]	; 0x28
 80246ce:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80246d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80246d4:	f104 0314 	add.w	r3, r4, #20
 80246d8:	6922      	ldr	r2, [r4, #16]
 80246da:	cb03      	ldmia	r3!, {r0, r1}
 80246dc:	6010      	str	r0, [r2, #0]
 80246de:	6051      	str	r1, [r2, #4]
 80246e0:	6923      	ldr	r3, [r4, #16]
 80246e2:	3308      	adds	r3, #8
 80246e4:	6123      	str	r3, [r4, #16]
 80246e6:	68a3      	ldr	r3, [r4, #8]
 80246e8:	3301      	adds	r3, #1
 80246ea:	60a3      	str	r3, [r4, #8]
 80246ec:	e7e7      	b.n	80246be <_ZN8touchgfx7Outline6moveToEii+0x5c>

080246ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80246ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246f2:	b0d1      	sub	sp, #324	; 0x144
 80246f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80246f8:	466c      	mov	r4, sp
 80246fa:	1a0d      	subs	r5, r1, r0
 80246fc:	f100 0208 	add.w	r2, r0, #8
 8024700:	2d48      	cmp	r5, #72	; 0x48
 8024702:	f340 80ba 	ble.w	802487a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024706:	112d      	asrs	r5, r5, #4
 8024708:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802470c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8024710:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024714:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024718:	f9b0 8000 	ldrsh.w	r8, [r0]
 802471c:	681e      	ldr	r6, [r3, #0]
 802471e:	6006      	str	r6, [r0, #0]
 8024720:	685e      	ldr	r6, [r3, #4]
 8024722:	6046      	str	r6, [r0, #4]
 8024724:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024728:	f8a3 c004 	strh.w	ip, [r3, #4]
 802472c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8024730:	80df      	strh	r7, [r3, #6]
 8024732:	f1a1 0308 	sub.w	r3, r1, #8
 8024736:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802473a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802473e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8024742:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024746:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802474a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802474e:	45ac      	cmp	ip, r5
 8024750:	dd0f      	ble.n	8024772 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8024752:	681d      	ldr	r5, [r3, #0]
 8024754:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024758:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802475c:	6015      	str	r5, [r2, #0]
 802475e:	685d      	ldr	r5, [r3, #4]
 8024760:	6055      	str	r5, [r2, #4]
 8024762:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024766:	f821 6c06 	strh.w	r6, [r1, #-6]
 802476a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802476e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024772:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8024776:	f9b0 7000 	ldrsh.w	r7, [r0]
 802477a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802477e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024782:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024786:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802478a:	4565      	cmp	r5, ip
 802478c:	dd0d      	ble.n	80247aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802478e:	6815      	ldr	r5, [r2, #0]
 8024790:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024794:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024798:	6005      	str	r5, [r0, #0]
 802479a:	6855      	ldr	r5, [r2, #4]
 802479c:	8107      	strh	r7, [r0, #8]
 802479e:	6045      	str	r5, [r0, #4]
 80247a0:	8146      	strh	r6, [r0, #10]
 80247a2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80247a6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80247aa:	f9b0 7000 	ldrsh.w	r7, [r0]
 80247ae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80247b2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80247b6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80247ba:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80247be:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80247c2:	45ac      	cmp	ip, r5
 80247c4:	dd0f      	ble.n	80247e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80247c6:	681d      	ldr	r5, [r3, #0]
 80247c8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80247cc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80247d0:	6005      	str	r5, [r0, #0]
 80247d2:	685d      	ldr	r5, [r3, #4]
 80247d4:	6045      	str	r5, [r0, #4]
 80247d6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80247da:	f821 6c06 	strh.w	r6, [r1, #-6]
 80247de:	f821 ec04 	strh.w	lr, [r1, #-4]
 80247e2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80247e6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80247ea:	f102 0508 	add.w	r5, r2, #8
 80247ee:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80247f2:	f9b0 e000 	ldrsh.w	lr, [r0]
 80247f6:	462f      	mov	r7, r5
 80247f8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80247fc:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024800:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024804:	45b2      	cmp	sl, r6
 8024806:	dc18      	bgt.n	802483a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024808:	3b08      	subs	r3, #8
 802480a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802480e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024812:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024816:	45b2      	cmp	sl, r6
 8024818:	dbf6      	blt.n	8024808 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802481a:	42ab      	cmp	r3, r5
 802481c:	681e      	ldr	r6, [r3, #0]
 802481e:	d30e      	bcc.n	802483e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024820:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024824:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024828:	602e      	str	r6, [r5, #0]
 802482a:	685e      	ldr	r6, [r3, #4]
 802482c:	606e      	str	r6, [r5, #4]
 802482e:	f8a3 9000 	strh.w	r9, [r3]
 8024832:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024836:	809f      	strh	r7, [r3, #4]
 8024838:	80da      	strh	r2, [r3, #6]
 802483a:	462a      	mov	r2, r5
 802483c:	e7d3      	b.n	80247e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802483e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024842:	6006      	str	r6, [r0, #0]
 8024844:	685e      	ldr	r6, [r3, #4]
 8024846:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802484a:	6046      	str	r6, [r0, #4]
 802484c:	1a1e      	subs	r6, r3, r0
 802484e:	80da      	strh	r2, [r3, #6]
 8024850:	1b4a      	subs	r2, r1, r5
 8024852:	f8a3 e000 	strh.w	lr, [r3]
 8024856:	10d2      	asrs	r2, r2, #3
 8024858:	f8a3 c002 	strh.w	ip, [r3, #2]
 802485c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024860:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024864:	bfb5      	itete	lt
 8024866:	e9c4 0300 	strdlt	r0, r3, [r4]
 802486a:	4607      	movge	r7, r0
 802486c:	460b      	movlt	r3, r1
 802486e:	e9c4 5100 	strdge	r5, r1, [r4]
 8024872:	4638      	mov	r0, r7
 8024874:	3408      	adds	r4, #8
 8024876:	4619      	mov	r1, r3
 8024878:	e73f      	b.n	80246fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802487a:	4291      	cmp	r1, r2
 802487c:	d925      	bls.n	80248ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802487e:	f1a2 0310 	sub.w	r3, r2, #16
 8024882:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8024886:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802488a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802488e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024892:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8024896:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802489a:	42b5      	cmp	r5, r6
 802489c:	dd13      	ble.n	80248c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802489e:	461d      	mov	r5, r3
 80248a0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80248a4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80248a8:	3b08      	subs	r3, #8
 80248aa:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80248ae:	619e      	str	r6, [r3, #24]
 80248b0:	42a8      	cmp	r0, r5
 80248b2:	686e      	ldr	r6, [r5, #4]
 80248b4:	f8a3 c010 	strh.w	ip, [r3, #16]
 80248b8:	61de      	str	r6, [r3, #28]
 80248ba:	825f      	strh	r7, [r3, #18]
 80248bc:	f8a3 8014 	strh.w	r8, [r3, #20]
 80248c0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80248c4:	d1dd      	bne.n	8024882 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80248c6:	3208      	adds	r2, #8
 80248c8:	e7d7      	b.n	802487a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80248ca:	466b      	mov	r3, sp
 80248cc:	429c      	cmp	r4, r3
 80248ce:	d903      	bls.n	80248d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80248d0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80248d4:	3c08      	subs	r4, #8
 80248d6:	e710      	b.n	80246fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80248d8:	b051      	add	sp, #324	; 0x144
 80248da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080248de <_ZN8touchgfx7Outline9sortCellsEv>:
 80248de:	6881      	ldr	r1, [r0, #8]
 80248e0:	b111      	cbz	r1, 80248e8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80248e2:	68c0      	ldr	r0, [r0, #12]
 80248e4:	f7ff bf03 	b.w	80246ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80248e8:	4770      	bx	lr

080248ea <_ZN8touchgfx7Outline8getCellsEv>:
 80248ea:	b510      	push	{r4, lr}
 80248ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80248ee:	4604      	mov	r4, r0
 80248f0:	07da      	lsls	r2, r3, #31
 80248f2:	d507      	bpl.n	8024904 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80248f4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80248f8:	f7ff fe83 	bl	8024602 <_ZN8touchgfx7Outline6lineToEii>
 80248fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80248fe:	f023 0301 	bic.w	r3, r3, #1
 8024902:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024906:	079b      	lsls	r3, r3, #30
 8024908:	d51a      	bpl.n	8024940 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802490a:	8b62      	ldrh	r2, [r4, #26]
 802490c:	8b23      	ldrh	r3, [r4, #24]
 802490e:	4313      	orrs	r3, r2
 8024910:	d00d      	beq.n	802492e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024912:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024916:	2b00      	cmp	r3, #0
 8024918:	db09      	blt.n	802492e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802491a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802491c:	4293      	cmp	r3, r2
 802491e:	da06      	bge.n	802492e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024920:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024924:	429a      	cmp	r2, r3
 8024926:	d80d      	bhi.n	8024944 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024928:	2301      	movs	r3, #1
 802492a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802492e:	68a0      	ldr	r0, [r4, #8]
 8024930:	b138      	cbz	r0, 8024942 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024932:	4620      	mov	r0, r4
 8024934:	f7ff ffd3 	bl	80248de <_ZN8touchgfx7Outline9sortCellsEv>
 8024938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802493a:	f023 0302 	bic.w	r3, r3, #2
 802493e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024940:	68e0      	ldr	r0, [r4, #12]
 8024942:	bd10      	pop	{r4, pc}
 8024944:	f104 0314 	add.w	r3, r4, #20
 8024948:	6922      	ldr	r2, [r4, #16]
 802494a:	cb03      	ldmia	r3!, {r0, r1}
 802494c:	6010      	str	r0, [r2, #0]
 802494e:	6051      	str	r1, [r2, #4]
 8024950:	6923      	ldr	r3, [r4, #16]
 8024952:	3308      	adds	r3, #8
 8024954:	6123      	str	r3, [r4, #16]
 8024956:	68a3      	ldr	r3, [r4, #8]
 8024958:	3301      	adds	r3, #1
 802495a:	60a3      	str	r3, [r4, #8]
 802495c:	e7e7      	b.n	802492e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802495e <_ZN8touchgfx8ScanlineD1Ev>:
 802495e:	4770      	bx	lr

08024960 <_ZN8touchgfx8ScanlineD0Ev>:
 8024960:	b510      	push	{r4, lr}
 8024962:	4604      	mov	r4, r0
 8024964:	2124      	movs	r1, #36	; 0x24
 8024966:	f000 f87a 	bl	8024a5e <_ZdlPvj>
 802496a:	4620      	mov	r0, r4
 802496c:	bd10      	pop	{r4, pc}

0802496e <_ZN8touchgfx8Scanline5resetEv>:
 802496e:	b510      	push	{r4, lr}
 8024970:	4604      	mov	r4, r0
 8024972:	f7f2 fa2f 	bl	8016dd4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024976:	61a0      	str	r0, [r4, #24]
 8024978:	f7f2 fa32 	bl	8016de0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802497c:	61e0      	str	r0, [r4, #28]
 802497e:	f7f2 fa35 	bl	8016dec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024982:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024986:	6220      	str	r0, [r4, #32]
 8024988:	6160      	str	r0, [r4, #20]
 802498a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802498e:	69e3      	ldr	r3, [r4, #28]
 8024990:	6123      	str	r3, [r4, #16]
 8024992:	2300      	movs	r3, #0
 8024994:	60e3      	str	r3, [r4, #12]
 8024996:	bd10      	pop	{r4, pc}

08024998 <_ZN8touchgfx8ScanlineC1Ev>:
 8024998:	4b07      	ldr	r3, [pc, #28]	; (80249b8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802499a:	b510      	push	{r4, lr}
 802499c:	6003      	str	r3, [r0, #0]
 802499e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80249a2:	4604      	mov	r4, r0
 80249a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80249a8:	2300      	movs	r3, #0
 80249aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80249ae:	6143      	str	r3, [r0, #20]
 80249b0:	f7ff ffdd 	bl	802496e <_ZN8touchgfx8Scanline5resetEv>
 80249b4:	4620      	mov	r0, r4
 80249b6:	bd10      	pop	{r4, pc}
 80249b8:	0802b554 	.word	0x0802b554

080249bc <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80249bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80249c0:	1e0c      	subs	r4, r1, #0
 80249c2:	4605      	mov	r5, r0
 80249c4:	4617      	mov	r7, r2
 80249c6:	461e      	mov	r6, r3
 80249c8:	da03      	bge.n	80249d2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80249ca:	4426      	add	r6, r4
 80249cc:	2e01      	cmp	r6, #1
 80249ce:	d421      	bmi.n	8024a14 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80249d0:	2400      	movs	r4, #0
 80249d2:	f7f2 f9f9 	bl	8016dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80249d6:	42a0      	cmp	r0, r4
 80249d8:	d91c      	bls.n	8024a14 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80249da:	eb04 0806 	add.w	r8, r4, r6
 80249de:	f7f2 f9f3 	bl	8016dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80249e2:	4580      	cmp	r8, r0
 80249e4:	d902      	bls.n	80249ec <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80249e6:	f7f2 f9ef 	bl	8016dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80249ea:	1b06      	subs	r6, r0, r4
 80249ec:	69a8      	ldr	r0, [r5, #24]
 80249ee:	4632      	mov	r2, r6
 80249f0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80249f4:	4420      	add	r0, r4
 80249f6:	f7f4 fc06 	bl	8019206 <_ZN8touchgfx6memsetEPvhm>
 80249fa:	686b      	ldr	r3, [r5, #4]
 80249fc:	b2b2      	uxth	r2, r6
 80249fe:	3301      	adds	r3, #1
 8024a00:	42a3      	cmp	r3, r4
 8024a02:	696b      	ldr	r3, [r5, #20]
 8024a04:	d108      	bne.n	8024a18 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024a06:	8819      	ldrh	r1, [r3, #0]
 8024a08:	440a      	add	r2, r1
 8024a0a:	801a      	strh	r2, [r3, #0]
 8024a0c:	3c01      	subs	r4, #1
 8024a0e:	4434      	add	r4, r6
 8024a10:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a18:	1c99      	adds	r1, r3, #2
 8024a1a:	6169      	str	r1, [r5, #20]
 8024a1c:	805a      	strh	r2, [r3, #2]
 8024a1e:	692b      	ldr	r3, [r5, #16]
 8024a20:	1c9a      	adds	r2, r3, #2
 8024a22:	612a      	str	r2, [r5, #16]
 8024a24:	805c      	strh	r4, [r3, #2]
 8024a26:	68eb      	ldr	r3, [r5, #12]
 8024a28:	3301      	adds	r3, #1
 8024a2a:	60eb      	str	r3, [r5, #12]
 8024a2c:	e7ee      	b.n	8024a0c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024a2e <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024a2e:	2200      	movs	r2, #0
 8024a30:	6002      	str	r2, [r0, #0]
 8024a32:	7102      	strb	r2, [r0, #4]
 8024a34:	6102      	str	r2, [r0, #16]
 8024a36:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024a3a:	4770      	bx	lr

08024a3c <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024a3c:	4770      	bx	lr

08024a3e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024a3e:	6083      	str	r3, [r0, #8]
 8024a40:	9b00      	ldr	r3, [sp, #0]
 8024a42:	6001      	str	r1, [r0, #0]
 8024a44:	60c3      	str	r3, [r0, #12]
 8024a46:	9b01      	ldr	r3, [sp, #4]
 8024a48:	7102      	strb	r2, [r0, #4]
 8024a4a:	6103      	str	r3, [r0, #16]
 8024a4c:	4770      	bx	lr

08024a4e <__aeabi_atexit>:
 8024a4e:	460b      	mov	r3, r1
 8024a50:	4601      	mov	r1, r0
 8024a52:	4618      	mov	r0, r3
 8024a54:	f000 b852 	b.w	8024afc <__cxa_atexit>

08024a58 <__cxa_pure_virtual>:
 8024a58:	b508      	push	{r3, lr}
 8024a5a:	f000 f81f 	bl	8024a9c <_ZSt9terminatev>

08024a5e <_ZdlPvj>:
 8024a5e:	f000 b80f 	b.w	8024a80 <_ZdlPv>

08024a62 <__cxa_guard_acquire>:
 8024a62:	6803      	ldr	r3, [r0, #0]
 8024a64:	07db      	lsls	r3, r3, #31
 8024a66:	d406      	bmi.n	8024a76 <__cxa_guard_acquire+0x14>
 8024a68:	7843      	ldrb	r3, [r0, #1]
 8024a6a:	b103      	cbz	r3, 8024a6e <__cxa_guard_acquire+0xc>
 8024a6c:	deff      	udf	#255	; 0xff
 8024a6e:	2301      	movs	r3, #1
 8024a70:	7043      	strb	r3, [r0, #1]
 8024a72:	4618      	mov	r0, r3
 8024a74:	4770      	bx	lr
 8024a76:	2000      	movs	r0, #0
 8024a78:	4770      	bx	lr

08024a7a <__cxa_guard_release>:
 8024a7a:	2301      	movs	r3, #1
 8024a7c:	6003      	str	r3, [r0, #0]
 8024a7e:	4770      	bx	lr

08024a80 <_ZdlPv>:
 8024a80:	f000 b888 	b.w	8024b94 <free>

08024a84 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024a84:	b508      	push	{r3, lr}
 8024a86:	4780      	blx	r0
 8024a88:	f000 f80d 	bl	8024aa6 <abort>

08024a8c <_ZSt13get_terminatev>:
 8024a8c:	4b02      	ldr	r3, [pc, #8]	; (8024a98 <_ZSt13get_terminatev+0xc>)
 8024a8e:	6818      	ldr	r0, [r3, #0]
 8024a90:	f3bf 8f5b 	dmb	ish
 8024a94:	4770      	bx	lr
 8024a96:	bf00      	nop
 8024a98:	200000b4 	.word	0x200000b4

08024a9c <_ZSt9terminatev>:
 8024a9c:	b508      	push	{r3, lr}
 8024a9e:	f7ff fff5 	bl	8024a8c <_ZSt13get_terminatev>
 8024aa2:	f7ff ffef 	bl	8024a84 <_ZN10__cxxabiv111__terminateEPFvvE>

08024aa6 <abort>:
 8024aa6:	b508      	push	{r3, lr}
 8024aa8:	2006      	movs	r0, #6
 8024aaa:	f000 fc37 	bl	802531c <raise>
 8024aae:	2001      	movs	r0, #1
 8024ab0:	f001 f856 	bl	8025b60 <_exit>

08024ab4 <__assert_func>:
 8024ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024ab6:	461c      	mov	r4, r3
 8024ab8:	4b09      	ldr	r3, [pc, #36]	; (8024ae0 <__assert_func+0x2c>)
 8024aba:	681b      	ldr	r3, [r3, #0]
 8024abc:	4605      	mov	r5, r0
 8024abe:	68d8      	ldr	r0, [r3, #12]
 8024ac0:	b152      	cbz	r2, 8024ad8 <__assert_func+0x24>
 8024ac2:	4b08      	ldr	r3, [pc, #32]	; (8024ae4 <__assert_func+0x30>)
 8024ac4:	9100      	str	r1, [sp, #0]
 8024ac6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024aca:	4907      	ldr	r1, [pc, #28]	; (8024ae8 <__assert_func+0x34>)
 8024acc:	462b      	mov	r3, r5
 8024ace:	4622      	mov	r2, r4
 8024ad0:	f000 f822 	bl	8024b18 <fiprintf>
 8024ad4:	f7ff ffe7 	bl	8024aa6 <abort>
 8024ad8:	4b04      	ldr	r3, [pc, #16]	; (8024aec <__assert_func+0x38>)
 8024ada:	461a      	mov	r2, r3
 8024adc:	e7f2      	b.n	8024ac4 <__assert_func+0x10>
 8024ade:	bf00      	nop
 8024ae0:	200000b8 	.word	0x200000b8
 8024ae4:	0802b55c 	.word	0x0802b55c
 8024ae8:	0802b569 	.word	0x0802b569
 8024aec:	0802b597 	.word	0x0802b597

08024af0 <atexit>:
 8024af0:	2300      	movs	r3, #0
 8024af2:	4601      	mov	r1, r0
 8024af4:	461a      	mov	r2, r3
 8024af6:	4618      	mov	r0, r3
 8024af8:	f000 bcf4 	b.w	80254e4 <__register_exitproc>

08024afc <__cxa_atexit>:
 8024afc:	b510      	push	{r4, lr}
 8024afe:	4c05      	ldr	r4, [pc, #20]	; (8024b14 <__cxa_atexit+0x18>)
 8024b00:	4613      	mov	r3, r2
 8024b02:	b12c      	cbz	r4, 8024b10 <__cxa_atexit+0x14>
 8024b04:	460a      	mov	r2, r1
 8024b06:	4601      	mov	r1, r0
 8024b08:	2002      	movs	r0, #2
 8024b0a:	f000 fceb 	bl	80254e4 <__register_exitproc>
 8024b0e:	bd10      	pop	{r4, pc}
 8024b10:	4620      	mov	r0, r4
 8024b12:	e7fc      	b.n	8024b0e <__cxa_atexit+0x12>
 8024b14:	080254e5 	.word	0x080254e5

08024b18 <fiprintf>:
 8024b18:	b40e      	push	{r1, r2, r3}
 8024b1a:	b503      	push	{r0, r1, lr}
 8024b1c:	4601      	mov	r1, r0
 8024b1e:	ab03      	add	r3, sp, #12
 8024b20:	4805      	ldr	r0, [pc, #20]	; (8024b38 <fiprintf+0x20>)
 8024b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8024b26:	6800      	ldr	r0, [r0, #0]
 8024b28:	9301      	str	r3, [sp, #4]
 8024b2a:	f000 f921 	bl	8024d70 <_vfiprintf_r>
 8024b2e:	b002      	add	sp, #8
 8024b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8024b34:	b003      	add	sp, #12
 8024b36:	4770      	bx	lr
 8024b38:	200000b8 	.word	0x200000b8

08024b3c <__libc_init_array>:
 8024b3c:	b570      	push	{r4, r5, r6, lr}
 8024b3e:	4e0d      	ldr	r6, [pc, #52]	; (8024b74 <__libc_init_array+0x38>)
 8024b40:	4c0d      	ldr	r4, [pc, #52]	; (8024b78 <__libc_init_array+0x3c>)
 8024b42:	1ba4      	subs	r4, r4, r6
 8024b44:	10a4      	asrs	r4, r4, #2
 8024b46:	2500      	movs	r5, #0
 8024b48:	42a5      	cmp	r5, r4
 8024b4a:	d109      	bne.n	8024b60 <__libc_init_array+0x24>
 8024b4c:	4e0b      	ldr	r6, [pc, #44]	; (8024b7c <__libc_init_array+0x40>)
 8024b4e:	4c0c      	ldr	r4, [pc, #48]	; (8024b80 <__libc_init_array+0x44>)
 8024b50:	f001 f808 	bl	8025b64 <_init>
 8024b54:	1ba4      	subs	r4, r4, r6
 8024b56:	10a4      	asrs	r4, r4, #2
 8024b58:	2500      	movs	r5, #0
 8024b5a:	42a5      	cmp	r5, r4
 8024b5c:	d105      	bne.n	8024b6a <__libc_init_array+0x2e>
 8024b5e:	bd70      	pop	{r4, r5, r6, pc}
 8024b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024b64:	4798      	blx	r3
 8024b66:	3501      	adds	r5, #1
 8024b68:	e7ee      	b.n	8024b48 <__libc_init_array+0xc>
 8024b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024b6e:	4798      	blx	r3
 8024b70:	3501      	adds	r5, #1
 8024b72:	e7f2      	b.n	8024b5a <__libc_init_array+0x1e>
 8024b74:	0802b63c 	.word	0x0802b63c
 8024b78:	0802b63c 	.word	0x0802b63c
 8024b7c:	0802b63c 	.word	0x0802b63c
 8024b80:	0802b650 	.word	0x0802b650

08024b84 <malloc>:
 8024b84:	4b02      	ldr	r3, [pc, #8]	; (8024b90 <malloc+0xc>)
 8024b86:	4601      	mov	r1, r0
 8024b88:	6818      	ldr	r0, [r3, #0]
 8024b8a:	f000 b86d 	b.w	8024c68 <_malloc_r>
 8024b8e:	bf00      	nop
 8024b90:	200000b8 	.word	0x200000b8

08024b94 <free>:
 8024b94:	4b02      	ldr	r3, [pc, #8]	; (8024ba0 <free+0xc>)
 8024b96:	4601      	mov	r1, r0
 8024b98:	6818      	ldr	r0, [r3, #0]
 8024b9a:	f000 b817 	b.w	8024bcc <_free_r>
 8024b9e:	bf00      	nop
 8024ba0:	200000b8 	.word	0x200000b8

08024ba4 <memcpy>:
 8024ba4:	b510      	push	{r4, lr}
 8024ba6:	1e43      	subs	r3, r0, #1
 8024ba8:	440a      	add	r2, r1
 8024baa:	4291      	cmp	r1, r2
 8024bac:	d100      	bne.n	8024bb0 <memcpy+0xc>
 8024bae:	bd10      	pop	{r4, pc}
 8024bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024bb8:	e7f7      	b.n	8024baa <memcpy+0x6>

08024bba <memset>:
 8024bba:	4402      	add	r2, r0
 8024bbc:	4603      	mov	r3, r0
 8024bbe:	4293      	cmp	r3, r2
 8024bc0:	d100      	bne.n	8024bc4 <memset+0xa>
 8024bc2:	4770      	bx	lr
 8024bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8024bc8:	e7f9      	b.n	8024bbe <memset+0x4>
	...

08024bcc <_free_r>:
 8024bcc:	b538      	push	{r3, r4, r5, lr}
 8024bce:	4605      	mov	r5, r0
 8024bd0:	2900      	cmp	r1, #0
 8024bd2:	d045      	beq.n	8024c60 <_free_r+0x94>
 8024bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024bd8:	1f0c      	subs	r4, r1, #4
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	bfb8      	it	lt
 8024bde:	18e4      	addlt	r4, r4, r3
 8024be0:	f000 fec2 	bl	8025968 <__malloc_lock>
 8024be4:	4a1f      	ldr	r2, [pc, #124]	; (8024c64 <_free_r+0x98>)
 8024be6:	6813      	ldr	r3, [r2, #0]
 8024be8:	4610      	mov	r0, r2
 8024bea:	b933      	cbnz	r3, 8024bfa <_free_r+0x2e>
 8024bec:	6063      	str	r3, [r4, #4]
 8024bee:	6014      	str	r4, [r2, #0]
 8024bf0:	4628      	mov	r0, r5
 8024bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024bf6:	f000 beb8 	b.w	802596a <__malloc_unlock>
 8024bfa:	42a3      	cmp	r3, r4
 8024bfc:	d90c      	bls.n	8024c18 <_free_r+0x4c>
 8024bfe:	6821      	ldr	r1, [r4, #0]
 8024c00:	1862      	adds	r2, r4, r1
 8024c02:	4293      	cmp	r3, r2
 8024c04:	bf04      	itt	eq
 8024c06:	681a      	ldreq	r2, [r3, #0]
 8024c08:	685b      	ldreq	r3, [r3, #4]
 8024c0a:	6063      	str	r3, [r4, #4]
 8024c0c:	bf04      	itt	eq
 8024c0e:	1852      	addeq	r2, r2, r1
 8024c10:	6022      	streq	r2, [r4, #0]
 8024c12:	6004      	str	r4, [r0, #0]
 8024c14:	e7ec      	b.n	8024bf0 <_free_r+0x24>
 8024c16:	4613      	mov	r3, r2
 8024c18:	685a      	ldr	r2, [r3, #4]
 8024c1a:	b10a      	cbz	r2, 8024c20 <_free_r+0x54>
 8024c1c:	42a2      	cmp	r2, r4
 8024c1e:	d9fa      	bls.n	8024c16 <_free_r+0x4a>
 8024c20:	6819      	ldr	r1, [r3, #0]
 8024c22:	1858      	adds	r0, r3, r1
 8024c24:	42a0      	cmp	r0, r4
 8024c26:	d10b      	bne.n	8024c40 <_free_r+0x74>
 8024c28:	6820      	ldr	r0, [r4, #0]
 8024c2a:	4401      	add	r1, r0
 8024c2c:	1858      	adds	r0, r3, r1
 8024c2e:	4282      	cmp	r2, r0
 8024c30:	6019      	str	r1, [r3, #0]
 8024c32:	d1dd      	bne.n	8024bf0 <_free_r+0x24>
 8024c34:	6810      	ldr	r0, [r2, #0]
 8024c36:	6852      	ldr	r2, [r2, #4]
 8024c38:	605a      	str	r2, [r3, #4]
 8024c3a:	4401      	add	r1, r0
 8024c3c:	6019      	str	r1, [r3, #0]
 8024c3e:	e7d7      	b.n	8024bf0 <_free_r+0x24>
 8024c40:	d902      	bls.n	8024c48 <_free_r+0x7c>
 8024c42:	230c      	movs	r3, #12
 8024c44:	602b      	str	r3, [r5, #0]
 8024c46:	e7d3      	b.n	8024bf0 <_free_r+0x24>
 8024c48:	6820      	ldr	r0, [r4, #0]
 8024c4a:	1821      	adds	r1, r4, r0
 8024c4c:	428a      	cmp	r2, r1
 8024c4e:	bf04      	itt	eq
 8024c50:	6811      	ldreq	r1, [r2, #0]
 8024c52:	6852      	ldreq	r2, [r2, #4]
 8024c54:	6062      	str	r2, [r4, #4]
 8024c56:	bf04      	itt	eq
 8024c58:	1809      	addeq	r1, r1, r0
 8024c5a:	6021      	streq	r1, [r4, #0]
 8024c5c:	605c      	str	r4, [r3, #4]
 8024c5e:	e7c7      	b.n	8024bf0 <_free_r+0x24>
 8024c60:	bd38      	pop	{r3, r4, r5, pc}
 8024c62:	bf00      	nop
 8024c64:	2000bc18 	.word	0x2000bc18

08024c68 <_malloc_r>:
 8024c68:	b570      	push	{r4, r5, r6, lr}
 8024c6a:	1ccd      	adds	r5, r1, #3
 8024c6c:	f025 0503 	bic.w	r5, r5, #3
 8024c70:	3508      	adds	r5, #8
 8024c72:	2d0c      	cmp	r5, #12
 8024c74:	bf38      	it	cc
 8024c76:	250c      	movcc	r5, #12
 8024c78:	2d00      	cmp	r5, #0
 8024c7a:	4606      	mov	r6, r0
 8024c7c:	db01      	blt.n	8024c82 <_malloc_r+0x1a>
 8024c7e:	42a9      	cmp	r1, r5
 8024c80:	d903      	bls.n	8024c8a <_malloc_r+0x22>
 8024c82:	230c      	movs	r3, #12
 8024c84:	6033      	str	r3, [r6, #0]
 8024c86:	2000      	movs	r0, #0
 8024c88:	bd70      	pop	{r4, r5, r6, pc}
 8024c8a:	f000 fe6d 	bl	8025968 <__malloc_lock>
 8024c8e:	4a21      	ldr	r2, [pc, #132]	; (8024d14 <_malloc_r+0xac>)
 8024c90:	6814      	ldr	r4, [r2, #0]
 8024c92:	4621      	mov	r1, r4
 8024c94:	b991      	cbnz	r1, 8024cbc <_malloc_r+0x54>
 8024c96:	4c20      	ldr	r4, [pc, #128]	; (8024d18 <_malloc_r+0xb0>)
 8024c98:	6823      	ldr	r3, [r4, #0]
 8024c9a:	b91b      	cbnz	r3, 8024ca4 <_malloc_r+0x3c>
 8024c9c:	4630      	mov	r0, r6
 8024c9e:	f000 fb05 	bl	80252ac <_sbrk_r>
 8024ca2:	6020      	str	r0, [r4, #0]
 8024ca4:	4629      	mov	r1, r5
 8024ca6:	4630      	mov	r0, r6
 8024ca8:	f000 fb00 	bl	80252ac <_sbrk_r>
 8024cac:	1c43      	adds	r3, r0, #1
 8024cae:	d124      	bne.n	8024cfa <_malloc_r+0x92>
 8024cb0:	230c      	movs	r3, #12
 8024cb2:	6033      	str	r3, [r6, #0]
 8024cb4:	4630      	mov	r0, r6
 8024cb6:	f000 fe58 	bl	802596a <__malloc_unlock>
 8024cba:	e7e4      	b.n	8024c86 <_malloc_r+0x1e>
 8024cbc:	680b      	ldr	r3, [r1, #0]
 8024cbe:	1b5b      	subs	r3, r3, r5
 8024cc0:	d418      	bmi.n	8024cf4 <_malloc_r+0x8c>
 8024cc2:	2b0b      	cmp	r3, #11
 8024cc4:	d90f      	bls.n	8024ce6 <_malloc_r+0x7e>
 8024cc6:	600b      	str	r3, [r1, #0]
 8024cc8:	50cd      	str	r5, [r1, r3]
 8024cca:	18cc      	adds	r4, r1, r3
 8024ccc:	4630      	mov	r0, r6
 8024cce:	f000 fe4c 	bl	802596a <__malloc_unlock>
 8024cd2:	f104 000b 	add.w	r0, r4, #11
 8024cd6:	1d23      	adds	r3, r4, #4
 8024cd8:	f020 0007 	bic.w	r0, r0, #7
 8024cdc:	1ac3      	subs	r3, r0, r3
 8024cde:	d0d3      	beq.n	8024c88 <_malloc_r+0x20>
 8024ce0:	425a      	negs	r2, r3
 8024ce2:	50e2      	str	r2, [r4, r3]
 8024ce4:	e7d0      	b.n	8024c88 <_malloc_r+0x20>
 8024ce6:	428c      	cmp	r4, r1
 8024ce8:	684b      	ldr	r3, [r1, #4]
 8024cea:	bf16      	itet	ne
 8024cec:	6063      	strne	r3, [r4, #4]
 8024cee:	6013      	streq	r3, [r2, #0]
 8024cf0:	460c      	movne	r4, r1
 8024cf2:	e7eb      	b.n	8024ccc <_malloc_r+0x64>
 8024cf4:	460c      	mov	r4, r1
 8024cf6:	6849      	ldr	r1, [r1, #4]
 8024cf8:	e7cc      	b.n	8024c94 <_malloc_r+0x2c>
 8024cfa:	1cc4      	adds	r4, r0, #3
 8024cfc:	f024 0403 	bic.w	r4, r4, #3
 8024d00:	42a0      	cmp	r0, r4
 8024d02:	d005      	beq.n	8024d10 <_malloc_r+0xa8>
 8024d04:	1a21      	subs	r1, r4, r0
 8024d06:	4630      	mov	r0, r6
 8024d08:	f000 fad0 	bl	80252ac <_sbrk_r>
 8024d0c:	3001      	adds	r0, #1
 8024d0e:	d0cf      	beq.n	8024cb0 <_malloc_r+0x48>
 8024d10:	6025      	str	r5, [r4, #0]
 8024d12:	e7db      	b.n	8024ccc <_malloc_r+0x64>
 8024d14:	2000bc18 	.word	0x2000bc18
 8024d18:	2000bc1c 	.word	0x2000bc1c

08024d1c <__sfputc_r>:
 8024d1c:	6893      	ldr	r3, [r2, #8]
 8024d1e:	3b01      	subs	r3, #1
 8024d20:	2b00      	cmp	r3, #0
 8024d22:	b410      	push	{r4}
 8024d24:	6093      	str	r3, [r2, #8]
 8024d26:	da08      	bge.n	8024d3a <__sfputc_r+0x1e>
 8024d28:	6994      	ldr	r4, [r2, #24]
 8024d2a:	42a3      	cmp	r3, r4
 8024d2c:	db01      	blt.n	8024d32 <__sfputc_r+0x16>
 8024d2e:	290a      	cmp	r1, #10
 8024d30:	d103      	bne.n	8024d3a <__sfputc_r+0x1e>
 8024d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024d36:	f000 bb15 	b.w	8025364 <__swbuf_r>
 8024d3a:	6813      	ldr	r3, [r2, #0]
 8024d3c:	1c58      	adds	r0, r3, #1
 8024d3e:	6010      	str	r0, [r2, #0]
 8024d40:	7019      	strb	r1, [r3, #0]
 8024d42:	4608      	mov	r0, r1
 8024d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024d48:	4770      	bx	lr

08024d4a <__sfputs_r>:
 8024d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d4c:	4606      	mov	r6, r0
 8024d4e:	460f      	mov	r7, r1
 8024d50:	4614      	mov	r4, r2
 8024d52:	18d5      	adds	r5, r2, r3
 8024d54:	42ac      	cmp	r4, r5
 8024d56:	d101      	bne.n	8024d5c <__sfputs_r+0x12>
 8024d58:	2000      	movs	r0, #0
 8024d5a:	e007      	b.n	8024d6c <__sfputs_r+0x22>
 8024d5c:	463a      	mov	r2, r7
 8024d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d62:	4630      	mov	r0, r6
 8024d64:	f7ff ffda 	bl	8024d1c <__sfputc_r>
 8024d68:	1c43      	adds	r3, r0, #1
 8024d6a:	d1f3      	bne.n	8024d54 <__sfputs_r+0xa>
 8024d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024d70 <_vfiprintf_r>:
 8024d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d74:	460c      	mov	r4, r1
 8024d76:	b09d      	sub	sp, #116	; 0x74
 8024d78:	4617      	mov	r7, r2
 8024d7a:	461d      	mov	r5, r3
 8024d7c:	4606      	mov	r6, r0
 8024d7e:	b118      	cbz	r0, 8024d88 <_vfiprintf_r+0x18>
 8024d80:	6983      	ldr	r3, [r0, #24]
 8024d82:	b90b      	cbnz	r3, 8024d88 <_vfiprintf_r+0x18>
 8024d84:	f000 fd02 	bl	802578c <__sinit>
 8024d88:	4b7c      	ldr	r3, [pc, #496]	; (8024f7c <_vfiprintf_r+0x20c>)
 8024d8a:	429c      	cmp	r4, r3
 8024d8c:	d158      	bne.n	8024e40 <_vfiprintf_r+0xd0>
 8024d8e:	6874      	ldr	r4, [r6, #4]
 8024d90:	89a3      	ldrh	r3, [r4, #12]
 8024d92:	0718      	lsls	r0, r3, #28
 8024d94:	d55e      	bpl.n	8024e54 <_vfiprintf_r+0xe4>
 8024d96:	6923      	ldr	r3, [r4, #16]
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d05b      	beq.n	8024e54 <_vfiprintf_r+0xe4>
 8024d9c:	2300      	movs	r3, #0
 8024d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8024da0:	2320      	movs	r3, #32
 8024da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024da6:	2330      	movs	r3, #48	; 0x30
 8024da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024dac:	9503      	str	r5, [sp, #12]
 8024dae:	f04f 0b01 	mov.w	fp, #1
 8024db2:	46b8      	mov	r8, r7
 8024db4:	4645      	mov	r5, r8
 8024db6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024dba:	b10b      	cbz	r3, 8024dc0 <_vfiprintf_r+0x50>
 8024dbc:	2b25      	cmp	r3, #37	; 0x25
 8024dbe:	d154      	bne.n	8024e6a <_vfiprintf_r+0xfa>
 8024dc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8024dc4:	d00b      	beq.n	8024dde <_vfiprintf_r+0x6e>
 8024dc6:	4653      	mov	r3, sl
 8024dc8:	463a      	mov	r2, r7
 8024dca:	4621      	mov	r1, r4
 8024dcc:	4630      	mov	r0, r6
 8024dce:	f7ff ffbc 	bl	8024d4a <__sfputs_r>
 8024dd2:	3001      	adds	r0, #1
 8024dd4:	f000 80c2 	beq.w	8024f5c <_vfiprintf_r+0x1ec>
 8024dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dda:	4453      	add	r3, sl
 8024ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8024dde:	f898 3000 	ldrb.w	r3, [r8]
 8024de2:	2b00      	cmp	r3, #0
 8024de4:	f000 80ba 	beq.w	8024f5c <_vfiprintf_r+0x1ec>
 8024de8:	2300      	movs	r3, #0
 8024dea:	f04f 32ff 	mov.w	r2, #4294967295
 8024dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024df2:	9304      	str	r3, [sp, #16]
 8024df4:	9307      	str	r3, [sp, #28]
 8024df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8024dfc:	46a8      	mov	r8, r5
 8024dfe:	2205      	movs	r2, #5
 8024e00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024e04:	485e      	ldr	r0, [pc, #376]	; (8024f80 <_vfiprintf_r+0x210>)
 8024e06:	f7db fa03 	bl	8000210 <memchr>
 8024e0a:	9b04      	ldr	r3, [sp, #16]
 8024e0c:	bb78      	cbnz	r0, 8024e6e <_vfiprintf_r+0xfe>
 8024e0e:	06d9      	lsls	r1, r3, #27
 8024e10:	bf44      	itt	mi
 8024e12:	2220      	movmi	r2, #32
 8024e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024e18:	071a      	lsls	r2, r3, #28
 8024e1a:	bf44      	itt	mi
 8024e1c:	222b      	movmi	r2, #43	; 0x2b
 8024e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024e22:	782a      	ldrb	r2, [r5, #0]
 8024e24:	2a2a      	cmp	r2, #42	; 0x2a
 8024e26:	d02a      	beq.n	8024e7e <_vfiprintf_r+0x10e>
 8024e28:	9a07      	ldr	r2, [sp, #28]
 8024e2a:	46a8      	mov	r8, r5
 8024e2c:	2000      	movs	r0, #0
 8024e2e:	250a      	movs	r5, #10
 8024e30:	4641      	mov	r1, r8
 8024e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024e36:	3b30      	subs	r3, #48	; 0x30
 8024e38:	2b09      	cmp	r3, #9
 8024e3a:	d969      	bls.n	8024f10 <_vfiprintf_r+0x1a0>
 8024e3c:	b360      	cbz	r0, 8024e98 <_vfiprintf_r+0x128>
 8024e3e:	e024      	b.n	8024e8a <_vfiprintf_r+0x11a>
 8024e40:	4b50      	ldr	r3, [pc, #320]	; (8024f84 <_vfiprintf_r+0x214>)
 8024e42:	429c      	cmp	r4, r3
 8024e44:	d101      	bne.n	8024e4a <_vfiprintf_r+0xda>
 8024e46:	68b4      	ldr	r4, [r6, #8]
 8024e48:	e7a2      	b.n	8024d90 <_vfiprintf_r+0x20>
 8024e4a:	4b4f      	ldr	r3, [pc, #316]	; (8024f88 <_vfiprintf_r+0x218>)
 8024e4c:	429c      	cmp	r4, r3
 8024e4e:	bf08      	it	eq
 8024e50:	68f4      	ldreq	r4, [r6, #12]
 8024e52:	e79d      	b.n	8024d90 <_vfiprintf_r+0x20>
 8024e54:	4621      	mov	r1, r4
 8024e56:	4630      	mov	r0, r6
 8024e58:	f000 fad6 	bl	8025408 <__swsetup_r>
 8024e5c:	2800      	cmp	r0, #0
 8024e5e:	d09d      	beq.n	8024d9c <_vfiprintf_r+0x2c>
 8024e60:	f04f 30ff 	mov.w	r0, #4294967295
 8024e64:	b01d      	add	sp, #116	; 0x74
 8024e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e6a:	46a8      	mov	r8, r5
 8024e6c:	e7a2      	b.n	8024db4 <_vfiprintf_r+0x44>
 8024e6e:	4a44      	ldr	r2, [pc, #272]	; (8024f80 <_vfiprintf_r+0x210>)
 8024e70:	1a80      	subs	r0, r0, r2
 8024e72:	fa0b f000 	lsl.w	r0, fp, r0
 8024e76:	4318      	orrs	r0, r3
 8024e78:	9004      	str	r0, [sp, #16]
 8024e7a:	4645      	mov	r5, r8
 8024e7c:	e7be      	b.n	8024dfc <_vfiprintf_r+0x8c>
 8024e7e:	9a03      	ldr	r2, [sp, #12]
 8024e80:	1d11      	adds	r1, r2, #4
 8024e82:	6812      	ldr	r2, [r2, #0]
 8024e84:	9103      	str	r1, [sp, #12]
 8024e86:	2a00      	cmp	r2, #0
 8024e88:	db01      	blt.n	8024e8e <_vfiprintf_r+0x11e>
 8024e8a:	9207      	str	r2, [sp, #28]
 8024e8c:	e004      	b.n	8024e98 <_vfiprintf_r+0x128>
 8024e8e:	4252      	negs	r2, r2
 8024e90:	f043 0302 	orr.w	r3, r3, #2
 8024e94:	9207      	str	r2, [sp, #28]
 8024e96:	9304      	str	r3, [sp, #16]
 8024e98:	f898 3000 	ldrb.w	r3, [r8]
 8024e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8024e9e:	d10e      	bne.n	8024ebe <_vfiprintf_r+0x14e>
 8024ea0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8024ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8024ea6:	d138      	bne.n	8024f1a <_vfiprintf_r+0x1aa>
 8024ea8:	9b03      	ldr	r3, [sp, #12]
 8024eaa:	1d1a      	adds	r2, r3, #4
 8024eac:	681b      	ldr	r3, [r3, #0]
 8024eae:	9203      	str	r2, [sp, #12]
 8024eb0:	2b00      	cmp	r3, #0
 8024eb2:	bfb8      	it	lt
 8024eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8024eb8:	f108 0802 	add.w	r8, r8, #2
 8024ebc:	9305      	str	r3, [sp, #20]
 8024ebe:	4d33      	ldr	r5, [pc, #204]	; (8024f8c <_vfiprintf_r+0x21c>)
 8024ec0:	f898 1000 	ldrb.w	r1, [r8]
 8024ec4:	2203      	movs	r2, #3
 8024ec6:	4628      	mov	r0, r5
 8024ec8:	f7db f9a2 	bl	8000210 <memchr>
 8024ecc:	b140      	cbz	r0, 8024ee0 <_vfiprintf_r+0x170>
 8024ece:	2340      	movs	r3, #64	; 0x40
 8024ed0:	1b40      	subs	r0, r0, r5
 8024ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8024ed6:	9b04      	ldr	r3, [sp, #16]
 8024ed8:	4303      	orrs	r3, r0
 8024eda:	f108 0801 	add.w	r8, r8, #1
 8024ede:	9304      	str	r3, [sp, #16]
 8024ee0:	f898 1000 	ldrb.w	r1, [r8]
 8024ee4:	482a      	ldr	r0, [pc, #168]	; (8024f90 <_vfiprintf_r+0x220>)
 8024ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024eea:	2206      	movs	r2, #6
 8024eec:	f108 0701 	add.w	r7, r8, #1
 8024ef0:	f7db f98e 	bl	8000210 <memchr>
 8024ef4:	2800      	cmp	r0, #0
 8024ef6:	d037      	beq.n	8024f68 <_vfiprintf_r+0x1f8>
 8024ef8:	4b26      	ldr	r3, [pc, #152]	; (8024f94 <_vfiprintf_r+0x224>)
 8024efa:	bb1b      	cbnz	r3, 8024f44 <_vfiprintf_r+0x1d4>
 8024efc:	9b03      	ldr	r3, [sp, #12]
 8024efe:	3307      	adds	r3, #7
 8024f00:	f023 0307 	bic.w	r3, r3, #7
 8024f04:	3308      	adds	r3, #8
 8024f06:	9303      	str	r3, [sp, #12]
 8024f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f0a:	444b      	add	r3, r9
 8024f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8024f0e:	e750      	b.n	8024db2 <_vfiprintf_r+0x42>
 8024f10:	fb05 3202 	mla	r2, r5, r2, r3
 8024f14:	2001      	movs	r0, #1
 8024f16:	4688      	mov	r8, r1
 8024f18:	e78a      	b.n	8024e30 <_vfiprintf_r+0xc0>
 8024f1a:	2300      	movs	r3, #0
 8024f1c:	f108 0801 	add.w	r8, r8, #1
 8024f20:	9305      	str	r3, [sp, #20]
 8024f22:	4619      	mov	r1, r3
 8024f24:	250a      	movs	r5, #10
 8024f26:	4640      	mov	r0, r8
 8024f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024f2c:	3a30      	subs	r2, #48	; 0x30
 8024f2e:	2a09      	cmp	r2, #9
 8024f30:	d903      	bls.n	8024f3a <_vfiprintf_r+0x1ca>
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	d0c3      	beq.n	8024ebe <_vfiprintf_r+0x14e>
 8024f36:	9105      	str	r1, [sp, #20]
 8024f38:	e7c1      	b.n	8024ebe <_vfiprintf_r+0x14e>
 8024f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8024f3e:	2301      	movs	r3, #1
 8024f40:	4680      	mov	r8, r0
 8024f42:	e7f0      	b.n	8024f26 <_vfiprintf_r+0x1b6>
 8024f44:	ab03      	add	r3, sp, #12
 8024f46:	9300      	str	r3, [sp, #0]
 8024f48:	4622      	mov	r2, r4
 8024f4a:	4b13      	ldr	r3, [pc, #76]	; (8024f98 <_vfiprintf_r+0x228>)
 8024f4c:	a904      	add	r1, sp, #16
 8024f4e:	4630      	mov	r0, r6
 8024f50:	f3af 8000 	nop.w
 8024f54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024f58:	4681      	mov	r9, r0
 8024f5a:	d1d5      	bne.n	8024f08 <_vfiprintf_r+0x198>
 8024f5c:	89a3      	ldrh	r3, [r4, #12]
 8024f5e:	065b      	lsls	r3, r3, #25
 8024f60:	f53f af7e 	bmi.w	8024e60 <_vfiprintf_r+0xf0>
 8024f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024f66:	e77d      	b.n	8024e64 <_vfiprintf_r+0xf4>
 8024f68:	ab03      	add	r3, sp, #12
 8024f6a:	9300      	str	r3, [sp, #0]
 8024f6c:	4622      	mov	r2, r4
 8024f6e:	4b0a      	ldr	r3, [pc, #40]	; (8024f98 <_vfiprintf_r+0x228>)
 8024f70:	a904      	add	r1, sp, #16
 8024f72:	4630      	mov	r0, r6
 8024f74:	f000 f888 	bl	8025088 <_printf_i>
 8024f78:	e7ec      	b.n	8024f54 <_vfiprintf_r+0x1e4>
 8024f7a:	bf00      	nop
 8024f7c:	0802b5f4 	.word	0x0802b5f4
 8024f80:	0802b59c 	.word	0x0802b59c
 8024f84:	0802b614 	.word	0x0802b614
 8024f88:	0802b5d4 	.word	0x0802b5d4
 8024f8c:	0802b5a2 	.word	0x0802b5a2
 8024f90:	0802b5a6 	.word	0x0802b5a6
 8024f94:	00000000 	.word	0x00000000
 8024f98:	08024d4b 	.word	0x08024d4b

08024f9c <_printf_common>:
 8024f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024fa0:	4691      	mov	r9, r2
 8024fa2:	461f      	mov	r7, r3
 8024fa4:	688a      	ldr	r2, [r1, #8]
 8024fa6:	690b      	ldr	r3, [r1, #16]
 8024fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024fac:	4293      	cmp	r3, r2
 8024fae:	bfb8      	it	lt
 8024fb0:	4613      	movlt	r3, r2
 8024fb2:	f8c9 3000 	str.w	r3, [r9]
 8024fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024fba:	4606      	mov	r6, r0
 8024fbc:	460c      	mov	r4, r1
 8024fbe:	b112      	cbz	r2, 8024fc6 <_printf_common+0x2a>
 8024fc0:	3301      	adds	r3, #1
 8024fc2:	f8c9 3000 	str.w	r3, [r9]
 8024fc6:	6823      	ldr	r3, [r4, #0]
 8024fc8:	0699      	lsls	r1, r3, #26
 8024fca:	bf42      	ittt	mi
 8024fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8024fd0:	3302      	addmi	r3, #2
 8024fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8024fd6:	6825      	ldr	r5, [r4, #0]
 8024fd8:	f015 0506 	ands.w	r5, r5, #6
 8024fdc:	d107      	bne.n	8024fee <_printf_common+0x52>
 8024fde:	f104 0a19 	add.w	sl, r4, #25
 8024fe2:	68e3      	ldr	r3, [r4, #12]
 8024fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8024fe8:	1a9b      	subs	r3, r3, r2
 8024fea:	42ab      	cmp	r3, r5
 8024fec:	dc28      	bgt.n	8025040 <_printf_common+0xa4>
 8024fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8024ff2:	6822      	ldr	r2, [r4, #0]
 8024ff4:	3300      	adds	r3, #0
 8024ff6:	bf18      	it	ne
 8024ff8:	2301      	movne	r3, #1
 8024ffa:	0692      	lsls	r2, r2, #26
 8024ffc:	d42d      	bmi.n	802505a <_printf_common+0xbe>
 8024ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025002:	4639      	mov	r1, r7
 8025004:	4630      	mov	r0, r6
 8025006:	47c0      	blx	r8
 8025008:	3001      	adds	r0, #1
 802500a:	d020      	beq.n	802504e <_printf_common+0xb2>
 802500c:	6823      	ldr	r3, [r4, #0]
 802500e:	68e5      	ldr	r5, [r4, #12]
 8025010:	f8d9 2000 	ldr.w	r2, [r9]
 8025014:	f003 0306 	and.w	r3, r3, #6
 8025018:	2b04      	cmp	r3, #4
 802501a:	bf08      	it	eq
 802501c:	1aad      	subeq	r5, r5, r2
 802501e:	68a3      	ldr	r3, [r4, #8]
 8025020:	6922      	ldr	r2, [r4, #16]
 8025022:	bf0c      	ite	eq
 8025024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025028:	2500      	movne	r5, #0
 802502a:	4293      	cmp	r3, r2
 802502c:	bfc4      	itt	gt
 802502e:	1a9b      	subgt	r3, r3, r2
 8025030:	18ed      	addgt	r5, r5, r3
 8025032:	f04f 0900 	mov.w	r9, #0
 8025036:	341a      	adds	r4, #26
 8025038:	454d      	cmp	r5, r9
 802503a:	d11a      	bne.n	8025072 <_printf_common+0xd6>
 802503c:	2000      	movs	r0, #0
 802503e:	e008      	b.n	8025052 <_printf_common+0xb6>
 8025040:	2301      	movs	r3, #1
 8025042:	4652      	mov	r2, sl
 8025044:	4639      	mov	r1, r7
 8025046:	4630      	mov	r0, r6
 8025048:	47c0      	blx	r8
 802504a:	3001      	adds	r0, #1
 802504c:	d103      	bne.n	8025056 <_printf_common+0xba>
 802504e:	f04f 30ff 	mov.w	r0, #4294967295
 8025052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025056:	3501      	adds	r5, #1
 8025058:	e7c3      	b.n	8024fe2 <_printf_common+0x46>
 802505a:	18e1      	adds	r1, r4, r3
 802505c:	1c5a      	adds	r2, r3, #1
 802505e:	2030      	movs	r0, #48	; 0x30
 8025060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025064:	4422      	add	r2, r4
 8025066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802506a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802506e:	3302      	adds	r3, #2
 8025070:	e7c5      	b.n	8024ffe <_printf_common+0x62>
 8025072:	2301      	movs	r3, #1
 8025074:	4622      	mov	r2, r4
 8025076:	4639      	mov	r1, r7
 8025078:	4630      	mov	r0, r6
 802507a:	47c0      	blx	r8
 802507c:	3001      	adds	r0, #1
 802507e:	d0e6      	beq.n	802504e <_printf_common+0xb2>
 8025080:	f109 0901 	add.w	r9, r9, #1
 8025084:	e7d8      	b.n	8025038 <_printf_common+0x9c>
	...

08025088 <_printf_i>:
 8025088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802508c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025090:	460c      	mov	r4, r1
 8025092:	7e09      	ldrb	r1, [r1, #24]
 8025094:	b085      	sub	sp, #20
 8025096:	296e      	cmp	r1, #110	; 0x6e
 8025098:	4617      	mov	r7, r2
 802509a:	4606      	mov	r6, r0
 802509c:	4698      	mov	r8, r3
 802509e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80250a0:	f000 80b3 	beq.w	802520a <_printf_i+0x182>
 80250a4:	d822      	bhi.n	80250ec <_printf_i+0x64>
 80250a6:	2963      	cmp	r1, #99	; 0x63
 80250a8:	d036      	beq.n	8025118 <_printf_i+0x90>
 80250aa:	d80a      	bhi.n	80250c2 <_printf_i+0x3a>
 80250ac:	2900      	cmp	r1, #0
 80250ae:	f000 80b9 	beq.w	8025224 <_printf_i+0x19c>
 80250b2:	2958      	cmp	r1, #88	; 0x58
 80250b4:	f000 8083 	beq.w	80251be <_printf_i+0x136>
 80250b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80250bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80250c0:	e032      	b.n	8025128 <_printf_i+0xa0>
 80250c2:	2964      	cmp	r1, #100	; 0x64
 80250c4:	d001      	beq.n	80250ca <_printf_i+0x42>
 80250c6:	2969      	cmp	r1, #105	; 0x69
 80250c8:	d1f6      	bne.n	80250b8 <_printf_i+0x30>
 80250ca:	6820      	ldr	r0, [r4, #0]
 80250cc:	6813      	ldr	r3, [r2, #0]
 80250ce:	0605      	lsls	r5, r0, #24
 80250d0:	f103 0104 	add.w	r1, r3, #4
 80250d4:	d52a      	bpl.n	802512c <_printf_i+0xa4>
 80250d6:	681b      	ldr	r3, [r3, #0]
 80250d8:	6011      	str	r1, [r2, #0]
 80250da:	2b00      	cmp	r3, #0
 80250dc:	da03      	bge.n	80250e6 <_printf_i+0x5e>
 80250de:	222d      	movs	r2, #45	; 0x2d
 80250e0:	425b      	negs	r3, r3
 80250e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80250e6:	486f      	ldr	r0, [pc, #444]	; (80252a4 <_printf_i+0x21c>)
 80250e8:	220a      	movs	r2, #10
 80250ea:	e039      	b.n	8025160 <_printf_i+0xd8>
 80250ec:	2973      	cmp	r1, #115	; 0x73
 80250ee:	f000 809d 	beq.w	802522c <_printf_i+0x1a4>
 80250f2:	d808      	bhi.n	8025106 <_printf_i+0x7e>
 80250f4:	296f      	cmp	r1, #111	; 0x6f
 80250f6:	d020      	beq.n	802513a <_printf_i+0xb2>
 80250f8:	2970      	cmp	r1, #112	; 0x70
 80250fa:	d1dd      	bne.n	80250b8 <_printf_i+0x30>
 80250fc:	6823      	ldr	r3, [r4, #0]
 80250fe:	f043 0320 	orr.w	r3, r3, #32
 8025102:	6023      	str	r3, [r4, #0]
 8025104:	e003      	b.n	802510e <_printf_i+0x86>
 8025106:	2975      	cmp	r1, #117	; 0x75
 8025108:	d017      	beq.n	802513a <_printf_i+0xb2>
 802510a:	2978      	cmp	r1, #120	; 0x78
 802510c:	d1d4      	bne.n	80250b8 <_printf_i+0x30>
 802510e:	2378      	movs	r3, #120	; 0x78
 8025110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025114:	4864      	ldr	r0, [pc, #400]	; (80252a8 <_printf_i+0x220>)
 8025116:	e055      	b.n	80251c4 <_printf_i+0x13c>
 8025118:	6813      	ldr	r3, [r2, #0]
 802511a:	1d19      	adds	r1, r3, #4
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	6011      	str	r1, [r2, #0]
 8025120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025128:	2301      	movs	r3, #1
 802512a:	e08c      	b.n	8025246 <_printf_i+0x1be>
 802512c:	681b      	ldr	r3, [r3, #0]
 802512e:	6011      	str	r1, [r2, #0]
 8025130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025134:	bf18      	it	ne
 8025136:	b21b      	sxthne	r3, r3
 8025138:	e7cf      	b.n	80250da <_printf_i+0x52>
 802513a:	6813      	ldr	r3, [r2, #0]
 802513c:	6825      	ldr	r5, [r4, #0]
 802513e:	1d18      	adds	r0, r3, #4
 8025140:	6010      	str	r0, [r2, #0]
 8025142:	0628      	lsls	r0, r5, #24
 8025144:	d501      	bpl.n	802514a <_printf_i+0xc2>
 8025146:	681b      	ldr	r3, [r3, #0]
 8025148:	e002      	b.n	8025150 <_printf_i+0xc8>
 802514a:	0668      	lsls	r0, r5, #25
 802514c:	d5fb      	bpl.n	8025146 <_printf_i+0xbe>
 802514e:	881b      	ldrh	r3, [r3, #0]
 8025150:	4854      	ldr	r0, [pc, #336]	; (80252a4 <_printf_i+0x21c>)
 8025152:	296f      	cmp	r1, #111	; 0x6f
 8025154:	bf14      	ite	ne
 8025156:	220a      	movne	r2, #10
 8025158:	2208      	moveq	r2, #8
 802515a:	2100      	movs	r1, #0
 802515c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025160:	6865      	ldr	r5, [r4, #4]
 8025162:	60a5      	str	r5, [r4, #8]
 8025164:	2d00      	cmp	r5, #0
 8025166:	f2c0 8095 	blt.w	8025294 <_printf_i+0x20c>
 802516a:	6821      	ldr	r1, [r4, #0]
 802516c:	f021 0104 	bic.w	r1, r1, #4
 8025170:	6021      	str	r1, [r4, #0]
 8025172:	2b00      	cmp	r3, #0
 8025174:	d13d      	bne.n	80251f2 <_printf_i+0x16a>
 8025176:	2d00      	cmp	r5, #0
 8025178:	f040 808e 	bne.w	8025298 <_printf_i+0x210>
 802517c:	4665      	mov	r5, ip
 802517e:	2a08      	cmp	r2, #8
 8025180:	d10b      	bne.n	802519a <_printf_i+0x112>
 8025182:	6823      	ldr	r3, [r4, #0]
 8025184:	07db      	lsls	r3, r3, #31
 8025186:	d508      	bpl.n	802519a <_printf_i+0x112>
 8025188:	6923      	ldr	r3, [r4, #16]
 802518a:	6862      	ldr	r2, [r4, #4]
 802518c:	429a      	cmp	r2, r3
 802518e:	bfde      	ittt	le
 8025190:	2330      	movle	r3, #48	; 0x30
 8025192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025196:	f105 35ff 	addle.w	r5, r5, #4294967295
 802519a:	ebac 0305 	sub.w	r3, ip, r5
 802519e:	6123      	str	r3, [r4, #16]
 80251a0:	f8cd 8000 	str.w	r8, [sp]
 80251a4:	463b      	mov	r3, r7
 80251a6:	aa03      	add	r2, sp, #12
 80251a8:	4621      	mov	r1, r4
 80251aa:	4630      	mov	r0, r6
 80251ac:	f7ff fef6 	bl	8024f9c <_printf_common>
 80251b0:	3001      	adds	r0, #1
 80251b2:	d14d      	bne.n	8025250 <_printf_i+0x1c8>
 80251b4:	f04f 30ff 	mov.w	r0, #4294967295
 80251b8:	b005      	add	sp, #20
 80251ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80251be:	4839      	ldr	r0, [pc, #228]	; (80252a4 <_printf_i+0x21c>)
 80251c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80251c4:	6813      	ldr	r3, [r2, #0]
 80251c6:	6821      	ldr	r1, [r4, #0]
 80251c8:	1d1d      	adds	r5, r3, #4
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	6015      	str	r5, [r2, #0]
 80251ce:	060a      	lsls	r2, r1, #24
 80251d0:	d50b      	bpl.n	80251ea <_printf_i+0x162>
 80251d2:	07ca      	lsls	r2, r1, #31
 80251d4:	bf44      	itt	mi
 80251d6:	f041 0120 	orrmi.w	r1, r1, #32
 80251da:	6021      	strmi	r1, [r4, #0]
 80251dc:	b91b      	cbnz	r3, 80251e6 <_printf_i+0x15e>
 80251de:	6822      	ldr	r2, [r4, #0]
 80251e0:	f022 0220 	bic.w	r2, r2, #32
 80251e4:	6022      	str	r2, [r4, #0]
 80251e6:	2210      	movs	r2, #16
 80251e8:	e7b7      	b.n	802515a <_printf_i+0xd2>
 80251ea:	064d      	lsls	r5, r1, #25
 80251ec:	bf48      	it	mi
 80251ee:	b29b      	uxthmi	r3, r3
 80251f0:	e7ef      	b.n	80251d2 <_printf_i+0x14a>
 80251f2:	4665      	mov	r5, ip
 80251f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80251f8:	fb02 3311 	mls	r3, r2, r1, r3
 80251fc:	5cc3      	ldrb	r3, [r0, r3]
 80251fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025202:	460b      	mov	r3, r1
 8025204:	2900      	cmp	r1, #0
 8025206:	d1f5      	bne.n	80251f4 <_printf_i+0x16c>
 8025208:	e7b9      	b.n	802517e <_printf_i+0xf6>
 802520a:	6813      	ldr	r3, [r2, #0]
 802520c:	6825      	ldr	r5, [r4, #0]
 802520e:	6961      	ldr	r1, [r4, #20]
 8025210:	1d18      	adds	r0, r3, #4
 8025212:	6010      	str	r0, [r2, #0]
 8025214:	0628      	lsls	r0, r5, #24
 8025216:	681b      	ldr	r3, [r3, #0]
 8025218:	d501      	bpl.n	802521e <_printf_i+0x196>
 802521a:	6019      	str	r1, [r3, #0]
 802521c:	e002      	b.n	8025224 <_printf_i+0x19c>
 802521e:	066a      	lsls	r2, r5, #25
 8025220:	d5fb      	bpl.n	802521a <_printf_i+0x192>
 8025222:	8019      	strh	r1, [r3, #0]
 8025224:	2300      	movs	r3, #0
 8025226:	6123      	str	r3, [r4, #16]
 8025228:	4665      	mov	r5, ip
 802522a:	e7b9      	b.n	80251a0 <_printf_i+0x118>
 802522c:	6813      	ldr	r3, [r2, #0]
 802522e:	1d19      	adds	r1, r3, #4
 8025230:	6011      	str	r1, [r2, #0]
 8025232:	681d      	ldr	r5, [r3, #0]
 8025234:	6862      	ldr	r2, [r4, #4]
 8025236:	2100      	movs	r1, #0
 8025238:	4628      	mov	r0, r5
 802523a:	f7da ffe9 	bl	8000210 <memchr>
 802523e:	b108      	cbz	r0, 8025244 <_printf_i+0x1bc>
 8025240:	1b40      	subs	r0, r0, r5
 8025242:	6060      	str	r0, [r4, #4]
 8025244:	6863      	ldr	r3, [r4, #4]
 8025246:	6123      	str	r3, [r4, #16]
 8025248:	2300      	movs	r3, #0
 802524a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802524e:	e7a7      	b.n	80251a0 <_printf_i+0x118>
 8025250:	6923      	ldr	r3, [r4, #16]
 8025252:	462a      	mov	r2, r5
 8025254:	4639      	mov	r1, r7
 8025256:	4630      	mov	r0, r6
 8025258:	47c0      	blx	r8
 802525a:	3001      	adds	r0, #1
 802525c:	d0aa      	beq.n	80251b4 <_printf_i+0x12c>
 802525e:	6823      	ldr	r3, [r4, #0]
 8025260:	079b      	lsls	r3, r3, #30
 8025262:	d413      	bmi.n	802528c <_printf_i+0x204>
 8025264:	68e0      	ldr	r0, [r4, #12]
 8025266:	9b03      	ldr	r3, [sp, #12]
 8025268:	4298      	cmp	r0, r3
 802526a:	bfb8      	it	lt
 802526c:	4618      	movlt	r0, r3
 802526e:	e7a3      	b.n	80251b8 <_printf_i+0x130>
 8025270:	2301      	movs	r3, #1
 8025272:	464a      	mov	r2, r9
 8025274:	4639      	mov	r1, r7
 8025276:	4630      	mov	r0, r6
 8025278:	47c0      	blx	r8
 802527a:	3001      	adds	r0, #1
 802527c:	d09a      	beq.n	80251b4 <_printf_i+0x12c>
 802527e:	3501      	adds	r5, #1
 8025280:	68e3      	ldr	r3, [r4, #12]
 8025282:	9a03      	ldr	r2, [sp, #12]
 8025284:	1a9b      	subs	r3, r3, r2
 8025286:	42ab      	cmp	r3, r5
 8025288:	dcf2      	bgt.n	8025270 <_printf_i+0x1e8>
 802528a:	e7eb      	b.n	8025264 <_printf_i+0x1dc>
 802528c:	2500      	movs	r5, #0
 802528e:	f104 0919 	add.w	r9, r4, #25
 8025292:	e7f5      	b.n	8025280 <_printf_i+0x1f8>
 8025294:	2b00      	cmp	r3, #0
 8025296:	d1ac      	bne.n	80251f2 <_printf_i+0x16a>
 8025298:	7803      	ldrb	r3, [r0, #0]
 802529a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802529e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80252a2:	e76c      	b.n	802517e <_printf_i+0xf6>
 80252a4:	0802b5ad 	.word	0x0802b5ad
 80252a8:	0802b5be 	.word	0x0802b5be

080252ac <_sbrk_r>:
 80252ac:	b538      	push	{r3, r4, r5, lr}
 80252ae:	4c06      	ldr	r4, [pc, #24]	; (80252c8 <_sbrk_r+0x1c>)
 80252b0:	2300      	movs	r3, #0
 80252b2:	4605      	mov	r5, r0
 80252b4:	4608      	mov	r0, r1
 80252b6:	6023      	str	r3, [r4, #0]
 80252b8:	f000 fc3c 	bl	8025b34 <_sbrk>
 80252bc:	1c43      	adds	r3, r0, #1
 80252be:	d102      	bne.n	80252c6 <_sbrk_r+0x1a>
 80252c0:	6823      	ldr	r3, [r4, #0]
 80252c2:	b103      	cbz	r3, 80252c6 <_sbrk_r+0x1a>
 80252c4:	602b      	str	r3, [r5, #0]
 80252c6:	bd38      	pop	{r3, r4, r5, pc}
 80252c8:	2000c2cc 	.word	0x2000c2cc

080252cc <_raise_r>:
 80252cc:	291f      	cmp	r1, #31
 80252ce:	b538      	push	{r3, r4, r5, lr}
 80252d0:	4604      	mov	r4, r0
 80252d2:	460d      	mov	r5, r1
 80252d4:	d904      	bls.n	80252e0 <_raise_r+0x14>
 80252d6:	2316      	movs	r3, #22
 80252d8:	6003      	str	r3, [r0, #0]
 80252da:	f04f 30ff 	mov.w	r0, #4294967295
 80252de:	bd38      	pop	{r3, r4, r5, pc}
 80252e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80252e2:	b112      	cbz	r2, 80252ea <_raise_r+0x1e>
 80252e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80252e8:	b94b      	cbnz	r3, 80252fe <_raise_r+0x32>
 80252ea:	4620      	mov	r0, r4
 80252ec:	f000 f830 	bl	8025350 <_getpid_r>
 80252f0:	462a      	mov	r2, r5
 80252f2:	4601      	mov	r1, r0
 80252f4:	4620      	mov	r0, r4
 80252f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80252fa:	f000 b817 	b.w	802532c <_kill_r>
 80252fe:	2b01      	cmp	r3, #1
 8025300:	d00a      	beq.n	8025318 <_raise_r+0x4c>
 8025302:	1c59      	adds	r1, r3, #1
 8025304:	d103      	bne.n	802530e <_raise_r+0x42>
 8025306:	2316      	movs	r3, #22
 8025308:	6003      	str	r3, [r0, #0]
 802530a:	2001      	movs	r0, #1
 802530c:	e7e7      	b.n	80252de <_raise_r+0x12>
 802530e:	2400      	movs	r4, #0
 8025310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025314:	4628      	mov	r0, r5
 8025316:	4798      	blx	r3
 8025318:	2000      	movs	r0, #0
 802531a:	e7e0      	b.n	80252de <_raise_r+0x12>

0802531c <raise>:
 802531c:	4b02      	ldr	r3, [pc, #8]	; (8025328 <raise+0xc>)
 802531e:	4601      	mov	r1, r0
 8025320:	6818      	ldr	r0, [r3, #0]
 8025322:	f7ff bfd3 	b.w	80252cc <_raise_r>
 8025326:	bf00      	nop
 8025328:	200000b8 	.word	0x200000b8

0802532c <_kill_r>:
 802532c:	b538      	push	{r3, r4, r5, lr}
 802532e:	4c07      	ldr	r4, [pc, #28]	; (802534c <_kill_r+0x20>)
 8025330:	2300      	movs	r3, #0
 8025332:	4605      	mov	r5, r0
 8025334:	4608      	mov	r0, r1
 8025336:	4611      	mov	r1, r2
 8025338:	6023      	str	r3, [r4, #0]
 802533a:	f000 fbe3 	bl	8025b04 <_kill>
 802533e:	1c43      	adds	r3, r0, #1
 8025340:	d102      	bne.n	8025348 <_kill_r+0x1c>
 8025342:	6823      	ldr	r3, [r4, #0]
 8025344:	b103      	cbz	r3, 8025348 <_kill_r+0x1c>
 8025346:	602b      	str	r3, [r5, #0]
 8025348:	bd38      	pop	{r3, r4, r5, pc}
 802534a:	bf00      	nop
 802534c:	2000c2cc 	.word	0x2000c2cc

08025350 <_getpid_r>:
 8025350:	f000 bbc8 	b.w	8025ae4 <_getpid>

08025354 <strcpy>:
 8025354:	4603      	mov	r3, r0
 8025356:	f811 2b01 	ldrb.w	r2, [r1], #1
 802535a:	f803 2b01 	strb.w	r2, [r3], #1
 802535e:	2a00      	cmp	r2, #0
 8025360:	d1f9      	bne.n	8025356 <strcpy+0x2>
 8025362:	4770      	bx	lr

08025364 <__swbuf_r>:
 8025364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025366:	460e      	mov	r6, r1
 8025368:	4614      	mov	r4, r2
 802536a:	4605      	mov	r5, r0
 802536c:	b118      	cbz	r0, 8025376 <__swbuf_r+0x12>
 802536e:	6983      	ldr	r3, [r0, #24]
 8025370:	b90b      	cbnz	r3, 8025376 <__swbuf_r+0x12>
 8025372:	f000 fa0b 	bl	802578c <__sinit>
 8025376:	4b21      	ldr	r3, [pc, #132]	; (80253fc <__swbuf_r+0x98>)
 8025378:	429c      	cmp	r4, r3
 802537a:	d12a      	bne.n	80253d2 <__swbuf_r+0x6e>
 802537c:	686c      	ldr	r4, [r5, #4]
 802537e:	69a3      	ldr	r3, [r4, #24]
 8025380:	60a3      	str	r3, [r4, #8]
 8025382:	89a3      	ldrh	r3, [r4, #12]
 8025384:	071a      	lsls	r2, r3, #28
 8025386:	d52e      	bpl.n	80253e6 <__swbuf_r+0x82>
 8025388:	6923      	ldr	r3, [r4, #16]
 802538a:	b363      	cbz	r3, 80253e6 <__swbuf_r+0x82>
 802538c:	6923      	ldr	r3, [r4, #16]
 802538e:	6820      	ldr	r0, [r4, #0]
 8025390:	1ac0      	subs	r0, r0, r3
 8025392:	6963      	ldr	r3, [r4, #20]
 8025394:	b2f6      	uxtb	r6, r6
 8025396:	4283      	cmp	r3, r0
 8025398:	4637      	mov	r7, r6
 802539a:	dc04      	bgt.n	80253a6 <__swbuf_r+0x42>
 802539c:	4621      	mov	r1, r4
 802539e:	4628      	mov	r0, r5
 80253a0:	f000 f98a 	bl	80256b8 <_fflush_r>
 80253a4:	bb28      	cbnz	r0, 80253f2 <__swbuf_r+0x8e>
 80253a6:	68a3      	ldr	r3, [r4, #8]
 80253a8:	3b01      	subs	r3, #1
 80253aa:	60a3      	str	r3, [r4, #8]
 80253ac:	6823      	ldr	r3, [r4, #0]
 80253ae:	1c5a      	adds	r2, r3, #1
 80253b0:	6022      	str	r2, [r4, #0]
 80253b2:	701e      	strb	r6, [r3, #0]
 80253b4:	6963      	ldr	r3, [r4, #20]
 80253b6:	3001      	adds	r0, #1
 80253b8:	4283      	cmp	r3, r0
 80253ba:	d004      	beq.n	80253c6 <__swbuf_r+0x62>
 80253bc:	89a3      	ldrh	r3, [r4, #12]
 80253be:	07db      	lsls	r3, r3, #31
 80253c0:	d519      	bpl.n	80253f6 <__swbuf_r+0x92>
 80253c2:	2e0a      	cmp	r6, #10
 80253c4:	d117      	bne.n	80253f6 <__swbuf_r+0x92>
 80253c6:	4621      	mov	r1, r4
 80253c8:	4628      	mov	r0, r5
 80253ca:	f000 f975 	bl	80256b8 <_fflush_r>
 80253ce:	b190      	cbz	r0, 80253f6 <__swbuf_r+0x92>
 80253d0:	e00f      	b.n	80253f2 <__swbuf_r+0x8e>
 80253d2:	4b0b      	ldr	r3, [pc, #44]	; (8025400 <__swbuf_r+0x9c>)
 80253d4:	429c      	cmp	r4, r3
 80253d6:	d101      	bne.n	80253dc <__swbuf_r+0x78>
 80253d8:	68ac      	ldr	r4, [r5, #8]
 80253da:	e7d0      	b.n	802537e <__swbuf_r+0x1a>
 80253dc:	4b09      	ldr	r3, [pc, #36]	; (8025404 <__swbuf_r+0xa0>)
 80253de:	429c      	cmp	r4, r3
 80253e0:	bf08      	it	eq
 80253e2:	68ec      	ldreq	r4, [r5, #12]
 80253e4:	e7cb      	b.n	802537e <__swbuf_r+0x1a>
 80253e6:	4621      	mov	r1, r4
 80253e8:	4628      	mov	r0, r5
 80253ea:	f000 f80d 	bl	8025408 <__swsetup_r>
 80253ee:	2800      	cmp	r0, #0
 80253f0:	d0cc      	beq.n	802538c <__swbuf_r+0x28>
 80253f2:	f04f 37ff 	mov.w	r7, #4294967295
 80253f6:	4638      	mov	r0, r7
 80253f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80253fa:	bf00      	nop
 80253fc:	0802b5f4 	.word	0x0802b5f4
 8025400:	0802b614 	.word	0x0802b614
 8025404:	0802b5d4 	.word	0x0802b5d4

08025408 <__swsetup_r>:
 8025408:	4b32      	ldr	r3, [pc, #200]	; (80254d4 <__swsetup_r+0xcc>)
 802540a:	b570      	push	{r4, r5, r6, lr}
 802540c:	681d      	ldr	r5, [r3, #0]
 802540e:	4606      	mov	r6, r0
 8025410:	460c      	mov	r4, r1
 8025412:	b125      	cbz	r5, 802541e <__swsetup_r+0x16>
 8025414:	69ab      	ldr	r3, [r5, #24]
 8025416:	b913      	cbnz	r3, 802541e <__swsetup_r+0x16>
 8025418:	4628      	mov	r0, r5
 802541a:	f000 f9b7 	bl	802578c <__sinit>
 802541e:	4b2e      	ldr	r3, [pc, #184]	; (80254d8 <__swsetup_r+0xd0>)
 8025420:	429c      	cmp	r4, r3
 8025422:	d10f      	bne.n	8025444 <__swsetup_r+0x3c>
 8025424:	686c      	ldr	r4, [r5, #4]
 8025426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802542a:	b29a      	uxth	r2, r3
 802542c:	0715      	lsls	r5, r2, #28
 802542e:	d42c      	bmi.n	802548a <__swsetup_r+0x82>
 8025430:	06d0      	lsls	r0, r2, #27
 8025432:	d411      	bmi.n	8025458 <__swsetup_r+0x50>
 8025434:	2209      	movs	r2, #9
 8025436:	6032      	str	r2, [r6, #0]
 8025438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802543c:	81a3      	strh	r3, [r4, #12]
 802543e:	f04f 30ff 	mov.w	r0, #4294967295
 8025442:	e03e      	b.n	80254c2 <__swsetup_r+0xba>
 8025444:	4b25      	ldr	r3, [pc, #148]	; (80254dc <__swsetup_r+0xd4>)
 8025446:	429c      	cmp	r4, r3
 8025448:	d101      	bne.n	802544e <__swsetup_r+0x46>
 802544a:	68ac      	ldr	r4, [r5, #8]
 802544c:	e7eb      	b.n	8025426 <__swsetup_r+0x1e>
 802544e:	4b24      	ldr	r3, [pc, #144]	; (80254e0 <__swsetup_r+0xd8>)
 8025450:	429c      	cmp	r4, r3
 8025452:	bf08      	it	eq
 8025454:	68ec      	ldreq	r4, [r5, #12]
 8025456:	e7e6      	b.n	8025426 <__swsetup_r+0x1e>
 8025458:	0751      	lsls	r1, r2, #29
 802545a:	d512      	bpl.n	8025482 <__swsetup_r+0x7a>
 802545c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802545e:	b141      	cbz	r1, 8025472 <__swsetup_r+0x6a>
 8025460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025464:	4299      	cmp	r1, r3
 8025466:	d002      	beq.n	802546e <__swsetup_r+0x66>
 8025468:	4630      	mov	r0, r6
 802546a:	f7ff fbaf 	bl	8024bcc <_free_r>
 802546e:	2300      	movs	r3, #0
 8025470:	6363      	str	r3, [r4, #52]	; 0x34
 8025472:	89a3      	ldrh	r3, [r4, #12]
 8025474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025478:	81a3      	strh	r3, [r4, #12]
 802547a:	2300      	movs	r3, #0
 802547c:	6063      	str	r3, [r4, #4]
 802547e:	6923      	ldr	r3, [r4, #16]
 8025480:	6023      	str	r3, [r4, #0]
 8025482:	89a3      	ldrh	r3, [r4, #12]
 8025484:	f043 0308 	orr.w	r3, r3, #8
 8025488:	81a3      	strh	r3, [r4, #12]
 802548a:	6923      	ldr	r3, [r4, #16]
 802548c:	b94b      	cbnz	r3, 80254a2 <__swsetup_r+0x9a>
 802548e:	89a3      	ldrh	r3, [r4, #12]
 8025490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025498:	d003      	beq.n	80254a2 <__swsetup_r+0x9a>
 802549a:	4621      	mov	r1, r4
 802549c:	4630      	mov	r0, r6
 802549e:	f000 fa23 	bl	80258e8 <__smakebuf_r>
 80254a2:	89a2      	ldrh	r2, [r4, #12]
 80254a4:	f012 0301 	ands.w	r3, r2, #1
 80254a8:	d00c      	beq.n	80254c4 <__swsetup_r+0xbc>
 80254aa:	2300      	movs	r3, #0
 80254ac:	60a3      	str	r3, [r4, #8]
 80254ae:	6963      	ldr	r3, [r4, #20]
 80254b0:	425b      	negs	r3, r3
 80254b2:	61a3      	str	r3, [r4, #24]
 80254b4:	6923      	ldr	r3, [r4, #16]
 80254b6:	b953      	cbnz	r3, 80254ce <__swsetup_r+0xc6>
 80254b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80254bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80254c0:	d1ba      	bne.n	8025438 <__swsetup_r+0x30>
 80254c2:	bd70      	pop	{r4, r5, r6, pc}
 80254c4:	0792      	lsls	r2, r2, #30
 80254c6:	bf58      	it	pl
 80254c8:	6963      	ldrpl	r3, [r4, #20]
 80254ca:	60a3      	str	r3, [r4, #8]
 80254cc:	e7f2      	b.n	80254b4 <__swsetup_r+0xac>
 80254ce:	2000      	movs	r0, #0
 80254d0:	e7f7      	b.n	80254c2 <__swsetup_r+0xba>
 80254d2:	bf00      	nop
 80254d4:	200000b8 	.word	0x200000b8
 80254d8:	0802b5f4 	.word	0x0802b5f4
 80254dc:	0802b614 	.word	0x0802b614
 80254e0:	0802b5d4 	.word	0x0802b5d4

080254e4 <__register_exitproc>:
 80254e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80254e8:	4d2c      	ldr	r5, [pc, #176]	; (802559c <__register_exitproc+0xb8>)
 80254ea:	682c      	ldr	r4, [r5, #0]
 80254ec:	4607      	mov	r7, r0
 80254ee:	460e      	mov	r6, r1
 80254f0:	4691      	mov	r9, r2
 80254f2:	4698      	mov	r8, r3
 80254f4:	b934      	cbnz	r4, 8025504 <__register_exitproc+0x20>
 80254f6:	4b2a      	ldr	r3, [pc, #168]	; (80255a0 <__register_exitproc+0xbc>)
 80254f8:	4c2a      	ldr	r4, [pc, #168]	; (80255a4 <__register_exitproc+0xc0>)
 80254fa:	602c      	str	r4, [r5, #0]
 80254fc:	b113      	cbz	r3, 8025504 <__register_exitproc+0x20>
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025504:	6863      	ldr	r3, [r4, #4]
 8025506:	2b1f      	cmp	r3, #31
 8025508:	dd3d      	ble.n	8025586 <__register_exitproc+0xa2>
 802550a:	4b27      	ldr	r3, [pc, #156]	; (80255a8 <__register_exitproc+0xc4>)
 802550c:	b91b      	cbnz	r3, 8025516 <__register_exitproc+0x32>
 802550e:	f04f 30ff 	mov.w	r0, #4294967295
 8025512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025516:	208c      	movs	r0, #140	; 0x8c
 8025518:	f7ff fb34 	bl	8024b84 <malloc>
 802551c:	4604      	mov	r4, r0
 802551e:	2800      	cmp	r0, #0
 8025520:	d0f5      	beq.n	802550e <__register_exitproc+0x2a>
 8025522:	2300      	movs	r3, #0
 8025524:	682a      	ldr	r2, [r5, #0]
 8025526:	6002      	str	r2, [r0, #0]
 8025528:	6043      	str	r3, [r0, #4]
 802552a:	6028      	str	r0, [r5, #0]
 802552c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025530:	b30f      	cbz	r7, 8025576 <__register_exitproc+0x92>
 8025532:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025536:	f7ff fb25 	bl	8024b84 <malloc>
 802553a:	2800      	cmp	r0, #0
 802553c:	d0e7      	beq.n	802550e <__register_exitproc+0x2a>
 802553e:	2300      	movs	r3, #0
 8025540:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025544:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025548:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802554c:	6862      	ldr	r2, [r4, #4]
 802554e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8025552:	2301      	movs	r3, #1
 8025554:	4093      	lsls	r3, r2
 8025556:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802555a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802555e:	431a      	orrs	r2, r3
 8025560:	2f02      	cmp	r7, #2
 8025562:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8025566:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802556a:	bf02      	ittt	eq
 802556c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8025570:	4313      	orreq	r3, r2
 8025572:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025576:	6863      	ldr	r3, [r4, #4]
 8025578:	1c5a      	adds	r2, r3, #1
 802557a:	3302      	adds	r3, #2
 802557c:	6062      	str	r2, [r4, #4]
 802557e:	2000      	movs	r0, #0
 8025580:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025584:	e7c5      	b.n	8025512 <__register_exitproc+0x2e>
 8025586:	2f00      	cmp	r7, #0
 8025588:	d0f5      	beq.n	8025576 <__register_exitproc+0x92>
 802558a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802558e:	2800      	cmp	r0, #0
 8025590:	d1dc      	bne.n	802554c <__register_exitproc+0x68>
 8025592:	4b05      	ldr	r3, [pc, #20]	; (80255a8 <__register_exitproc+0xc4>)
 8025594:	2b00      	cmp	r3, #0
 8025596:	d0ba      	beq.n	802550e <__register_exitproc+0x2a>
 8025598:	e7cb      	b.n	8025532 <__register_exitproc+0x4e>
 802559a:	bf00      	nop
 802559c:	2000bdb4 	.word	0x2000bdb4
 80255a0:	0802b5d0 	.word	0x0802b5d0
 80255a4:	2000bd28 	.word	0x2000bd28
 80255a8:	08024b85 	.word	0x08024b85

080255ac <__sflush_r>:
 80255ac:	898a      	ldrh	r2, [r1, #12]
 80255ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255b2:	4605      	mov	r5, r0
 80255b4:	0710      	lsls	r0, r2, #28
 80255b6:	460c      	mov	r4, r1
 80255b8:	d458      	bmi.n	802566c <__sflush_r+0xc0>
 80255ba:	684b      	ldr	r3, [r1, #4]
 80255bc:	2b00      	cmp	r3, #0
 80255be:	dc05      	bgt.n	80255cc <__sflush_r+0x20>
 80255c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80255c2:	2b00      	cmp	r3, #0
 80255c4:	dc02      	bgt.n	80255cc <__sflush_r+0x20>
 80255c6:	2000      	movs	r0, #0
 80255c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80255cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80255ce:	2e00      	cmp	r6, #0
 80255d0:	d0f9      	beq.n	80255c6 <__sflush_r+0x1a>
 80255d2:	2300      	movs	r3, #0
 80255d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80255d8:	682f      	ldr	r7, [r5, #0]
 80255da:	6a21      	ldr	r1, [r4, #32]
 80255dc:	602b      	str	r3, [r5, #0]
 80255de:	d032      	beq.n	8025646 <__sflush_r+0x9a>
 80255e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80255e2:	89a3      	ldrh	r3, [r4, #12]
 80255e4:	075a      	lsls	r2, r3, #29
 80255e6:	d505      	bpl.n	80255f4 <__sflush_r+0x48>
 80255e8:	6863      	ldr	r3, [r4, #4]
 80255ea:	1ac0      	subs	r0, r0, r3
 80255ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80255ee:	b10b      	cbz	r3, 80255f4 <__sflush_r+0x48>
 80255f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80255f2:	1ac0      	subs	r0, r0, r3
 80255f4:	2300      	movs	r3, #0
 80255f6:	4602      	mov	r2, r0
 80255f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80255fa:	6a21      	ldr	r1, [r4, #32]
 80255fc:	4628      	mov	r0, r5
 80255fe:	47b0      	blx	r6
 8025600:	1c43      	adds	r3, r0, #1
 8025602:	89a3      	ldrh	r3, [r4, #12]
 8025604:	d106      	bne.n	8025614 <__sflush_r+0x68>
 8025606:	6829      	ldr	r1, [r5, #0]
 8025608:	291d      	cmp	r1, #29
 802560a:	d848      	bhi.n	802569e <__sflush_r+0xf2>
 802560c:	4a29      	ldr	r2, [pc, #164]	; (80256b4 <__sflush_r+0x108>)
 802560e:	40ca      	lsrs	r2, r1
 8025610:	07d6      	lsls	r6, r2, #31
 8025612:	d544      	bpl.n	802569e <__sflush_r+0xf2>
 8025614:	2200      	movs	r2, #0
 8025616:	6062      	str	r2, [r4, #4]
 8025618:	04d9      	lsls	r1, r3, #19
 802561a:	6922      	ldr	r2, [r4, #16]
 802561c:	6022      	str	r2, [r4, #0]
 802561e:	d504      	bpl.n	802562a <__sflush_r+0x7e>
 8025620:	1c42      	adds	r2, r0, #1
 8025622:	d101      	bne.n	8025628 <__sflush_r+0x7c>
 8025624:	682b      	ldr	r3, [r5, #0]
 8025626:	b903      	cbnz	r3, 802562a <__sflush_r+0x7e>
 8025628:	6560      	str	r0, [r4, #84]	; 0x54
 802562a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802562c:	602f      	str	r7, [r5, #0]
 802562e:	2900      	cmp	r1, #0
 8025630:	d0c9      	beq.n	80255c6 <__sflush_r+0x1a>
 8025632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025636:	4299      	cmp	r1, r3
 8025638:	d002      	beq.n	8025640 <__sflush_r+0x94>
 802563a:	4628      	mov	r0, r5
 802563c:	f7ff fac6 	bl	8024bcc <_free_r>
 8025640:	2000      	movs	r0, #0
 8025642:	6360      	str	r0, [r4, #52]	; 0x34
 8025644:	e7c0      	b.n	80255c8 <__sflush_r+0x1c>
 8025646:	2301      	movs	r3, #1
 8025648:	4628      	mov	r0, r5
 802564a:	47b0      	blx	r6
 802564c:	1c41      	adds	r1, r0, #1
 802564e:	d1c8      	bne.n	80255e2 <__sflush_r+0x36>
 8025650:	682b      	ldr	r3, [r5, #0]
 8025652:	2b00      	cmp	r3, #0
 8025654:	d0c5      	beq.n	80255e2 <__sflush_r+0x36>
 8025656:	2b1d      	cmp	r3, #29
 8025658:	d001      	beq.n	802565e <__sflush_r+0xb2>
 802565a:	2b16      	cmp	r3, #22
 802565c:	d101      	bne.n	8025662 <__sflush_r+0xb6>
 802565e:	602f      	str	r7, [r5, #0]
 8025660:	e7b1      	b.n	80255c6 <__sflush_r+0x1a>
 8025662:	89a3      	ldrh	r3, [r4, #12]
 8025664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025668:	81a3      	strh	r3, [r4, #12]
 802566a:	e7ad      	b.n	80255c8 <__sflush_r+0x1c>
 802566c:	690f      	ldr	r7, [r1, #16]
 802566e:	2f00      	cmp	r7, #0
 8025670:	d0a9      	beq.n	80255c6 <__sflush_r+0x1a>
 8025672:	0793      	lsls	r3, r2, #30
 8025674:	680e      	ldr	r6, [r1, #0]
 8025676:	bf08      	it	eq
 8025678:	694b      	ldreq	r3, [r1, #20]
 802567a:	600f      	str	r7, [r1, #0]
 802567c:	bf18      	it	ne
 802567e:	2300      	movne	r3, #0
 8025680:	eba6 0807 	sub.w	r8, r6, r7
 8025684:	608b      	str	r3, [r1, #8]
 8025686:	f1b8 0f00 	cmp.w	r8, #0
 802568a:	dd9c      	ble.n	80255c6 <__sflush_r+0x1a>
 802568c:	4643      	mov	r3, r8
 802568e:	463a      	mov	r2, r7
 8025690:	6a21      	ldr	r1, [r4, #32]
 8025692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025694:	4628      	mov	r0, r5
 8025696:	47b0      	blx	r6
 8025698:	2800      	cmp	r0, #0
 802569a:	dc06      	bgt.n	80256aa <__sflush_r+0xfe>
 802569c:	89a3      	ldrh	r3, [r4, #12]
 802569e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80256a2:	81a3      	strh	r3, [r4, #12]
 80256a4:	f04f 30ff 	mov.w	r0, #4294967295
 80256a8:	e78e      	b.n	80255c8 <__sflush_r+0x1c>
 80256aa:	4407      	add	r7, r0
 80256ac:	eba8 0800 	sub.w	r8, r8, r0
 80256b0:	e7e9      	b.n	8025686 <__sflush_r+0xda>
 80256b2:	bf00      	nop
 80256b4:	20400001 	.word	0x20400001

080256b8 <_fflush_r>:
 80256b8:	b538      	push	{r3, r4, r5, lr}
 80256ba:	690b      	ldr	r3, [r1, #16]
 80256bc:	4605      	mov	r5, r0
 80256be:	460c      	mov	r4, r1
 80256c0:	b1db      	cbz	r3, 80256fa <_fflush_r+0x42>
 80256c2:	b118      	cbz	r0, 80256cc <_fflush_r+0x14>
 80256c4:	6983      	ldr	r3, [r0, #24]
 80256c6:	b90b      	cbnz	r3, 80256cc <_fflush_r+0x14>
 80256c8:	f000 f860 	bl	802578c <__sinit>
 80256cc:	4b0c      	ldr	r3, [pc, #48]	; (8025700 <_fflush_r+0x48>)
 80256ce:	429c      	cmp	r4, r3
 80256d0:	d109      	bne.n	80256e6 <_fflush_r+0x2e>
 80256d2:	686c      	ldr	r4, [r5, #4]
 80256d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256d8:	b17b      	cbz	r3, 80256fa <_fflush_r+0x42>
 80256da:	4621      	mov	r1, r4
 80256dc:	4628      	mov	r0, r5
 80256de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80256e2:	f7ff bf63 	b.w	80255ac <__sflush_r>
 80256e6:	4b07      	ldr	r3, [pc, #28]	; (8025704 <_fflush_r+0x4c>)
 80256e8:	429c      	cmp	r4, r3
 80256ea:	d101      	bne.n	80256f0 <_fflush_r+0x38>
 80256ec:	68ac      	ldr	r4, [r5, #8]
 80256ee:	e7f1      	b.n	80256d4 <_fflush_r+0x1c>
 80256f0:	4b05      	ldr	r3, [pc, #20]	; (8025708 <_fflush_r+0x50>)
 80256f2:	429c      	cmp	r4, r3
 80256f4:	bf08      	it	eq
 80256f6:	68ec      	ldreq	r4, [r5, #12]
 80256f8:	e7ec      	b.n	80256d4 <_fflush_r+0x1c>
 80256fa:	2000      	movs	r0, #0
 80256fc:	bd38      	pop	{r3, r4, r5, pc}
 80256fe:	bf00      	nop
 8025700:	0802b5f4 	.word	0x0802b5f4
 8025704:	0802b614 	.word	0x0802b614
 8025708:	0802b5d4 	.word	0x0802b5d4

0802570c <std>:
 802570c:	2300      	movs	r3, #0
 802570e:	b510      	push	{r4, lr}
 8025710:	4604      	mov	r4, r0
 8025712:	e9c0 3300 	strd	r3, r3, [r0]
 8025716:	6083      	str	r3, [r0, #8]
 8025718:	8181      	strh	r1, [r0, #12]
 802571a:	6643      	str	r3, [r0, #100]	; 0x64
 802571c:	81c2      	strh	r2, [r0, #14]
 802571e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025722:	6183      	str	r3, [r0, #24]
 8025724:	4619      	mov	r1, r3
 8025726:	2208      	movs	r2, #8
 8025728:	305c      	adds	r0, #92	; 0x5c
 802572a:	f7ff fa46 	bl	8024bba <memset>
 802572e:	4b05      	ldr	r3, [pc, #20]	; (8025744 <std+0x38>)
 8025730:	6263      	str	r3, [r4, #36]	; 0x24
 8025732:	4b05      	ldr	r3, [pc, #20]	; (8025748 <std+0x3c>)
 8025734:	62a3      	str	r3, [r4, #40]	; 0x28
 8025736:	4b05      	ldr	r3, [pc, #20]	; (802574c <std+0x40>)
 8025738:	62e3      	str	r3, [r4, #44]	; 0x2c
 802573a:	4b05      	ldr	r3, [pc, #20]	; (8025750 <std+0x44>)
 802573c:	6224      	str	r4, [r4, #32]
 802573e:	6323      	str	r3, [r4, #48]	; 0x30
 8025740:	bd10      	pop	{r4, pc}
 8025742:	bf00      	nop
 8025744:	0802596d 	.word	0x0802596d
 8025748:	0802598f 	.word	0x0802598f
 802574c:	080259c7 	.word	0x080259c7
 8025750:	080259eb 	.word	0x080259eb

08025754 <_cleanup_r>:
 8025754:	4901      	ldr	r1, [pc, #4]	; (802575c <_cleanup_r+0x8>)
 8025756:	f000 b885 	b.w	8025864 <_fwalk_reent>
 802575a:	bf00      	nop
 802575c:	080256b9 	.word	0x080256b9

08025760 <__sfmoreglue>:
 8025760:	b570      	push	{r4, r5, r6, lr}
 8025762:	1e4a      	subs	r2, r1, #1
 8025764:	2568      	movs	r5, #104	; 0x68
 8025766:	4355      	muls	r5, r2
 8025768:	460e      	mov	r6, r1
 802576a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802576e:	f7ff fa7b 	bl	8024c68 <_malloc_r>
 8025772:	4604      	mov	r4, r0
 8025774:	b140      	cbz	r0, 8025788 <__sfmoreglue+0x28>
 8025776:	2100      	movs	r1, #0
 8025778:	e9c0 1600 	strd	r1, r6, [r0]
 802577c:	300c      	adds	r0, #12
 802577e:	60a0      	str	r0, [r4, #8]
 8025780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025784:	f7ff fa19 	bl	8024bba <memset>
 8025788:	4620      	mov	r0, r4
 802578a:	bd70      	pop	{r4, r5, r6, pc}

0802578c <__sinit>:
 802578c:	6983      	ldr	r3, [r0, #24]
 802578e:	b510      	push	{r4, lr}
 8025790:	4604      	mov	r4, r0
 8025792:	bb33      	cbnz	r3, 80257e2 <__sinit+0x56>
 8025794:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025798:	6503      	str	r3, [r0, #80]	; 0x50
 802579a:	4b12      	ldr	r3, [pc, #72]	; (80257e4 <__sinit+0x58>)
 802579c:	4a12      	ldr	r2, [pc, #72]	; (80257e8 <__sinit+0x5c>)
 802579e:	681b      	ldr	r3, [r3, #0]
 80257a0:	6282      	str	r2, [r0, #40]	; 0x28
 80257a2:	4298      	cmp	r0, r3
 80257a4:	bf04      	itt	eq
 80257a6:	2301      	moveq	r3, #1
 80257a8:	6183      	streq	r3, [r0, #24]
 80257aa:	f000 f81f 	bl	80257ec <__sfp>
 80257ae:	6060      	str	r0, [r4, #4]
 80257b0:	4620      	mov	r0, r4
 80257b2:	f000 f81b 	bl	80257ec <__sfp>
 80257b6:	60a0      	str	r0, [r4, #8]
 80257b8:	4620      	mov	r0, r4
 80257ba:	f000 f817 	bl	80257ec <__sfp>
 80257be:	2200      	movs	r2, #0
 80257c0:	60e0      	str	r0, [r4, #12]
 80257c2:	2104      	movs	r1, #4
 80257c4:	6860      	ldr	r0, [r4, #4]
 80257c6:	f7ff ffa1 	bl	802570c <std>
 80257ca:	2201      	movs	r2, #1
 80257cc:	2109      	movs	r1, #9
 80257ce:	68a0      	ldr	r0, [r4, #8]
 80257d0:	f7ff ff9c 	bl	802570c <std>
 80257d4:	2202      	movs	r2, #2
 80257d6:	2112      	movs	r1, #18
 80257d8:	68e0      	ldr	r0, [r4, #12]
 80257da:	f7ff ff97 	bl	802570c <std>
 80257de:	2301      	movs	r3, #1
 80257e0:	61a3      	str	r3, [r4, #24]
 80257e2:	bd10      	pop	{r4, pc}
 80257e4:	0802b598 	.word	0x0802b598
 80257e8:	08025755 	.word	0x08025755

080257ec <__sfp>:
 80257ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257ee:	4b1b      	ldr	r3, [pc, #108]	; (802585c <__sfp+0x70>)
 80257f0:	681e      	ldr	r6, [r3, #0]
 80257f2:	69b3      	ldr	r3, [r6, #24]
 80257f4:	4607      	mov	r7, r0
 80257f6:	b913      	cbnz	r3, 80257fe <__sfp+0x12>
 80257f8:	4630      	mov	r0, r6
 80257fa:	f7ff ffc7 	bl	802578c <__sinit>
 80257fe:	3648      	adds	r6, #72	; 0x48
 8025800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025804:	3b01      	subs	r3, #1
 8025806:	d503      	bpl.n	8025810 <__sfp+0x24>
 8025808:	6833      	ldr	r3, [r6, #0]
 802580a:	b133      	cbz	r3, 802581a <__sfp+0x2e>
 802580c:	6836      	ldr	r6, [r6, #0]
 802580e:	e7f7      	b.n	8025800 <__sfp+0x14>
 8025810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025814:	b16d      	cbz	r5, 8025832 <__sfp+0x46>
 8025816:	3468      	adds	r4, #104	; 0x68
 8025818:	e7f4      	b.n	8025804 <__sfp+0x18>
 802581a:	2104      	movs	r1, #4
 802581c:	4638      	mov	r0, r7
 802581e:	f7ff ff9f 	bl	8025760 <__sfmoreglue>
 8025822:	6030      	str	r0, [r6, #0]
 8025824:	2800      	cmp	r0, #0
 8025826:	d1f1      	bne.n	802580c <__sfp+0x20>
 8025828:	230c      	movs	r3, #12
 802582a:	603b      	str	r3, [r7, #0]
 802582c:	4604      	mov	r4, r0
 802582e:	4620      	mov	r0, r4
 8025830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025832:	4b0b      	ldr	r3, [pc, #44]	; (8025860 <__sfp+0x74>)
 8025834:	6665      	str	r5, [r4, #100]	; 0x64
 8025836:	e9c4 5500 	strd	r5, r5, [r4]
 802583a:	60a5      	str	r5, [r4, #8]
 802583c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025840:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025844:	2208      	movs	r2, #8
 8025846:	4629      	mov	r1, r5
 8025848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802584c:	f7ff f9b5 	bl	8024bba <memset>
 8025850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025858:	e7e9      	b.n	802582e <__sfp+0x42>
 802585a:	bf00      	nop
 802585c:	0802b598 	.word	0x0802b598
 8025860:	ffff0001 	.word	0xffff0001

08025864 <_fwalk_reent>:
 8025864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025868:	4680      	mov	r8, r0
 802586a:	4689      	mov	r9, r1
 802586c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025870:	2600      	movs	r6, #0
 8025872:	b914      	cbnz	r4, 802587a <_fwalk_reent+0x16>
 8025874:	4630      	mov	r0, r6
 8025876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802587a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802587e:	3f01      	subs	r7, #1
 8025880:	d501      	bpl.n	8025886 <_fwalk_reent+0x22>
 8025882:	6824      	ldr	r4, [r4, #0]
 8025884:	e7f5      	b.n	8025872 <_fwalk_reent+0xe>
 8025886:	89ab      	ldrh	r3, [r5, #12]
 8025888:	2b01      	cmp	r3, #1
 802588a:	d907      	bls.n	802589c <_fwalk_reent+0x38>
 802588c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025890:	3301      	adds	r3, #1
 8025892:	d003      	beq.n	802589c <_fwalk_reent+0x38>
 8025894:	4629      	mov	r1, r5
 8025896:	4640      	mov	r0, r8
 8025898:	47c8      	blx	r9
 802589a:	4306      	orrs	r6, r0
 802589c:	3568      	adds	r5, #104	; 0x68
 802589e:	e7ee      	b.n	802587e <_fwalk_reent+0x1a>

080258a0 <__swhatbuf_r>:
 80258a0:	b570      	push	{r4, r5, r6, lr}
 80258a2:	460e      	mov	r6, r1
 80258a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258a8:	2900      	cmp	r1, #0
 80258aa:	b096      	sub	sp, #88	; 0x58
 80258ac:	4614      	mov	r4, r2
 80258ae:	461d      	mov	r5, r3
 80258b0:	da07      	bge.n	80258c2 <__swhatbuf_r+0x22>
 80258b2:	2300      	movs	r3, #0
 80258b4:	602b      	str	r3, [r5, #0]
 80258b6:	89b3      	ldrh	r3, [r6, #12]
 80258b8:	061a      	lsls	r2, r3, #24
 80258ba:	d410      	bmi.n	80258de <__swhatbuf_r+0x3e>
 80258bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80258c0:	e00e      	b.n	80258e0 <__swhatbuf_r+0x40>
 80258c2:	466a      	mov	r2, sp
 80258c4:	f000 f8b8 	bl	8025a38 <_fstat_r>
 80258c8:	2800      	cmp	r0, #0
 80258ca:	dbf2      	blt.n	80258b2 <__swhatbuf_r+0x12>
 80258cc:	9a01      	ldr	r2, [sp, #4]
 80258ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80258d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80258d6:	425a      	negs	r2, r3
 80258d8:	415a      	adcs	r2, r3
 80258da:	602a      	str	r2, [r5, #0]
 80258dc:	e7ee      	b.n	80258bc <__swhatbuf_r+0x1c>
 80258de:	2340      	movs	r3, #64	; 0x40
 80258e0:	2000      	movs	r0, #0
 80258e2:	6023      	str	r3, [r4, #0]
 80258e4:	b016      	add	sp, #88	; 0x58
 80258e6:	bd70      	pop	{r4, r5, r6, pc}

080258e8 <__smakebuf_r>:
 80258e8:	898b      	ldrh	r3, [r1, #12]
 80258ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80258ec:	079d      	lsls	r5, r3, #30
 80258ee:	4606      	mov	r6, r0
 80258f0:	460c      	mov	r4, r1
 80258f2:	d507      	bpl.n	8025904 <__smakebuf_r+0x1c>
 80258f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80258f8:	6023      	str	r3, [r4, #0]
 80258fa:	6123      	str	r3, [r4, #16]
 80258fc:	2301      	movs	r3, #1
 80258fe:	6163      	str	r3, [r4, #20]
 8025900:	b002      	add	sp, #8
 8025902:	bd70      	pop	{r4, r5, r6, pc}
 8025904:	ab01      	add	r3, sp, #4
 8025906:	466a      	mov	r2, sp
 8025908:	f7ff ffca 	bl	80258a0 <__swhatbuf_r>
 802590c:	9900      	ldr	r1, [sp, #0]
 802590e:	4605      	mov	r5, r0
 8025910:	4630      	mov	r0, r6
 8025912:	f7ff f9a9 	bl	8024c68 <_malloc_r>
 8025916:	b948      	cbnz	r0, 802592c <__smakebuf_r+0x44>
 8025918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802591c:	059a      	lsls	r2, r3, #22
 802591e:	d4ef      	bmi.n	8025900 <__smakebuf_r+0x18>
 8025920:	f023 0303 	bic.w	r3, r3, #3
 8025924:	f043 0302 	orr.w	r3, r3, #2
 8025928:	81a3      	strh	r3, [r4, #12]
 802592a:	e7e3      	b.n	80258f4 <__smakebuf_r+0xc>
 802592c:	4b0d      	ldr	r3, [pc, #52]	; (8025964 <__smakebuf_r+0x7c>)
 802592e:	62b3      	str	r3, [r6, #40]	; 0x28
 8025930:	89a3      	ldrh	r3, [r4, #12]
 8025932:	6020      	str	r0, [r4, #0]
 8025934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025938:	81a3      	strh	r3, [r4, #12]
 802593a:	9b00      	ldr	r3, [sp, #0]
 802593c:	6163      	str	r3, [r4, #20]
 802593e:	9b01      	ldr	r3, [sp, #4]
 8025940:	6120      	str	r0, [r4, #16]
 8025942:	b15b      	cbz	r3, 802595c <__smakebuf_r+0x74>
 8025944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025948:	4630      	mov	r0, r6
 802594a:	f000 f887 	bl	8025a5c <_isatty_r>
 802594e:	b128      	cbz	r0, 802595c <__smakebuf_r+0x74>
 8025950:	89a3      	ldrh	r3, [r4, #12]
 8025952:	f023 0303 	bic.w	r3, r3, #3
 8025956:	f043 0301 	orr.w	r3, r3, #1
 802595a:	81a3      	strh	r3, [r4, #12]
 802595c:	89a3      	ldrh	r3, [r4, #12]
 802595e:	431d      	orrs	r5, r3
 8025960:	81a5      	strh	r5, [r4, #12]
 8025962:	e7cd      	b.n	8025900 <__smakebuf_r+0x18>
 8025964:	08025755 	.word	0x08025755

08025968 <__malloc_lock>:
 8025968:	4770      	bx	lr

0802596a <__malloc_unlock>:
 802596a:	4770      	bx	lr

0802596c <__sread>:
 802596c:	b510      	push	{r4, lr}
 802596e:	460c      	mov	r4, r1
 8025970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025974:	f000 f894 	bl	8025aa0 <_read_r>
 8025978:	2800      	cmp	r0, #0
 802597a:	bfab      	itete	ge
 802597c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802597e:	89a3      	ldrhlt	r3, [r4, #12]
 8025980:	181b      	addge	r3, r3, r0
 8025982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025986:	bfac      	ite	ge
 8025988:	6563      	strge	r3, [r4, #84]	; 0x54
 802598a:	81a3      	strhlt	r3, [r4, #12]
 802598c:	bd10      	pop	{r4, pc}

0802598e <__swrite>:
 802598e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025992:	461f      	mov	r7, r3
 8025994:	898b      	ldrh	r3, [r1, #12]
 8025996:	05db      	lsls	r3, r3, #23
 8025998:	4605      	mov	r5, r0
 802599a:	460c      	mov	r4, r1
 802599c:	4616      	mov	r6, r2
 802599e:	d505      	bpl.n	80259ac <__swrite+0x1e>
 80259a0:	2302      	movs	r3, #2
 80259a2:	2200      	movs	r2, #0
 80259a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80259a8:	f000 f868 	bl	8025a7c <_lseek_r>
 80259ac:	89a3      	ldrh	r3, [r4, #12]
 80259ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80259b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80259b6:	81a3      	strh	r3, [r4, #12]
 80259b8:	4632      	mov	r2, r6
 80259ba:	463b      	mov	r3, r7
 80259bc:	4628      	mov	r0, r5
 80259be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80259c2:	f000 b817 	b.w	80259f4 <_write_r>

080259c6 <__sseek>:
 80259c6:	b510      	push	{r4, lr}
 80259c8:	460c      	mov	r4, r1
 80259ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80259ce:	f000 f855 	bl	8025a7c <_lseek_r>
 80259d2:	1c43      	adds	r3, r0, #1
 80259d4:	89a3      	ldrh	r3, [r4, #12]
 80259d6:	bf15      	itete	ne
 80259d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80259da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80259de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80259e2:	81a3      	strheq	r3, [r4, #12]
 80259e4:	bf18      	it	ne
 80259e6:	81a3      	strhne	r3, [r4, #12]
 80259e8:	bd10      	pop	{r4, pc}

080259ea <__sclose>:
 80259ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80259ee:	f000 b813 	b.w	8025a18 <_close_r>
	...

080259f4 <_write_r>:
 80259f4:	b538      	push	{r3, r4, r5, lr}
 80259f6:	4c07      	ldr	r4, [pc, #28]	; (8025a14 <_write_r+0x20>)
 80259f8:	4605      	mov	r5, r0
 80259fa:	4608      	mov	r0, r1
 80259fc:	4611      	mov	r1, r2
 80259fe:	2200      	movs	r2, #0
 8025a00:	6022      	str	r2, [r4, #0]
 8025a02:	461a      	mov	r2, r3
 8025a04:	f000 f8a4 	bl	8025b50 <_write>
 8025a08:	1c43      	adds	r3, r0, #1
 8025a0a:	d102      	bne.n	8025a12 <_write_r+0x1e>
 8025a0c:	6823      	ldr	r3, [r4, #0]
 8025a0e:	b103      	cbz	r3, 8025a12 <_write_r+0x1e>
 8025a10:	602b      	str	r3, [r5, #0]
 8025a12:	bd38      	pop	{r3, r4, r5, pc}
 8025a14:	2000c2cc 	.word	0x2000c2cc

08025a18 <_close_r>:
 8025a18:	b538      	push	{r3, r4, r5, lr}
 8025a1a:	4c06      	ldr	r4, [pc, #24]	; (8025a34 <_close_r+0x1c>)
 8025a1c:	2300      	movs	r3, #0
 8025a1e:	4605      	mov	r5, r0
 8025a20:	4608      	mov	r0, r1
 8025a22:	6023      	str	r3, [r4, #0]
 8025a24:	f000 f84e 	bl	8025ac4 <_close>
 8025a28:	1c43      	adds	r3, r0, #1
 8025a2a:	d102      	bne.n	8025a32 <_close_r+0x1a>
 8025a2c:	6823      	ldr	r3, [r4, #0]
 8025a2e:	b103      	cbz	r3, 8025a32 <_close_r+0x1a>
 8025a30:	602b      	str	r3, [r5, #0]
 8025a32:	bd38      	pop	{r3, r4, r5, pc}
 8025a34:	2000c2cc 	.word	0x2000c2cc

08025a38 <_fstat_r>:
 8025a38:	b538      	push	{r3, r4, r5, lr}
 8025a3a:	4c07      	ldr	r4, [pc, #28]	; (8025a58 <_fstat_r+0x20>)
 8025a3c:	2300      	movs	r3, #0
 8025a3e:	4605      	mov	r5, r0
 8025a40:	4608      	mov	r0, r1
 8025a42:	4611      	mov	r1, r2
 8025a44:	6023      	str	r3, [r4, #0]
 8025a46:	f000 f845 	bl	8025ad4 <_fstat>
 8025a4a:	1c43      	adds	r3, r0, #1
 8025a4c:	d102      	bne.n	8025a54 <_fstat_r+0x1c>
 8025a4e:	6823      	ldr	r3, [r4, #0]
 8025a50:	b103      	cbz	r3, 8025a54 <_fstat_r+0x1c>
 8025a52:	602b      	str	r3, [r5, #0]
 8025a54:	bd38      	pop	{r3, r4, r5, pc}
 8025a56:	bf00      	nop
 8025a58:	2000c2cc 	.word	0x2000c2cc

08025a5c <_isatty_r>:
 8025a5c:	b538      	push	{r3, r4, r5, lr}
 8025a5e:	4c06      	ldr	r4, [pc, #24]	; (8025a78 <_isatty_r+0x1c>)
 8025a60:	2300      	movs	r3, #0
 8025a62:	4605      	mov	r5, r0
 8025a64:	4608      	mov	r0, r1
 8025a66:	6023      	str	r3, [r4, #0]
 8025a68:	f000 f844 	bl	8025af4 <_isatty>
 8025a6c:	1c43      	adds	r3, r0, #1
 8025a6e:	d102      	bne.n	8025a76 <_isatty_r+0x1a>
 8025a70:	6823      	ldr	r3, [r4, #0]
 8025a72:	b103      	cbz	r3, 8025a76 <_isatty_r+0x1a>
 8025a74:	602b      	str	r3, [r5, #0]
 8025a76:	bd38      	pop	{r3, r4, r5, pc}
 8025a78:	2000c2cc 	.word	0x2000c2cc

08025a7c <_lseek_r>:
 8025a7c:	b538      	push	{r3, r4, r5, lr}
 8025a7e:	4c07      	ldr	r4, [pc, #28]	; (8025a9c <_lseek_r+0x20>)
 8025a80:	4605      	mov	r5, r0
 8025a82:	4608      	mov	r0, r1
 8025a84:	4611      	mov	r1, r2
 8025a86:	2200      	movs	r2, #0
 8025a88:	6022      	str	r2, [r4, #0]
 8025a8a:	461a      	mov	r2, r3
 8025a8c:	f000 f842 	bl	8025b14 <_lseek>
 8025a90:	1c43      	adds	r3, r0, #1
 8025a92:	d102      	bne.n	8025a9a <_lseek_r+0x1e>
 8025a94:	6823      	ldr	r3, [r4, #0]
 8025a96:	b103      	cbz	r3, 8025a9a <_lseek_r+0x1e>
 8025a98:	602b      	str	r3, [r5, #0]
 8025a9a:	bd38      	pop	{r3, r4, r5, pc}
 8025a9c:	2000c2cc 	.word	0x2000c2cc

08025aa0 <_read_r>:
 8025aa0:	b538      	push	{r3, r4, r5, lr}
 8025aa2:	4c07      	ldr	r4, [pc, #28]	; (8025ac0 <_read_r+0x20>)
 8025aa4:	4605      	mov	r5, r0
 8025aa6:	4608      	mov	r0, r1
 8025aa8:	4611      	mov	r1, r2
 8025aaa:	2200      	movs	r2, #0
 8025aac:	6022      	str	r2, [r4, #0]
 8025aae:	461a      	mov	r2, r3
 8025ab0:	f000 f838 	bl	8025b24 <_read>
 8025ab4:	1c43      	adds	r3, r0, #1
 8025ab6:	d102      	bne.n	8025abe <_read_r+0x1e>
 8025ab8:	6823      	ldr	r3, [r4, #0]
 8025aba:	b103      	cbz	r3, 8025abe <_read_r+0x1e>
 8025abc:	602b      	str	r3, [r5, #0]
 8025abe:	bd38      	pop	{r3, r4, r5, pc}
 8025ac0:	2000c2cc 	.word	0x2000c2cc

08025ac4 <_close>:
 8025ac4:	4b02      	ldr	r3, [pc, #8]	; (8025ad0 <_close+0xc>)
 8025ac6:	2258      	movs	r2, #88	; 0x58
 8025ac8:	601a      	str	r2, [r3, #0]
 8025aca:	f04f 30ff 	mov.w	r0, #4294967295
 8025ace:	4770      	bx	lr
 8025ad0:	2000c2cc 	.word	0x2000c2cc

08025ad4 <_fstat>:
 8025ad4:	4b02      	ldr	r3, [pc, #8]	; (8025ae0 <_fstat+0xc>)
 8025ad6:	2258      	movs	r2, #88	; 0x58
 8025ad8:	601a      	str	r2, [r3, #0]
 8025ada:	f04f 30ff 	mov.w	r0, #4294967295
 8025ade:	4770      	bx	lr
 8025ae0:	2000c2cc 	.word	0x2000c2cc

08025ae4 <_getpid>:
 8025ae4:	4b02      	ldr	r3, [pc, #8]	; (8025af0 <_getpid+0xc>)
 8025ae6:	2258      	movs	r2, #88	; 0x58
 8025ae8:	601a      	str	r2, [r3, #0]
 8025aea:	f04f 30ff 	mov.w	r0, #4294967295
 8025aee:	4770      	bx	lr
 8025af0:	2000c2cc 	.word	0x2000c2cc

08025af4 <_isatty>:
 8025af4:	4b02      	ldr	r3, [pc, #8]	; (8025b00 <_isatty+0xc>)
 8025af6:	2258      	movs	r2, #88	; 0x58
 8025af8:	601a      	str	r2, [r3, #0]
 8025afa:	2000      	movs	r0, #0
 8025afc:	4770      	bx	lr
 8025afe:	bf00      	nop
 8025b00:	2000c2cc 	.word	0x2000c2cc

08025b04 <_kill>:
 8025b04:	4b02      	ldr	r3, [pc, #8]	; (8025b10 <_kill+0xc>)
 8025b06:	2258      	movs	r2, #88	; 0x58
 8025b08:	601a      	str	r2, [r3, #0]
 8025b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8025b0e:	4770      	bx	lr
 8025b10:	2000c2cc 	.word	0x2000c2cc

08025b14 <_lseek>:
 8025b14:	4b02      	ldr	r3, [pc, #8]	; (8025b20 <_lseek+0xc>)
 8025b16:	2258      	movs	r2, #88	; 0x58
 8025b18:	601a      	str	r2, [r3, #0]
 8025b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8025b1e:	4770      	bx	lr
 8025b20:	2000c2cc 	.word	0x2000c2cc

08025b24 <_read>:
 8025b24:	4b02      	ldr	r3, [pc, #8]	; (8025b30 <_read+0xc>)
 8025b26:	2258      	movs	r2, #88	; 0x58
 8025b28:	601a      	str	r2, [r3, #0]
 8025b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8025b2e:	4770      	bx	lr
 8025b30:	2000c2cc 	.word	0x2000c2cc

08025b34 <_sbrk>:
 8025b34:	4b04      	ldr	r3, [pc, #16]	; (8025b48 <_sbrk+0x14>)
 8025b36:	6819      	ldr	r1, [r3, #0]
 8025b38:	4602      	mov	r2, r0
 8025b3a:	b909      	cbnz	r1, 8025b40 <_sbrk+0xc>
 8025b3c:	4903      	ldr	r1, [pc, #12]	; (8025b4c <_sbrk+0x18>)
 8025b3e:	6019      	str	r1, [r3, #0]
 8025b40:	6818      	ldr	r0, [r3, #0]
 8025b42:	4402      	add	r2, r0
 8025b44:	601a      	str	r2, [r3, #0]
 8025b46:	4770      	bx	lr
 8025b48:	2000bdb8 	.word	0x2000bdb8
 8025b4c:	2000c2d0 	.word	0x2000c2d0

08025b50 <_write>:
 8025b50:	4b02      	ldr	r3, [pc, #8]	; (8025b5c <_write+0xc>)
 8025b52:	2258      	movs	r2, #88	; 0x58
 8025b54:	601a      	str	r2, [r3, #0]
 8025b56:	f04f 30ff 	mov.w	r0, #4294967295
 8025b5a:	4770      	bx	lr
 8025b5c:	2000c2cc 	.word	0x2000c2cc

08025b60 <_exit>:
 8025b60:	e7fe      	b.n	8025b60 <_exit>
	...

08025b64 <_init>:
 8025b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b66:	bf00      	nop
 8025b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025b6a:	bc08      	pop	{r3}
 8025b6c:	469e      	mov	lr, r3
 8025b6e:	4770      	bx	lr

08025b70 <_fini>:
 8025b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b72:	bf00      	nop
 8025b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025b76:	bc08      	pop	{r3}
 8025b78:	469e      	mov	lr, r3
 8025b7a:	4770      	bx	lr
